
fc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  0800b838  0800b838  0001b838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb00  0800bb00  00020358  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb00  0800bb00  0001bb00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb08  0800bb08  00020358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb08  0800bb08  0001bb08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb0c  0800bb0c  0001bb0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  0800bb10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a74  20000358  0800be68  00020358  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  20001dcc  0800be68  00021dcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a14e  00000000  00000000  00020388  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000348f  00000000  00000000  0003a4d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001398  00000000  00000000  0003d968  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001238  00000000  00000000  0003ed00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002292a  00000000  00000000  0003ff38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000116b4  00000000  00000000  00062862  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c3423  00000000  00000000  00073f16  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00137339  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c30  00000000  00000000  001373b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000358 	.word	0x20000358
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b820 	.word	0x0800b820

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000035c 	.word	0x2000035c
 80001cc:	0800b820 	.word	0x0800b820

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <BMI088_I2C_Read_CHIP_IDS>:

#include "BMI088.h"

/* READ ACCEL AND GYRO CHIP IDS */
HAL_StatusTypeDef BMI088_I2C_Read_CHIP_IDS(I2C_HandleTypeDef *hi2c)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af04      	add	r7, sp, #16
 8000eae:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef ret; // HAL Status Value
	uint8_t buf[4];        // Rx Buffer

	ret    = HAL_OK;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	73fb      	strb	r3, [r7, #15]
    ret = (ret | HAL_I2C_Mem_Read(hi2c, BMI088_ACC_ADDR << 1, ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY));
 8000eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb8:	9302      	str	r3, [sp, #8]
 8000eba:	2301      	movs	r3, #1
 8000ebc:	9301      	str	r3, [sp, #4]
 8000ebe:	f107 0308 	add.w	r3, r7, #8
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2130      	movs	r1, #48	; 0x30
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f001 fc26 	bl	800271c <HAL_I2C_Mem_Read>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	73fb      	strb	r3, [r7, #15]
	if ( buf[0] != BMI088_ACC_ID ){ ret = HAL_ERROR; }
 8000eda:	7a3b      	ldrb	r3, [r7, #8]
 8000edc:	2b1e      	cmp	r3, #30
 8000ede:	d001      	beq.n	8000ee4 <BMI088_I2C_Read_CHIP_IDS+0x3c>
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	73fb      	strb	r3, [r7, #15]
	ret = (ret | HAL_I2C_Mem_Read(hi2c, BMI088_GYRO_ADDR << 1, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY));
 8000ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee8:	9302      	str	r3, [sp, #8]
 8000eea:	2301      	movs	r3, #1
 8000eec:	9301      	str	r3, [sp, #4]
 8000eee:	f107 0308 	add.w	r3, r7, #8
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	21d0      	movs	r1, #208	; 0xd0
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f001 fc0e 	bl	800271c <HAL_I2C_Mem_Read>
 8000f00:	4603      	mov	r3, r0
 8000f02:	461a      	mov	r2, r3
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	73fb      	strb	r3, [r7, #15]
	if ( buf[0] != BMI088_GYRO_ID ){ ret = HAL_ERROR; }
 8000f0a:	7a3b      	ldrb	r3, [r7, #8]
 8000f0c:	2b0f      	cmp	r3, #15
 8000f0e:	d001      	beq.n	8000f14 <BMI088_I2C_Read_CHIP_IDS+0x6c>
 8000f10:	2301      	movs	r3, #1
 8000f12:	73fb      	strb	r3, [r7, #15]

	return ret;
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <BMI088_I2C_GYRO_INIT>:

/* CUSTOM GYROSCOPE SETTING INITIALIZATION */
HAL_StatusTypeDef BMI088_I2C_GYRO_INIT(I2C_HandleTypeDef *hi2c)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b084      	sub	sp, #16
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
	 * WRITING BACK TO THE REGISTER
	 */

	HAL_StatusTypeDef ret;
	uint8_t buf[1]; // Tx/Rx Buffer
	ret = HAL_OK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	73fb      	strb	r3, [r7, #15]
	// ret = (ret | BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, GYRO_RANGE, buf));

	// SET GYROSCOPE DATA RATE AND BANDWIDTH
	// DATA RATE: [1000 HZ]    400 HZ
	// BANDWIDTH: [116 Hz]     47 HZ
	buf[0] = 0x82;
 8000f2a:	2382      	movs	r3, #130	; 0x82
 8000f2c:	733b      	strb	r3, [r7, #12]
	ret    |= BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, GYRO_BANDWIDTH, buf);
 8000f2e:	f107 030c 	add.w	r3, r7, #12
 8000f32:	2210      	movs	r2, #16
 8000f34:	2168      	movs	r1, #104	; 0x68
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f000 f861 	bl	8000ffe <BMI088_I2C_Reg_Write>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	461a      	mov	r2, r3
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	73fb      	strb	r3, [r7, #15]

	// SET GYROSCOPE INT3 MODE TO PUSH-PULL
	ret    |= BMI088_I2C_Reg_Read(hi2c, BMI088_GYRO_ADDR, INT3_INT4_IO_CONF, buf);
 8000f46:	f107 030c 	add.w	r3, r7, #12
 8000f4a:	2216      	movs	r2, #22
 8000f4c:	2168      	movs	r1, #104	; 0x68
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 f874 	bl	800103c <BMI088_I2C_Reg_Read>
 8000f54:	4603      	mov	r3, r0
 8000f56:	461a      	mov	r2, r3
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	73fb      	strb	r3, [r7, #15]
	buf[0] &= 0xFD;
 8000f5e:	7b3b      	ldrb	r3, [r7, #12]
 8000f60:	f023 0302 	bic.w	r3, r3, #2
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	733b      	strb	r3, [r7, #12]
	ret    |= BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, INT3_INT4_IO_CONF, buf);
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	2216      	movs	r2, #22
 8000f6e:	2168      	movs	r1, #104	; 0x68
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f000 f844 	bl	8000ffe <BMI088_I2C_Reg_Write>
 8000f76:	4603      	mov	r3, r0
 8000f78:	461a      	mov	r2, r3
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	73fb      	strb	r3, [r7, #15]

	// MAP GYROSCOPE DATA-READY INTERRUPT TO INT3
	ret    |= BMI088_I2C_Reg_Read(hi2c, BMI088_GYRO_ADDR, INT3_INT4_IO_MAP, buf);
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	2218      	movs	r2, #24
 8000f86:	2168      	movs	r1, #104	; 0x68
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 f857 	bl	800103c <BMI088_I2C_Reg_Read>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	461a      	mov	r2, r3
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	73fb      	strb	r3, [r7, #15]
	buf[0] |= 0x01;
 8000f98:	7b3b      	ldrb	r3, [r7, #12]
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	733b      	strb	r3, [r7, #12]
	ret    |= BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, INT3_INT4_IO_MAP, buf);
 8000fa2:	f107 030c 	add.w	r3, r7, #12
 8000fa6:	2218      	movs	r2, #24
 8000fa8:	2168      	movs	r1, #104	; 0x68
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 f827 	bl	8000ffe <BMI088_I2C_Reg_Write>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	73fb      	strb	r3, [r7, #15]

	// ENABLE GYROSCOPE DATA-READY INTERRUPT
	ret    |= BMI088_I2C_Reg_Read(hi2c, BMI088_GYRO_ADDR, GYRO_INT_CTRL, buf);
 8000fba:	f107 030c 	add.w	r3, r7, #12
 8000fbe:	2215      	movs	r2, #21
 8000fc0:	2168      	movs	r1, #104	; 0x68
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 f83a 	bl	800103c <BMI088_I2C_Reg_Read>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	461a      	mov	r2, r3
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	73fb      	strb	r3, [r7, #15]
	buf[0] |= 0x80;
 8000fd2:	7b3b      	ldrb	r3, [r7, #12]
 8000fd4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	733b      	strb	r3, [r7, #12]
	ret    |= BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, GYRO_INT_CTRL, buf);
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	2215      	movs	r2, #21
 8000fe2:	2168      	movs	r1, #104	; 0x68
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 f80a 	bl	8000ffe <BMI088_I2C_Reg_Write>
 8000fea:	4603      	mov	r3, r0
 8000fec:	461a      	mov	r2, r3
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	73fb      	strb	r3, [r7, #15]

	return ret;
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <BMI088_I2C_Reg_Write>:
	return HAL_I2C_Mem_Read_IT(hi2c, BMI088_GYRO_ADDR << 1, GYRO_DATA, I2C_MEMADD_SIZE_8BIT, pData, 6);
}

/* WRITE REGISTER */
HAL_StatusTypeDef BMI088_I2C_Reg_Write(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t mem_addr, uint8_t *pData)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b088      	sub	sp, #32
 8001002:	af04      	add	r7, sp, #16
 8001004:	60f8      	str	r0, [r7, #12]
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	72fb      	strb	r3, [r7, #11]
 800100c:	4613      	mov	r3, r2
 800100e:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Write(hi2c, dev_addr << 1, mem_addr, I2C_MEMADD_SIZE_8BIT, pData, 1, HAL_MAX_DELAY);
 8001010:	7afb      	ldrb	r3, [r7, #11]
 8001012:	b29b      	uxth	r3, r3
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	b299      	uxth	r1, r3
 8001018:	7abb      	ldrb	r3, [r7, #10]
 800101a:	b29a      	uxth	r2, r3
 800101c:	f04f 33ff 	mov.w	r3, #4294967295
 8001020:	9302      	str	r3, [sp, #8]
 8001022:	2301      	movs	r3, #1
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2301      	movs	r3, #1
 800102c:	68f8      	ldr	r0, [r7, #12]
 800102e:	f001 fa7b 	bl	8002528 <HAL_I2C_Mem_Write>
 8001032:	4603      	mov	r3, r0
}
 8001034:	4618      	mov	r0, r3
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <BMI088_I2C_Reg_Read>:

/* READ REGISTER */
HAL_StatusTypeDef BMI088_I2C_Reg_Read(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t mem_addr, uint8_t *pData)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af04      	add	r7, sp, #16
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	460b      	mov	r3, r1
 8001048:	72fb      	strb	r3, [r7, #11]
 800104a:	4613      	mov	r3, r2
 800104c:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(hi2c, dev_addr << 1, mem_addr, I2C_MEMADD_SIZE_8BIT, pData, 1, HAL_MAX_DELAY);
 800104e:	7afb      	ldrb	r3, [r7, #11]
 8001050:	b29b      	uxth	r3, r3
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	b299      	uxth	r1, r3
 8001056:	7abb      	ldrb	r3, [r7, #10]
 8001058:	b29a      	uxth	r2, r3
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
 800105e:	9302      	str	r3, [sp, #8]
 8001060:	2301      	movs	r3, #1
 8001062:	9301      	str	r3, [sp, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2301      	movs	r3, #1
 800106a:	68f8      	ldr	r0, [r7, #12]
 800106c:	f001 fb56 	bl	800271c <HAL_I2C_Mem_Read>
 8001070:	4603      	mov	r3, r0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b090      	sub	sp, #64	; 0x40
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001082:	f000 fd9b 	bl	8001bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001086:	f000 f881 	bl	800118c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108a:	f000 fa71 	bl	8001570 <MX_GPIO_Init>
  MX_I2C1_Init();
 800108e:	f000 f8e7 	bl	8001260 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001092:	f007 fe3b 	bl	8008d0c <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 8001096:	f000 fa35 	bl	8001504 <MX_TIM7_Init>
  MX_TIM6_Init();
 800109a:	f000 f9fd 	bl	8001498 <MX_TIM6_Init>
  MX_TIM2_Init();
 800109e:	f000 f90d 	bl	80012bc <MX_TIM2_Init>
  MX_TIM3_Init();
 80010a2:	f000 f985 	bl	80013b0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // CHECK DEVICE IDENTIFIERS
  if ( BMI088_I2C_Read_CHIP_IDS(&hi2c1) != HAL_OK ) { Error_Handler(); }
 80010a6:	4830      	ldr	r0, [pc, #192]	; (8001168 <main+0xec>)
 80010a8:	f7ff fefe 	bl	8000ea8 <BMI088_I2C_Read_CHIP_IDS>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <main+0x3a>
 80010b2:	f000 fb31 	bl	8001718 <Error_Handler>

  // RUN BMI088 GYROSCOPE INITIALIZATION
  if ( BMI088_I2C_GYRO_INIT(&hi2c1) != HAL_OK ) { Error_Handler(); };
 80010b6:	482c      	ldr	r0, [pc, #176]	; (8001168 <main+0xec>)
 80010b8:	f7ff ff31 	bl	8000f1e <BMI088_I2C_GYRO_INIT>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <main+0x4a>
 80010c2:	f000 fb29 	bl	8001718 <Error_Handler>

  // START TIMERS
  HAL_TIM_Base_Start_IT(&htim7);
 80010c6:	4829      	ldr	r0, [pc, #164]	; (800116c <main+0xf0>)
 80010c8:	f003 fec7 	bl	8004e5a <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim6);
 80010cc:	4828      	ldr	r0, [pc, #160]	; (8001170 <main+0xf4>)
 80010ce:	f003 fea0 	bl	8004e12 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80010d2:	2100      	movs	r1, #0
 80010d4:	4827      	ldr	r0, [pc, #156]	; (8001174 <main+0xf8>)
 80010d6:	f003 ff0f 	bl	8004ef8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80010da:	2104      	movs	r1, #4
 80010dc:	4825      	ldr	r0, [pc, #148]	; (8001174 <main+0xf8>)
 80010de:	f003 ff0b 	bl	8004ef8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80010e2:	2108      	movs	r1, #8
 80010e4:	4823      	ldr	r0, [pc, #140]	; (8001174 <main+0xf8>)
 80010e6:	f003 ff07 	bl	8004ef8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80010ea:	210c      	movs	r1, #12
 80010ec:	4821      	ldr	r0, [pc, #132]	; (8001174 <main+0xf8>)
 80010ee:	f003 ff03 	bl	8004ef8 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80010f2:	2100      	movs	r1, #0
 80010f4:	4820      	ldr	r0, [pc, #128]	; (8001178 <main+0xfc>)
 80010f6:	f003 ff69 	bl	8004fcc <HAL_TIM_IC_Start_IT>

  // Get starting time
  tprev = __HAL_TIM_GET_COUNTER(&htim6);
 80010fa:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <main+0xf4>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001100:	b29a      	uxth	r2, r3
 8001102:	4b1e      	ldr	r3, [pc, #120]	; (800117c <main+0x100>)
 8001104:	801a      	strh	r2, [r3, #0]

  // TURN ON STATUS LED
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001106:	2201      	movs	r2, #1
 8001108:	2140      	movs	r1, #64	; 0x40
 800110a:	481d      	ldr	r0, [pc, #116]	; (8001180 <main+0x104>)
 800110c:	f001 f896 	bl	800223c <HAL_GPIO_WritePin>

  TIM2->CCR1 = 9000 - 1;
 8001110:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001114:	f242 3227 	movw	r2, #8999	; 0x2327
 8001118:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR2 = 18000 - 1;
 800111a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800111e:	f244 624f 	movw	r2, #17999	; 0x464f
 8001122:	639a      	str	r2, [r3, #56]	; 0x38
  TIM2->CCR3 = 9000;
 8001124:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001128:	f242 3228 	movw	r2, #9000	; 0x2328
 800112c:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM2->CCR4 = 18000;
 800112e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001132:	f244 6250 	movw	r2, #18000	; 0x4650
 8001136:	641a      	str	r2, [r3, #64]	; 0x40
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sprintf(buf, "%i\n", IC_Elapsed);
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <main+0x108>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	b29b      	uxth	r3, r3
 800113e:	461a      	mov	r2, r3
 8001140:	463b      	mov	r3, r7
 8001142:	4911      	ldr	r1, [pc, #68]	; (8001188 <main+0x10c>)
 8001144:	4618      	mov	r0, r3
 8001146:	f009 f84b 	bl	800a1e0 <siprintf>
	  CDC_Transmit_FS(buf, strlen(buf));
 800114a:	463b      	mov	r3, r7
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff f83f 	bl	80001d0 <strlen>
 8001152:	4603      	mov	r3, r0
 8001154:	b29a      	uxth	r2, r3
 8001156:	463b      	mov	r3, r7
 8001158:	4611      	mov	r1, r2
 800115a:	4618      	mov	r0, r3
 800115c:	f007 fea8 	bl	8008eb0 <CDC_Transmit_FS>
	  HAL_Delay(100);
 8001160:	2064      	movs	r0, #100	; 0x64
 8001162:	f000 fd9d 	bl	8001ca0 <HAL_Delay>
	  sprintf(buf, "%i\n", IC_Elapsed);
 8001166:	e7e7      	b.n	8001138 <main+0xbc>
 8001168:	2000038c 	.word	0x2000038c
 800116c:	200004ac 	.word	0x200004ac
 8001170:	20000424 	.word	0x20000424
 8001174:	20000468 	.word	0x20000468
 8001178:	200003e0 	.word	0x200003e0
 800117c:	200004a8 	.word	0x200004a8
 8001180:	40020800 	.word	0x40020800
 8001184:	20000420 	.word	0x20000420
 8001188:	0800b838 	.word	0x0800b838

0800118c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b094      	sub	sp, #80	; 0x50
 8001190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001192:	f107 0320 	add.w	r3, r7, #32
 8001196:	2230      	movs	r2, #48	; 0x30
 8001198:	2100      	movs	r1, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f008 fb04 	bl	80097a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a0:	f107 030c 	add.w	r3, r7, #12
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b0:	2300      	movs	r3, #0
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	4b28      	ldr	r3, [pc, #160]	; (8001258 <SystemClock_Config+0xcc>)
 80011b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b8:	4a27      	ldr	r2, [pc, #156]	; (8001258 <SystemClock_Config+0xcc>)
 80011ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011be:	6413      	str	r3, [r2, #64]	; 0x40
 80011c0:	4b25      	ldr	r3, [pc, #148]	; (8001258 <SystemClock_Config+0xcc>)
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011cc:	2300      	movs	r3, #0
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	4b22      	ldr	r3, [pc, #136]	; (800125c <SystemClock_Config+0xd0>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a21      	ldr	r2, [pc, #132]	; (800125c <SystemClock_Config+0xd0>)
 80011d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	4b1f      	ldr	r3, [pc, #124]	; (800125c <SystemClock_Config+0xd0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011e8:	2301      	movs	r3, #1
 80011ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f2:	2302      	movs	r3, #2
 80011f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011fc:	2310      	movs	r3, #16
 80011fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 288;
 8001200:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001204:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001206:	2302      	movs	r3, #2
 8001208:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800120a:	2306      	movs	r3, #6
 800120c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800120e:	f107 0320 	add.w	r3, r7, #32
 8001212:	4618      	mov	r0, r3
 8001214:	f003 f986 	bl	8004524 <HAL_RCC_OscConfig>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800121e:	f000 fa7b 	bl	8001718 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001222:	230f      	movs	r3, #15
 8001224:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001226:	2302      	movs	r3, #2
 8001228:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800122e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001232:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001234:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001238:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800123a:	f107 030c 	add.w	r3, r7, #12
 800123e:	2104      	movs	r1, #4
 8001240:	4618      	mov	r0, r3
 8001242:	f003 fbdf 	bl	8004a04 <HAL_RCC_ClockConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800124c:	f000 fa64 	bl	8001718 <Error_Handler>
  }
}
 8001250:	bf00      	nop
 8001252:	3750      	adds	r7, #80	; 0x50
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40023800 	.word	0x40023800
 800125c:	40007000 	.word	0x40007000

08001260 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <MX_I2C1_Init+0x50>)
 8001266:	4a13      	ldr	r2, [pc, #76]	; (80012b4 <MX_I2C1_Init+0x54>)
 8001268:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <MX_I2C1_Init+0x50>)
 800126c:	4a12      	ldr	r2, [pc, #72]	; (80012b8 <MX_I2C1_Init+0x58>)
 800126e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <MX_I2C1_Init+0x50>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <MX_I2C1_Init+0x50>)
 8001278:	2200      	movs	r2, #0
 800127a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800127c:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <MX_I2C1_Init+0x50>)
 800127e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001282:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001284:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <MX_I2C1_Init+0x50>)
 8001286:	2200      	movs	r2, #0
 8001288:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <MX_I2C1_Init+0x50>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <MX_I2C1_Init+0x50>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <MX_I2C1_Init+0x50>)
 8001298:	2200      	movs	r2, #0
 800129a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800129c:	4804      	ldr	r0, [pc, #16]	; (80012b0 <MX_I2C1_Init+0x50>)
 800129e:	f001 f80b 	bl	80022b8 <HAL_I2C_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012a8:	f000 fa36 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	2000038c 	.word	0x2000038c
 80012b4:	40005400 	.word	0x40005400
 80012b8:	00061a80 	.word	0x00061a80

080012bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	; 0x28
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c2:	f107 0320 	add.w	r3, r7, #32
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
 80012d8:	611a      	str	r2, [r3, #16]
 80012da:	615a      	str	r2, [r3, #20]
 80012dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012de:	4b33      	ldr	r3, [pc, #204]	; (80013ac <MX_TIM2_Init+0xf0>)
 80012e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1 - 1;
 80012e6:	4b31      	ldr	r3, [pc, #196]	; (80013ac <MX_TIM2_Init+0xf0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ec:	4b2f      	ldr	r3, [pc, #188]	; (80013ac <MX_TIM2_Init+0xf0>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 36000 - 1;
 80012f2:	4b2e      	ldr	r3, [pc, #184]	; (80013ac <MX_TIM2_Init+0xf0>)
 80012f4:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80012f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fa:	4b2c      	ldr	r3, [pc, #176]	; (80013ac <MX_TIM2_Init+0xf0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001300:	4b2a      	ldr	r3, [pc, #168]	; (80013ac <MX_TIM2_Init+0xf0>)
 8001302:	2200      	movs	r2, #0
 8001304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001306:	4829      	ldr	r0, [pc, #164]	; (80013ac <MX_TIM2_Init+0xf0>)
 8001308:	f003 fdcb 	bl	8004ea2 <HAL_TIM_PWM_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001312:	f000 fa01 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001316:	2300      	movs	r3, #0
 8001318:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800131e:	f107 0320 	add.w	r3, r7, #32
 8001322:	4619      	mov	r1, r3
 8001324:	4821      	ldr	r0, [pc, #132]	; (80013ac <MX_TIM2_Init+0xf0>)
 8001326:	f004 fd2f 	bl	8005d88 <HAL_TIMEx_MasterConfigSynchronization>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001330:	f000 f9f2 	bl	8001718 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001334:	2360      	movs	r3, #96	; 0x60
 8001336:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	2200      	movs	r2, #0
 8001348:	4619      	mov	r1, r3
 800134a:	4818      	ldr	r0, [pc, #96]	; (80013ac <MX_TIM2_Init+0xf0>)
 800134c:	f004 f84a 	bl	80053e4 <HAL_TIM_PWM_ConfigChannel>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001356:	f000 f9df 	bl	8001718 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	2204      	movs	r2, #4
 800135e:	4619      	mov	r1, r3
 8001360:	4812      	ldr	r0, [pc, #72]	; (80013ac <MX_TIM2_Init+0xf0>)
 8001362:	f004 f83f 	bl	80053e4 <HAL_TIM_PWM_ConfigChannel>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800136c:	f000 f9d4 	bl	8001718 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	2208      	movs	r2, #8
 8001374:	4619      	mov	r1, r3
 8001376:	480d      	ldr	r0, [pc, #52]	; (80013ac <MX_TIM2_Init+0xf0>)
 8001378:	f004 f834 	bl	80053e4 <HAL_TIM_PWM_ConfigChannel>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8001382:	f000 f9c9 	bl	8001718 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	220c      	movs	r2, #12
 800138a:	4619      	mov	r1, r3
 800138c:	4807      	ldr	r0, [pc, #28]	; (80013ac <MX_TIM2_Init+0xf0>)
 800138e:	f004 f829 	bl	80053e4 <HAL_TIM_PWM_ConfigChannel>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8001398:	f000 f9be 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800139c:	4803      	ldr	r0, [pc, #12]	; (80013ac <MX_TIM2_Init+0xf0>)
 800139e:	f000 fb0f 	bl	80019c0 <HAL_TIM_MspPostInit>

}
 80013a2:	bf00      	nop
 80013a4:	3728      	adds	r7, #40	; 0x28
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000468 	.word	0x20000468

080013b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b6:	f107 0310 	add.w	r3, r7, #16
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013c0:	463b      	mov	r3, r7
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013cc:	4b30      	ldr	r3, [pc, #192]	; (8001490 <MX_TIM3_Init+0xe0>)
 80013ce:	4a31      	ldr	r2, [pc, #196]	; (8001494 <MX_TIM3_Init+0xe4>)
 80013d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72 - 1;
 80013d2:	4b2f      	ldr	r3, [pc, #188]	; (8001490 <MX_TIM3_Init+0xe0>)
 80013d4:	2247      	movs	r2, #71	; 0x47
 80013d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d8:	4b2d      	ldr	r3, [pc, #180]	; (8001490 <MX_TIM3_Init+0xe0>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65536 - 1;
 80013de:	4b2c      	ldr	r3, [pc, #176]	; (8001490 <MX_TIM3_Init+0xe0>)
 80013e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e6:	4b2a      	ldr	r3, [pc, #168]	; (8001490 <MX_TIM3_Init+0xe0>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ec:	4b28      	ldr	r3, [pc, #160]	; (8001490 <MX_TIM3_Init+0xe0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80013f2:	4827      	ldr	r0, [pc, #156]	; (8001490 <MX_TIM3_Init+0xe0>)
 80013f4:	f003 fdbe 	bl	8004f74 <HAL_TIM_IC_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80013fe:	f000 f98b 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800140a:	f107 0310 	add.w	r3, r7, #16
 800140e:	4619      	mov	r1, r3
 8001410:	481f      	ldr	r0, [pc, #124]	; (8001490 <MX_TIM3_Init+0xe0>)
 8001412:	f004 fcb9 	bl	8005d88 <HAL_TIMEx_MasterConfigSynchronization>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800141c:	f000 f97c 	bl	8001718 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001420:	2300      	movs	r3, #0
 8001422:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001424:	2301      	movs	r3, #1
 8001426:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001428:	2300      	movs	r3, #0
 800142a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001430:	463b      	mov	r3, r7
 8001432:	2200      	movs	r2, #0
 8001434:	4619      	mov	r1, r3
 8001436:	4816      	ldr	r0, [pc, #88]	; (8001490 <MX_TIM3_Init+0xe0>)
 8001438:	f003 ff38 	bl	80052ac <HAL_TIM_IC_ConfigChannel>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001442:	f000 f969 	bl	8001718 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001446:	463b      	mov	r3, r7
 8001448:	2204      	movs	r2, #4
 800144a:	4619      	mov	r1, r3
 800144c:	4810      	ldr	r0, [pc, #64]	; (8001490 <MX_TIM3_Init+0xe0>)
 800144e:	f003 ff2d 	bl	80052ac <HAL_TIM_IC_ConfigChannel>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8001458:	f000 f95e 	bl	8001718 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800145c:	463b      	mov	r3, r7
 800145e:	2208      	movs	r2, #8
 8001460:	4619      	mov	r1, r3
 8001462:	480b      	ldr	r0, [pc, #44]	; (8001490 <MX_TIM3_Init+0xe0>)
 8001464:	f003 ff22 	bl	80052ac <HAL_TIM_IC_ConfigChannel>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 800146e:	f000 f953 	bl	8001718 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001472:	463b      	mov	r3, r7
 8001474:	220c      	movs	r2, #12
 8001476:	4619      	mov	r1, r3
 8001478:	4805      	ldr	r0, [pc, #20]	; (8001490 <MX_TIM3_Init+0xe0>)
 800147a:	f003 ff17 	bl	80052ac <HAL_TIM_IC_ConfigChannel>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001484:	f000 f948 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001488:	bf00      	nop
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	200003e0 	.word	0x200003e0
 8001494:	40000400 	.word	0x40000400

08001498 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149e:	463b      	mov	r3, r7
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <MX_TIM6_Init+0x64>)
 80014a8:	4a15      	ldr	r2, [pc, #84]	; (8001500 <MX_TIM6_Init+0x68>)
 80014aa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72 - 1;
 80014ac:	4b13      	ldr	r3, [pc, #76]	; (80014fc <MX_TIM6_Init+0x64>)
 80014ae:	2247      	movs	r2, #71	; 0x47
 80014b0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b2:	4b12      	ldr	r3, [pc, #72]	; (80014fc <MX_TIM6_Init+0x64>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536 - 1;
 80014b8:	4b10      	ldr	r3, [pc, #64]	; (80014fc <MX_TIM6_Init+0x64>)
 80014ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014be:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <MX_TIM6_Init+0x64>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80014c6:	480d      	ldr	r0, [pc, #52]	; (80014fc <MX_TIM6_Init+0x64>)
 80014c8:	f003 fc78 	bl	8004dbc <HAL_TIM_Base_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80014d2:	f000 f921 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d6:	2300      	movs	r3, #0
 80014d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80014de:	463b      	mov	r3, r7
 80014e0:	4619      	mov	r1, r3
 80014e2:	4806      	ldr	r0, [pc, #24]	; (80014fc <MX_TIM6_Init+0x64>)
 80014e4:	f004 fc50 	bl	8005d88 <HAL_TIMEx_MasterConfigSynchronization>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80014ee:	f000 f913 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000424 	.word	0x20000424
 8001500:	40001000 	.word	0x40001000

08001504 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150a:	463b      	mov	r3, r7
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001512:	4b15      	ldr	r3, [pc, #84]	; (8001568 <MX_TIM7_Init+0x64>)
 8001514:	4a15      	ldr	r2, [pc, #84]	; (800156c <MX_TIM7_Init+0x68>)
 8001516:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 72 - 1;
 8001518:	4b13      	ldr	r3, [pc, #76]	; (8001568 <MX_TIM7_Init+0x64>)
 800151a:	2247      	movs	r2, #71	; 0x47
 800151c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151e:	4b12      	ldr	r3, [pc, #72]	; (8001568 <MX_TIM7_Init+0x64>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 20000 - 1;
 8001524:	4b10      	ldr	r3, [pc, #64]	; (8001568 <MX_TIM7_Init+0x64>)
 8001526:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800152a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800152c:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <MX_TIM7_Init+0x64>)
 800152e:	2200      	movs	r2, #0
 8001530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001532:	480d      	ldr	r0, [pc, #52]	; (8001568 <MX_TIM7_Init+0x64>)
 8001534:	f003 fc42 	bl	8004dbc <HAL_TIM_Base_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800153e:	f000 f8eb 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001542:	2300      	movs	r3, #0
 8001544:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001546:	2300      	movs	r3, #0
 8001548:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800154a:	463b      	mov	r3, r7
 800154c:	4619      	mov	r1, r3
 800154e:	4806      	ldr	r0, [pc, #24]	; (8001568 <MX_TIM7_Init+0x64>)
 8001550:	f004 fc1a 	bl	8005d88 <HAL_TIMEx_MasterConfigSynchronization>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800155a:	f000 f8dd 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200004ac 	.word	0x200004ac
 800156c:	40001400 	.word	0x40001400

08001570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	; 0x28
 8001574:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
 8001584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
 800158a:	4b31      	ldr	r3, [pc, #196]	; (8001650 <MX_GPIO_Init+0xe0>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a30      	ldr	r2, [pc, #192]	; (8001650 <MX_GPIO_Init+0xe0>)
 8001590:	f043 0304 	orr.w	r3, r3, #4
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b2e      	ldr	r3, [pc, #184]	; (8001650 <MX_GPIO_Init+0xe0>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0304 	and.w	r3, r3, #4
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	4b2a      	ldr	r3, [pc, #168]	; (8001650 <MX_GPIO_Init+0xe0>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a29      	ldr	r2, [pc, #164]	; (8001650 <MX_GPIO_Init+0xe0>)
 80015ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b27      	ldr	r3, [pc, #156]	; (8001650 <MX_GPIO_Init+0xe0>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	4b23      	ldr	r3, [pc, #140]	; (8001650 <MX_GPIO_Init+0xe0>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a22      	ldr	r2, [pc, #136]	; (8001650 <MX_GPIO_Init+0xe0>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b20      	ldr	r3, [pc, #128]	; (8001650 <MX_GPIO_Init+0xe0>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <MX_GPIO_Init+0xe0>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a1b      	ldr	r2, [pc, #108]	; (8001650 <MX_GPIO_Init+0xe0>)
 80015e4:	f043 0302 	orr.w	r3, r3, #2
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b19      	ldr	r3, [pc, #100]	; (8001650 <MX_GPIO_Init+0xe0>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80015f6:	2200      	movs	r2, #0
 80015f8:	21c0      	movs	r1, #192	; 0xc0
 80015fa:	4816      	ldr	r0, [pc, #88]	; (8001654 <MX_GPIO_Init+0xe4>)
 80015fc:	f000 fe1e 	bl	800223c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GYRO_INT_Pin */
  GPIO_InitStruct.Pin = GYRO_INT_Pin;
 8001600:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <MX_GPIO_Init+0xe8>)
 8001608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYRO_INT_GPIO_Port, &GPIO_InitStruct);
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4619      	mov	r1, r3
 8001614:	480f      	ldr	r0, [pc, #60]	; (8001654 <MX_GPIO_Init+0xe4>)
 8001616:	f000 fc77 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800161a:	23c0      	movs	r3, #192	; 0xc0
 800161c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161e:	2301      	movs	r3, #1
 8001620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2300      	movs	r3, #0
 8001628:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	4619      	mov	r1, r3
 8001630:	4808      	ldr	r0, [pc, #32]	; (8001654 <MX_GPIO_Init+0xe4>)
 8001632:	f000 fc69 	bl	8001f08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	2100      	movs	r1, #0
 800163a:	2028      	movs	r0, #40	; 0x28
 800163c:	f000 fc2d 	bl	8001e9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001640:	2028      	movs	r0, #40	; 0x28
 8001642:	f000 fc46 	bl	8001ed2 <HAL_NVIC_EnableIRQ>

}
 8001646:	bf00      	nop
 8001648:	3728      	adds	r7, #40	; 0x28
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40023800 	.word	0x40023800
 8001654:	40020800 	.word	0x40020800
 8001658:	10110000 	.word	0x10110000

0800165c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel2
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	7f1b      	ldrb	r3, [r3, #28]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d148      	bne.n	80016fe <HAL_TIM_IC_CaptureCallback+0xa2>
	{
		if (IC_Started == 0)
 800166c:	4b26      	ldr	r3, [pc, #152]	; (8001708 <HAL_TIM_IC_CaptureCallback+0xac>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d11b      	bne.n	80016ae <HAL_TIM_IC_CaptureCallback+0x52>
		{
			IC_ts1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);								// GET FIRST TIMESTAMP
 8001676:	2100      	movs	r1, #0
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f003 ff79 	bl	8005570 <HAL_TIM_ReadCapturedValue>
 800167e:	4603      	mov	r3, r0
 8001680:	b29a      	uxth	r2, r3
 8001682:	4b22      	ldr	r3, [pc, #136]	; (800170c <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001684:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);	// FLIP POLARITY
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6a1a      	ldr	r2, [r3, #32]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 020a 	bic.w	r2, r2, #10
 8001694:	621a      	str	r2, [r3, #32]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6a1a      	ldr	r2, [r3, #32]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f042 0202 	orr.w	r2, r2, #2
 80016a4:	621a      	str	r2, [r3, #32]
			IC_Started = 1;																			// UPDATE STATUS
 80016a6:	4b18      	ldr	r3, [pc, #96]	; (8001708 <HAL_TIM_IC_CaptureCallback+0xac>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	701a      	strb	r2, [r3, #0]
			IC_Elapsed = IC_ts2 - IC_ts1;															// CALCULATE PULSE WIDTH
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);	// FLIP POLARITY
			IC_Started = 0;																			// UPDATE STATUS
		}
	}
}
 80016ac:	e027      	b.n	80016fe <HAL_TIM_IC_CaptureCallback+0xa2>
		else if (IC_Started == 1)
 80016ae:	4b16      	ldr	r3, [pc, #88]	; (8001708 <HAL_TIM_IC_CaptureCallback+0xac>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d122      	bne.n	80016fe <HAL_TIM_IC_CaptureCallback+0xa2>
			IC_ts2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);								// GET SECOND TIMESTAMP
 80016b8:	2100      	movs	r1, #0
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f003 ff58 	bl	8005570 <HAL_TIM_ReadCapturedValue>
 80016c0:	4603      	mov	r3, r0
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80016c6:	801a      	strh	r2, [r3, #0]
			IC_Elapsed = IC_ts2 - IC_ts1;															// CALCULATE PULSE WIDTH
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <HAL_TIM_IC_CaptureCallback+0xb0>)
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80016da:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);	// FLIP POLARITY
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6a1a      	ldr	r2, [r3, #32]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f022 020a 	bic.w	r2, r2, #10
 80016ea:	621a      	str	r2, [r3, #32]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6a12      	ldr	r2, [r2, #32]
 80016f6:	621a      	str	r2, [r3, #32]
			IC_Started = 0;																			// UPDATE STATUS
 80016f8:	4b03      	ldr	r3, [pc, #12]	; (8001708 <HAL_TIM_IC_CaptureCallback+0xac>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000384 	.word	0x20000384
 800170c:	20000464 	.word	0x20000464
 8001710:	20000386 	.word	0x20000386
 8001714:	20000420 	.word	0x20000420

08001718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800171c:	b672      	cpsid	i

  __disable_irq();

  // {TODO} SET ALL MOTOR OUTPUTS TO ZERO!

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800171e:	2200      	movs	r2, #0
 8001720:	2140      	movs	r1, #64	; 0x40
 8001722:	4806      	ldr	r0, [pc, #24]	; (800173c <Error_Handler+0x24>)
 8001724:	f000 fd8a 	bl	800223c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001728:	2201      	movs	r2, #1
 800172a:	2180      	movs	r1, #128	; 0x80
 800172c:	4803      	ldr	r0, [pc, #12]	; (800173c <Error_Handler+0x24>)
 800172e:	f000 fd85 	bl	800223c <HAL_GPIO_WritePin>

  CDC_Transmit_FS((uint8_t*)"ERROR\n", 6);
 8001732:	2106      	movs	r1, #6
 8001734:	4802      	ldr	r0, [pc, #8]	; (8001740 <Error_Handler+0x28>)
 8001736:	f007 fbbb 	bl	8008eb0 <CDC_Transmit_FS>

  while (1)
 800173a:	e7fe      	b.n	800173a <Error_Handler+0x22>
 800173c:	40020800 	.word	0x40020800
 8001740:	0800b83c 	.word	0x0800b83c

08001744 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <HAL_MspInit+0x4c>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	4a0f      	ldr	r2, [pc, #60]	; (8001790 <HAL_MspInit+0x4c>)
 8001754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001758:	6453      	str	r3, [r2, #68]	; 0x44
 800175a:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <HAL_MspInit+0x4c>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	603b      	str	r3, [r7, #0]
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <HAL_MspInit+0x4c>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	4a08      	ldr	r2, [pc, #32]	; (8001790 <HAL_MspInit+0x4c>)
 8001770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001774:	6413      	str	r3, [r2, #64]	; 0x40
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_MspInit+0x4c>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800

08001794 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	; 0x28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a19      	ldr	r2, [pc, #100]	; (8001818 <HAL_I2C_MspInit+0x84>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d12c      	bne.n	8001810 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	4b18      	ldr	r3, [pc, #96]	; (800181c <HAL_I2C_MspInit+0x88>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a17      	ldr	r2, [pc, #92]	; (800181c <HAL_I2C_MspInit+0x88>)
 80017c0:	f043 0302 	orr.w	r3, r3, #2
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <HAL_I2C_MspInit+0x88>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017d8:	2312      	movs	r3, #18
 80017da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017dc:	2301      	movs	r3, #1
 80017de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e0:	2303      	movs	r3, #3
 80017e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017e4:	2304      	movs	r3, #4
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	4619      	mov	r1, r3
 80017ee:	480c      	ldr	r0, [pc, #48]	; (8001820 <HAL_I2C_MspInit+0x8c>)
 80017f0:	f000 fb8a 	bl	8001f08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <HAL_I2C_MspInit+0x88>)
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	4a07      	ldr	r2, [pc, #28]	; (800181c <HAL_I2C_MspInit+0x88>)
 80017fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001802:	6413      	str	r3, [r2, #64]	; 0x40
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <HAL_I2C_MspInit+0x88>)
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001810:	bf00      	nop
 8001812:	3728      	adds	r7, #40	; 0x28
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40005400 	.word	0x40005400
 800181c:	40023800 	.word	0x40023800
 8001820:	40020400 	.word	0x40020400

08001824 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001834:	d10d      	bne.n	8001852 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <HAL_TIM_PWM_MspInit+0x3c>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	4a08      	ldr	r2, [pc, #32]	; (8001860 <HAL_TIM_PWM_MspInit+0x3c>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6413      	str	r3, [r2, #64]	; 0x40
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_TIM_PWM_MspInit+0x3c>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001852:	bf00      	nop
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800

08001864 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	; 0x28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a2c      	ldr	r2, [pc, #176]	; (8001934 <HAL_TIM_IC_MspInit+0xd0>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d151      	bne.n	800192a <HAL_TIM_IC_MspInit+0xc6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	4b2b      	ldr	r3, [pc, #172]	; (8001938 <HAL_TIM_IC_MspInit+0xd4>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	4a2a      	ldr	r2, [pc, #168]	; (8001938 <HAL_TIM_IC_MspInit+0xd4>)
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	6413      	str	r3, [r2, #64]	; 0x40
 8001896:	4b28      	ldr	r3, [pc, #160]	; (8001938 <HAL_TIM_IC_MspInit+0xd4>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	4b24      	ldr	r3, [pc, #144]	; (8001938 <HAL_TIM_IC_MspInit+0xd4>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a23      	ldr	r2, [pc, #140]	; (8001938 <HAL_TIM_IC_MspInit+0xd4>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b21      	ldr	r3, [pc, #132]	; (8001938 <HAL_TIM_IC_MspInit+0xd4>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	4b1d      	ldr	r3, [pc, #116]	; (8001938 <HAL_TIM_IC_MspInit+0xd4>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a1c      	ldr	r2, [pc, #112]	; (8001938 <HAL_TIM_IC_MspInit+0xd4>)
 80018c8:	f043 0302 	orr.w	r3, r3, #2
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <HAL_TIM_IC_MspInit+0xd4>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018da:	23c0      	movs	r3, #192	; 0xc0
 80018dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	2302      	movs	r3, #2
 80018e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018ea:	2302      	movs	r3, #2
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ee:	f107 0314 	add.w	r3, r7, #20
 80018f2:	4619      	mov	r1, r3
 80018f4:	4811      	ldr	r0, [pc, #68]	; (800193c <HAL_TIM_IC_MspInit+0xd8>)
 80018f6:	f000 fb07 	bl	8001f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018fa:	2303      	movs	r3, #3
 80018fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fe:	2302      	movs	r3, #2
 8001900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800190a:	2302      	movs	r3, #2
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190e:	f107 0314 	add.w	r3, r7, #20
 8001912:	4619      	mov	r1, r3
 8001914:	480a      	ldr	r0, [pc, #40]	; (8001940 <HAL_TIM_IC_MspInit+0xdc>)
 8001916:	f000 faf7 	bl	8001f08 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	2100      	movs	r1, #0
 800191e:	201d      	movs	r0, #29
 8001920:	f000 fabb 	bl	8001e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001924:	201d      	movs	r0, #29
 8001926:	f000 fad4 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800192a:	bf00      	nop
 800192c:	3728      	adds	r7, #40	; 0x28
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40000400 	.word	0x40000400
 8001938:	40023800 	.word	0x40023800
 800193c:	40020000 	.word	0x40020000
 8001940:	40020400 	.word	0x40020400

08001944 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a18      	ldr	r2, [pc, #96]	; (80019b4 <HAL_TIM_Base_MspInit+0x70>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d10e      	bne.n	8001974 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <HAL_TIM_Base_MspInit+0x74>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	4a16      	ldr	r2, [pc, #88]	; (80019b8 <HAL_TIM_Base_MspInit+0x74>)
 8001960:	f043 0310 	orr.w	r3, r3, #16
 8001964:	6413      	str	r3, [r2, #64]	; 0x40
 8001966:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <HAL_TIM_Base_MspInit+0x74>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f003 0310 	and.w	r3, r3, #16
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001972:	e01a      	b.n	80019aa <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a10      	ldr	r2, [pc, #64]	; (80019bc <HAL_TIM_Base_MspInit+0x78>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d115      	bne.n	80019aa <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	4b0d      	ldr	r3, [pc, #52]	; (80019b8 <HAL_TIM_Base_MspInit+0x74>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	4a0c      	ldr	r2, [pc, #48]	; (80019b8 <HAL_TIM_Base_MspInit+0x74>)
 8001988:	f043 0320 	orr.w	r3, r3, #32
 800198c:	6413      	str	r3, [r2, #64]	; 0x40
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <HAL_TIM_Base_MspInit+0x74>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f003 0320 	and.w	r3, r3, #32
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	2102      	movs	r1, #2
 800199e:	2037      	movs	r0, #55	; 0x37
 80019a0:	f000 fa7b 	bl	8001e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80019a4:	2037      	movs	r0, #55	; 0x37
 80019a6:	f000 fa94 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
}
 80019aa:	bf00      	nop
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40001000 	.word	0x40001000
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40001400 	.word	0x40001400

080019c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	f107 030c 	add.w	r3, r7, #12
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019e0:	d11d      	bne.n	8001a1e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <HAL_TIM_MspPostInit+0x68>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a0f      	ldr	r2, [pc, #60]	; (8001a28 <HAL_TIM_MspPostInit+0x68>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <HAL_TIM_MspPostInit+0x68>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80019fe:	230f      	movs	r3, #15
 8001a00:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a02:	2302      	movs	r3, #2
 8001a04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a12:	f107 030c 	add.w	r3, r7, #12
 8001a16:	4619      	mov	r1, r3
 8001a18:	4804      	ldr	r0, [pc, #16]	; (8001a2c <HAL_TIM_MspPostInit+0x6c>)
 8001a1a:	f000 fa75 	bl	8001f08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a1e:	bf00      	nop
 8001a20:	3720      	adds	r7, #32
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40020000 	.word	0x40020000

08001a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <NMI_Handler+0x4>

08001a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a3a:	e7fe      	b.n	8001a3a <HardFault_Handler+0x4>

08001a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <MemManage_Handler+0x4>

08001a42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a46:	e7fe      	b.n	8001a46 <BusFault_Handler+0x4>

08001a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <UsageFault_Handler+0x4>

08001a4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a7c:	f000 f8f0 	bl	8001c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a88:	4802      	ldr	r0, [pc, #8]	; (8001a94 <TIM3_IRQHandler+0x10>)
 8001a8a:	f003 fb07 	bl	800509c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	200003e0 	.word	0x200003e0

08001a98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001a9c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001aa0:	f000 fbe6 	bl	8002270 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <TIM7_IRQHandler+0x10>)
 8001aae:	f003 faf5 	bl	800509c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200004ac 	.word	0x200004ac

08001abc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ac0:	4802      	ldr	r0, [pc, #8]	; (8001acc <OTG_FS_IRQHandler+0x10>)
 8001ac2:	f001 fcfc 	bl	80034be <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200019c0 	.word	0x200019c0

08001ad0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ad8:	4a14      	ldr	r2, [pc, #80]	; (8001b2c <_sbrk+0x5c>)
 8001ada:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <_sbrk+0x60>)
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ae4:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <_sbrk+0x64>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d102      	bne.n	8001af2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <_sbrk+0x64>)
 8001aee:	4a12      	ldr	r2, [pc, #72]	; (8001b38 <_sbrk+0x68>)
 8001af0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001af2:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <_sbrk+0x64>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4413      	add	r3, r2
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d207      	bcs.n	8001b10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b00:	f007 fe18 	bl	8009734 <__errno>
 8001b04:	4602      	mov	r2, r0
 8001b06:	230c      	movs	r3, #12
 8001b08:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0e:	e009      	b.n	8001b24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b10:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <_sbrk+0x64>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b16:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <_sbrk+0x64>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	4a05      	ldr	r2, [pc, #20]	; (8001b34 <_sbrk+0x64>)
 8001b20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b22:	68fb      	ldr	r3, [r7, #12]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20020000 	.word	0x20020000
 8001b30:	00000400 	.word	0x00000400
 8001b34:	20000374 	.word	0x20000374
 8001b38:	20001dd0 	.word	0x20001dd0

08001b3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b40:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <SystemInit+0x28>)
 8001b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b46:	4a07      	ldr	r2, [pc, #28]	; (8001b64 <SystemInit+0x28>)
 8001b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b50:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <SystemInit+0x28>)
 8001b52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b56:	609a      	str	r2, [r3, #8]
#endif
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ba0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b6e:	e003      	b.n	8001b78 <LoopCopyDataInit>

08001b70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b76:	3104      	adds	r1, #4

08001b78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b78:	480b      	ldr	r0, [pc, #44]	; (8001ba8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b80:	d3f6      	bcc.n	8001b70 <CopyDataInit>
  ldr  r2, =_sbss
 8001b82:	4a0b      	ldr	r2, [pc, #44]	; (8001bb0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b84:	e002      	b.n	8001b8c <LoopFillZerobss>

08001b86 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b86:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b88:	f842 3b04 	str.w	r3, [r2], #4

08001b8c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b90:	d3f9      	bcc.n	8001b86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b92:	f7ff ffd3 	bl	8001b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b96:	f007 fdd3 	bl	8009740 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b9a:	f7ff fa6f 	bl	800107c <main>
  bx  lr    
 8001b9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ba0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001ba4:	0800bb10 	.word	0x0800bb10
  ldr  r0, =_sdata
 8001ba8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001bac:	20000358 	.word	0x20000358
  ldr  r2, =_sbss
 8001bb0:	20000358 	.word	0x20000358
  ldr  r3, = _ebss
 8001bb4:	20001dcc 	.word	0x20001dcc

08001bb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bb8:	e7fe      	b.n	8001bb8 <ADC_IRQHandler>
	...

08001bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bc0:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <HAL_Init+0x40>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a0d      	ldr	r2, [pc, #52]	; (8001bfc <HAL_Init+0x40>)
 8001bc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <HAL_Init+0x40>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <HAL_Init+0x40>)
 8001bd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bd8:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <HAL_Init+0x40>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a07      	ldr	r2, [pc, #28]	; (8001bfc <HAL_Init+0x40>)
 8001bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be4:	2003      	movs	r0, #3
 8001be6:	f000 f94d 	bl	8001e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bea:	2000      	movs	r0, #0
 8001bec:	f000 f808 	bl	8001c00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bf0:	f7ff fda8 	bl	8001744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023c00 	.word	0x40023c00

08001c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_InitTick+0x54>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_InitTick+0x58>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	4619      	mov	r1, r3
 8001c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f000 f965 	bl	8001eee <HAL_SYSTICK_Config>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e00e      	b.n	8001c4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b0f      	cmp	r3, #15
 8001c32:	d80a      	bhi.n	8001c4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c34:	2200      	movs	r2, #0
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3c:	f000 f92d 	bl	8001e9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c40:	4a06      	ldr	r2, [pc, #24]	; (8001c5c <HAL_InitTick+0x5c>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	e000      	b.n	8001c4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000000 	.word	0x20000000
 8001c58:	20000008 	.word	0x20000008
 8001c5c:	20000004 	.word	0x20000004

08001c60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_IncTick+0x20>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_IncTick+0x24>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4413      	add	r3, r2
 8001c70:	4a04      	ldr	r2, [pc, #16]	; (8001c84 <HAL_IncTick+0x24>)
 8001c72:	6013      	str	r3, [r2, #0]
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	20000008 	.word	0x20000008
 8001c84:	200004ec 	.word	0x200004ec

08001c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c8c:	4b03      	ldr	r3, [pc, #12]	; (8001c9c <HAL_GetTick+0x14>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	200004ec 	.word	0x200004ec

08001ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca8:	f7ff ffee 	bl	8001c88 <HAL_GetTick>
 8001cac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb8:	d005      	beq.n	8001cc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <HAL_Delay+0x40>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cc6:	bf00      	nop
 8001cc8:	f7ff ffde 	bl	8001c88 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d8f7      	bhi.n	8001cc8 <HAL_Delay+0x28>
  {
  }
}
 8001cd8:	bf00      	nop
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20000008 	.word	0x20000008

08001ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d00:	4013      	ands	r3, r2
 8001d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d16:	4a04      	ldr	r2, [pc, #16]	; (8001d28 <__NVIC_SetPriorityGrouping+0x44>)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	60d3      	str	r3, [r2, #12]
}
 8001d1c:	bf00      	nop
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d30:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <__NVIC_GetPriorityGrouping+0x18>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	0a1b      	lsrs	r3, r3, #8
 8001d36:	f003 0307 	and.w	r3, r3, #7
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	db0b      	blt.n	8001d72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	f003 021f 	and.w	r2, r3, #31
 8001d60:	4907      	ldr	r1, [pc, #28]	; (8001d80 <__NVIC_EnableIRQ+0x38>)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	2001      	movs	r0, #1
 8001d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000e100 	.word	0xe000e100

08001d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	6039      	str	r1, [r7, #0]
 8001d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	db0a      	blt.n	8001dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	490c      	ldr	r1, [pc, #48]	; (8001dd0 <__NVIC_SetPriority+0x4c>)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	0112      	lsls	r2, r2, #4
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	440b      	add	r3, r1
 8001da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dac:	e00a      	b.n	8001dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4908      	ldr	r1, [pc, #32]	; (8001dd4 <__NVIC_SetPriority+0x50>)
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	3b04      	subs	r3, #4
 8001dbc:	0112      	lsls	r2, r2, #4
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	761a      	strb	r2, [r3, #24]
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000e100 	.word	0xe000e100
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b089      	sub	sp, #36	; 0x24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f1c3 0307 	rsb	r3, r3, #7
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	bf28      	it	cs
 8001df6:	2304      	movcs	r3, #4
 8001df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	2b06      	cmp	r3, #6
 8001e00:	d902      	bls.n	8001e08 <NVIC_EncodePriority+0x30>
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3b03      	subs	r3, #3
 8001e06:	e000      	b.n	8001e0a <NVIC_EncodePriority+0x32>
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43da      	mvns	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e20:	f04f 31ff 	mov.w	r1, #4294967295
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2a:	43d9      	mvns	r1, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	4313      	orrs	r3, r2
         );
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3724      	adds	r7, #36	; 0x24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e50:	d301      	bcc.n	8001e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e52:	2301      	movs	r3, #1
 8001e54:	e00f      	b.n	8001e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e56:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <SysTick_Config+0x40>)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5e:	210f      	movs	r1, #15
 8001e60:	f04f 30ff 	mov.w	r0, #4294967295
 8001e64:	f7ff ff8e 	bl	8001d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e68:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <SysTick_Config+0x40>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6e:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <SysTick_Config+0x40>)
 8001e70:	2207      	movs	r2, #7
 8001e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	e000e010 	.word	0xe000e010

08001e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff ff29 	bl	8001ce4 <__NVIC_SetPriorityGrouping>
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b086      	sub	sp, #24
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	607a      	str	r2, [r7, #4]
 8001ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eac:	f7ff ff3e 	bl	8001d2c <__NVIC_GetPriorityGrouping>
 8001eb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	68b9      	ldr	r1, [r7, #8]
 8001eb6:	6978      	ldr	r0, [r7, #20]
 8001eb8:	f7ff ff8e 	bl	8001dd8 <NVIC_EncodePriority>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ff5d 	bl	8001d84 <__NVIC_SetPriority>
}
 8001eca:	bf00      	nop
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	4603      	mov	r3, r0
 8001eda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff31 	bl	8001d48 <__NVIC_EnableIRQ>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff ffa2 	bl	8001e40 <SysTick_Config>
 8001efc:	4603      	mov	r3, r0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b089      	sub	sp, #36	; 0x24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]
 8001f22:	e16b      	b.n	80021fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f24:	2201      	movs	r2, #1
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	4013      	ands	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	f040 815a 	bne.w	80021f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d00b      	beq.n	8001f62 <HAL_GPIO_Init+0x5a>
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d007      	beq.n	8001f62 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f56:	2b11      	cmp	r3, #17
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b12      	cmp	r3, #18
 8001f60:	d130      	bne.n	8001fc4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	2203      	movs	r2, #3
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4013      	ands	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	68da      	ldr	r2, [r3, #12]
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f98:	2201      	movs	r2, #1
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	091b      	lsrs	r3, r3, #4
 8001fae:	f003 0201 	and.w	r2, r3, #1
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	2203      	movs	r2, #3
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d003      	beq.n	8002004 <HAL_GPIO_Init+0xfc>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b12      	cmp	r3, #18
 8002002:	d123      	bne.n	800204c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	08da      	lsrs	r2, r3, #3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3208      	adds	r2, #8
 800200c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002010:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	220f      	movs	r2, #15
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	691a      	ldr	r2, [r3, #16]
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	08da      	lsrs	r2, r3, #3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3208      	adds	r2, #8
 8002046:	69b9      	ldr	r1, [r7, #24]
 8002048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	2203      	movs	r2, #3
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 0203 	and.w	r2, r3, #3
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 80b4 	beq.w	80021f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	4b5f      	ldr	r3, [pc, #380]	; (8002210 <HAL_GPIO_Init+0x308>)
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	4a5e      	ldr	r2, [pc, #376]	; (8002210 <HAL_GPIO_Init+0x308>)
 8002098:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800209c:	6453      	str	r3, [r2, #68]	; 0x44
 800209e:	4b5c      	ldr	r3, [pc, #368]	; (8002210 <HAL_GPIO_Init+0x308>)
 80020a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020aa:	4a5a      	ldr	r2, [pc, #360]	; (8002214 <HAL_GPIO_Init+0x30c>)
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	089b      	lsrs	r3, r3, #2
 80020b0:	3302      	adds	r3, #2
 80020b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	f003 0303 	and.w	r3, r3, #3
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	220f      	movs	r2, #15
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43db      	mvns	r3, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4013      	ands	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a51      	ldr	r2, [pc, #324]	; (8002218 <HAL_GPIO_Init+0x310>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d02b      	beq.n	800212e <HAL_GPIO_Init+0x226>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a50      	ldr	r2, [pc, #320]	; (800221c <HAL_GPIO_Init+0x314>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d025      	beq.n	800212a <HAL_GPIO_Init+0x222>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a4f      	ldr	r2, [pc, #316]	; (8002220 <HAL_GPIO_Init+0x318>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d01f      	beq.n	8002126 <HAL_GPIO_Init+0x21e>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a4e      	ldr	r2, [pc, #312]	; (8002224 <HAL_GPIO_Init+0x31c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d019      	beq.n	8002122 <HAL_GPIO_Init+0x21a>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a4d      	ldr	r2, [pc, #308]	; (8002228 <HAL_GPIO_Init+0x320>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d013      	beq.n	800211e <HAL_GPIO_Init+0x216>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a4c      	ldr	r2, [pc, #304]	; (800222c <HAL_GPIO_Init+0x324>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d00d      	beq.n	800211a <HAL_GPIO_Init+0x212>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a4b      	ldr	r2, [pc, #300]	; (8002230 <HAL_GPIO_Init+0x328>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d007      	beq.n	8002116 <HAL_GPIO_Init+0x20e>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a4a      	ldr	r2, [pc, #296]	; (8002234 <HAL_GPIO_Init+0x32c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d101      	bne.n	8002112 <HAL_GPIO_Init+0x20a>
 800210e:	2307      	movs	r3, #7
 8002110:	e00e      	b.n	8002130 <HAL_GPIO_Init+0x228>
 8002112:	2308      	movs	r3, #8
 8002114:	e00c      	b.n	8002130 <HAL_GPIO_Init+0x228>
 8002116:	2306      	movs	r3, #6
 8002118:	e00a      	b.n	8002130 <HAL_GPIO_Init+0x228>
 800211a:	2305      	movs	r3, #5
 800211c:	e008      	b.n	8002130 <HAL_GPIO_Init+0x228>
 800211e:	2304      	movs	r3, #4
 8002120:	e006      	b.n	8002130 <HAL_GPIO_Init+0x228>
 8002122:	2303      	movs	r3, #3
 8002124:	e004      	b.n	8002130 <HAL_GPIO_Init+0x228>
 8002126:	2302      	movs	r3, #2
 8002128:	e002      	b.n	8002130 <HAL_GPIO_Init+0x228>
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <HAL_GPIO_Init+0x228>
 800212e:	2300      	movs	r3, #0
 8002130:	69fa      	ldr	r2, [r7, #28]
 8002132:	f002 0203 	and.w	r2, r2, #3
 8002136:	0092      	lsls	r2, r2, #2
 8002138:	4093      	lsls	r3, r2
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002140:	4934      	ldr	r1, [pc, #208]	; (8002214 <HAL_GPIO_Init+0x30c>)
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	089b      	lsrs	r3, r3, #2
 8002146:	3302      	adds	r3, #2
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800214e:	4b3a      	ldr	r3, [pc, #232]	; (8002238 <HAL_GPIO_Init+0x330>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	43db      	mvns	r3, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4013      	ands	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002172:	4a31      	ldr	r2, [pc, #196]	; (8002238 <HAL_GPIO_Init+0x330>)
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002178:	4b2f      	ldr	r3, [pc, #188]	; (8002238 <HAL_GPIO_Init+0x330>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800219c:	4a26      	ldr	r2, [pc, #152]	; (8002238 <HAL_GPIO_Init+0x330>)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021a2:	4b25      	ldr	r3, [pc, #148]	; (8002238 <HAL_GPIO_Init+0x330>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021c6:	4a1c      	ldr	r2, [pc, #112]	; (8002238 <HAL_GPIO_Init+0x330>)
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021cc:	4b1a      	ldr	r3, [pc, #104]	; (8002238 <HAL_GPIO_Init+0x330>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	43db      	mvns	r3, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4013      	ands	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d003      	beq.n	80021f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021f0:	4a11      	ldr	r2, [pc, #68]	; (8002238 <HAL_GPIO_Init+0x330>)
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3301      	adds	r3, #1
 80021fa:	61fb      	str	r3, [r7, #28]
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	2b0f      	cmp	r3, #15
 8002200:	f67f ae90 	bls.w	8001f24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002204:	bf00      	nop
 8002206:	3724      	adds	r7, #36	; 0x24
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	40023800 	.word	0x40023800
 8002214:	40013800 	.word	0x40013800
 8002218:	40020000 	.word	0x40020000
 800221c:	40020400 	.word	0x40020400
 8002220:	40020800 	.word	0x40020800
 8002224:	40020c00 	.word	0x40020c00
 8002228:	40021000 	.word	0x40021000
 800222c:	40021400 	.word	0x40021400
 8002230:	40021800 	.word	0x40021800
 8002234:	40021c00 	.word	0x40021c00
 8002238:	40013c00 	.word	0x40013c00

0800223c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	807b      	strh	r3, [r7, #2]
 8002248:	4613      	mov	r3, r2
 800224a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800224c:	787b      	ldrb	r3, [r7, #1]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002252:	887a      	ldrh	r2, [r7, #2]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002258:	e003      	b.n	8002262 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800225a:	887b      	ldrh	r3, [r7, #2]
 800225c:	041a      	lsls	r2, r3, #16
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	619a      	str	r2, [r3, #24]
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
	...

08002270 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800227a:	4b08      	ldr	r3, [pc, #32]	; (800229c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800227c:	695a      	ldr	r2, [r3, #20]
 800227e:	88fb      	ldrh	r3, [r7, #6]
 8002280:	4013      	ands	r3, r2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d006      	beq.n	8002294 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002286:	4a05      	ldr	r2, [pc, #20]	; (800229c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002288:	88fb      	ldrh	r3, [r7, #6]
 800228a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800228c:	88fb      	ldrh	r3, [r7, #6]
 800228e:	4618      	mov	r0, r3
 8002290:	f000 f806 	bl	80022a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40013c00 	.word	0x40013c00

080022a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
	...

080022b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e11f      	b.n	800250a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d106      	bne.n	80022e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7ff fa58 	bl	8001794 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2224      	movs	r2, #36	; 0x24
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 0201 	bic.w	r2, r2, #1
 80022fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800230a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800231a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800231c:	f002 fd3a 	bl	8004d94 <HAL_RCC_GetPCLK1Freq>
 8002320:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	4a7b      	ldr	r2, [pc, #492]	; (8002514 <HAL_I2C_Init+0x25c>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d807      	bhi.n	800233c <HAL_I2C_Init+0x84>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4a7a      	ldr	r2, [pc, #488]	; (8002518 <HAL_I2C_Init+0x260>)
 8002330:	4293      	cmp	r3, r2
 8002332:	bf94      	ite	ls
 8002334:	2301      	movls	r3, #1
 8002336:	2300      	movhi	r3, #0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	e006      	b.n	800234a <HAL_I2C_Init+0x92>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4a77      	ldr	r2, [pc, #476]	; (800251c <HAL_I2C_Init+0x264>)
 8002340:	4293      	cmp	r3, r2
 8002342:	bf94      	ite	ls
 8002344:	2301      	movls	r3, #1
 8002346:	2300      	movhi	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e0db      	b.n	800250a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	4a72      	ldr	r2, [pc, #456]	; (8002520 <HAL_I2C_Init+0x268>)
 8002356:	fba2 2303 	umull	r2, r3, r2, r3
 800235a:	0c9b      	lsrs	r3, r3, #18
 800235c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	430a      	orrs	r2, r1
 8002370:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	4a64      	ldr	r2, [pc, #400]	; (8002514 <HAL_I2C_Init+0x25c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d802      	bhi.n	800238c <HAL_I2C_Init+0xd4>
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	3301      	adds	r3, #1
 800238a:	e009      	b.n	80023a0 <HAL_I2C_Init+0xe8>
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002392:	fb02 f303 	mul.w	r3, r2, r3
 8002396:	4a63      	ldr	r2, [pc, #396]	; (8002524 <HAL_I2C_Init+0x26c>)
 8002398:	fba2 2303 	umull	r2, r3, r2, r3
 800239c:	099b      	lsrs	r3, r3, #6
 800239e:	3301      	adds	r3, #1
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6812      	ldr	r2, [r2, #0]
 80023a4:	430b      	orrs	r3, r1
 80023a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	4956      	ldr	r1, [pc, #344]	; (8002514 <HAL_I2C_Init+0x25c>)
 80023bc:	428b      	cmp	r3, r1
 80023be:	d80d      	bhi.n	80023dc <HAL_I2C_Init+0x124>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	1e59      	subs	r1, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80023ce:	3301      	adds	r3, #1
 80023d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	bf38      	it	cc
 80023d8:	2304      	movcc	r3, #4
 80023da:	e04f      	b.n	800247c <HAL_I2C_Init+0x1c4>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d111      	bne.n	8002408 <HAL_I2C_Init+0x150>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	1e58      	subs	r0, r3, #1
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6859      	ldr	r1, [r3, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	440b      	add	r3, r1
 80023f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023f6:	3301      	adds	r3, #1
 80023f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	bf0c      	ite	eq
 8002400:	2301      	moveq	r3, #1
 8002402:	2300      	movne	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	e012      	b.n	800242e <HAL_I2C_Init+0x176>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	1e58      	subs	r0, r3, #1
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6859      	ldr	r1, [r3, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	0099      	lsls	r1, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	fbb0 f3f3 	udiv	r3, r0, r3
 800241e:	3301      	adds	r3, #1
 8002420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002424:	2b00      	cmp	r3, #0
 8002426:	bf0c      	ite	eq
 8002428:	2301      	moveq	r3, #1
 800242a:	2300      	movne	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_I2C_Init+0x17e>
 8002432:	2301      	movs	r3, #1
 8002434:	e022      	b.n	800247c <HAL_I2C_Init+0x1c4>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10e      	bne.n	800245c <HAL_I2C_Init+0x1a4>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	1e58      	subs	r0, r3, #1
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6859      	ldr	r1, [r3, #4]
 8002446:	460b      	mov	r3, r1
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	440b      	add	r3, r1
 800244c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002450:	3301      	adds	r3, #1
 8002452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800245a:	e00f      	b.n	800247c <HAL_I2C_Init+0x1c4>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	1e58      	subs	r0, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6859      	ldr	r1, [r3, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	0099      	lsls	r1, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002472:	3301      	adds	r3, #1
 8002474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002478:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	6809      	ldr	r1, [r1, #0]
 8002480:	4313      	orrs	r3, r2
 8002482:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69da      	ldr	r2, [r3, #28]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6911      	ldr	r1, [r2, #16]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	68d2      	ldr	r2, [r2, #12]
 80024b6:	4311      	orrs	r1, r2
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	430b      	orrs	r3, r1
 80024be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695a      	ldr	r2, [r3, #20]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0201 	orr.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2220      	movs	r2, #32
 80024f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	000186a0 	.word	0x000186a0
 8002518:	001e847f 	.word	0x001e847f
 800251c:	003d08ff 	.word	0x003d08ff
 8002520:	431bde83 	.word	0x431bde83
 8002524:	10624dd3 	.word	0x10624dd3

08002528 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b088      	sub	sp, #32
 800252c:	af02      	add	r7, sp, #8
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	4608      	mov	r0, r1
 8002532:	4611      	mov	r1, r2
 8002534:	461a      	mov	r2, r3
 8002536:	4603      	mov	r3, r0
 8002538:	817b      	strh	r3, [r7, #10]
 800253a:	460b      	mov	r3, r1
 800253c:	813b      	strh	r3, [r7, #8]
 800253e:	4613      	mov	r3, r2
 8002540:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002542:	f7ff fba1 	bl	8001c88 <HAL_GetTick>
 8002546:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b20      	cmp	r3, #32
 8002552:	f040 80d9 	bne.w	8002708 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	2319      	movs	r3, #25
 800255c:	2201      	movs	r2, #1
 800255e:	496d      	ldr	r1, [pc, #436]	; (8002714 <HAL_I2C_Mem_Write+0x1ec>)
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 fc7f 	bl	8002e64 <I2C_WaitOnFlagUntilTimeout>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800256c:	2302      	movs	r3, #2
 800256e:	e0cc      	b.n	800270a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002576:	2b01      	cmp	r3, #1
 8002578:	d101      	bne.n	800257e <HAL_I2C_Mem_Write+0x56>
 800257a:	2302      	movs	r3, #2
 800257c:	e0c5      	b.n	800270a <HAL_I2C_Mem_Write+0x1e2>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b01      	cmp	r3, #1
 8002592:	d007      	beq.n	80025a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0201 	orr.w	r2, r2, #1
 80025a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2221      	movs	r2, #33	; 0x21
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2240      	movs	r2, #64	; 0x40
 80025c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6a3a      	ldr	r2, [r7, #32]
 80025ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80025d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025da:	b29a      	uxth	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4a4d      	ldr	r2, [pc, #308]	; (8002718 <HAL_I2C_Mem_Write+0x1f0>)
 80025e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025e6:	88f8      	ldrh	r0, [r7, #6]
 80025e8:	893a      	ldrh	r2, [r7, #8]
 80025ea:	8979      	ldrh	r1, [r7, #10]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	9301      	str	r3, [sp, #4]
 80025f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	4603      	mov	r3, r0
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 fab6 	bl	8002b68 <I2C_RequestMemoryWrite>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d052      	beq.n	80026a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e081      	b.n	800270a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 fd00 	bl	8003010 <I2C_WaitOnTXEFlagUntilTimeout>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00d      	beq.n	8002632 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	2b04      	cmp	r3, #4
 800261c:	d107      	bne.n	800262e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800262c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e06b      	b.n	800270a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	781a      	ldrb	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264c:	3b01      	subs	r3, #1
 800264e:	b29a      	uxth	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002658:	b29b      	uxth	r3, r3
 800265a:	3b01      	subs	r3, #1
 800265c:	b29a      	uxth	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b04      	cmp	r3, #4
 800266e:	d11b      	bne.n	80026a8 <HAL_I2C_Mem_Write+0x180>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002674:	2b00      	cmp	r3, #0
 8002676:	d017      	beq.n	80026a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	781a      	ldrb	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002692:	3b01      	subs	r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269e:	b29b      	uxth	r3, r3
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1aa      	bne.n	8002606 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f000 fcec 	bl	8003092 <I2C_WaitOnBTFFlagUntilTimeout>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00d      	beq.n	80026dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d107      	bne.n	80026d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e016      	b.n	800270a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2220      	movs	r2, #32
 80026f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002704:	2300      	movs	r3, #0
 8002706:	e000      	b.n	800270a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002708:	2302      	movs	r3, #2
  }
}
 800270a:	4618      	mov	r0, r3
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	00100002 	.word	0x00100002
 8002718:	ffff0000 	.word	0xffff0000

0800271c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08c      	sub	sp, #48	; 0x30
 8002720:	af02      	add	r7, sp, #8
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	4608      	mov	r0, r1
 8002726:	4611      	mov	r1, r2
 8002728:	461a      	mov	r2, r3
 800272a:	4603      	mov	r3, r0
 800272c:	817b      	strh	r3, [r7, #10]
 800272e:	460b      	mov	r3, r1
 8002730:	813b      	strh	r3, [r7, #8]
 8002732:	4613      	mov	r3, r2
 8002734:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002736:	f7ff faa7 	bl	8001c88 <HAL_GetTick>
 800273a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b20      	cmp	r3, #32
 8002746:	f040 8208 	bne.w	8002b5a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	2319      	movs	r3, #25
 8002750:	2201      	movs	r2, #1
 8002752:	497b      	ldr	r1, [pc, #492]	; (8002940 <HAL_I2C_Mem_Read+0x224>)
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 fb85 	bl	8002e64 <I2C_WaitOnFlagUntilTimeout>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002760:	2302      	movs	r3, #2
 8002762:	e1fb      	b.n	8002b5c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800276a:	2b01      	cmp	r3, #1
 800276c:	d101      	bne.n	8002772 <HAL_I2C_Mem_Read+0x56>
 800276e:	2302      	movs	r3, #2
 8002770:	e1f4      	b.n	8002b5c <HAL_I2C_Mem_Read+0x440>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b01      	cmp	r3, #1
 8002786:	d007      	beq.n	8002798 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0201 	orr.w	r2, r2, #1
 8002796:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2222      	movs	r2, #34	; 0x22
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2240      	movs	r2, #64	; 0x40
 80027b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80027c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4a5b      	ldr	r2, [pc, #364]	; (8002944 <HAL_I2C_Mem_Read+0x228>)
 80027d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027da:	88f8      	ldrh	r0, [r7, #6]
 80027dc:	893a      	ldrh	r2, [r7, #8]
 80027de:	8979      	ldrh	r1, [r7, #10]
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	9301      	str	r3, [sp, #4]
 80027e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	4603      	mov	r3, r0
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 fa52 	bl	8002c94 <I2C_RequestMemoryRead>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e1b0      	b.n	8002b5c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d113      	bne.n	800282a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002802:	2300      	movs	r3, #0
 8002804:	623b      	str	r3, [r7, #32]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	623b      	str	r3, [r7, #32]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	623b      	str	r3, [r7, #32]
 8002816:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	e184      	b.n	8002b34 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282e:	2b01      	cmp	r3, #1
 8002830:	d11b      	bne.n	800286a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002840:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	61fb      	str	r3, [r7, #28]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	61fb      	str	r3, [r7, #28]
 8002856:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	e164      	b.n	8002b34 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286e:	2b02      	cmp	r3, #2
 8002870:	d11b      	bne.n	80028aa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002880:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002890:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002892:	2300      	movs	r3, #0
 8002894:	61bb      	str	r3, [r7, #24]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	61bb      	str	r3, [r7, #24]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	61bb      	str	r3, [r7, #24]
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	e144      	b.n	8002b34 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80028c0:	e138      	b.n	8002b34 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	f200 80f1 	bhi.w	8002aae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d123      	bne.n	800291c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 fc1b 	bl	8003114 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e139      	b.n	8002b5c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	691a      	ldr	r2, [r3, #16]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002904:	3b01      	subs	r3, #1
 8002906:	b29a      	uxth	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002910:	b29b      	uxth	r3, r3
 8002912:	3b01      	subs	r3, #1
 8002914:	b29a      	uxth	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	855a      	strh	r2, [r3, #42]	; 0x2a
 800291a:	e10b      	b.n	8002b34 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002920:	2b02      	cmp	r3, #2
 8002922:	d14e      	bne.n	80029c2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800292a:	2200      	movs	r2, #0
 800292c:	4906      	ldr	r1, [pc, #24]	; (8002948 <HAL_I2C_Mem_Read+0x22c>)
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 fa98 	bl	8002e64 <I2C_WaitOnFlagUntilTimeout>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d008      	beq.n	800294c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e10e      	b.n	8002b5c <HAL_I2C_Mem_Read+0x440>
 800293e:	bf00      	nop
 8002940:	00100002 	.word	0x00100002
 8002944:	ffff0000 	.word	0xffff0000
 8002948:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800295a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	691a      	ldr	r2, [r3, #16]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002978:	3b01      	subs	r3, #1
 800297a:	b29a      	uxth	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002984:	b29b      	uxth	r3, r3
 8002986:	3b01      	subs	r3, #1
 8002988:	b29a      	uxth	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	3b01      	subs	r3, #1
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029c0:	e0b8      	b.n	8002b34 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c8:	2200      	movs	r2, #0
 80029ca:	4966      	ldr	r1, [pc, #408]	; (8002b64 <HAL_I2C_Mem_Read+0x448>)
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 fa49 	bl	8002e64 <I2C_WaitOnFlagUntilTimeout>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e0bf      	b.n	8002b5c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691a      	ldr	r2, [r3, #16]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	3b01      	subs	r3, #1
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a24:	2200      	movs	r2, #0
 8002a26:	494f      	ldr	r1, [pc, #316]	; (8002b64 <HAL_I2C_Mem_Read+0x448>)
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f000 fa1b 	bl	8002e64 <I2C_WaitOnFlagUntilTimeout>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e091      	b.n	8002b5c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	691a      	ldr	r2, [r3, #16]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	691a      	ldr	r2, [r3, #16]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	1c5a      	adds	r2, r3, #1
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a96:	3b01      	subs	r3, #1
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002aac:	e042      	b.n	8002b34 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ab0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 fb2e 	bl	8003114 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e04c      	b.n	8002b5c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	691a      	ldr	r2, [r3, #16]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	f003 0304 	and.w	r3, r3, #4
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d118      	bne.n	8002b34 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	691a      	ldr	r2, [r3, #16]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	1c5a      	adds	r2, r3, #1
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f47f aec2 	bne.w	80028c2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2220      	movs	r2, #32
 8002b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	e000      	b.n	8002b5c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002b5a:	2302      	movs	r3, #2
  }
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3728      	adds	r7, #40	; 0x28
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	00010004 	.word	0x00010004

08002b68 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af02      	add	r7, sp, #8
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	4608      	mov	r0, r1
 8002b72:	4611      	mov	r1, r2
 8002b74:	461a      	mov	r2, r3
 8002b76:	4603      	mov	r3, r0
 8002b78:	817b      	strh	r3, [r7, #10]
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	813b      	strh	r3, [r7, #8]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	6a3b      	ldr	r3, [r7, #32]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 f960 	bl	8002e64 <I2C_WaitOnFlagUntilTimeout>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00d      	beq.n	8002bc6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bb8:	d103      	bne.n	8002bc2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e05f      	b.n	8002c86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bc6:	897b      	ldrh	r3, [r7, #10]
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	461a      	mov	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bd4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	6a3a      	ldr	r2, [r7, #32]
 8002bda:	492d      	ldr	r1, [pc, #180]	; (8002c90 <I2C_RequestMemoryWrite+0x128>)
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 f998 	bl	8002f12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e04c      	b.n	8002c86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c04:	6a39      	ldr	r1, [r7, #32]
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 fa02 	bl	8003010 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00d      	beq.n	8002c2e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d107      	bne.n	8002c2a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e02b      	b.n	8002c86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c2e:	88fb      	ldrh	r3, [r7, #6]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d105      	bne.n	8002c40 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c34:	893b      	ldrh	r3, [r7, #8]
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	611a      	str	r2, [r3, #16]
 8002c3e:	e021      	b.n	8002c84 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c40:	893b      	ldrh	r3, [r7, #8]
 8002c42:	0a1b      	lsrs	r3, r3, #8
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c50:	6a39      	ldr	r1, [r7, #32]
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 f9dc 	bl	8003010 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00d      	beq.n	8002c7a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d107      	bne.n	8002c76 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e005      	b.n	8002c86 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c7a:	893b      	ldrh	r3, [r7, #8]
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	00010002 	.word	0x00010002

08002c94 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b088      	sub	sp, #32
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	4608      	mov	r0, r1
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	817b      	strh	r3, [r7, #10]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	813b      	strh	r3, [r7, #8]
 8002caa:	4613      	mov	r3, r2
 8002cac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cbc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ccc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 f8c2 	bl	8002e64 <I2C_WaitOnFlagUntilTimeout>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00d      	beq.n	8002d02 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cf4:	d103      	bne.n	8002cfe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cfc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e0aa      	b.n	8002e58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d02:	897b      	ldrh	r3, [r7, #10]
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	461a      	mov	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	6a3a      	ldr	r2, [r7, #32]
 8002d16:	4952      	ldr	r1, [pc, #328]	; (8002e60 <I2C_RequestMemoryRead+0x1cc>)
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 f8fa 	bl	8002f12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e097      	b.n	8002e58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d40:	6a39      	ldr	r1, [r7, #32]
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 f964 	bl	8003010 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00d      	beq.n	8002d6a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d107      	bne.n	8002d66 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e076      	b.n	8002e58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d6a:	88fb      	ldrh	r3, [r7, #6]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d105      	bne.n	8002d7c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d70:	893b      	ldrh	r3, [r7, #8]
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	611a      	str	r2, [r3, #16]
 8002d7a:	e021      	b.n	8002dc0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d7c:	893b      	ldrh	r3, [r7, #8]
 8002d7e:	0a1b      	lsrs	r3, r3, #8
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d8c:	6a39      	ldr	r1, [r7, #32]
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 f93e 	bl	8003010 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00d      	beq.n	8002db6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d107      	bne.n	8002db2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002db0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e050      	b.n	8002e58 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002db6:	893b      	ldrh	r3, [r7, #8]
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc2:	6a39      	ldr	r1, [r7, #32]
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 f923 	bl	8003010 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00d      	beq.n	8002dec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d107      	bne.n	8002de8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002de6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e035      	b.n	8002e58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dfa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 f82b 	bl	8002e64 <I2C_WaitOnFlagUntilTimeout>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00d      	beq.n	8002e30 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e22:	d103      	bne.n	8002e2c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e013      	b.n	8002e58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e30:	897b      	ldrh	r3, [r7, #10]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	f043 0301 	orr.w	r3, r3, #1
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	6a3a      	ldr	r2, [r7, #32]
 8002e44:	4906      	ldr	r1, [pc, #24]	; (8002e60 <I2C_RequestMemoryRead+0x1cc>)
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 f863 	bl	8002f12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	00010002 	.word	0x00010002

08002e64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	603b      	str	r3, [r7, #0]
 8002e70:	4613      	mov	r3, r2
 8002e72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e74:	e025      	b.n	8002ec2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7c:	d021      	beq.n	8002ec2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e7e:	f7fe ff03 	bl	8001c88 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d302      	bcc.n	8002e94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d116      	bne.n	8002ec2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f043 0220 	orr.w	r2, r3, #32
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e023      	b.n	8002f0a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	0c1b      	lsrs	r3, r3, #16
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d10d      	bne.n	8002ee8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	43da      	mvns	r2, r3
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	bf0c      	ite	eq
 8002ede:	2301      	moveq	r3, #1
 8002ee0:	2300      	movne	r3, #0
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	e00c      	b.n	8002f02 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	43da      	mvns	r2, r3
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	bf0c      	ite	eq
 8002efa:	2301      	moveq	r3, #1
 8002efc:	2300      	movne	r3, #0
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d0b6      	beq.n	8002e76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b084      	sub	sp, #16
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	60f8      	str	r0, [r7, #12]
 8002f1a:	60b9      	str	r1, [r7, #8]
 8002f1c:	607a      	str	r2, [r7, #4]
 8002f1e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f20:	e051      	b.n	8002fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f30:	d123      	bne.n	8002f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f40:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f4a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2220      	movs	r2, #32
 8002f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	f043 0204 	orr.w	r2, r3, #4
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e046      	b.n	8003008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f80:	d021      	beq.n	8002fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f82:	f7fe fe81 	bl	8001c88 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d302      	bcc.n	8002f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d116      	bne.n	8002fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	f043 0220 	orr.w	r2, r3, #32
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e020      	b.n	8003008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	0c1b      	lsrs	r3, r3, #16
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d10c      	bne.n	8002fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	43da      	mvns	r2, r3
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	bf14      	ite	ne
 8002fe2:	2301      	movne	r3, #1
 8002fe4:	2300      	moveq	r3, #0
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	e00b      	b.n	8003002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	43da      	mvns	r2, r3
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	bf14      	ite	ne
 8002ffc:	2301      	movne	r3, #1
 8002ffe:	2300      	moveq	r3, #0
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d18d      	bne.n	8002f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800301c:	e02d      	b.n	800307a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 f8ce 	bl	80031c0 <I2C_IsAcknowledgeFailed>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e02d      	b.n	800308a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003034:	d021      	beq.n	800307a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003036:	f7fe fe27 	bl	8001c88 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	68ba      	ldr	r2, [r7, #8]
 8003042:	429a      	cmp	r2, r3
 8003044:	d302      	bcc.n	800304c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d116      	bne.n	800307a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2220      	movs	r2, #32
 8003056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	f043 0220 	orr.w	r2, r3, #32
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e007      	b.n	800308a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003084:	2b80      	cmp	r3, #128	; 0x80
 8003086:	d1ca      	bne.n	800301e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b084      	sub	sp, #16
 8003096:	af00      	add	r7, sp, #0
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800309e:	e02d      	b.n	80030fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 f88d 	bl	80031c0 <I2C_IsAcknowledgeFailed>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e02d      	b.n	800310c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b6:	d021      	beq.n	80030fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b8:	f7fe fde6 	bl	8001c88 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d302      	bcc.n	80030ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d116      	bne.n	80030fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	f043 0220 	orr.w	r2, r3, #32
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e007      	b.n	800310c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	f003 0304 	and.w	r3, r3, #4
 8003106:	2b04      	cmp	r3, #4
 8003108:	d1ca      	bne.n	80030a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003120:	e042      	b.n	80031a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	f003 0310 	and.w	r3, r3, #16
 800312c:	2b10      	cmp	r3, #16
 800312e:	d119      	bne.n	8003164 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f06f 0210 	mvn.w	r2, #16
 8003138:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e029      	b.n	80031b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003164:	f7fe fd90 	bl	8001c88 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	429a      	cmp	r2, r3
 8003172:	d302      	bcc.n	800317a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d116      	bne.n	80031a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	f043 0220 	orr.w	r2, r3, #32
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e007      	b.n	80031b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b2:	2b40      	cmp	r3, #64	; 0x40
 80031b4:	d1b5      	bne.n	8003122 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031d6:	d11b      	bne.n	8003210 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fc:	f043 0204 	orr.w	r2, r3, #4
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e000      	b.n	8003212 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800321e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003220:	b08f      	sub	sp, #60	; 0x3c
 8003222:	af0a      	add	r7, sp, #40	; 0x28
 8003224:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e10f      	b.n	8003450 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d106      	bne.n	8003250 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f005 ff76 	bl	800913c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2203      	movs	r2, #3
 8003254:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003260:	2b00      	cmp	r3, #0
 8003262:	d102      	bne.n	800326a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f002 ff2f 	bl	80060d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	603b      	str	r3, [r7, #0]
 800327a:	687e      	ldr	r6, [r7, #4]
 800327c:	466d      	mov	r5, sp
 800327e:	f106 0410 	add.w	r4, r6, #16
 8003282:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003284:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003286:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003288:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800328a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800328e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003292:	1d33      	adds	r3, r6, #4
 8003294:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003296:	6838      	ldr	r0, [r7, #0]
 8003298:	f002 fe06 	bl	8005ea8 <USB_CoreInit>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d005      	beq.n	80032ae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2202      	movs	r2, #2
 80032a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e0d0      	b.n	8003450 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2100      	movs	r1, #0
 80032b4:	4618      	mov	r0, r3
 80032b6:	f002 ff1d 	bl	80060f4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032ba:	2300      	movs	r3, #0
 80032bc:	73fb      	strb	r3, [r7, #15]
 80032be:	e04a      	b.n	8003356 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032c0:	7bfa      	ldrb	r2, [r7, #15]
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	4613      	mov	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	1a9b      	subs	r3, r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	333d      	adds	r3, #61	; 0x3d
 80032d0:	2201      	movs	r2, #1
 80032d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032d4:	7bfa      	ldrb	r2, [r7, #15]
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	4613      	mov	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	1a9b      	subs	r3, r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	333c      	adds	r3, #60	; 0x3c
 80032e4:	7bfa      	ldrb	r2, [r7, #15]
 80032e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032e8:	7bfa      	ldrb	r2, [r7, #15]
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	b298      	uxth	r0, r3
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	1a9b      	subs	r3, r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	3342      	adds	r3, #66	; 0x42
 80032fc:	4602      	mov	r2, r0
 80032fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003300:	7bfa      	ldrb	r2, [r7, #15]
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	4613      	mov	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	333f      	adds	r3, #63	; 0x3f
 8003310:	2200      	movs	r2, #0
 8003312:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003314:	7bfa      	ldrb	r2, [r7, #15]
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	1a9b      	subs	r3, r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	3344      	adds	r3, #68	; 0x44
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003328:	7bfa      	ldrb	r2, [r7, #15]
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	1a9b      	subs	r3, r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	3348      	adds	r3, #72	; 0x48
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800333c:	7bfa      	ldrb	r2, [r7, #15]
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	1a9b      	subs	r3, r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	3350      	adds	r3, #80	; 0x50
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003350:	7bfb      	ldrb	r3, [r7, #15]
 8003352:	3301      	adds	r3, #1
 8003354:	73fb      	strb	r3, [r7, #15]
 8003356:	7bfa      	ldrb	r2, [r7, #15]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	429a      	cmp	r2, r3
 800335e:	d3af      	bcc.n	80032c0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003360:	2300      	movs	r3, #0
 8003362:	73fb      	strb	r3, [r7, #15]
 8003364:	e044      	b.n	80033f0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003366:	7bfa      	ldrb	r2, [r7, #15]
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	4613      	mov	r3, r2
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	1a9b      	subs	r3, r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	440b      	add	r3, r1
 8003374:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003378:	2200      	movs	r2, #0
 800337a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800337c:	7bfa      	ldrb	r2, [r7, #15]
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	1a9b      	subs	r3, r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800338e:	7bfa      	ldrb	r2, [r7, #15]
 8003390:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003392:	7bfa      	ldrb	r2, [r7, #15]
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	1a9b      	subs	r3, r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80033a4:	2200      	movs	r2, #0
 80033a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80033a8:	7bfa      	ldrb	r2, [r7, #15]
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	4613      	mov	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	1a9b      	subs	r3, r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80033be:	7bfa      	ldrb	r2, [r7, #15]
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	1a9b      	subs	r3, r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	440b      	add	r3, r1
 80033cc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80033d4:	7bfa      	ldrb	r2, [r7, #15]
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
 80033ec:	3301      	adds	r3, #1
 80033ee:	73fb      	strb	r3, [r7, #15]
 80033f0:	7bfa      	ldrb	r2, [r7, #15]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d3b5      	bcc.n	8003366 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	603b      	str	r3, [r7, #0]
 8003400:	687e      	ldr	r6, [r7, #4]
 8003402:	466d      	mov	r5, sp
 8003404:	f106 0410 	add.w	r4, r6, #16
 8003408:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800340a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800340c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800340e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003410:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003414:	e885 0003 	stmia.w	r5, {r0, r1}
 8003418:	1d33      	adds	r3, r6, #4
 800341a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800341c:	6838      	ldr	r0, [r7, #0]
 800341e:	f002 fe93 	bl	8006148 <USB_DevInit>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e00d      	b.n	8003450 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f003 fedb 	bl	8007204 <USB_DevDisconnect>

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003458 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <HAL_PCD_Start+0x1c>
 8003470:	2302      	movs	r3, #2
 8003472:	e020      	b.n	80034b6 <HAL_PCD_Start+0x5e>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003480:	2b01      	cmp	r3, #1
 8003482:	d109      	bne.n	8003498 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003488:	2b01      	cmp	r3, #1
 800348a:	d005      	beq.n	8003498 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003490:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	f002 fe07 	bl	80060b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f003 fe8b 	bl	80071c2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80034be:	b590      	push	{r4, r7, lr}
 80034c0:	b08d      	sub	sp, #52	; 0x34
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034cc:	6a3b      	ldr	r3, [r7, #32]
 80034ce:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f003 ff49 	bl	800736c <USB_GetMode>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f040 839d 	bne.w	8003c1c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f003 fead 	bl	8007246 <USB_ReadInterrupts>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 8393 	beq.w	8003c1a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f003 fea4 	bl	8007246 <USB_ReadInterrupts>
 80034fe:	4603      	mov	r3, r0
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b02      	cmp	r3, #2
 8003506:	d107      	bne.n	8003518 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695a      	ldr	r2, [r3, #20]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f002 0202 	and.w	r2, r2, #2
 8003516:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4618      	mov	r0, r3
 800351e:	f003 fe92 	bl	8007246 <USB_ReadInterrupts>
 8003522:	4603      	mov	r3, r0
 8003524:	f003 0310 	and.w	r3, r3, #16
 8003528:	2b10      	cmp	r3, #16
 800352a:	d161      	bne.n	80035f0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	699a      	ldr	r2, [r3, #24]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0210 	bic.w	r2, r2, #16
 800353a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	f003 020f 	and.w	r2, r3, #15
 8003548:	4613      	mov	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	1a9b      	subs	r3, r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	4413      	add	r3, r2
 8003558:	3304      	adds	r3, #4
 800355a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	0c5b      	lsrs	r3, r3, #17
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	2b02      	cmp	r3, #2
 8003566:	d124      	bne.n	80035b2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800356e:	4013      	ands	r3, r2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d035      	beq.n	80035e0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	091b      	lsrs	r3, r3, #4
 800357c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800357e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003582:	b29b      	uxth	r3, r3
 8003584:	461a      	mov	r2, r3
 8003586:	6a38      	ldr	r0, [r7, #32]
 8003588:	f003 fcf8 	bl	8006f7c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	091b      	lsrs	r3, r3, #4
 8003594:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003598:	441a      	add	r2, r3
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	699a      	ldr	r2, [r3, #24]
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	091b      	lsrs	r3, r3, #4
 80035a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035aa:	441a      	add	r2, r3
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	619a      	str	r2, [r3, #24]
 80035b0:	e016      	b.n	80035e0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	0c5b      	lsrs	r3, r3, #17
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	2b06      	cmp	r3, #6
 80035bc:	d110      	bne.n	80035e0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80035c4:	2208      	movs	r2, #8
 80035c6:	4619      	mov	r1, r3
 80035c8:	6a38      	ldr	r0, [r7, #32]
 80035ca:	f003 fcd7 	bl	8006f7c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	699a      	ldr	r2, [r3, #24]
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	091b      	lsrs	r3, r3, #4
 80035d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035da:	441a      	add	r2, r3
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699a      	ldr	r2, [r3, #24]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 0210 	orr.w	r2, r2, #16
 80035ee:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f003 fe26 	bl	8007246 <USB_ReadInterrupts>
 80035fa:	4603      	mov	r3, r0
 80035fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003600:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003604:	d16e      	bne.n	80036e4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003606:	2300      	movs	r3, #0
 8003608:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f003 fe2c 	bl	800726c <USB_ReadDevAllOutEpInterrupt>
 8003614:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003616:	e062      	b.n	80036de <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d057      	beq.n	80036d2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	4611      	mov	r1, r2
 800362c:	4618      	mov	r0, r3
 800362e:	f003 fe51 	bl	80072d4 <USB_ReadDevOutEPInterrupt>
 8003632:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00c      	beq.n	8003658 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	015a      	lsls	r2, r3, #5
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	4413      	add	r3, r2
 8003646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800364a:	461a      	mov	r2, r3
 800364c:	2301      	movs	r3, #1
 800364e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003650:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 fdb0 	bl	80041b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	f003 0308 	and.w	r3, r3, #8
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00c      	beq.n	800367c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	015a      	lsls	r2, r3, #5
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	4413      	add	r3, r2
 800366a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800366e:	461a      	mov	r2, r3
 8003670:	2308      	movs	r3, #8
 8003672:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003674:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 feaa 	bl	80043d0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f003 0310 	and.w	r3, r3, #16
 8003682:	2b00      	cmp	r3, #0
 8003684:	d008      	beq.n	8003698 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	015a      	lsls	r2, r3, #5
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	4413      	add	r3, r2
 800368e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003692:	461a      	mov	r2, r3
 8003694:	2310      	movs	r3, #16
 8003696:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	f003 0320 	and.w	r3, r3, #32
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d008      	beq.n	80036b4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	015a      	lsls	r2, r3, #5
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	4413      	add	r3, r2
 80036aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ae:	461a      	mov	r2, r3
 80036b0:	2320      	movs	r3, #32
 80036b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d009      	beq.n	80036d2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	015a      	lsls	r2, r3, #5
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	4413      	add	r3, r2
 80036c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ca:	461a      	mov	r2, r3
 80036cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036d0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	3301      	adds	r3, #1
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80036d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036da:	085b      	lsrs	r3, r3, #1
 80036dc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80036de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d199      	bne.n	8003618 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f003 fdac 	bl	8007246 <USB_ReadInterrupts>
 80036ee:	4603      	mov	r3, r0
 80036f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036f8:	f040 80c0 	bne.w	800387c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4618      	mov	r0, r3
 8003702:	f003 fdcd 	bl	80072a0 <USB_ReadDevAllInEpInterrupt>
 8003706:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800370c:	e0b2      	b.n	8003874 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800370e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 80a7 	beq.w	8003868 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003720:	b2d2      	uxtb	r2, r2
 8003722:	4611      	mov	r1, r2
 8003724:	4618      	mov	r0, r3
 8003726:	f003 fdf3 	bl	8007310 <USB_ReadDevInEPInterrupt>
 800372a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d057      	beq.n	80037e6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	f003 030f 	and.w	r3, r3, #15
 800373c:	2201      	movs	r2, #1
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800374a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	43db      	mvns	r3, r3
 8003750:	69f9      	ldr	r1, [r7, #28]
 8003752:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003756:	4013      	ands	r3, r2
 8003758:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	015a      	lsls	r2, r3, #5
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	4413      	add	r3, r2
 8003762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003766:	461a      	mov	r2, r3
 8003768:	2301      	movs	r3, #1
 800376a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d132      	bne.n	80037da <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003778:	4613      	mov	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	1a9b      	subs	r3, r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	3348      	adds	r3, #72	; 0x48
 8003784:	6819      	ldr	r1, [r3, #0]
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800378a:	4613      	mov	r3, r2
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	1a9b      	subs	r3, r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4403      	add	r3, r0
 8003794:	3344      	adds	r3, #68	; 0x44
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4419      	add	r1, r3
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800379e:	4613      	mov	r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	1a9b      	subs	r3, r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4403      	add	r3, r0
 80037a8:	3348      	adds	r3, #72	; 0x48
 80037aa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d113      	bne.n	80037da <HAL_PCD_IRQHandler+0x31c>
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b6:	4613      	mov	r3, r2
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	1a9b      	subs	r3, r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	440b      	add	r3, r1
 80037c0:	3350      	adds	r3, #80	; 0x50
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d108      	bne.n	80037da <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6818      	ldr	r0, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037d2:	461a      	mov	r2, r3
 80037d4:	2101      	movs	r1, #1
 80037d6:	f003 fdfb 	bl	80073d0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	4619      	mov	r1, r3
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f005 fd2c 	bl	800923e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	f003 0308 	and.w	r3, r3, #8
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d008      	beq.n	8003802 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80037f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037fc:	461a      	mov	r2, r3
 80037fe:	2308      	movs	r3, #8
 8003800:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	f003 0310 	and.w	r3, r3, #16
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	015a      	lsls	r2, r3, #5
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	4413      	add	r3, r2
 8003814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003818:	461a      	mov	r2, r3
 800381a:	2310      	movs	r3, #16
 800381c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003824:	2b00      	cmp	r3, #0
 8003826:	d008      	beq.n	800383a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	4413      	add	r3, r2
 8003830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003834:	461a      	mov	r2, r3
 8003836:	2340      	movs	r3, #64	; 0x40
 8003838:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d008      	beq.n	8003856 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	015a      	lsls	r2, r3, #5
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	4413      	add	r3, r2
 800384c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003850:	461a      	mov	r2, r3
 8003852:	2302      	movs	r3, #2
 8003854:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003860:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 fc1b 	bl	800409e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386a:	3301      	adds	r3, #1
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800386e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003870:	085b      	lsrs	r3, r3, #1
 8003872:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003876:	2b00      	cmp	r3, #0
 8003878:	f47f af49 	bne.w	800370e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f003 fce0 	bl	8007246 <USB_ReadInterrupts>
 8003886:	4603      	mov	r3, r0
 8003888:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800388c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003890:	d122      	bne.n	80038d8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	69fa      	ldr	r2, [r7, #28]
 800389c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038a0:	f023 0301 	bic.w	r3, r3, #1
 80038a4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d108      	bne.n	80038c2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80038b8:	2100      	movs	r1, #0
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 fe26 	bl	800450c <HAL_PCDEx_LPM_Callback>
 80038c0:	e002      	b.n	80038c8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f005 fd32 	bl	800932c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695a      	ldr	r2, [r3, #20]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80038d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4618      	mov	r0, r3
 80038de:	f003 fcb2 	bl	8007246 <USB_ReadInterrupts>
 80038e2:	4603      	mov	r3, r0
 80038e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038ec:	d112      	bne.n	8003914 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d102      	bne.n	8003904 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f005 fcee 	bl	80092e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	695a      	ldr	r2, [r3, #20]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003912:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4618      	mov	r0, r3
 800391a:	f003 fc94 	bl	8007246 <USB_ReadInterrupts>
 800391e:	4603      	mov	r3, r0
 8003920:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003928:	f040 80c7 	bne.w	8003aba <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	69fa      	ldr	r2, [r7, #28]
 8003936:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800393a:	f023 0301 	bic.w	r3, r3, #1
 800393e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2110      	movs	r1, #16
 8003946:	4618      	mov	r0, r3
 8003948:	f002 fd62 	bl	8006410 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800394c:	2300      	movs	r3, #0
 800394e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003950:	e056      	b.n	8003a00 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003954:	015a      	lsls	r2, r3, #5
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	4413      	add	r3, r2
 800395a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800395e:	461a      	mov	r2, r3
 8003960:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003964:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003968:	015a      	lsls	r2, r3, #5
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	4413      	add	r3, r2
 800396e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003976:	0151      	lsls	r1, r2, #5
 8003978:	69fa      	ldr	r2, [r7, #28]
 800397a:	440a      	add	r2, r1
 800397c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003980:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003984:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003988:	015a      	lsls	r2, r3, #5
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	4413      	add	r3, r2
 800398e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003996:	0151      	lsls	r1, r2, #5
 8003998:	69fa      	ldr	r2, [r7, #28]
 800399a:	440a      	add	r2, r1
 800399c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80039a4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80039a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a8:	015a      	lsls	r2, r3, #5
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	4413      	add	r3, r2
 80039ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b2:	461a      	mov	r2, r3
 80039b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039b8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80039ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039bc:	015a      	lsls	r2, r3, #5
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039ca:	0151      	lsls	r1, r2, #5
 80039cc:	69fa      	ldr	r2, [r7, #28]
 80039ce:	440a      	add	r2, r1
 80039d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80039d8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80039da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039ea:	0151      	lsls	r1, r2, #5
 80039ec:	69fa      	ldr	r2, [r7, #28]
 80039ee:	440a      	add	r2, r1
 80039f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80039f8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fc:	3301      	adds	r3, #1
 80039fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d3a3      	bcc.n	8003952 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	69fa      	ldr	r2, [r7, #28]
 8003a14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a18:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003a1c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d016      	beq.n	8003a54 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a30:	69fa      	ldr	r2, [r7, #28]
 8003a32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a36:	f043 030b 	orr.w	r3, r3, #11
 8003a3a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a46:	69fa      	ldr	r2, [r7, #28]
 8003a48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a4c:	f043 030b 	orr.w	r3, r3, #11
 8003a50:	6453      	str	r3, [r2, #68]	; 0x44
 8003a52:	e015      	b.n	8003a80 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	69fa      	ldr	r2, [r7, #28]
 8003a5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a62:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a66:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003a6a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	69fa      	ldr	r2, [r7, #28]
 8003a76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a7a:	f043 030b 	orr.w	r3, r3, #11
 8003a7e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	69fa      	ldr	r2, [r7, #28]
 8003a8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a8e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003a92:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6818      	ldr	r0, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	f003 fc93 	bl	80073d0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	695a      	ldr	r2, [r3, #20]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003ab8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f003 fbc1 	bl	8007246 <USB_ReadInterrupts>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ace:	d124      	bne.n	8003b1a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f003 fc57 	bl	8007388 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f002 fcf7 	bl	80064d2 <USB_GetDevSpeed>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681c      	ldr	r4, [r3, #0]
 8003af0:	f001 f944 	bl	8004d7c <HAL_RCC_GetHCLKFreq>
 8003af4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	461a      	mov	r2, r3
 8003afe:	4620      	mov	r0, r4
 8003b00:	f002 fa34 	bl	8005f6c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f005 fbc2 	bl	800928e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695a      	ldr	r2, [r3, #20]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003b18:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f003 fb91 	bl	8007246 <USB_ReadInterrupts>
 8003b24:	4603      	mov	r3, r0
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b08      	cmp	r3, #8
 8003b2c:	d10a      	bne.n	8003b44 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f005 fb9f 	bl	8009272 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695a      	ldr	r2, [r3, #20]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f002 0208 	and.w	r2, r2, #8
 8003b42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f003 fb7c 	bl	8007246 <USB_ReadInterrupts>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b58:	d10f      	bne.n	8003b7a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	4619      	mov	r1, r3
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f005 fc01 	bl	800936c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	695a      	ldr	r2, [r3, #20]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003b78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f003 fb61 	bl	8007246 <USB_ReadInterrupts>
 8003b84:	4603      	mov	r3, r0
 8003b86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b8e:	d10f      	bne.n	8003bb0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	4619      	mov	r1, r3
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f005 fbd4 	bl	8009348 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695a      	ldr	r2, [r3, #20]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003bae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f003 fb46 	bl	8007246 <USB_ReadInterrupts>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc4:	d10a      	bne.n	8003bdc <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f005 fbe2 	bl	8009390 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695a      	ldr	r2, [r3, #20]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003bda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f003 fb30 	bl	8007246 <USB_ReadInterrupts>
 8003be6:	4603      	mov	r3, r0
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b04      	cmp	r3, #4
 8003bee:	d115      	bne.n	8003c1c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f005 fbd2 	bl	80093ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6859      	ldr	r1, [r3, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	605a      	str	r2, [r3, #4]
 8003c18:	e000      	b.n	8003c1c <HAL_PCD_IRQHandler+0x75e>
      return;
 8003c1a:	bf00      	nop
    }
  }
}
 8003c1c:	3734      	adds	r7, #52	; 0x34
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd90      	pop	{r4, r7, pc}

08003c22 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b082      	sub	sp, #8
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d101      	bne.n	8003c3c <HAL_PCD_SetAddress+0x1a>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e013      	b.n	8003c64 <HAL_PCD_SetAddress+0x42>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	78fa      	ldrb	r2, [r7, #3]
 8003c48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	78fa      	ldrb	r2, [r7, #3]
 8003c52:	4611      	mov	r1, r2
 8003c54:	4618      	mov	r0, r3
 8003c56:	f003 fa8e 	bl	8007176 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3708      	adds	r7, #8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	4608      	mov	r0, r1
 8003c76:	4611      	mov	r1, r2
 8003c78:	461a      	mov	r2, r3
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	70fb      	strb	r3, [r7, #3]
 8003c7e:	460b      	mov	r3, r1
 8003c80:	803b      	strh	r3, [r7, #0]
 8003c82:	4613      	mov	r3, r2
 8003c84:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	da0f      	bge.n	8003cb2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c92:	78fb      	ldrb	r3, [r7, #3]
 8003c94:	f003 020f 	and.w	r2, r3, #15
 8003c98:	4613      	mov	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	1a9b      	subs	r3, r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	3338      	adds	r3, #56	; 0x38
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2201      	movs	r2, #1
 8003cae:	705a      	strb	r2, [r3, #1]
 8003cb0:	e00f      	b.n	8003cd2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cb2:	78fb      	ldrb	r3, [r7, #3]
 8003cb4:	f003 020f 	and.w	r2, r3, #15
 8003cb8:	4613      	mov	r3, r2
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	3304      	adds	r3, #4
 8003cca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003cd2:	78fb      	ldrb	r3, [r7, #3]
 8003cd4:	f003 030f 	and.w	r3, r3, #15
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003cde:	883a      	ldrh	r2, [r7, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	78ba      	ldrb	r2, [r7, #2]
 8003ce8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	785b      	ldrb	r3, [r3, #1]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d004      	beq.n	8003cfc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003cfc:	78bb      	ldrb	r3, [r7, #2]
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d102      	bne.n	8003d08 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d101      	bne.n	8003d16 <HAL_PCD_EP_Open+0xaa>
 8003d12:	2302      	movs	r3, #2
 8003d14:	e00e      	b.n	8003d34 <HAL_PCD_EP_Open+0xc8>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68f9      	ldr	r1, [r7, #12]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f002 fbf9 	bl	800651c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003d32:	7afb      	ldrb	r3, [r7, #11]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	460b      	mov	r3, r1
 8003d46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	da0f      	bge.n	8003d70 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d50:	78fb      	ldrb	r3, [r7, #3]
 8003d52:	f003 020f 	and.w	r2, r3, #15
 8003d56:	4613      	mov	r3, r2
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	3338      	adds	r3, #56	; 0x38
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	4413      	add	r3, r2
 8003d64:	3304      	adds	r3, #4
 8003d66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	705a      	strb	r2, [r3, #1]
 8003d6e:	e00f      	b.n	8003d90 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d70:	78fb      	ldrb	r3, [r7, #3]
 8003d72:	f003 020f 	and.w	r2, r3, #15
 8003d76:	4613      	mov	r3, r2
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	1a9b      	subs	r3, r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	4413      	add	r3, r2
 8003d86:	3304      	adds	r3, #4
 8003d88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003d90:	78fb      	ldrb	r3, [r7, #3]
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d101      	bne.n	8003daa <HAL_PCD_EP_Close+0x6e>
 8003da6:	2302      	movs	r3, #2
 8003da8:	e00e      	b.n	8003dc8 <HAL_PCD_EP_Close+0x8c>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68f9      	ldr	r1, [r7, #12]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f002 fc37 	bl	800662c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	607a      	str	r2, [r7, #4]
 8003dda:	603b      	str	r3, [r7, #0]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003de0:	7afb      	ldrb	r3, [r7, #11]
 8003de2:	f003 020f 	and.w	r2, r3, #15
 8003de6:	4613      	mov	r3, r2
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	1a9b      	subs	r3, r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	4413      	add	r3, r2
 8003df6:	3304      	adds	r3, #4
 8003df8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e12:	7afb      	ldrb	r3, [r7, #11]
 8003e14:	f003 030f 	and.w	r3, r3, #15
 8003e18:	b2da      	uxtb	r2, r3
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d102      	bne.n	8003e2c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e2c:	7afb      	ldrb	r3, [r7, #11]
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d109      	bne.n	8003e4a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6818      	ldr	r0, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	461a      	mov	r2, r3
 8003e42:	6979      	ldr	r1, [r7, #20]
 8003e44:	f002 ff12 	bl	8006c6c <USB_EP0StartXfer>
 8003e48:	e008      	b.n	8003e5c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6818      	ldr	r0, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	461a      	mov	r2, r3
 8003e56:	6979      	ldr	r1, [r7, #20]
 8003e58:	f002 fcc4 	bl	80067e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3718      	adds	r7, #24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
 8003e6e:	460b      	mov	r3, r1
 8003e70:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003e72:	78fb      	ldrb	r3, [r7, #3]
 8003e74:	f003 020f 	and.w	r2, r3, #15
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	1a9b      	subs	r3, r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	440b      	add	r3, r1
 8003e84:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003e88:	681b      	ldr	r3, [r3, #0]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b086      	sub	sp, #24
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	60f8      	str	r0, [r7, #12]
 8003e9e:	607a      	str	r2, [r7, #4]
 8003ea0:	603b      	str	r3, [r7, #0]
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ea6:	7afb      	ldrb	r3, [r7, #11]
 8003ea8:	f003 020f 	and.w	r2, r3, #15
 8003eac:	4613      	mov	r3, r2
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	1a9b      	subs	r3, r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	3338      	adds	r3, #56	; 0x38
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4413      	add	r3, r2
 8003eba:	3304      	adds	r3, #4
 8003ebc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ed6:	7afb      	ldrb	r3, [r7, #11]
 8003ed8:	f003 030f 	and.w	r3, r3, #15
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d102      	bne.n	8003ef0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ef0:	7afb      	ldrb	r3, [r7, #11]
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d109      	bne.n	8003f0e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6818      	ldr	r0, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	461a      	mov	r2, r3
 8003f06:	6979      	ldr	r1, [r7, #20]
 8003f08:	f002 feb0 	bl	8006c6c <USB_EP0StartXfer>
 8003f0c:	e008      	b.n	8003f20 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6818      	ldr	r0, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	461a      	mov	r2, r3
 8003f1a:	6979      	ldr	r1, [r7, #20]
 8003f1c:	f002 fc62 	bl	80067e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b084      	sub	sp, #16
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
 8003f32:	460b      	mov	r3, r1
 8003f34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003f36:	78fb      	ldrb	r3, [r7, #3]
 8003f38:	f003 020f 	and.w	r2, r3, #15
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d901      	bls.n	8003f48 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e050      	b.n	8003fea <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	da0f      	bge.n	8003f70 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f50:	78fb      	ldrb	r3, [r7, #3]
 8003f52:	f003 020f 	and.w	r2, r3, #15
 8003f56:	4613      	mov	r3, r2
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	1a9b      	subs	r3, r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	3338      	adds	r3, #56	; 0x38
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	4413      	add	r3, r2
 8003f64:	3304      	adds	r3, #4
 8003f66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	705a      	strb	r2, [r3, #1]
 8003f6e:	e00d      	b.n	8003f8c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f70:	78fa      	ldrb	r2, [r7, #3]
 8003f72:	4613      	mov	r3, r2
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	1a9b      	subs	r3, r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	4413      	add	r3, r2
 8003f82:	3304      	adds	r3, #4
 8003f84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f92:	78fb      	ldrb	r3, [r7, #3]
 8003f94:	f003 030f 	and.w	r3, r3, #15
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d101      	bne.n	8003fac <HAL_PCD_EP_SetStall+0x82>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e01e      	b.n	8003fea <HAL_PCD_EP_SetStall+0xc0>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68f9      	ldr	r1, [r7, #12]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f003 f807 	bl	8006fce <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003fc0:	78fb      	ldrb	r3, [r7, #3]
 8003fc2:	f003 030f 	and.w	r3, r3, #15
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10a      	bne.n	8003fe0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6818      	ldr	r0, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	b2d9      	uxtb	r1, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f003 f9f8 	bl	80073d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b084      	sub	sp, #16
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ffe:	78fb      	ldrb	r3, [r7, #3]
 8004000:	f003 020f 	and.w	r2, r3, #15
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	429a      	cmp	r2, r3
 800400a:	d901      	bls.n	8004010 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e042      	b.n	8004096 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004010:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004014:	2b00      	cmp	r3, #0
 8004016:	da0f      	bge.n	8004038 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004018:	78fb      	ldrb	r3, [r7, #3]
 800401a:	f003 020f 	and.w	r2, r3, #15
 800401e:	4613      	mov	r3, r2
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	1a9b      	subs	r3, r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	3338      	adds	r3, #56	; 0x38
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	4413      	add	r3, r2
 800402c:	3304      	adds	r3, #4
 800402e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2201      	movs	r2, #1
 8004034:	705a      	strb	r2, [r3, #1]
 8004036:	e00f      	b.n	8004058 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004038:	78fb      	ldrb	r3, [r7, #3]
 800403a:	f003 020f 	and.w	r2, r3, #15
 800403e:	4613      	mov	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	1a9b      	subs	r3, r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	4413      	add	r3, r2
 800404e:	3304      	adds	r3, #4
 8004050:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800405e:	78fb      	ldrb	r3, [r7, #3]
 8004060:	f003 030f 	and.w	r3, r3, #15
 8004064:	b2da      	uxtb	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_PCD_EP_ClrStall+0x86>
 8004074:	2302      	movs	r3, #2
 8004076:	e00e      	b.n	8004096 <HAL_PCD_EP_ClrStall+0xa4>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68f9      	ldr	r1, [r7, #12]
 8004086:	4618      	mov	r0, r3
 8004088:	f003 f80f 	bl	80070aa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b08a      	sub	sp, #40	; 0x28
 80040a2:	af02      	add	r7, sp, #8
 80040a4:	6078      	str	r0, [r7, #4]
 80040a6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	4613      	mov	r3, r2
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	1a9b      	subs	r3, r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	3338      	adds	r3, #56	; 0x38
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	4413      	add	r3, r2
 80040c2:	3304      	adds	r3, #4
 80040c4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	699a      	ldr	r2, [r3, #24]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d901      	bls.n	80040d6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e06c      	b.n	80041b0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	695a      	ldr	r2, [r3, #20]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	69fa      	ldr	r2, [r7, #28]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d902      	bls.n	80040f2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	3303      	adds	r3, #3
 80040f6:	089b      	lsrs	r3, r3, #2
 80040f8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040fa:	e02b      	b.n	8004154 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	695a      	ldr	r2, [r3, #20]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	69fa      	ldr	r2, [r7, #28]
 800410e:	429a      	cmp	r2, r3
 8004110:	d902      	bls.n	8004118 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	3303      	adds	r3, #3
 800411c:	089b      	lsrs	r3, r3, #2
 800411e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	68d9      	ldr	r1, [r3, #12]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	b2da      	uxtb	r2, r3
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004130:	b2db      	uxtb	r3, r3
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	4603      	mov	r3, r0
 8004136:	6978      	ldr	r0, [r7, #20]
 8004138:	f002 feeb 	bl	8006f12 <USB_WritePacket>

    ep->xfer_buff  += len;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	441a      	add	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	699a      	ldr	r2, [r3, #24]
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	441a      	add	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	4413      	add	r3, r2
 800415c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	b29b      	uxth	r3, r3
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	429a      	cmp	r2, r3
 8004168:	d809      	bhi.n	800417e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	699a      	ldr	r2, [r3, #24]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004172:	429a      	cmp	r2, r3
 8004174:	d203      	bcs.n	800417e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1be      	bne.n	80040fc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	695a      	ldr	r2, [r3, #20]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	429a      	cmp	r2, r3
 8004188:	d811      	bhi.n	80041ae <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	f003 030f 	and.w	r3, r3, #15
 8004190:	2201      	movs	r2, #1
 8004192:	fa02 f303 	lsl.w	r3, r2, r3
 8004196:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800419e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	43db      	mvns	r3, r3
 80041a4:	6939      	ldr	r1, [r7, #16]
 80041a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041aa:	4013      	ands	r3, r2
 80041ac:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3720      	adds	r7, #32
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	333c      	adds	r3, #60	; 0x3c
 80041d0:	3304      	adds	r3, #4
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	015a      	lsls	r2, r3, #5
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	4413      	add	r3, r2
 80041de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	f040 80a0 	bne.w	8004330 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d015      	beq.n	8004226 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	4a72      	ldr	r2, [pc, #456]	; (80043c8 <PCD_EP_OutXfrComplete_int+0x210>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	f240 80dd 	bls.w	80043be <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 80d7 	beq.w	80043be <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	015a      	lsls	r2, r3, #5
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	4413      	add	r3, r2
 8004218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800421c:	461a      	mov	r2, r3
 800421e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004222:	6093      	str	r3, [r2, #8]
 8004224:	e0cb      	b.n	80043be <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	f003 0320 	and.w	r3, r3, #32
 800422c:	2b00      	cmp	r3, #0
 800422e:	d009      	beq.n	8004244 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	015a      	lsls	r2, r3, #5
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	4413      	add	r3, r2
 8004238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800423c:	461a      	mov	r2, r3
 800423e:	2320      	movs	r3, #32
 8004240:	6093      	str	r3, [r2, #8]
 8004242:	e0bc      	b.n	80043be <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800424a:	2b00      	cmp	r3, #0
 800424c:	f040 80b7 	bne.w	80043be <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4a5d      	ldr	r2, [pc, #372]	; (80043c8 <PCD_EP_OutXfrComplete_int+0x210>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d90f      	bls.n	8004278 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00a      	beq.n	8004278 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	015a      	lsls	r2, r3, #5
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	4413      	add	r3, r2
 800426a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800426e:	461a      	mov	r2, r3
 8004270:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004274:	6093      	str	r3, [r2, #8]
 8004276:	e0a2      	b.n	80043be <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	4613      	mov	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	1a9b      	subs	r3, r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	440b      	add	r3, r1
 8004286:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800428a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	0159      	lsls	r1, r3, #5
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	440b      	add	r3, r1
 8004294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800429e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	4613      	mov	r3, r2
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	1a9b      	subs	r3, r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4403      	add	r3, r0
 80042ae:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80042b2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80042b4:	6879      	ldr	r1, [r7, #4]
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	4613      	mov	r3, r2
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	1a9b      	subs	r3, r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80042c6:	6819      	ldr	r1, [r3, #0]
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	4613      	mov	r3, r2
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	1a9b      	subs	r3, r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4403      	add	r3, r0
 80042d6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4419      	add	r1, r3
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	4613      	mov	r3, r2
 80042e4:	00db      	lsls	r3, r3, #3
 80042e6:	1a9b      	subs	r3, r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4403      	add	r3, r0
 80042ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80042f0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d114      	bne.n	8004322 <PCD_EP_OutXfrComplete_int+0x16a>
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	4613      	mov	r3, r2
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	1a9b      	subs	r3, r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d108      	bne.n	8004322 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6818      	ldr	r0, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800431a:	461a      	mov	r2, r3
 800431c:	2101      	movs	r1, #1
 800431e:	f003 f857 	bl	80073d0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	b2db      	uxtb	r3, r3
 8004326:	4619      	mov	r1, r3
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f004 ff6d 	bl	8009208 <HAL_PCD_DataOutStageCallback>
 800432e:	e046      	b.n	80043be <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4a26      	ldr	r2, [pc, #152]	; (80043cc <PCD_EP_OutXfrComplete_int+0x214>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d124      	bne.n	8004382 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00a      	beq.n	8004358 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	015a      	lsls	r2, r3, #5
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	4413      	add	r3, r2
 800434a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434e:	461a      	mov	r2, r3
 8004350:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004354:	6093      	str	r3, [r2, #8]
 8004356:	e032      	b.n	80043be <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f003 0320 	and.w	r3, r3, #32
 800435e:	2b00      	cmp	r3, #0
 8004360:	d008      	beq.n	8004374 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	4413      	add	r3, r2
 800436a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436e:	461a      	mov	r2, r3
 8004370:	2320      	movs	r3, #32
 8004372:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	b2db      	uxtb	r3, r3
 8004378:	4619      	mov	r1, r3
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f004 ff44 	bl	8009208 <HAL_PCD_DataOutStageCallback>
 8004380:	e01d      	b.n	80043be <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d114      	bne.n	80043b2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004388:	6879      	ldr	r1, [r7, #4]
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	4613      	mov	r3, r2
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	1a9b      	subs	r3, r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	440b      	add	r3, r1
 8004396:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d108      	bne.n	80043b2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6818      	ldr	r0, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80043aa:	461a      	mov	r2, r3
 80043ac:	2100      	movs	r1, #0
 80043ae:	f003 f80f 	bl	80073d0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	4619      	mov	r1, r3
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f004 ff25 	bl	8009208 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3718      	adds	r7, #24
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	4f54300a 	.word	0x4f54300a
 80043cc:	4f54310a 	.word	0x4f54310a

080043d0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	333c      	adds	r3, #60	; 0x3c
 80043e8:	3304      	adds	r3, #4
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	015a      	lsls	r2, r3, #5
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	4413      	add	r3, r2
 80043f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4a15      	ldr	r2, [pc, #84]	; (8004458 <PCD_EP_OutSetupPacket_int+0x88>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d90e      	bls.n	8004424 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800440c:	2b00      	cmp	r3, #0
 800440e:	d009      	beq.n	8004424 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441c:	461a      	mov	r2, r3
 800441e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004422:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f004 fedd 	bl	80091e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	4a0a      	ldr	r2, [pc, #40]	; (8004458 <PCD_EP_OutSetupPacket_int+0x88>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d90c      	bls.n	800444c <PCD_EP_OutSetupPacket_int+0x7c>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d108      	bne.n	800444c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6818      	ldr	r0, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004444:	461a      	mov	r2, r3
 8004446:	2101      	movs	r1, #1
 8004448:	f002 ffc2 	bl	80073d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3718      	adds	r7, #24
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	4f54300a 	.word	0x4f54300a

0800445c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	460b      	mov	r3, r1
 8004466:	70fb      	strb	r3, [r7, #3]
 8004468:	4613      	mov	r3, r2
 800446a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004474:	78fb      	ldrb	r3, [r7, #3]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d107      	bne.n	800448a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800447a:	883b      	ldrh	r3, [r7, #0]
 800447c:	0419      	lsls	r1, r3, #16
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	430a      	orrs	r2, r1
 8004486:	629a      	str	r2, [r3, #40]	; 0x28
 8004488:	e028      	b.n	80044dc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004490:	0c1b      	lsrs	r3, r3, #16
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	4413      	add	r3, r2
 8004496:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004498:	2300      	movs	r3, #0
 800449a:	73fb      	strb	r3, [r7, #15]
 800449c:	e00d      	b.n	80044ba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
 80044a4:	3340      	adds	r3, #64	; 0x40
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	0c1b      	lsrs	r3, r3, #16
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	4413      	add	r3, r2
 80044b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
 80044b6:	3301      	adds	r3, #1
 80044b8:	73fb      	strb	r3, [r7, #15]
 80044ba:	7bfa      	ldrb	r2, [r7, #15]
 80044bc:	78fb      	ldrb	r3, [r7, #3]
 80044be:	3b01      	subs	r3, #1
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d3ec      	bcc.n	800449e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80044c4:	883b      	ldrh	r3, [r7, #0]
 80044c6:	0418      	lsls	r0, r3, #16
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6819      	ldr	r1, [r3, #0]
 80044cc:	78fb      	ldrb	r3, [r7, #3]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	4302      	orrs	r2, r0
 80044d4:	3340      	adds	r3, #64	; 0x40
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	440b      	add	r3, r1
 80044da:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b083      	sub	sp, #12
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
 80044f2:	460b      	mov	r3, r1
 80044f4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	887a      	ldrh	r2, [r7, #2]
 80044fc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e25b      	b.n	80049ee <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d075      	beq.n	800462e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004542:	4ba3      	ldr	r3, [pc, #652]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 030c 	and.w	r3, r3, #12
 800454a:	2b04      	cmp	r3, #4
 800454c:	d00c      	beq.n	8004568 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800454e:	4ba0      	ldr	r3, [pc, #640]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004556:	2b08      	cmp	r3, #8
 8004558:	d112      	bne.n	8004580 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800455a:	4b9d      	ldr	r3, [pc, #628]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004562:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004566:	d10b      	bne.n	8004580 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004568:	4b99      	ldr	r3, [pc, #612]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d05b      	beq.n	800462c <HAL_RCC_OscConfig+0x108>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d157      	bne.n	800462c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e236      	b.n	80049ee <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004588:	d106      	bne.n	8004598 <HAL_RCC_OscConfig+0x74>
 800458a:	4b91      	ldr	r3, [pc, #580]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a90      	ldr	r2, [pc, #576]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 8004590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	e01d      	b.n	80045d4 <HAL_RCC_OscConfig+0xb0>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045a0:	d10c      	bne.n	80045bc <HAL_RCC_OscConfig+0x98>
 80045a2:	4b8b      	ldr	r3, [pc, #556]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a8a      	ldr	r2, [pc, #552]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 80045a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	4b88      	ldr	r3, [pc, #544]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a87      	ldr	r2, [pc, #540]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 80045b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b8:	6013      	str	r3, [r2, #0]
 80045ba:	e00b      	b.n	80045d4 <HAL_RCC_OscConfig+0xb0>
 80045bc:	4b84      	ldr	r3, [pc, #528]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a83      	ldr	r2, [pc, #524]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 80045c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045c6:	6013      	str	r3, [r2, #0]
 80045c8:	4b81      	ldr	r3, [pc, #516]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a80      	ldr	r2, [pc, #512]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 80045ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d013      	beq.n	8004604 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045dc:	f7fd fb54 	bl	8001c88 <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045e4:	f7fd fb50 	bl	8001c88 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b64      	cmp	r3, #100	; 0x64
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e1fb      	b.n	80049ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045f6:	4b76      	ldr	r3, [pc, #472]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0f0      	beq.n	80045e4 <HAL_RCC_OscConfig+0xc0>
 8004602:	e014      	b.n	800462e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004604:	f7fd fb40 	bl	8001c88 <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800460a:	e008      	b.n	800461e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800460c:	f7fd fb3c 	bl	8001c88 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b64      	cmp	r3, #100	; 0x64
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e1e7      	b.n	80049ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800461e:	4b6c      	ldr	r3, [pc, #432]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1f0      	bne.n	800460c <HAL_RCC_OscConfig+0xe8>
 800462a:	e000      	b.n	800462e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800462c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d063      	beq.n	8004702 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800463a:	4b65      	ldr	r3, [pc, #404]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 030c 	and.w	r3, r3, #12
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00b      	beq.n	800465e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004646:	4b62      	ldr	r3, [pc, #392]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800464e:	2b08      	cmp	r3, #8
 8004650:	d11c      	bne.n	800468c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004652:	4b5f      	ldr	r3, [pc, #380]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d116      	bne.n	800468c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800465e:	4b5c      	ldr	r3, [pc, #368]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d005      	beq.n	8004676 <HAL_RCC_OscConfig+0x152>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d001      	beq.n	8004676 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e1bb      	b.n	80049ee <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004676:	4b56      	ldr	r3, [pc, #344]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	4952      	ldr	r1, [pc, #328]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 8004686:	4313      	orrs	r3, r2
 8004688:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800468a:	e03a      	b.n	8004702 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d020      	beq.n	80046d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004694:	4b4f      	ldr	r3, [pc, #316]	; (80047d4 <HAL_RCC_OscConfig+0x2b0>)
 8004696:	2201      	movs	r2, #1
 8004698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469a:	f7fd faf5 	bl	8001c88 <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a0:	e008      	b.n	80046b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046a2:	f7fd faf1 	bl	8001c88 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e19c      	b.n	80049ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046b4:	4b46      	ldr	r3, [pc, #280]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d0f0      	beq.n	80046a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c0:	4b43      	ldr	r3, [pc, #268]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	00db      	lsls	r3, r3, #3
 80046ce:	4940      	ldr	r1, [pc, #256]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	600b      	str	r3, [r1, #0]
 80046d4:	e015      	b.n	8004702 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046d6:	4b3f      	ldr	r3, [pc, #252]	; (80047d4 <HAL_RCC_OscConfig+0x2b0>)
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046dc:	f7fd fad4 	bl	8001c88 <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046e4:	f7fd fad0 	bl	8001c88 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e17b      	b.n	80049ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046f6:	4b36      	ldr	r3, [pc, #216]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1f0      	bne.n	80046e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0308 	and.w	r3, r3, #8
 800470a:	2b00      	cmp	r3, #0
 800470c:	d030      	beq.n	8004770 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d016      	beq.n	8004744 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004716:	4b30      	ldr	r3, [pc, #192]	; (80047d8 <HAL_RCC_OscConfig+0x2b4>)
 8004718:	2201      	movs	r2, #1
 800471a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471c:	f7fd fab4 	bl	8001c88 <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004724:	f7fd fab0 	bl	8001c88 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e15b      	b.n	80049ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004736:	4b26      	ldr	r3, [pc, #152]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 8004738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d0f0      	beq.n	8004724 <HAL_RCC_OscConfig+0x200>
 8004742:	e015      	b.n	8004770 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004744:	4b24      	ldr	r3, [pc, #144]	; (80047d8 <HAL_RCC_OscConfig+0x2b4>)
 8004746:	2200      	movs	r2, #0
 8004748:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800474a:	f7fd fa9d 	bl	8001c88 <HAL_GetTick>
 800474e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004752:	f7fd fa99 	bl	8001c88 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e144      	b.n	80049ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004764:	4b1a      	ldr	r3, [pc, #104]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 8004766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1f0      	bne.n	8004752 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 80a0 	beq.w	80048be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800477e:	2300      	movs	r3, #0
 8004780:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004782:	4b13      	ldr	r3, [pc, #76]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10f      	bne.n	80047ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800478e:	2300      	movs	r3, #0
 8004790:	60bb      	str	r3, [r7, #8]
 8004792:	4b0f      	ldr	r3, [pc, #60]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	4a0e      	ldr	r2, [pc, #56]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 8004798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800479c:	6413      	str	r3, [r2, #64]	; 0x40
 800479e:	4b0c      	ldr	r3, [pc, #48]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a6:	60bb      	str	r3, [r7, #8]
 80047a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047aa:	2301      	movs	r3, #1
 80047ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ae:	4b0b      	ldr	r3, [pc, #44]	; (80047dc <HAL_RCC_OscConfig+0x2b8>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d121      	bne.n	80047fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047ba:	4b08      	ldr	r3, [pc, #32]	; (80047dc <HAL_RCC_OscConfig+0x2b8>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a07      	ldr	r2, [pc, #28]	; (80047dc <HAL_RCC_OscConfig+0x2b8>)
 80047c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047c6:	f7fd fa5f 	bl	8001c88 <HAL_GetTick>
 80047ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047cc:	e011      	b.n	80047f2 <HAL_RCC_OscConfig+0x2ce>
 80047ce:	bf00      	nop
 80047d0:	40023800 	.word	0x40023800
 80047d4:	42470000 	.word	0x42470000
 80047d8:	42470e80 	.word	0x42470e80
 80047dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e0:	f7fd fa52 	bl	8001c88 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e0fd      	b.n	80049ee <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f2:	4b81      	ldr	r3, [pc, #516]	; (80049f8 <HAL_RCC_OscConfig+0x4d4>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d0f0      	beq.n	80047e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d106      	bne.n	8004814 <HAL_RCC_OscConfig+0x2f0>
 8004806:	4b7d      	ldr	r3, [pc, #500]	; (80049fc <HAL_RCC_OscConfig+0x4d8>)
 8004808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480a:	4a7c      	ldr	r2, [pc, #496]	; (80049fc <HAL_RCC_OscConfig+0x4d8>)
 800480c:	f043 0301 	orr.w	r3, r3, #1
 8004810:	6713      	str	r3, [r2, #112]	; 0x70
 8004812:	e01c      	b.n	800484e <HAL_RCC_OscConfig+0x32a>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	2b05      	cmp	r3, #5
 800481a:	d10c      	bne.n	8004836 <HAL_RCC_OscConfig+0x312>
 800481c:	4b77      	ldr	r3, [pc, #476]	; (80049fc <HAL_RCC_OscConfig+0x4d8>)
 800481e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004820:	4a76      	ldr	r2, [pc, #472]	; (80049fc <HAL_RCC_OscConfig+0x4d8>)
 8004822:	f043 0304 	orr.w	r3, r3, #4
 8004826:	6713      	str	r3, [r2, #112]	; 0x70
 8004828:	4b74      	ldr	r3, [pc, #464]	; (80049fc <HAL_RCC_OscConfig+0x4d8>)
 800482a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482c:	4a73      	ldr	r2, [pc, #460]	; (80049fc <HAL_RCC_OscConfig+0x4d8>)
 800482e:	f043 0301 	orr.w	r3, r3, #1
 8004832:	6713      	str	r3, [r2, #112]	; 0x70
 8004834:	e00b      	b.n	800484e <HAL_RCC_OscConfig+0x32a>
 8004836:	4b71      	ldr	r3, [pc, #452]	; (80049fc <HAL_RCC_OscConfig+0x4d8>)
 8004838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483a:	4a70      	ldr	r2, [pc, #448]	; (80049fc <HAL_RCC_OscConfig+0x4d8>)
 800483c:	f023 0301 	bic.w	r3, r3, #1
 8004840:	6713      	str	r3, [r2, #112]	; 0x70
 8004842:	4b6e      	ldr	r3, [pc, #440]	; (80049fc <HAL_RCC_OscConfig+0x4d8>)
 8004844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004846:	4a6d      	ldr	r2, [pc, #436]	; (80049fc <HAL_RCC_OscConfig+0x4d8>)
 8004848:	f023 0304 	bic.w	r3, r3, #4
 800484c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d015      	beq.n	8004882 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004856:	f7fd fa17 	bl	8001c88 <HAL_GetTick>
 800485a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800485c:	e00a      	b.n	8004874 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800485e:	f7fd fa13 	bl	8001c88 <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	f241 3288 	movw	r2, #5000	; 0x1388
 800486c:	4293      	cmp	r3, r2
 800486e:	d901      	bls.n	8004874 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e0bc      	b.n	80049ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004874:	4b61      	ldr	r3, [pc, #388]	; (80049fc <HAL_RCC_OscConfig+0x4d8>)
 8004876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004878:	f003 0302 	and.w	r3, r3, #2
 800487c:	2b00      	cmp	r3, #0
 800487e:	d0ee      	beq.n	800485e <HAL_RCC_OscConfig+0x33a>
 8004880:	e014      	b.n	80048ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004882:	f7fd fa01 	bl	8001c88 <HAL_GetTick>
 8004886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004888:	e00a      	b.n	80048a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800488a:	f7fd f9fd 	bl	8001c88 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	f241 3288 	movw	r2, #5000	; 0x1388
 8004898:	4293      	cmp	r3, r2
 800489a:	d901      	bls.n	80048a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e0a6      	b.n	80049ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048a0:	4b56      	ldr	r3, [pc, #344]	; (80049fc <HAL_RCC_OscConfig+0x4d8>)
 80048a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1ee      	bne.n	800488a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048ac:	7dfb      	ldrb	r3, [r7, #23]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d105      	bne.n	80048be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048b2:	4b52      	ldr	r3, [pc, #328]	; (80049fc <HAL_RCC_OscConfig+0x4d8>)
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	4a51      	ldr	r2, [pc, #324]	; (80049fc <HAL_RCC_OscConfig+0x4d8>)
 80048b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f000 8092 	beq.w	80049ec <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048c8:	4b4c      	ldr	r3, [pc, #304]	; (80049fc <HAL_RCC_OscConfig+0x4d8>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f003 030c 	and.w	r3, r3, #12
 80048d0:	2b08      	cmp	r3, #8
 80048d2:	d05c      	beq.n	800498e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d141      	bne.n	8004960 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048dc:	4b48      	ldr	r3, [pc, #288]	; (8004a00 <HAL_RCC_OscConfig+0x4dc>)
 80048de:	2200      	movs	r2, #0
 80048e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e2:	f7fd f9d1 	bl	8001c88 <HAL_GetTick>
 80048e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e8:	e008      	b.n	80048fc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048ea:	f7fd f9cd 	bl	8001c88 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e078      	b.n	80049ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048fc:	4b3f      	ldr	r3, [pc, #252]	; (80049fc <HAL_RCC_OscConfig+0x4d8>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1f0      	bne.n	80048ea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	69da      	ldr	r2, [r3, #28]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	431a      	orrs	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	019b      	lsls	r3, r3, #6
 8004918:	431a      	orrs	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491e:	085b      	lsrs	r3, r3, #1
 8004920:	3b01      	subs	r3, #1
 8004922:	041b      	lsls	r3, r3, #16
 8004924:	431a      	orrs	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492a:	061b      	lsls	r3, r3, #24
 800492c:	4933      	ldr	r1, [pc, #204]	; (80049fc <HAL_RCC_OscConfig+0x4d8>)
 800492e:	4313      	orrs	r3, r2
 8004930:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004932:	4b33      	ldr	r3, [pc, #204]	; (8004a00 <HAL_RCC_OscConfig+0x4dc>)
 8004934:	2201      	movs	r2, #1
 8004936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004938:	f7fd f9a6 	bl	8001c88 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004940:	f7fd f9a2 	bl	8001c88 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e04d      	b.n	80049ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004952:	4b2a      	ldr	r3, [pc, #168]	; (80049fc <HAL_RCC_OscConfig+0x4d8>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0f0      	beq.n	8004940 <HAL_RCC_OscConfig+0x41c>
 800495e:	e045      	b.n	80049ec <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004960:	4b27      	ldr	r3, [pc, #156]	; (8004a00 <HAL_RCC_OscConfig+0x4dc>)
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004966:	f7fd f98f 	bl	8001c88 <HAL_GetTick>
 800496a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800496c:	e008      	b.n	8004980 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800496e:	f7fd f98b 	bl	8001c88 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d901      	bls.n	8004980 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e036      	b.n	80049ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004980:	4b1e      	ldr	r3, [pc, #120]	; (80049fc <HAL_RCC_OscConfig+0x4d8>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1f0      	bne.n	800496e <HAL_RCC_OscConfig+0x44a>
 800498c:	e02e      	b.n	80049ec <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d101      	bne.n	800499a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e029      	b.n	80049ee <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800499a:	4b18      	ldr	r3, [pc, #96]	; (80049fc <HAL_RCC_OscConfig+0x4d8>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d11c      	bne.n	80049e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d115      	bne.n	80049e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049c2:	4013      	ands	r3, r2
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d10d      	bne.n	80049e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d106      	bne.n	80049e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d001      	beq.n	80049ec <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e000      	b.n	80049ee <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	40007000 	.word	0x40007000
 80049fc:	40023800 	.word	0x40023800
 8004a00:	42470060 	.word	0x42470060

08004a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e0cc      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a18:	4b68      	ldr	r3, [pc, #416]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 030f 	and.w	r3, r3, #15
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d90c      	bls.n	8004a40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a26:	4b65      	ldr	r3, [pc, #404]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a2e:	4b63      	ldr	r3, [pc, #396]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 030f 	and.w	r3, r3, #15
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d001      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e0b8      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d020      	beq.n	8004a8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0304 	and.w	r3, r3, #4
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d005      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a58:	4b59      	ldr	r3, [pc, #356]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	4a58      	ldr	r2, [pc, #352]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0308 	and.w	r3, r3, #8
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d005      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a70:	4b53      	ldr	r3, [pc, #332]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	4a52      	ldr	r2, [pc, #328]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a7c:	4b50      	ldr	r3, [pc, #320]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	494d      	ldr	r1, [pc, #308]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d044      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d107      	bne.n	8004ab2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aa2:	4b47      	ldr	r3, [pc, #284]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d119      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e07f      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d003      	beq.n	8004ac2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	d107      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ac2:	4b3f      	ldr	r3, [pc, #252]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d109      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e06f      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad2:	4b3b      	ldr	r3, [pc, #236]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e067      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ae2:	4b37      	ldr	r3, [pc, #220]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f023 0203 	bic.w	r2, r3, #3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	4934      	ldr	r1, [pc, #208]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004af4:	f7fd f8c8 	bl	8001c88 <HAL_GetTick>
 8004af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afa:	e00a      	b.n	8004b12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004afc:	f7fd f8c4 	bl	8001c88 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e04f      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b12:	4b2b      	ldr	r3, [pc, #172]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 020c 	and.w	r2, r3, #12
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d1eb      	bne.n	8004afc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b24:	4b25      	ldr	r3, [pc, #148]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 030f 	and.w	r3, r3, #15
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d20c      	bcs.n	8004b4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b32:	4b22      	ldr	r3, [pc, #136]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	b2d2      	uxtb	r2, r2
 8004b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b3a:	4b20      	ldr	r3, [pc, #128]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 030f 	and.w	r3, r3, #15
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d001      	beq.n	8004b4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e032      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d008      	beq.n	8004b6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b58:	4b19      	ldr	r3, [pc, #100]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	4916      	ldr	r1, [pc, #88]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0308 	and.w	r3, r3, #8
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d009      	beq.n	8004b8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b76:	4b12      	ldr	r3, [pc, #72]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	490e      	ldr	r1, [pc, #56]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b8a:	f000 f821 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 8004b8e:	4601      	mov	r1, r0
 8004b90:	4b0b      	ldr	r3, [pc, #44]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	091b      	lsrs	r3, r3, #4
 8004b96:	f003 030f 	and.w	r3, r3, #15
 8004b9a:	4a0a      	ldr	r2, [pc, #40]	; (8004bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b9c:	5cd3      	ldrb	r3, [r2, r3]
 8004b9e:	fa21 f303 	lsr.w	r3, r1, r3
 8004ba2:	4a09      	ldr	r2, [pc, #36]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ba6:	4b09      	ldr	r3, [pc, #36]	; (8004bcc <HAL_RCC_ClockConfig+0x1c8>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7fd f828 	bl	8001c00 <HAL_InitTick>

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	40023c00 	.word	0x40023c00
 8004bc0:	40023800 	.word	0x40023800
 8004bc4:	0800b88c 	.word	0x0800b88c
 8004bc8:	20000000 	.word	0x20000000
 8004bcc:	20000004 	.word	0x20000004

08004bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	607b      	str	r3, [r7, #4]
 8004bda:	2300      	movs	r3, #0
 8004bdc:	60fb      	str	r3, [r7, #12]
 8004bde:	2300      	movs	r3, #0
 8004be0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004be2:	2300      	movs	r3, #0
 8004be4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004be6:	4b63      	ldr	r3, [pc, #396]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f003 030c 	and.w	r3, r3, #12
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	d007      	beq.n	8004c02 <HAL_RCC_GetSysClockFreq+0x32>
 8004bf2:	2b08      	cmp	r3, #8
 8004bf4:	d008      	beq.n	8004c08 <HAL_RCC_GetSysClockFreq+0x38>
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f040 80b4 	bne.w	8004d64 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bfc:	4b5e      	ldr	r3, [pc, #376]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004bfe:	60bb      	str	r3, [r7, #8]
       break;
 8004c00:	e0b3      	b.n	8004d6a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c02:	4b5d      	ldr	r3, [pc, #372]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004c04:	60bb      	str	r3, [r7, #8]
      break;
 8004c06:	e0b0      	b.n	8004d6a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c08:	4b5a      	ldr	r3, [pc, #360]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c10:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c12:	4b58      	ldr	r3, [pc, #352]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d04a      	beq.n	8004cb4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c1e:	4b55      	ldr	r3, [pc, #340]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	099b      	lsrs	r3, r3, #6
 8004c24:	f04f 0400 	mov.w	r4, #0
 8004c28:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c2c:	f04f 0200 	mov.w	r2, #0
 8004c30:	ea03 0501 	and.w	r5, r3, r1
 8004c34:	ea04 0602 	and.w	r6, r4, r2
 8004c38:	4629      	mov	r1, r5
 8004c3a:	4632      	mov	r2, r6
 8004c3c:	f04f 0300 	mov.w	r3, #0
 8004c40:	f04f 0400 	mov.w	r4, #0
 8004c44:	0154      	lsls	r4, r2, #5
 8004c46:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004c4a:	014b      	lsls	r3, r1, #5
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	4622      	mov	r2, r4
 8004c50:	1b49      	subs	r1, r1, r5
 8004c52:	eb62 0206 	sbc.w	r2, r2, r6
 8004c56:	f04f 0300 	mov.w	r3, #0
 8004c5a:	f04f 0400 	mov.w	r4, #0
 8004c5e:	0194      	lsls	r4, r2, #6
 8004c60:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c64:	018b      	lsls	r3, r1, #6
 8004c66:	1a5b      	subs	r3, r3, r1
 8004c68:	eb64 0402 	sbc.w	r4, r4, r2
 8004c6c:	f04f 0100 	mov.w	r1, #0
 8004c70:	f04f 0200 	mov.w	r2, #0
 8004c74:	00e2      	lsls	r2, r4, #3
 8004c76:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c7a:	00d9      	lsls	r1, r3, #3
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	4614      	mov	r4, r2
 8004c80:	195b      	adds	r3, r3, r5
 8004c82:	eb44 0406 	adc.w	r4, r4, r6
 8004c86:	f04f 0100 	mov.w	r1, #0
 8004c8a:	f04f 0200 	mov.w	r2, #0
 8004c8e:	02a2      	lsls	r2, r4, #10
 8004c90:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004c94:	0299      	lsls	r1, r3, #10
 8004c96:	460b      	mov	r3, r1
 8004c98:	4614      	mov	r4, r2
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	4621      	mov	r1, r4
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f04f 0400 	mov.w	r4, #0
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	4623      	mov	r3, r4
 8004ca8:	f7fb ff7e 	bl	8000ba8 <__aeabi_uldivmod>
 8004cac:	4603      	mov	r3, r0
 8004cae:	460c      	mov	r4, r1
 8004cb0:	60fb      	str	r3, [r7, #12]
 8004cb2:	e049      	b.n	8004d48 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cb4:	4b2f      	ldr	r3, [pc, #188]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	099b      	lsrs	r3, r3, #6
 8004cba:	f04f 0400 	mov.w	r4, #0
 8004cbe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004cc2:	f04f 0200 	mov.w	r2, #0
 8004cc6:	ea03 0501 	and.w	r5, r3, r1
 8004cca:	ea04 0602 	and.w	r6, r4, r2
 8004cce:	4629      	mov	r1, r5
 8004cd0:	4632      	mov	r2, r6
 8004cd2:	f04f 0300 	mov.w	r3, #0
 8004cd6:	f04f 0400 	mov.w	r4, #0
 8004cda:	0154      	lsls	r4, r2, #5
 8004cdc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004ce0:	014b      	lsls	r3, r1, #5
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	4622      	mov	r2, r4
 8004ce6:	1b49      	subs	r1, r1, r5
 8004ce8:	eb62 0206 	sbc.w	r2, r2, r6
 8004cec:	f04f 0300 	mov.w	r3, #0
 8004cf0:	f04f 0400 	mov.w	r4, #0
 8004cf4:	0194      	lsls	r4, r2, #6
 8004cf6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004cfa:	018b      	lsls	r3, r1, #6
 8004cfc:	1a5b      	subs	r3, r3, r1
 8004cfe:	eb64 0402 	sbc.w	r4, r4, r2
 8004d02:	f04f 0100 	mov.w	r1, #0
 8004d06:	f04f 0200 	mov.w	r2, #0
 8004d0a:	00e2      	lsls	r2, r4, #3
 8004d0c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004d10:	00d9      	lsls	r1, r3, #3
 8004d12:	460b      	mov	r3, r1
 8004d14:	4614      	mov	r4, r2
 8004d16:	195b      	adds	r3, r3, r5
 8004d18:	eb44 0406 	adc.w	r4, r4, r6
 8004d1c:	f04f 0100 	mov.w	r1, #0
 8004d20:	f04f 0200 	mov.w	r2, #0
 8004d24:	02a2      	lsls	r2, r4, #10
 8004d26:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004d2a:	0299      	lsls	r1, r3, #10
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	4614      	mov	r4, r2
 8004d30:	4618      	mov	r0, r3
 8004d32:	4621      	mov	r1, r4
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f04f 0400 	mov.w	r4, #0
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	4623      	mov	r3, r4
 8004d3e:	f7fb ff33 	bl	8000ba8 <__aeabi_uldivmod>
 8004d42:	4603      	mov	r3, r0
 8004d44:	460c      	mov	r4, r1
 8004d46:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d48:	4b0a      	ldr	r3, [pc, #40]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	0c1b      	lsrs	r3, r3, #16
 8004d4e:	f003 0303 	and.w	r3, r3, #3
 8004d52:	3301      	adds	r3, #1
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d60:	60bb      	str	r3, [r7, #8]
      break;
 8004d62:	e002      	b.n	8004d6a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d64:	4b04      	ldr	r3, [pc, #16]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004d66:	60bb      	str	r3, [r7, #8]
      break;
 8004d68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d74:	40023800 	.word	0x40023800
 8004d78:	00f42400 	.word	0x00f42400

08004d7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d80:	4b03      	ldr	r3, [pc, #12]	; (8004d90 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d82:	681b      	ldr	r3, [r3, #0]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	20000000 	.word	0x20000000

08004d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d98:	f7ff fff0 	bl	8004d7c <HAL_RCC_GetHCLKFreq>
 8004d9c:	4601      	mov	r1, r0
 8004d9e:	4b05      	ldr	r3, [pc, #20]	; (8004db4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	0a9b      	lsrs	r3, r3, #10
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	4a03      	ldr	r2, [pc, #12]	; (8004db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004daa:	5cd3      	ldrb	r3, [r2, r3]
 8004dac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	40023800 	.word	0x40023800
 8004db8:	0800b89c 	.word	0x0800b89c

08004dbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e01d      	b.n	8004e0a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d106      	bne.n	8004de8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f7fc fdae 	bl	8001944 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	3304      	adds	r3, #4
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4610      	mov	r0, r2
 8004dfc:	f000 fc24 	bl	8005648 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3708      	adds	r7, #8
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b085      	sub	sp, #20
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f003 0307 	and.w	r3, r3, #7
 8004e2c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2b06      	cmp	r3, #6
 8004e32:	d007      	beq.n	8004e44 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f042 0201 	orr.w	r2, r2, #1
 8004e42:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3714      	adds	r7, #20
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b085      	sub	sp, #20
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68da      	ldr	r2, [r3, #12]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f042 0201 	orr.w	r2, r2, #1
 8004e70:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2b06      	cmp	r3, #6
 8004e82:	d007      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f042 0201 	orr.w	r2, r2, #1
 8004e92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b082      	sub	sp, #8
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e01d      	b.n	8004ef0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d106      	bne.n	8004ece <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f7fc fcab 	bl	8001824 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2202      	movs	r2, #2
 8004ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	3304      	adds	r3, #4
 8004ede:	4619      	mov	r1, r3
 8004ee0:	4610      	mov	r0, r2
 8004ee2:	f000 fbb1 	bl	8005648 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2201      	movs	r2, #1
 8004f08:	6839      	ldr	r1, [r7, #0]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 ff16 	bl	8005d3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a15      	ldr	r2, [pc, #84]	; (8004f6c <HAL_TIM_PWM_Start+0x74>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d004      	beq.n	8004f24 <HAL_TIM_PWM_Start+0x2c>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a14      	ldr	r2, [pc, #80]	; (8004f70 <HAL_TIM_PWM_Start+0x78>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d101      	bne.n	8004f28 <HAL_TIM_PWM_Start+0x30>
 8004f24:	2301      	movs	r3, #1
 8004f26:	e000      	b.n	8004f2a <HAL_TIM_PWM_Start+0x32>
 8004f28:	2300      	movs	r3, #0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d007      	beq.n	8004f3e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f003 0307 	and.w	r3, r3, #7
 8004f48:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2b06      	cmp	r3, #6
 8004f4e:	d007      	beq.n	8004f60 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0201 	orr.w	r2, r2, #1
 8004f5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	40010000 	.word	0x40010000
 8004f70:	40010400 	.word	0x40010400

08004f74 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e01d      	b.n	8004fc2 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d106      	bne.n	8004fa0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7fc fc62 	bl	8001864 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	3304      	adds	r3, #4
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	4610      	mov	r0, r2
 8004fb4:	f000 fb48 	bl	8005648 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
	...

08004fcc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b0c      	cmp	r3, #12
 8004fda:	d841      	bhi.n	8005060 <HAL_TIM_IC_Start_IT+0x94>
 8004fdc:	a201      	add	r2, pc, #4	; (adr r2, 8004fe4 <HAL_TIM_IC_Start_IT+0x18>)
 8004fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe2:	bf00      	nop
 8004fe4:	08005019 	.word	0x08005019
 8004fe8:	08005061 	.word	0x08005061
 8004fec:	08005061 	.word	0x08005061
 8004ff0:	08005061 	.word	0x08005061
 8004ff4:	0800502b 	.word	0x0800502b
 8004ff8:	08005061 	.word	0x08005061
 8004ffc:	08005061 	.word	0x08005061
 8005000:	08005061 	.word	0x08005061
 8005004:	0800503d 	.word	0x0800503d
 8005008:	08005061 	.word	0x08005061
 800500c:	08005061 	.word	0x08005061
 8005010:	08005061 	.word	0x08005061
 8005014:	0800504f 	.word	0x0800504f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f042 0202 	orr.w	r2, r2, #2
 8005026:	60da      	str	r2, [r3, #12]
      break;
 8005028:	e01b      	b.n	8005062 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68da      	ldr	r2, [r3, #12]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f042 0204 	orr.w	r2, r2, #4
 8005038:	60da      	str	r2, [r3, #12]
      break;
 800503a:	e012      	b.n	8005062 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68da      	ldr	r2, [r3, #12]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0208 	orr.w	r2, r2, #8
 800504a:	60da      	str	r2, [r3, #12]
      break;
 800504c:	e009      	b.n	8005062 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68da      	ldr	r2, [r3, #12]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f042 0210 	orr.w	r2, r2, #16
 800505c:	60da      	str	r2, [r3, #12]
      break;
 800505e:	e000      	b.n	8005062 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8005060:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2201      	movs	r2, #1
 8005068:	6839      	ldr	r1, [r7, #0]
 800506a:	4618      	mov	r0, r3
 800506c:	f000 fe66 	bl	8005d3c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 0307 	and.w	r3, r3, #7
 800507a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2b06      	cmp	r3, #6
 8005080:	d007      	beq.n	8005092 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f042 0201 	orr.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d122      	bne.n	80050f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d11b      	bne.n	80050f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f06f 0202 	mvn.w	r2, #2
 80050c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	f003 0303 	and.w	r3, r3, #3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d003      	beq.n	80050e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7fc fabc 	bl	800165c <HAL_TIM_IC_CaptureCallback>
 80050e4:	e005      	b.n	80050f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fa90 	bl	800560c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 fa97 	bl	8005620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	f003 0304 	and.w	r3, r3, #4
 8005102:	2b04      	cmp	r3, #4
 8005104:	d122      	bne.n	800514c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f003 0304 	and.w	r3, r3, #4
 8005110:	2b04      	cmp	r3, #4
 8005112:	d11b      	bne.n	800514c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f06f 0204 	mvn.w	r2, #4
 800511c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2202      	movs	r2, #2
 8005122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7fc fa92 	bl	800165c <HAL_TIM_IC_CaptureCallback>
 8005138:	e005      	b.n	8005146 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 fa66 	bl	800560c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 fa6d 	bl	8005620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	f003 0308 	and.w	r3, r3, #8
 8005156:	2b08      	cmp	r3, #8
 8005158:	d122      	bne.n	80051a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f003 0308 	and.w	r3, r3, #8
 8005164:	2b08      	cmp	r3, #8
 8005166:	d11b      	bne.n	80051a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f06f 0208 	mvn.w	r2, #8
 8005170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2204      	movs	r2, #4
 8005176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	f003 0303 	and.w	r3, r3, #3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7fc fa68 	bl	800165c <HAL_TIM_IC_CaptureCallback>
 800518c:	e005      	b.n	800519a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 fa3c 	bl	800560c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 fa43 	bl	8005620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	f003 0310 	and.w	r3, r3, #16
 80051aa:	2b10      	cmp	r3, #16
 80051ac:	d122      	bne.n	80051f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f003 0310 	and.w	r3, r3, #16
 80051b8:	2b10      	cmp	r3, #16
 80051ba:	d11b      	bne.n	80051f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f06f 0210 	mvn.w	r2, #16
 80051c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2208      	movs	r2, #8
 80051ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7fc fa3e 	bl	800165c <HAL_TIM_IC_CaptureCallback>
 80051e0:	e005      	b.n	80051ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 fa12 	bl	800560c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 fa19 	bl	8005620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d10e      	bne.n	8005220 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b01      	cmp	r3, #1
 800520e:	d107      	bne.n	8005220 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f06f 0201 	mvn.w	r2, #1
 8005218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f9ec 	bl	80055f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800522a:	2b80      	cmp	r3, #128	; 0x80
 800522c:	d10e      	bne.n	800524c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005238:	2b80      	cmp	r3, #128	; 0x80
 800523a:	d107      	bne.n	800524c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fe24 	bl	8005e94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005256:	2b40      	cmp	r3, #64	; 0x40
 8005258:	d10e      	bne.n	8005278 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005264:	2b40      	cmp	r3, #64	; 0x40
 8005266:	d107      	bne.n	8005278 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f9de 	bl	8005634 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	f003 0320 	and.w	r3, r3, #32
 8005282:	2b20      	cmp	r3, #32
 8005284:	d10e      	bne.n	80052a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f003 0320 	and.w	r3, r3, #32
 8005290:	2b20      	cmp	r3, #32
 8005292:	d107      	bne.n	80052a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f06f 0220 	mvn.w	r2, #32
 800529c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 fdee 	bl	8005e80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052a4:	bf00      	nop
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d101      	bne.n	80052c6 <HAL_TIM_IC_ConfigChannel+0x1a>
 80052c2:	2302      	movs	r3, #2
 80052c4:	e08a      	b.n	80053dc <HAL_TIM_IC_ConfigChannel+0x130>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2202      	movs	r2, #2
 80052d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d11b      	bne.n	8005314 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6818      	ldr	r0, [r3, #0]
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	6819      	ldr	r1, [r3, #0]
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f000 fbfc 	bl	8005ae8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	699a      	ldr	r2, [r3, #24]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 020c 	bic.w	r2, r2, #12
 80052fe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6999      	ldr	r1, [r3, #24]
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	689a      	ldr	r2, [r3, #8]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	430a      	orrs	r2, r1
 8005310:	619a      	str	r2, [r3, #24]
 8005312:	e05a      	b.n	80053ca <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b04      	cmp	r3, #4
 8005318:	d11c      	bne.n	8005354 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6818      	ldr	r0, [r3, #0]
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	6819      	ldr	r1, [r3, #0]
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	685a      	ldr	r2, [r3, #4]
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f000 fc51 	bl	8005bd0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	699a      	ldr	r2, [r3, #24]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800533c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6999      	ldr	r1, [r3, #24]
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	021a      	lsls	r2, r3, #8
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	619a      	str	r2, [r3, #24]
 8005352:	e03a      	b.n	80053ca <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b08      	cmp	r3, #8
 8005358:	d11b      	bne.n	8005392 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6818      	ldr	r0, [r3, #0]
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	6819      	ldr	r1, [r3, #0]
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	f000 fc6e 	bl	8005c4a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	69da      	ldr	r2, [r3, #28]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f022 020c 	bic.w	r2, r2, #12
 800537c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69d9      	ldr	r1, [r3, #28]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	689a      	ldr	r2, [r3, #8]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	430a      	orrs	r2, r1
 800538e:	61da      	str	r2, [r3, #28]
 8005390:	e01b      	b.n	80053ca <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6818      	ldr	r0, [r3, #0]
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	6819      	ldr	r1, [r3, #0]
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	685a      	ldr	r2, [r3, #4]
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	f000 fc8e 	bl	8005cc2 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	69da      	ldr	r2, [r3, #28]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80053b4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	69d9      	ldr	r1, [r3, #28]
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	021a      	lsls	r2, r3, #8
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d101      	bne.n	80053fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80053fa:	2302      	movs	r3, #2
 80053fc:	e0b4      	b.n	8005568 <HAL_TIM_PWM_ConfigChannel+0x184>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2202      	movs	r2, #2
 800540a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2b0c      	cmp	r3, #12
 8005412:	f200 809f 	bhi.w	8005554 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005416:	a201      	add	r2, pc, #4	; (adr r2, 800541c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541c:	08005451 	.word	0x08005451
 8005420:	08005555 	.word	0x08005555
 8005424:	08005555 	.word	0x08005555
 8005428:	08005555 	.word	0x08005555
 800542c:	08005491 	.word	0x08005491
 8005430:	08005555 	.word	0x08005555
 8005434:	08005555 	.word	0x08005555
 8005438:	08005555 	.word	0x08005555
 800543c:	080054d3 	.word	0x080054d3
 8005440:	08005555 	.word	0x08005555
 8005444:	08005555 	.word	0x08005555
 8005448:	08005555 	.word	0x08005555
 800544c:	08005513 	.word	0x08005513
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68b9      	ldr	r1, [r7, #8]
 8005456:	4618      	mov	r0, r3
 8005458:	f000 f996 	bl	8005788 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	699a      	ldr	r2, [r3, #24]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0208 	orr.w	r2, r2, #8
 800546a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699a      	ldr	r2, [r3, #24]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f022 0204 	bic.w	r2, r2, #4
 800547a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6999      	ldr	r1, [r3, #24]
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	691a      	ldr	r2, [r3, #16]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	430a      	orrs	r2, r1
 800548c:	619a      	str	r2, [r3, #24]
      break;
 800548e:	e062      	b.n	8005556 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68b9      	ldr	r1, [r7, #8]
 8005496:	4618      	mov	r0, r3
 8005498:	f000 f9e6 	bl	8005868 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	699a      	ldr	r2, [r3, #24]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699a      	ldr	r2, [r3, #24]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6999      	ldr	r1, [r3, #24]
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	021a      	lsls	r2, r3, #8
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	430a      	orrs	r2, r1
 80054ce:	619a      	str	r2, [r3, #24]
      break;
 80054d0:	e041      	b.n	8005556 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68b9      	ldr	r1, [r7, #8]
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 fa3b 	bl	8005954 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	69da      	ldr	r2, [r3, #28]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f042 0208 	orr.w	r2, r2, #8
 80054ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	69da      	ldr	r2, [r3, #28]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 0204 	bic.w	r2, r2, #4
 80054fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	69d9      	ldr	r1, [r3, #28]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	691a      	ldr	r2, [r3, #16]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	61da      	str	r2, [r3, #28]
      break;
 8005510:	e021      	b.n	8005556 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68b9      	ldr	r1, [r7, #8]
 8005518:	4618      	mov	r0, r3
 800551a:	f000 fa8f 	bl	8005a3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	69da      	ldr	r2, [r3, #28]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800552c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	69da      	ldr	r2, [r3, #28]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800553c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	69d9      	ldr	r1, [r3, #28]
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	021a      	lsls	r2, r3, #8
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	61da      	str	r2, [r3, #28]
      break;
 8005552:	e000      	b.n	8005556 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005554:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800557a:	2300      	movs	r3, #0
 800557c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b0c      	cmp	r3, #12
 8005582:	d831      	bhi.n	80055e8 <HAL_TIM_ReadCapturedValue+0x78>
 8005584:	a201      	add	r2, pc, #4	; (adr r2, 800558c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558a:	bf00      	nop
 800558c:	080055c1 	.word	0x080055c1
 8005590:	080055e9 	.word	0x080055e9
 8005594:	080055e9 	.word	0x080055e9
 8005598:	080055e9 	.word	0x080055e9
 800559c:	080055cb 	.word	0x080055cb
 80055a0:	080055e9 	.word	0x080055e9
 80055a4:	080055e9 	.word	0x080055e9
 80055a8:	080055e9 	.word	0x080055e9
 80055ac:	080055d5 	.word	0x080055d5
 80055b0:	080055e9 	.word	0x080055e9
 80055b4:	080055e9 	.word	0x080055e9
 80055b8:	080055e9 	.word	0x080055e9
 80055bc:	080055df 	.word	0x080055df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c6:	60fb      	str	r3, [r7, #12]

      break;
 80055c8:	e00f      	b.n	80055ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d0:	60fb      	str	r3, [r7, #12]

      break;
 80055d2:	e00a      	b.n	80055ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055da:	60fb      	str	r3, [r7, #12]

      break;
 80055dc:	e005      	b.n	80055ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e4:	60fb      	str	r3, [r7, #12]

      break;
 80055e6:	e000      	b.n	80055ea <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80055e8:	bf00      	nop
  }

  return tmpreg;
 80055ea:	68fb      	ldr	r3, [r7, #12]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3714      	adds	r7, #20
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a40      	ldr	r2, [pc, #256]	; (800575c <TIM_Base_SetConfig+0x114>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d013      	beq.n	8005688 <TIM_Base_SetConfig+0x40>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005666:	d00f      	beq.n	8005688 <TIM_Base_SetConfig+0x40>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a3d      	ldr	r2, [pc, #244]	; (8005760 <TIM_Base_SetConfig+0x118>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d00b      	beq.n	8005688 <TIM_Base_SetConfig+0x40>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a3c      	ldr	r2, [pc, #240]	; (8005764 <TIM_Base_SetConfig+0x11c>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d007      	beq.n	8005688 <TIM_Base_SetConfig+0x40>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a3b      	ldr	r2, [pc, #236]	; (8005768 <TIM_Base_SetConfig+0x120>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d003      	beq.n	8005688 <TIM_Base_SetConfig+0x40>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a3a      	ldr	r2, [pc, #232]	; (800576c <TIM_Base_SetConfig+0x124>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d108      	bne.n	800569a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800568e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	4313      	orrs	r3, r2
 8005698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a2f      	ldr	r2, [pc, #188]	; (800575c <TIM_Base_SetConfig+0x114>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d02b      	beq.n	80056fa <TIM_Base_SetConfig+0xb2>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a8:	d027      	beq.n	80056fa <TIM_Base_SetConfig+0xb2>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a2c      	ldr	r2, [pc, #176]	; (8005760 <TIM_Base_SetConfig+0x118>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d023      	beq.n	80056fa <TIM_Base_SetConfig+0xb2>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a2b      	ldr	r2, [pc, #172]	; (8005764 <TIM_Base_SetConfig+0x11c>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d01f      	beq.n	80056fa <TIM_Base_SetConfig+0xb2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a2a      	ldr	r2, [pc, #168]	; (8005768 <TIM_Base_SetConfig+0x120>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d01b      	beq.n	80056fa <TIM_Base_SetConfig+0xb2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a29      	ldr	r2, [pc, #164]	; (800576c <TIM_Base_SetConfig+0x124>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d017      	beq.n	80056fa <TIM_Base_SetConfig+0xb2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a28      	ldr	r2, [pc, #160]	; (8005770 <TIM_Base_SetConfig+0x128>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d013      	beq.n	80056fa <TIM_Base_SetConfig+0xb2>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a27      	ldr	r2, [pc, #156]	; (8005774 <TIM_Base_SetConfig+0x12c>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d00f      	beq.n	80056fa <TIM_Base_SetConfig+0xb2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a26      	ldr	r2, [pc, #152]	; (8005778 <TIM_Base_SetConfig+0x130>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d00b      	beq.n	80056fa <TIM_Base_SetConfig+0xb2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a25      	ldr	r2, [pc, #148]	; (800577c <TIM_Base_SetConfig+0x134>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d007      	beq.n	80056fa <TIM_Base_SetConfig+0xb2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a24      	ldr	r2, [pc, #144]	; (8005780 <TIM_Base_SetConfig+0x138>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d003      	beq.n	80056fa <TIM_Base_SetConfig+0xb2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a23      	ldr	r2, [pc, #140]	; (8005784 <TIM_Base_SetConfig+0x13c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d108      	bne.n	800570c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	4313      	orrs	r3, r2
 800570a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	4313      	orrs	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a0a      	ldr	r2, [pc, #40]	; (800575c <TIM_Base_SetConfig+0x114>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d003      	beq.n	8005740 <TIM_Base_SetConfig+0xf8>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a0c      	ldr	r2, [pc, #48]	; (800576c <TIM_Base_SetConfig+0x124>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d103      	bne.n	8005748 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	691a      	ldr	r2, [r3, #16]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	615a      	str	r2, [r3, #20]
}
 800574e:	bf00      	nop
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	40010000 	.word	0x40010000
 8005760:	40000400 	.word	0x40000400
 8005764:	40000800 	.word	0x40000800
 8005768:	40000c00 	.word	0x40000c00
 800576c:	40010400 	.word	0x40010400
 8005770:	40014000 	.word	0x40014000
 8005774:	40014400 	.word	0x40014400
 8005778:	40014800 	.word	0x40014800
 800577c:	40001800 	.word	0x40001800
 8005780:	40001c00 	.word	0x40001c00
 8005784:	40002000 	.word	0x40002000

08005788 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005788:	b480      	push	{r7}
 800578a:	b087      	sub	sp, #28
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	f023 0201 	bic.w	r2, r3, #1
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 0303 	bic.w	r3, r3, #3
 80057be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f023 0302 	bic.w	r3, r3, #2
 80057d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	4313      	orrs	r3, r2
 80057da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a20      	ldr	r2, [pc, #128]	; (8005860 <TIM_OC1_SetConfig+0xd8>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d003      	beq.n	80057ec <TIM_OC1_SetConfig+0x64>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a1f      	ldr	r2, [pc, #124]	; (8005864 <TIM_OC1_SetConfig+0xdc>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d10c      	bne.n	8005806 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f023 0308 	bic.w	r3, r3, #8
 80057f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f023 0304 	bic.w	r3, r3, #4
 8005804:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a15      	ldr	r2, [pc, #84]	; (8005860 <TIM_OC1_SetConfig+0xd8>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d003      	beq.n	8005816 <TIM_OC1_SetConfig+0x8e>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a14      	ldr	r2, [pc, #80]	; (8005864 <TIM_OC1_SetConfig+0xdc>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d111      	bne.n	800583a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800581c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005824:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	4313      	orrs	r3, r2
 800582e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	4313      	orrs	r3, r2
 8005838:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	621a      	str	r2, [r3, #32]
}
 8005854:	bf00      	nop
 8005856:	371c      	adds	r7, #28
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr
 8005860:	40010000 	.word	0x40010000
 8005864:	40010400 	.word	0x40010400

08005868 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	f023 0210 	bic.w	r2, r3, #16
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800589e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	021b      	lsls	r3, r3, #8
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f023 0320 	bic.w	r3, r3, #32
 80058b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	011b      	lsls	r3, r3, #4
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	4313      	orrs	r3, r2
 80058be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a22      	ldr	r2, [pc, #136]	; (800594c <TIM_OC2_SetConfig+0xe4>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d003      	beq.n	80058d0 <TIM_OC2_SetConfig+0x68>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a21      	ldr	r2, [pc, #132]	; (8005950 <TIM_OC2_SetConfig+0xe8>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d10d      	bne.n	80058ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	011b      	lsls	r3, r3, #4
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a17      	ldr	r2, [pc, #92]	; (800594c <TIM_OC2_SetConfig+0xe4>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d003      	beq.n	80058fc <TIM_OC2_SetConfig+0x94>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a16      	ldr	r2, [pc, #88]	; (8005950 <TIM_OC2_SetConfig+0xe8>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d113      	bne.n	8005924 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005902:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800590a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	4313      	orrs	r3, r2
 8005916:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	4313      	orrs	r3, r2
 8005922:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	621a      	str	r2, [r3, #32]
}
 800593e:	bf00      	nop
 8005940:	371c      	adds	r7, #28
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	40010000 	.word	0x40010000
 8005950:	40010400 	.word	0x40010400

08005954 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005954:	b480      	push	{r7}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	69db      	ldr	r3, [r3, #28]
 800597a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f023 0303 	bic.w	r3, r3, #3
 800598a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	4313      	orrs	r3, r2
 8005994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800599c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	021b      	lsls	r3, r3, #8
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a21      	ldr	r2, [pc, #132]	; (8005a34 <TIM_OC3_SetConfig+0xe0>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d003      	beq.n	80059ba <TIM_OC3_SetConfig+0x66>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a20      	ldr	r2, [pc, #128]	; (8005a38 <TIM_OC3_SetConfig+0xe4>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d10d      	bne.n	80059d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	021b      	lsls	r3, r3, #8
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a16      	ldr	r2, [pc, #88]	; (8005a34 <TIM_OC3_SetConfig+0xe0>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d003      	beq.n	80059e6 <TIM_OC3_SetConfig+0x92>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a15      	ldr	r2, [pc, #84]	; (8005a38 <TIM_OC3_SetConfig+0xe4>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d113      	bne.n	8005a0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	011b      	lsls	r3, r3, #4
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	011b      	lsls	r3, r3, #4
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	621a      	str	r2, [r3, #32]
}
 8005a28:	bf00      	nop
 8005a2a:	371c      	adds	r7, #28
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr
 8005a34:	40010000 	.word	0x40010000
 8005a38:	40010400 	.word	0x40010400

08005a3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b087      	sub	sp, #28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	69db      	ldr	r3, [r3, #28]
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	021b      	lsls	r3, r3, #8
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	031b      	lsls	r3, r3, #12
 8005a8e:	693a      	ldr	r2, [r7, #16]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a12      	ldr	r2, [pc, #72]	; (8005ae0 <TIM_OC4_SetConfig+0xa4>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d003      	beq.n	8005aa4 <TIM_OC4_SetConfig+0x68>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a11      	ldr	r2, [pc, #68]	; (8005ae4 <TIM_OC4_SetConfig+0xa8>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d109      	bne.n	8005ab8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005aaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	019b      	lsls	r3, r3, #6
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	621a      	str	r2, [r3, #32]
}
 8005ad2:	bf00      	nop
 8005ad4:	371c      	adds	r7, #28
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	40010000 	.word	0x40010000
 8005ae4:	40010400 	.word	0x40010400

08005ae8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b087      	sub	sp, #28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
 8005af4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	f023 0201 	bic.w	r2, r3, #1
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6a1b      	ldr	r3, [r3, #32]
 8005b0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	4a28      	ldr	r2, [pc, #160]	; (8005bb4 <TIM_TI1_SetConfig+0xcc>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d01b      	beq.n	8005b4e <TIM_TI1_SetConfig+0x66>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b1c:	d017      	beq.n	8005b4e <TIM_TI1_SetConfig+0x66>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4a25      	ldr	r2, [pc, #148]	; (8005bb8 <TIM_TI1_SetConfig+0xd0>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d013      	beq.n	8005b4e <TIM_TI1_SetConfig+0x66>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	4a24      	ldr	r2, [pc, #144]	; (8005bbc <TIM_TI1_SetConfig+0xd4>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d00f      	beq.n	8005b4e <TIM_TI1_SetConfig+0x66>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	4a23      	ldr	r2, [pc, #140]	; (8005bc0 <TIM_TI1_SetConfig+0xd8>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d00b      	beq.n	8005b4e <TIM_TI1_SetConfig+0x66>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	4a22      	ldr	r2, [pc, #136]	; (8005bc4 <TIM_TI1_SetConfig+0xdc>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d007      	beq.n	8005b4e <TIM_TI1_SetConfig+0x66>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	4a21      	ldr	r2, [pc, #132]	; (8005bc8 <TIM_TI1_SetConfig+0xe0>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d003      	beq.n	8005b4e <TIM_TI1_SetConfig+0x66>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4a20      	ldr	r2, [pc, #128]	; (8005bcc <TIM_TI1_SetConfig+0xe4>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d101      	bne.n	8005b52 <TIM_TI1_SetConfig+0x6a>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e000      	b.n	8005b54 <TIM_TI1_SetConfig+0x6c>
 8005b52:	2300      	movs	r3, #0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d008      	beq.n	8005b6a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	f023 0303 	bic.w	r3, r3, #3
 8005b5e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	617b      	str	r3, [r7, #20]
 8005b68:	e003      	b.n	8005b72 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f043 0301 	orr.w	r3, r3, #1
 8005b70:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	011b      	lsls	r3, r3, #4
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	f023 030a 	bic.w	r3, r3, #10
 8005b8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	f003 030a 	and.w	r3, r3, #10
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	621a      	str	r2, [r3, #32]
}
 8005ba6:	bf00      	nop
 8005ba8:	371c      	adds	r7, #28
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	40010000 	.word	0x40010000
 8005bb8:	40000400 	.word	0x40000400
 8005bbc:	40000800 	.word	0x40000800
 8005bc0:	40000c00 	.word	0x40000c00
 8005bc4:	40010400 	.word	0x40010400
 8005bc8:	40014000 	.word	0x40014000
 8005bcc:	40001800 	.word	0x40001800

08005bd0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
 8005bdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	f023 0210 	bic.w	r2, r3, #16
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	021b      	lsls	r3, r3, #8
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c0e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	031b      	lsls	r3, r3, #12
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c22:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	011b      	lsls	r3, r3, #4
 8005c28:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	621a      	str	r2, [r3, #32]
}
 8005c3e:	bf00      	nop
 8005c40:	371c      	adds	r7, #28
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b087      	sub	sp, #28
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	60f8      	str	r0, [r7, #12]
 8005c52:	60b9      	str	r1, [r7, #8]
 8005c54:	607a      	str	r2, [r7, #4]
 8005c56:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6a1b      	ldr	r3, [r3, #32]
 8005c5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	69db      	ldr	r3, [r3, #28]
 8005c68:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	f023 0303 	bic.w	r3, r3, #3
 8005c76:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c86:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	011b      	lsls	r3, r3, #4
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005c9a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	021b      	lsls	r3, r3, #8
 8005ca0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	621a      	str	r2, [r3, #32]
}
 8005cb6:	bf00      	nop
 8005cb8:	371c      	adds	r7, #28
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr

08005cc2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	b087      	sub	sp, #28
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	60f8      	str	r0, [r7, #12]
 8005cca:	60b9      	str	r1, [r7, #8]
 8005ccc:	607a      	str	r2, [r7, #4]
 8005cce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6a1b      	ldr	r3, [r3, #32]
 8005cd4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	69db      	ldr	r3, [r3, #28]
 8005ce0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	021b      	lsls	r3, r3, #8
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	031b      	lsls	r3, r3, #12
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005d14:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	031b      	lsls	r3, r3, #12
 8005d1a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	621a      	str	r2, [r3, #32]
}
 8005d30:	bf00      	nop
 8005d32:	371c      	adds	r7, #28
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	f003 031f 	and.w	r3, r3, #31
 8005d4e:	2201      	movs	r2, #1
 8005d50:	fa02 f303 	lsl.w	r3, r2, r3
 8005d54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6a1a      	ldr	r2, [r3, #32]
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	43db      	mvns	r3, r3
 8005d5e:	401a      	ands	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6a1a      	ldr	r2, [r3, #32]
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	f003 031f 	and.w	r3, r3, #31
 8005d6e:	6879      	ldr	r1, [r7, #4]
 8005d70:	fa01 f303 	lsl.w	r3, r1, r3
 8005d74:	431a      	orrs	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	621a      	str	r2, [r3, #32]
}
 8005d7a:	bf00      	nop
 8005d7c:	371c      	adds	r7, #28
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
	...

08005d88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d101      	bne.n	8005da0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	e05a      	b.n	8005e56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2202      	movs	r2, #2
 8005dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a21      	ldr	r2, [pc, #132]	; (8005e64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d022      	beq.n	8005e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dec:	d01d      	beq.n	8005e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a1d      	ldr	r2, [pc, #116]	; (8005e68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d018      	beq.n	8005e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a1b      	ldr	r2, [pc, #108]	; (8005e6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d013      	beq.n	8005e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a1a      	ldr	r2, [pc, #104]	; (8005e70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d00e      	beq.n	8005e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a18      	ldr	r2, [pc, #96]	; (8005e74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d009      	beq.n	8005e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a17      	ldr	r2, [pc, #92]	; (8005e78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d004      	beq.n	8005e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a15      	ldr	r2, [pc, #84]	; (8005e7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d10c      	bne.n	8005e44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3714      	adds	r7, #20
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	40010000 	.word	0x40010000
 8005e68:	40000400 	.word	0x40000400
 8005e6c:	40000800 	.word	0x40000800
 8005e70:	40000c00 	.word	0x40000c00
 8005e74:	40010400 	.word	0x40010400
 8005e78:	40014000 	.word	0x40014000
 8005e7c:	40001800 	.word	0x40001800

08005e80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ea8:	b084      	sub	sp, #16
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b084      	sub	sp, #16
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
 8005eb2:	f107 001c 	add.w	r0, r7, #28
 8005eb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d122      	bne.n	8005f06 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005ed4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d105      	bne.n	8005efa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f001 fac6 	bl	800748c <USB_CoreReset>
 8005f00:	4603      	mov	r3, r0
 8005f02:	73fb      	strb	r3, [r7, #15]
 8005f04:	e01a      	b.n	8005f3c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f001 faba 	bl	800748c <USB_CoreReset>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d106      	bne.n	8005f30 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	639a      	str	r2, [r3, #56]	; 0x38
 8005f2e:	e005      	b.n	8005f3c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d10b      	bne.n	8005f5a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f043 0206 	orr.w	r2, r3, #6
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f043 0220 	orr.w	r2, r3, #32
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f66:	b004      	add	sp, #16
 8005f68:	4770      	bx	lr
	...

08005f6c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b087      	sub	sp, #28
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	4613      	mov	r3, r2
 8005f78:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005f7a:	79fb      	ldrb	r3, [r7, #7]
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d165      	bne.n	800604c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	4a41      	ldr	r2, [pc, #260]	; (8006088 <USB_SetTurnaroundTime+0x11c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d906      	bls.n	8005f96 <USB_SetTurnaroundTime+0x2a>
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	4a40      	ldr	r2, [pc, #256]	; (800608c <USB_SetTurnaroundTime+0x120>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d802      	bhi.n	8005f96 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005f90:	230f      	movs	r3, #15
 8005f92:	617b      	str	r3, [r7, #20]
 8005f94:	e062      	b.n	800605c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	4a3c      	ldr	r2, [pc, #240]	; (800608c <USB_SetTurnaroundTime+0x120>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d906      	bls.n	8005fac <USB_SetTurnaroundTime+0x40>
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	4a3b      	ldr	r2, [pc, #236]	; (8006090 <USB_SetTurnaroundTime+0x124>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d802      	bhi.n	8005fac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005fa6:	230e      	movs	r3, #14
 8005fa8:	617b      	str	r3, [r7, #20]
 8005faa:	e057      	b.n	800605c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	4a38      	ldr	r2, [pc, #224]	; (8006090 <USB_SetTurnaroundTime+0x124>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d906      	bls.n	8005fc2 <USB_SetTurnaroundTime+0x56>
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	4a37      	ldr	r2, [pc, #220]	; (8006094 <USB_SetTurnaroundTime+0x128>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d802      	bhi.n	8005fc2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005fbc:	230d      	movs	r3, #13
 8005fbe:	617b      	str	r3, [r7, #20]
 8005fc0:	e04c      	b.n	800605c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	4a33      	ldr	r2, [pc, #204]	; (8006094 <USB_SetTurnaroundTime+0x128>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d906      	bls.n	8005fd8 <USB_SetTurnaroundTime+0x6c>
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	4a32      	ldr	r2, [pc, #200]	; (8006098 <USB_SetTurnaroundTime+0x12c>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d802      	bhi.n	8005fd8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005fd2:	230c      	movs	r3, #12
 8005fd4:	617b      	str	r3, [r7, #20]
 8005fd6:	e041      	b.n	800605c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	4a2f      	ldr	r2, [pc, #188]	; (8006098 <USB_SetTurnaroundTime+0x12c>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d906      	bls.n	8005fee <USB_SetTurnaroundTime+0x82>
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	4a2e      	ldr	r2, [pc, #184]	; (800609c <USB_SetTurnaroundTime+0x130>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d802      	bhi.n	8005fee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005fe8:	230b      	movs	r3, #11
 8005fea:	617b      	str	r3, [r7, #20]
 8005fec:	e036      	b.n	800605c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	4a2a      	ldr	r2, [pc, #168]	; (800609c <USB_SetTurnaroundTime+0x130>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d906      	bls.n	8006004 <USB_SetTurnaroundTime+0x98>
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	4a29      	ldr	r2, [pc, #164]	; (80060a0 <USB_SetTurnaroundTime+0x134>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d802      	bhi.n	8006004 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005ffe:	230a      	movs	r3, #10
 8006000:	617b      	str	r3, [r7, #20]
 8006002:	e02b      	b.n	800605c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	4a26      	ldr	r2, [pc, #152]	; (80060a0 <USB_SetTurnaroundTime+0x134>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d906      	bls.n	800601a <USB_SetTurnaroundTime+0xae>
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	4a25      	ldr	r2, [pc, #148]	; (80060a4 <USB_SetTurnaroundTime+0x138>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d802      	bhi.n	800601a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006014:	2309      	movs	r3, #9
 8006016:	617b      	str	r3, [r7, #20]
 8006018:	e020      	b.n	800605c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	4a21      	ldr	r2, [pc, #132]	; (80060a4 <USB_SetTurnaroundTime+0x138>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d906      	bls.n	8006030 <USB_SetTurnaroundTime+0xc4>
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	4a20      	ldr	r2, [pc, #128]	; (80060a8 <USB_SetTurnaroundTime+0x13c>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d802      	bhi.n	8006030 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800602a:	2308      	movs	r3, #8
 800602c:	617b      	str	r3, [r7, #20]
 800602e:	e015      	b.n	800605c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	4a1d      	ldr	r2, [pc, #116]	; (80060a8 <USB_SetTurnaroundTime+0x13c>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d906      	bls.n	8006046 <USB_SetTurnaroundTime+0xda>
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	4a1c      	ldr	r2, [pc, #112]	; (80060ac <USB_SetTurnaroundTime+0x140>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d802      	bhi.n	8006046 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006040:	2307      	movs	r3, #7
 8006042:	617b      	str	r3, [r7, #20]
 8006044:	e00a      	b.n	800605c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006046:	2306      	movs	r3, #6
 8006048:	617b      	str	r3, [r7, #20]
 800604a:	e007      	b.n	800605c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800604c:	79fb      	ldrb	r3, [r7, #7]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d102      	bne.n	8006058 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006052:	2309      	movs	r3, #9
 8006054:	617b      	str	r3, [r7, #20]
 8006056:	e001      	b.n	800605c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006058:	2309      	movs	r3, #9
 800605a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	68da      	ldr	r2, [r3, #12]
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	029b      	lsls	r3, r3, #10
 8006070:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006074:	431a      	orrs	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	371c      	adds	r7, #28
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr
 8006088:	00d8acbf 	.word	0x00d8acbf
 800608c:	00e4e1bf 	.word	0x00e4e1bf
 8006090:	00f423ff 	.word	0x00f423ff
 8006094:	0106737f 	.word	0x0106737f
 8006098:	011a499f 	.word	0x011a499f
 800609c:	01312cff 	.word	0x01312cff
 80060a0:	014ca43f 	.word	0x014ca43f
 80060a4:	016e35ff 	.word	0x016e35ff
 80060a8:	01a6ab1f 	.word	0x01a6ab1f
 80060ac:	01e847ff 	.word	0x01e847ff

080060b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f043 0201 	orr.w	r2, r3, #1
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr

080060d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060d2:	b480      	push	{r7}
 80060d4:	b083      	sub	sp, #12
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f023 0201 	bic.w	r2, r3, #1
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	460b      	mov	r3, r1
 80060fe:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800610c:	78fb      	ldrb	r3, [r7, #3]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d106      	bne.n	8006120 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	60da      	str	r2, [r3, #12]
 800611e:	e00b      	b.n	8006138 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006120:	78fb      	ldrb	r3, [r7, #3]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d106      	bne.n	8006134 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	60da      	str	r2, [r3, #12]
 8006132:	e001      	b.n	8006138 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e003      	b.n	8006140 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006138:	2032      	movs	r0, #50	; 0x32
 800613a:	f7fb fdb1 	bl	8001ca0 <HAL_Delay>

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006148:	b084      	sub	sp, #16
 800614a:	b580      	push	{r7, lr}
 800614c:	b086      	sub	sp, #24
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
 8006152:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006156:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800615a:	2300      	movs	r3, #0
 800615c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006162:	2300      	movs	r3, #0
 8006164:	613b      	str	r3, [r7, #16]
 8006166:	e009      	b.n	800617c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	3340      	adds	r3, #64	; 0x40
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	4413      	add	r3, r2
 8006172:	2200      	movs	r2, #0
 8006174:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	3301      	adds	r3, #1
 800617a:	613b      	str	r3, [r7, #16]
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	2b0e      	cmp	r3, #14
 8006180:	d9f2      	bls.n	8006168 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006184:	2b00      	cmp	r3, #0
 8006186:	d11c      	bne.n	80061c2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006196:	f043 0302 	orr.w	r3, r3, #2
 800619a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ac:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	639a      	str	r2, [r3, #56]	; 0x38
 80061c0:	e00b      	b.n	80061da <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061e0:	461a      	mov	r2, r3
 80061e2:	2300      	movs	r3, #0
 80061e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ec:	4619      	mov	r1, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f4:	461a      	mov	r2, r3
 80061f6:	680b      	ldr	r3, [r1, #0]
 80061f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d10c      	bne.n	800621a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006202:	2b00      	cmp	r3, #0
 8006204:	d104      	bne.n	8006210 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006206:	2100      	movs	r1, #0
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f949 	bl	80064a0 <USB_SetDevSpeed>
 800620e:	e008      	b.n	8006222 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006210:	2101      	movs	r1, #1
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f944 	bl	80064a0 <USB_SetDevSpeed>
 8006218:	e003      	b.n	8006222 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800621a:	2103      	movs	r1, #3
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f93f 	bl	80064a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006222:	2110      	movs	r1, #16
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 f8f3 	bl	8006410 <USB_FlushTxFifo>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 f911 	bl	800645c <USB_FlushRxFifo>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d001      	beq.n	8006244 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800624a:	461a      	mov	r2, r3
 800624c:	2300      	movs	r3, #0
 800624e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006256:	461a      	mov	r2, r3
 8006258:	2300      	movs	r3, #0
 800625a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006262:	461a      	mov	r2, r3
 8006264:	2300      	movs	r3, #0
 8006266:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006268:	2300      	movs	r3, #0
 800626a:	613b      	str	r3, [r7, #16]
 800626c:	e043      	b.n	80062f6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	015a      	lsls	r2, r3, #5
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	4413      	add	r3, r2
 8006276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006280:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006284:	d118      	bne.n	80062b8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d10a      	bne.n	80062a2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	015a      	lsls	r2, r3, #5
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	4413      	add	r3, r2
 8006294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006298:	461a      	mov	r2, r3
 800629a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800629e:	6013      	str	r3, [r2, #0]
 80062a0:	e013      	b.n	80062ca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	015a      	lsls	r2, r3, #5
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	4413      	add	r3, r2
 80062aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ae:	461a      	mov	r2, r3
 80062b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80062b4:	6013      	str	r3, [r2, #0]
 80062b6:	e008      	b.n	80062ca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	015a      	lsls	r2, r3, #5
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c4:	461a      	mov	r2, r3
 80062c6:	2300      	movs	r3, #0
 80062c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	015a      	lsls	r2, r3, #5
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d6:	461a      	mov	r2, r3
 80062d8:	2300      	movs	r3, #0
 80062da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e8:	461a      	mov	r2, r3
 80062ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80062ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	3301      	adds	r3, #1
 80062f4:	613b      	str	r3, [r7, #16]
 80062f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d3b7      	bcc.n	800626e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062fe:	2300      	movs	r3, #0
 8006300:	613b      	str	r3, [r7, #16]
 8006302:	e043      	b.n	800638c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	015a      	lsls	r2, r3, #5
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	4413      	add	r3, r2
 800630c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006316:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800631a:	d118      	bne.n	800634e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10a      	bne.n	8006338 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	015a      	lsls	r2, r3, #5
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	4413      	add	r3, r2
 800632a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800632e:	461a      	mov	r2, r3
 8006330:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006334:	6013      	str	r3, [r2, #0]
 8006336:	e013      	b.n	8006360 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	4413      	add	r3, r2
 8006340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006344:	461a      	mov	r2, r3
 8006346:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800634a:	6013      	str	r3, [r2, #0]
 800634c:	e008      	b.n	8006360 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	015a      	lsls	r2, r3, #5
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	4413      	add	r3, r2
 8006356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800635a:	461a      	mov	r2, r3
 800635c:	2300      	movs	r3, #0
 800635e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	4413      	add	r3, r2
 8006368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800636c:	461a      	mov	r2, r3
 800636e:	2300      	movs	r3, #0
 8006370:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	015a      	lsls	r2, r3, #5
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	4413      	add	r3, r2
 800637a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637e:	461a      	mov	r2, r3
 8006380:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006384:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	3301      	adds	r3, #1
 800638a:	613b      	str	r3, [r7, #16]
 800638c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	429a      	cmp	r2, r3
 8006392:	d3b7      	bcc.n	8006304 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80063b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80063b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d105      	bne.n	80063c8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	f043 0210 	orr.w	r2, r3, #16
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	699a      	ldr	r2, [r3, #24]
 80063cc:	4b0f      	ldr	r3, [pc, #60]	; (800640c <USB_DevInit+0x2c4>)
 80063ce:	4313      	orrs	r3, r2
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80063d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d005      	beq.n	80063e6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	f043 0208 	orr.w	r2, r3, #8
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80063e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d107      	bne.n	80063fc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063f4:	f043 0304 	orr.w	r3, r3, #4
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80063fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3718      	adds	r7, #24
 8006402:	46bd      	mov	sp, r7
 8006404:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006408:	b004      	add	sp, #16
 800640a:	4770      	bx	lr
 800640c:	803c3800 	.word	0x803c3800

08006410 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800641a:	2300      	movs	r3, #0
 800641c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	019b      	lsls	r3, r3, #6
 8006422:	f043 0220 	orr.w	r2, r3, #32
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	3301      	adds	r3, #1
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	4a09      	ldr	r2, [pc, #36]	; (8006458 <USB_FlushTxFifo+0x48>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d901      	bls.n	800643c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e006      	b.n	800644a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	f003 0320 	and.w	r3, r3, #32
 8006444:	2b20      	cmp	r3, #32
 8006446:	d0f0      	beq.n	800642a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3714      	adds	r7, #20
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	00030d40 	.word	0x00030d40

0800645c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006464:	2300      	movs	r3, #0
 8006466:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2210      	movs	r2, #16
 800646c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	3301      	adds	r3, #1
 8006472:	60fb      	str	r3, [r7, #12]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4a09      	ldr	r2, [pc, #36]	; (800649c <USB_FlushRxFifo+0x40>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d901      	bls.n	8006480 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800647c:	2303      	movs	r3, #3
 800647e:	e006      	b.n	800648e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	f003 0310 	and.w	r3, r3, #16
 8006488:	2b10      	cmp	r3, #16
 800648a:	d0f0      	beq.n	800646e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	00030d40 	.word	0x00030d40

080064a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	460b      	mov	r3, r1
 80064aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	78fb      	ldrb	r3, [r7, #3]
 80064ba:	68f9      	ldr	r1, [r7, #12]
 80064bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064c0:	4313      	orrs	r3, r2
 80064c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3714      	adds	r7, #20
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr

080064d2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80064d2:	b480      	push	{r7}
 80064d4:	b087      	sub	sp, #28
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f003 0306 	and.w	r3, r3, #6
 80064ea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d102      	bne.n	80064f8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80064f2:	2300      	movs	r3, #0
 80064f4:	75fb      	strb	r3, [r7, #23]
 80064f6:	e00a      	b.n	800650e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d002      	beq.n	8006504 <USB_GetDevSpeed+0x32>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2b06      	cmp	r3, #6
 8006502:	d102      	bne.n	800650a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006504:	2302      	movs	r3, #2
 8006506:	75fb      	strb	r3, [r7, #23]
 8006508:	e001      	b.n	800650e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800650a:	230f      	movs	r3, #15
 800650c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800650e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006510:	4618      	mov	r0, r3
 8006512:	371c      	adds	r7, #28
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	785b      	ldrb	r3, [r3, #1]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d13a      	bne.n	80065ae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800653e:	69da      	ldr	r2, [r3, #28]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	f003 030f 	and.w	r3, r3, #15
 8006548:	2101      	movs	r1, #1
 800654a:	fa01 f303 	lsl.w	r3, r1, r3
 800654e:	b29b      	uxth	r3, r3
 8006550:	68f9      	ldr	r1, [r7, #12]
 8006552:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006556:	4313      	orrs	r3, r2
 8006558:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	015a      	lsls	r2, r3, #5
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	4413      	add	r3, r2
 8006562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d155      	bne.n	800661c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	4413      	add	r3, r2
 8006578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	78db      	ldrb	r3, [r3, #3]
 800658a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800658c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	059b      	lsls	r3, r3, #22
 8006592:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006594:	4313      	orrs	r3, r2
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	0151      	lsls	r1, r2, #5
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	440a      	add	r2, r1
 800659e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065aa:	6013      	str	r3, [r2, #0]
 80065ac:	e036      	b.n	800661c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b4:	69da      	ldr	r2, [r3, #28]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	f003 030f 	and.w	r3, r3, #15
 80065be:	2101      	movs	r1, #1
 80065c0:	fa01 f303 	lsl.w	r3, r1, r3
 80065c4:	041b      	lsls	r3, r3, #16
 80065c6:	68f9      	ldr	r1, [r7, #12]
 80065c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065cc:	4313      	orrs	r3, r2
 80065ce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	015a      	lsls	r2, r3, #5
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4413      	add	r3, r2
 80065d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d11a      	bne.n	800661c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	78db      	ldrb	r3, [r3, #3]
 8006600:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006602:	430b      	orrs	r3, r1
 8006604:	4313      	orrs	r3, r2
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	0151      	lsls	r1, r2, #5
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	440a      	add	r2, r1
 800660e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800661a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
	...

0800662c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	785b      	ldrb	r3, [r3, #1]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d161      	bne.n	800670c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	015a      	lsls	r2, r3, #5
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4413      	add	r3, r2
 8006650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800665a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800665e:	d11f      	bne.n	80066a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	015a      	lsls	r2, r3, #5
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	4413      	add	r3, r2
 8006668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	0151      	lsls	r1, r2, #5
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	440a      	add	r2, r1
 8006676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800667a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800667e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4413      	add	r3, r2
 8006688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	0151      	lsls	r1, r2, #5
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	440a      	add	r2, r1
 8006696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800669a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800669e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	f003 030f 	and.w	r3, r3, #15
 80066b0:	2101      	movs	r1, #1
 80066b2:	fa01 f303 	lsl.w	r3, r1, r3
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	43db      	mvns	r3, r3
 80066ba:	68f9      	ldr	r1, [r7, #12]
 80066bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066c0:	4013      	ands	r3, r2
 80066c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ca:	69da      	ldr	r2, [r3, #28]
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	f003 030f 	and.w	r3, r3, #15
 80066d4:	2101      	movs	r1, #1
 80066d6:	fa01 f303 	lsl.w	r3, r1, r3
 80066da:	b29b      	uxth	r3, r3
 80066dc:	43db      	mvns	r3, r3
 80066de:	68f9      	ldr	r1, [r7, #12]
 80066e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066e4:	4013      	ands	r3, r2
 80066e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	015a      	lsls	r2, r3, #5
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	4413      	add	r3, r2
 80066f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	0159      	lsls	r1, r3, #5
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	440b      	add	r3, r1
 80066fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006702:	4619      	mov	r1, r3
 8006704:	4b35      	ldr	r3, [pc, #212]	; (80067dc <USB_DeactivateEndpoint+0x1b0>)
 8006706:	4013      	ands	r3, r2
 8006708:	600b      	str	r3, [r1, #0]
 800670a:	e060      	b.n	80067ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	4413      	add	r3, r2
 8006714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800671e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006722:	d11f      	bne.n	8006764 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	015a      	lsls	r2, r3, #5
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	4413      	add	r3, r2
 800672c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	0151      	lsls	r1, r2, #5
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	440a      	add	r2, r1
 800673a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800673e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006742:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	015a      	lsls	r2, r3, #5
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	4413      	add	r3, r2
 800674c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	0151      	lsls	r1, r2, #5
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	440a      	add	r2, r1
 800675a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800675e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006762:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800676a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	f003 030f 	and.w	r3, r3, #15
 8006774:	2101      	movs	r1, #1
 8006776:	fa01 f303 	lsl.w	r3, r1, r3
 800677a:	041b      	lsls	r3, r3, #16
 800677c:	43db      	mvns	r3, r3
 800677e:	68f9      	ldr	r1, [r7, #12]
 8006780:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006784:	4013      	ands	r3, r2
 8006786:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800678e:	69da      	ldr	r2, [r3, #28]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	f003 030f 	and.w	r3, r3, #15
 8006798:	2101      	movs	r1, #1
 800679a:	fa01 f303 	lsl.w	r3, r1, r3
 800679e:	041b      	lsls	r3, r3, #16
 80067a0:	43db      	mvns	r3, r3
 80067a2:	68f9      	ldr	r1, [r7, #12]
 80067a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067a8:	4013      	ands	r3, r2
 80067aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	0159      	lsls	r1, r3, #5
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	440b      	add	r3, r1
 80067c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c6:	4619      	mov	r1, r3
 80067c8:	4b05      	ldr	r3, [pc, #20]	; (80067e0 <USB_DeactivateEndpoint+0x1b4>)
 80067ca:	4013      	ands	r3, r2
 80067cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr
 80067dc:	ec337800 	.word	0xec337800
 80067e0:	eff37800 	.word	0xeff37800

080067e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b08a      	sub	sp, #40	; 0x28
 80067e8:	af02      	add	r7, sp, #8
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	4613      	mov	r3, r2
 80067f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	785b      	ldrb	r3, [r3, #1]
 8006800:	2b01      	cmp	r3, #1
 8006802:	f040 815c 	bne.w	8006abe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d132      	bne.n	8006874 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	015a      	lsls	r2, r3, #5
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	4413      	add	r3, r2
 8006816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	69ba      	ldr	r2, [r7, #24]
 800681e:	0151      	lsls	r1, r2, #5
 8006820:	69fa      	ldr	r2, [r7, #28]
 8006822:	440a      	add	r2, r1
 8006824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006828:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800682c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006830:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	4413      	add	r3, r2
 800683a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	69ba      	ldr	r2, [r7, #24]
 8006842:	0151      	lsls	r1, r2, #5
 8006844:	69fa      	ldr	r2, [r7, #28]
 8006846:	440a      	add	r2, r1
 8006848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800684c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006850:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	015a      	lsls	r2, r3, #5
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	4413      	add	r3, r2
 800685a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	69ba      	ldr	r2, [r7, #24]
 8006862:	0151      	lsls	r1, r2, #5
 8006864:	69fa      	ldr	r2, [r7, #28]
 8006866:	440a      	add	r2, r1
 8006868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800686c:	0cdb      	lsrs	r3, r3, #19
 800686e:	04db      	lsls	r3, r3, #19
 8006870:	6113      	str	r3, [r2, #16]
 8006872:	e074      	b.n	800695e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	015a      	lsls	r2, r3, #5
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	4413      	add	r3, r2
 800687c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	69ba      	ldr	r2, [r7, #24]
 8006884:	0151      	lsls	r1, r2, #5
 8006886:	69fa      	ldr	r2, [r7, #28]
 8006888:	440a      	add	r2, r1
 800688a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800688e:	0cdb      	lsrs	r3, r3, #19
 8006890:	04db      	lsls	r3, r3, #19
 8006892:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	4413      	add	r3, r2
 800689c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	69ba      	ldr	r2, [r7, #24]
 80068a4:	0151      	lsls	r1, r2, #5
 80068a6:	69fa      	ldr	r2, [r7, #28]
 80068a8:	440a      	add	r2, r1
 80068aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80068b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80068b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	015a      	lsls	r2, r3, #5
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	4413      	add	r3, r2
 80068c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c4:	691a      	ldr	r2, [r3, #16]
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	6959      	ldr	r1, [r3, #20]
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	440b      	add	r3, r1
 80068d0:	1e59      	subs	r1, r3, #1
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80068da:	04d9      	lsls	r1, r3, #19
 80068dc:	4b9d      	ldr	r3, [pc, #628]	; (8006b54 <USB_EPStartXfer+0x370>)
 80068de:	400b      	ands	r3, r1
 80068e0:	69b9      	ldr	r1, [r7, #24]
 80068e2:	0148      	lsls	r0, r1, #5
 80068e4:	69f9      	ldr	r1, [r7, #28]
 80068e6:	4401      	add	r1, r0
 80068e8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80068ec:	4313      	orrs	r3, r2
 80068ee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	015a      	lsls	r2, r3, #5
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068fc:	691a      	ldr	r2, [r3, #16]
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006906:	69b9      	ldr	r1, [r7, #24]
 8006908:	0148      	lsls	r0, r1, #5
 800690a:	69f9      	ldr	r1, [r7, #28]
 800690c:	4401      	add	r1, r0
 800690e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006912:	4313      	orrs	r3, r2
 8006914:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	78db      	ldrb	r3, [r3, #3]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d11f      	bne.n	800695e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	015a      	lsls	r2, r3, #5
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	4413      	add	r3, r2
 8006926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	69ba      	ldr	r2, [r7, #24]
 800692e:	0151      	lsls	r1, r2, #5
 8006930:	69fa      	ldr	r2, [r7, #28]
 8006932:	440a      	add	r2, r1
 8006934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006938:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800693c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	015a      	lsls	r2, r3, #5
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	4413      	add	r3, r2
 8006946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	69ba      	ldr	r2, [r7, #24]
 800694e:	0151      	lsls	r1, r2, #5
 8006950:	69fa      	ldr	r2, [r7, #28]
 8006952:	440a      	add	r2, r1
 8006954:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006958:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800695c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800695e:	79fb      	ldrb	r3, [r7, #7]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d14b      	bne.n	80069fc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d009      	beq.n	8006980 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	4413      	add	r3, r2
 8006974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006978:	461a      	mov	r2, r3
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	78db      	ldrb	r3, [r3, #3]
 8006984:	2b01      	cmp	r3, #1
 8006986:	d128      	bne.n	80069da <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006994:	2b00      	cmp	r3, #0
 8006996:	d110      	bne.n	80069ba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	69ba      	ldr	r2, [r7, #24]
 80069a8:	0151      	lsls	r1, r2, #5
 80069aa:	69fa      	ldr	r2, [r7, #28]
 80069ac:	440a      	add	r2, r1
 80069ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80069b6:	6013      	str	r3, [r2, #0]
 80069b8:	e00f      	b.n	80069da <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	015a      	lsls	r2, r3, #5
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	4413      	add	r3, r2
 80069c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	69ba      	ldr	r2, [r7, #24]
 80069ca:	0151      	lsls	r1, r2, #5
 80069cc:	69fa      	ldr	r2, [r7, #28]
 80069ce:	440a      	add	r2, r1
 80069d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069d8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	015a      	lsls	r2, r3, #5
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	4413      	add	r3, r2
 80069e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	69ba      	ldr	r2, [r7, #24]
 80069ea:	0151      	lsls	r1, r2, #5
 80069ec:	69fa      	ldr	r2, [r7, #28]
 80069ee:	440a      	add	r2, r1
 80069f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80069f8:	6013      	str	r3, [r2, #0]
 80069fa:	e12f      	b.n	8006c5c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	015a      	lsls	r2, r3, #5
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	4413      	add	r3, r2
 8006a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	69ba      	ldr	r2, [r7, #24]
 8006a0c:	0151      	lsls	r1, r2, #5
 8006a0e:	69fa      	ldr	r2, [r7, #28]
 8006a10:	440a      	add	r2, r1
 8006a12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a1a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	78db      	ldrb	r3, [r3, #3]
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d015      	beq.n	8006a50 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	695b      	ldr	r3, [r3, #20]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 8117 	beq.w	8006c5c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	f003 030f 	and.w	r3, r3, #15
 8006a3e:	2101      	movs	r1, #1
 8006a40:	fa01 f303 	lsl.w	r3, r1, r3
 8006a44:	69f9      	ldr	r1, [r7, #28]
 8006a46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	634b      	str	r3, [r1, #52]	; 0x34
 8006a4e:	e105      	b.n	8006c5c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d110      	bne.n	8006a82 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	69ba      	ldr	r2, [r7, #24]
 8006a70:	0151      	lsls	r1, r2, #5
 8006a72:	69fa      	ldr	r2, [r7, #28]
 8006a74:	440a      	add	r2, r1
 8006a76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a7e:	6013      	str	r3, [r2, #0]
 8006a80:	e00f      	b.n	8006aa2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	015a      	lsls	r2, r3, #5
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	4413      	add	r3, r2
 8006a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	69ba      	ldr	r2, [r7, #24]
 8006a92:	0151      	lsls	r1, r2, #5
 8006a94:	69fa      	ldr	r2, [r7, #28]
 8006a96:	440a      	add	r2, r1
 8006a98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006aa0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	68d9      	ldr	r1, [r3, #12]
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	781a      	ldrb	r2, [r3, #0]
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	b298      	uxth	r0, r3
 8006ab0:	79fb      	ldrb	r3, [r7, #7]
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f000 fa2b 	bl	8006f12 <USB_WritePacket>
 8006abc:	e0ce      	b.n	8006c5c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	015a      	lsls	r2, r3, #5
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	69ba      	ldr	r2, [r7, #24]
 8006ace:	0151      	lsls	r1, r2, #5
 8006ad0:	69fa      	ldr	r2, [r7, #28]
 8006ad2:	440a      	add	r2, r1
 8006ad4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ad8:	0cdb      	lsrs	r3, r3, #19
 8006ada:	04db      	lsls	r3, r3, #19
 8006adc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	015a      	lsls	r2, r3, #5
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	69ba      	ldr	r2, [r7, #24]
 8006aee:	0151      	lsls	r1, r2, #5
 8006af0:	69fa      	ldr	r2, [r7, #28]
 8006af2:	440a      	add	r2, r1
 8006af4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006af8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006afc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b00:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d126      	bne.n	8006b58 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	015a      	lsls	r2, r3, #5
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	4413      	add	r3, r2
 8006b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b16:	691a      	ldr	r2, [r3, #16]
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b20:	69b9      	ldr	r1, [r7, #24]
 8006b22:	0148      	lsls	r0, r1, #5
 8006b24:	69f9      	ldr	r1, [r7, #28]
 8006b26:	4401      	add	r1, r0
 8006b28:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	015a      	lsls	r2, r3, #5
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	4413      	add	r3, r2
 8006b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	69ba      	ldr	r2, [r7, #24]
 8006b40:	0151      	lsls	r1, r2, #5
 8006b42:	69fa      	ldr	r2, [r7, #28]
 8006b44:	440a      	add	r2, r1
 8006b46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b4e:	6113      	str	r3, [r2, #16]
 8006b50:	e036      	b.n	8006bc0 <USB_EPStartXfer+0x3dc>
 8006b52:	bf00      	nop
 8006b54:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	695a      	ldr	r2, [r3, #20]
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	4413      	add	r3, r2
 8006b62:	1e5a      	subs	r2, r3, #1
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b6c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	015a      	lsls	r2, r3, #5
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	4413      	add	r3, r2
 8006b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b7a:	691a      	ldr	r2, [r3, #16]
 8006b7c:	8afb      	ldrh	r3, [r7, #22]
 8006b7e:	04d9      	lsls	r1, r3, #19
 8006b80:	4b39      	ldr	r3, [pc, #228]	; (8006c68 <USB_EPStartXfer+0x484>)
 8006b82:	400b      	ands	r3, r1
 8006b84:	69b9      	ldr	r1, [r7, #24]
 8006b86:	0148      	lsls	r0, r1, #5
 8006b88:	69f9      	ldr	r1, [r7, #28]
 8006b8a:	4401      	add	r1, r0
 8006b8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b90:	4313      	orrs	r3, r2
 8006b92:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	015a      	lsls	r2, r3, #5
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba0:	691a      	ldr	r2, [r3, #16]
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	8af9      	ldrh	r1, [r7, #22]
 8006ba8:	fb01 f303 	mul.w	r3, r1, r3
 8006bac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bb0:	69b9      	ldr	r1, [r7, #24]
 8006bb2:	0148      	lsls	r0, r1, #5
 8006bb4:	69f9      	ldr	r1, [r7, #28]
 8006bb6:	4401      	add	r1, r0
 8006bb8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006bc0:	79fb      	ldrb	r3, [r7, #7]
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d10d      	bne.n	8006be2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d009      	beq.n	8006be2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	68d9      	ldr	r1, [r3, #12]
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	015a      	lsls	r2, r3, #5
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	4413      	add	r3, r2
 8006bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bde:	460a      	mov	r2, r1
 8006be0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	78db      	ldrb	r3, [r3, #3]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d128      	bne.n	8006c3c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d110      	bne.n	8006c1c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	015a      	lsls	r2, r3, #5
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	4413      	add	r3, r2
 8006c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	69ba      	ldr	r2, [r7, #24]
 8006c0a:	0151      	lsls	r1, r2, #5
 8006c0c:	69fa      	ldr	r2, [r7, #28]
 8006c0e:	440a      	add	r2, r1
 8006c10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c18:	6013      	str	r3, [r2, #0]
 8006c1a:	e00f      	b.n	8006c3c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	69ba      	ldr	r2, [r7, #24]
 8006c2c:	0151      	lsls	r1, r2, #5
 8006c2e:	69fa      	ldr	r2, [r7, #28]
 8006c30:	440a      	add	r2, r1
 8006c32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c3a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	015a      	lsls	r2, r3, #5
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	4413      	add	r3, r2
 8006c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	69ba      	ldr	r2, [r7, #24]
 8006c4c:	0151      	lsls	r1, r2, #5
 8006c4e:	69fa      	ldr	r2, [r7, #28]
 8006c50:	440a      	add	r2, r1
 8006c52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3720      	adds	r7, #32
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	1ff80000 	.word	0x1ff80000

08006c6c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b087      	sub	sp, #28
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	4613      	mov	r3, r2
 8006c78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	785b      	ldrb	r3, [r3, #1]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	f040 80cd 	bne.w	8006e28 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	695b      	ldr	r3, [r3, #20]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d132      	bne.n	8006cfc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	015a      	lsls	r2, r3, #5
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	693a      	ldr	r2, [r7, #16]
 8006ca6:	0151      	lsls	r1, r2, #5
 8006ca8:	697a      	ldr	r2, [r7, #20]
 8006caa:	440a      	add	r2, r1
 8006cac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cb0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006cb4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006cb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	015a      	lsls	r2, r3, #5
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	0151      	lsls	r1, r2, #5
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	440a      	add	r2, r1
 8006cd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006cd8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	0151      	lsls	r1, r2, #5
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	440a      	add	r2, r1
 8006cf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cf4:	0cdb      	lsrs	r3, r3, #19
 8006cf6:	04db      	lsls	r3, r3, #19
 8006cf8:	6113      	str	r3, [r2, #16]
 8006cfa:	e04e      	b.n	8006d9a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	015a      	lsls	r2, r3, #5
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	0151      	lsls	r1, r2, #5
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	440a      	add	r2, r1
 8006d12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d16:	0cdb      	lsrs	r3, r3, #19
 8006d18:	04db      	lsls	r3, r3, #19
 8006d1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	0151      	lsls	r1, r2, #5
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	440a      	add	r2, r1
 8006d32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d3e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	695a      	ldr	r2, [r3, #20]
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d903      	bls.n	8006d54 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	689a      	ldr	r2, [r3, #8]
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	015a      	lsls	r2, r3, #5
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	0151      	lsls	r1, r2, #5
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	440a      	add	r2, r1
 8006d6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	015a      	lsls	r2, r3, #5
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d80:	691a      	ldr	r2, [r3, #16]
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d8a:	6939      	ldr	r1, [r7, #16]
 8006d8c:	0148      	lsls	r0, r1, #5
 8006d8e:	6979      	ldr	r1, [r7, #20]
 8006d90:	4401      	add	r1, r0
 8006d92:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006d96:	4313      	orrs	r3, r2
 8006d98:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006d9a:	79fb      	ldrb	r3, [r7, #7]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d11e      	bne.n	8006dde <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d009      	beq.n	8006dbc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	015a      	lsls	r2, r3, #5
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	4413      	add	r3, r2
 8006db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db4:	461a      	mov	r2, r3
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	015a      	lsls	r2, r3, #5
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	0151      	lsls	r1, r2, #5
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	440a      	add	r2, r1
 8006dd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dd6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006dda:	6013      	str	r3, [r2, #0]
 8006ddc:	e092      	b.n	8006f04 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	015a      	lsls	r2, r3, #5
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	4413      	add	r3, r2
 8006de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	0151      	lsls	r1, r2, #5
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	440a      	add	r2, r1
 8006df4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006df8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006dfc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d07e      	beq.n	8006f04 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	f003 030f 	and.w	r3, r3, #15
 8006e16:	2101      	movs	r1, #1
 8006e18:	fa01 f303 	lsl.w	r3, r1, r3
 8006e1c:	6979      	ldr	r1, [r7, #20]
 8006e1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e22:	4313      	orrs	r3, r2
 8006e24:	634b      	str	r3, [r1, #52]	; 0x34
 8006e26:	e06d      	b.n	8006f04 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	015a      	lsls	r2, r3, #5
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	4413      	add	r3, r2
 8006e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	0151      	lsls	r1, r2, #5
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	440a      	add	r2, r1
 8006e3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e42:	0cdb      	lsrs	r3, r3, #19
 8006e44:	04db      	lsls	r3, r3, #19
 8006e46:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	015a      	lsls	r2, r3, #5
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	0151      	lsls	r1, r2, #5
 8006e5a:	697a      	ldr	r2, [r7, #20]
 8006e5c:	440a      	add	r2, r1
 8006e5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e62:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e66:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e6a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	695b      	ldr	r3, [r3, #20]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d003      	beq.n	8006e7c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	689a      	ldr	r2, [r3, #8]
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	0151      	lsls	r1, r2, #5
 8006e8e:	697a      	ldr	r2, [r7, #20]
 8006e90:	440a      	add	r2, r1
 8006e92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e9a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	015a      	lsls	r2, r3, #5
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea8:	691a      	ldr	r2, [r3, #16]
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006eb2:	6939      	ldr	r1, [r7, #16]
 8006eb4:	0148      	lsls	r0, r1, #5
 8006eb6:	6979      	ldr	r1, [r7, #20]
 8006eb8:	4401      	add	r1, r0
 8006eba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006ec2:	79fb      	ldrb	r3, [r7, #7]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d10d      	bne.n	8006ee4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d009      	beq.n	8006ee4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	68d9      	ldr	r1, [r3, #12]
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	015a      	lsls	r2, r3, #5
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	4413      	add	r3, r2
 8006edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee0:	460a      	mov	r2, r1
 8006ee2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	693a      	ldr	r2, [r7, #16]
 8006ef4:	0151      	lsls	r1, r2, #5
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	440a      	add	r2, r1
 8006efa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006efe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	371c      	adds	r7, #28
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr

08006f12 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006f12:	b480      	push	{r7}
 8006f14:	b089      	sub	sp, #36	; 0x24
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	60f8      	str	r0, [r7, #12]
 8006f1a:	60b9      	str	r1, [r7, #8]
 8006f1c:	4611      	mov	r1, r2
 8006f1e:	461a      	mov	r2, r3
 8006f20:	460b      	mov	r3, r1
 8006f22:	71fb      	strb	r3, [r7, #7]
 8006f24:	4613      	mov	r3, r2
 8006f26:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006f30:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d11a      	bne.n	8006f6e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006f38:	88bb      	ldrh	r3, [r7, #4]
 8006f3a:	3303      	adds	r3, #3
 8006f3c:	089b      	lsrs	r3, r3, #2
 8006f3e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006f40:	2300      	movs	r3, #0
 8006f42:	61bb      	str	r3, [r7, #24]
 8006f44:	e00f      	b.n	8006f66 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006f46:	79fb      	ldrb	r3, [r7, #7]
 8006f48:	031a      	lsls	r2, r3, #12
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f52:	461a      	mov	r2, r3
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	3304      	adds	r3, #4
 8006f5e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	3301      	adds	r3, #1
 8006f64:	61bb      	str	r3, [r7, #24]
 8006f66:	69ba      	ldr	r2, [r7, #24]
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d3eb      	bcc.n	8006f46 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3724      	adds	r7, #36	; 0x24
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b089      	sub	sp, #36	; 0x24
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	4613      	mov	r3, r2
 8006f88:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006f92:	88fb      	ldrh	r3, [r7, #6]
 8006f94:	3303      	adds	r3, #3
 8006f96:	089b      	lsrs	r3, r3, #2
 8006f98:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	61bb      	str	r3, [r7, #24]
 8006f9e:	e00b      	b.n	8006fb8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	601a      	str	r2, [r3, #0]
    pDest++;
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	3304      	adds	r3, #4
 8006fb0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	61bb      	str	r3, [r7, #24]
 8006fb8:	69ba      	ldr	r2, [r7, #24]
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d3ef      	bcc.n	8006fa0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006fc0:	69fb      	ldr	r3, [r7, #28]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3724      	adds	r7, #36	; 0x24
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr

08006fce <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b085      	sub	sp, #20
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
 8006fd6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	785b      	ldrb	r3, [r3, #1]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d12c      	bne.n	8007044 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	015a      	lsls	r2, r3, #5
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	db12      	blt.n	8007022 <USB_EPSetStall+0x54>
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00f      	beq.n	8007022 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	015a      	lsls	r2, r3, #5
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	4413      	add	r3, r2
 800700a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	0151      	lsls	r1, r2, #5
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	440a      	add	r2, r1
 8007018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800701c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007020:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	015a      	lsls	r2, r3, #5
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	4413      	add	r3, r2
 800702a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68ba      	ldr	r2, [r7, #8]
 8007032:	0151      	lsls	r1, r2, #5
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	440a      	add	r2, r1
 8007038:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800703c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007040:	6013      	str	r3, [r2, #0]
 8007042:	e02b      	b.n	800709c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	4413      	add	r3, r2
 800704c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	db12      	blt.n	800707c <USB_EPSetStall+0xae>
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00f      	beq.n	800707c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	015a      	lsls	r2, r3, #5
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	4413      	add	r3, r2
 8007064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	0151      	lsls	r1, r2, #5
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	440a      	add	r2, r1
 8007072:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007076:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800707a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	015a      	lsls	r2, r3, #5
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4413      	add	r3, r2
 8007084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	0151      	lsls	r1, r2, #5
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	440a      	add	r2, r1
 8007092:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007096:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800709a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr

080070aa <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80070aa:	b480      	push	{r7}
 80070ac:	b085      	sub	sp, #20
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
 80070b2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	785b      	ldrb	r3, [r3, #1]
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d128      	bne.n	8007118 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	015a      	lsls	r2, r3, #5
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	4413      	add	r3, r2
 80070ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68ba      	ldr	r2, [r7, #8]
 80070d6:	0151      	lsls	r1, r2, #5
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	440a      	add	r2, r1
 80070dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80070e4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	78db      	ldrb	r3, [r3, #3]
 80070ea:	2b03      	cmp	r3, #3
 80070ec:	d003      	beq.n	80070f6 <USB_EPClearStall+0x4c>
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	78db      	ldrb	r3, [r3, #3]
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d138      	bne.n	8007168 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	015a      	lsls	r2, r3, #5
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	4413      	add	r3, r2
 80070fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	0151      	lsls	r1, r2, #5
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	440a      	add	r2, r1
 800710c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007114:	6013      	str	r3, [r2, #0]
 8007116:	e027      	b.n	8007168 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	015a      	lsls	r2, r3, #5
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	4413      	add	r3, r2
 8007120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	0151      	lsls	r1, r2, #5
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	440a      	add	r2, r1
 800712e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007132:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007136:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	78db      	ldrb	r3, [r3, #3]
 800713c:	2b03      	cmp	r3, #3
 800713e:	d003      	beq.n	8007148 <USB_EPClearStall+0x9e>
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	78db      	ldrb	r3, [r3, #3]
 8007144:	2b02      	cmp	r3, #2
 8007146:	d10f      	bne.n	8007168 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	015a      	lsls	r2, r3, #5
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	4413      	add	r3, r2
 8007150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68ba      	ldr	r2, [r7, #8]
 8007158:	0151      	lsls	r1, r2, #5
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	440a      	add	r2, r1
 800715e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007166:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3714      	adds	r7, #20
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr

08007176 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007176:	b480      	push	{r7}
 8007178:	b085      	sub	sp, #20
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	460b      	mov	r3, r1
 8007180:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007194:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007198:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	78fb      	ldrb	r3, [r7, #3]
 80071a4:	011b      	lsls	r3, r3, #4
 80071a6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80071aa:	68f9      	ldr	r1, [r7, #12]
 80071ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071b0:	4313      	orrs	r3, r2
 80071b2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3714      	adds	r7, #20
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80071c2:	b480      	push	{r7}
 80071c4:	b085      	sub	sp, #20
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80071dc:	f023 0303 	bic.w	r3, r3, #3
 80071e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071f0:	f023 0302 	bic.w	r3, r3, #2
 80071f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3714      	adds	r7, #20
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800721e:	f023 0303 	bic.w	r3, r3, #3
 8007222:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007232:	f043 0302 	orr.w	r3, r3, #2
 8007236:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3714      	adds	r7, #20
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007246:	b480      	push	{r7}
 8007248:	b085      	sub	sp, #20
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	699b      	ldr	r3, [r3, #24]
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	4013      	ands	r3, r2
 800725c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800725e:	68fb      	ldr	r3, [r7, #12]
}
 8007260:	4618      	mov	r0, r3
 8007262:	3714      	adds	r7, #20
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800726c:	b480      	push	{r7}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007288:	69db      	ldr	r3, [r3, #28]
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	4013      	ands	r3, r2
 800728e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	0c1b      	lsrs	r3, r3, #16
}
 8007294:	4618      	mov	r0, r3
 8007296:	3714      	adds	r7, #20
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072b2:	699b      	ldr	r3, [r3, #24]
 80072b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072bc:	69db      	ldr	r3, [r3, #28]
 80072be:	68ba      	ldr	r2, [r7, #8]
 80072c0:	4013      	ands	r3, r2
 80072c2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	b29b      	uxth	r3, r3
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3714      	adds	r7, #20
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	460b      	mov	r3, r1
 80072de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80072e4:	78fb      	ldrb	r3, [r7, #3]
 80072e6:	015a      	lsls	r2, r3, #5
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072fa:	695b      	ldr	r3, [r3, #20]
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	4013      	ands	r3, r2
 8007300:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007302:	68bb      	ldr	r3, [r7, #8]
}
 8007304:	4618      	mov	r0, r3
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007310:	b480      	push	{r7}
 8007312:	b087      	sub	sp, #28
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	460b      	mov	r3, r1
 800731a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007332:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007334:	78fb      	ldrb	r3, [r7, #3]
 8007336:	f003 030f 	and.w	r3, r3, #15
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	fa22 f303 	lsr.w	r3, r2, r3
 8007340:	01db      	lsls	r3, r3, #7
 8007342:	b2db      	uxtb	r3, r3
 8007344:	693a      	ldr	r2, [r7, #16]
 8007346:	4313      	orrs	r3, r2
 8007348:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800734a:	78fb      	ldrb	r3, [r7, #3]
 800734c:	015a      	lsls	r2, r3, #5
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	4413      	add	r3, r2
 8007352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	693a      	ldr	r2, [r7, #16]
 800735a:	4013      	ands	r3, r2
 800735c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800735e:	68bb      	ldr	r3, [r7, #8]
}
 8007360:	4618      	mov	r0, r3
 8007362:	371c      	adds	r7, #28
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	695b      	ldr	r3, [r3, #20]
 8007378:	f003 0301 	and.w	r3, r3, #1
}
 800737c:	4618      	mov	r0, r3
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073a2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80073a6:	f023 0307 	bic.w	r3, r3, #7
 80073aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3714      	adds	r7, #20
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
	...

080073d0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b087      	sub	sp, #28
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	460b      	mov	r3, r1
 80073da:	607a      	str	r2, [r7, #4]
 80073dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	333c      	adds	r3, #60	; 0x3c
 80073e6:	3304      	adds	r3, #4
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	4a26      	ldr	r2, [pc, #152]	; (8007488 <USB_EP0_OutStart+0xb8>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d90a      	bls.n	800740a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007400:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007404:	d101      	bne.n	800740a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007406:	2300      	movs	r3, #0
 8007408:	e037      	b.n	800747a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007410:	461a      	mov	r2, r3
 8007412:	2300      	movs	r3, #0
 8007414:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007424:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007428:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	697a      	ldr	r2, [r7, #20]
 8007434:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007438:	f043 0318 	orr.w	r3, r3, #24
 800743c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800744c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007450:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007452:	7afb      	ldrb	r3, [r7, #11]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d10f      	bne.n	8007478 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800745e:	461a      	mov	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007472:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007476:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	371c      	adds	r7, #28
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	4f54300a 	.word	0x4f54300a

0800748c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007494:	2300      	movs	r3, #0
 8007496:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	3301      	adds	r3, #1
 800749c:	60fb      	str	r3, [r7, #12]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	4a13      	ldr	r2, [pc, #76]	; (80074f0 <USB_CoreReset+0x64>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d901      	bls.n	80074aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80074a6:	2303      	movs	r3, #3
 80074a8:	e01b      	b.n	80074e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	daf2      	bge.n	8007498 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80074b2:	2300      	movs	r3, #0
 80074b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	f043 0201 	orr.w	r2, r3, #1
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	3301      	adds	r3, #1
 80074c6:	60fb      	str	r3, [r7, #12]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	4a09      	ldr	r2, [pc, #36]	; (80074f0 <USB_CoreReset+0x64>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d901      	bls.n	80074d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e006      	b.n	80074e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	691b      	ldr	r3, [r3, #16]
 80074d8:	f003 0301 	and.w	r3, r3, #1
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d0f0      	beq.n	80074c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3714      	adds	r7, #20
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	00030d40 	.word	0x00030d40

080074f4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	460b      	mov	r3, r1
 80074fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007500:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007504:	f002 f940 	bl	8009788 <malloc>
 8007508:	4603      	mov	r3, r0
 800750a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d105      	bne.n	800751e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800751a:	2302      	movs	r3, #2
 800751c:	e066      	b.n	80075ec <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	7c1b      	ldrb	r3, [r3, #16]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d119      	bne.n	8007562 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800752e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007532:	2202      	movs	r2, #2
 8007534:	2181      	movs	r1, #129	; 0x81
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f001 ffad 	bl	8009496 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007542:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007546:	2202      	movs	r2, #2
 8007548:	2101      	movs	r1, #1
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f001 ffa3 	bl	8009496 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2210      	movs	r2, #16
 800755c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007560:	e016      	b.n	8007590 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007562:	2340      	movs	r3, #64	; 0x40
 8007564:	2202      	movs	r2, #2
 8007566:	2181      	movs	r1, #129	; 0x81
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f001 ff94 	bl	8009496 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007574:	2340      	movs	r3, #64	; 0x40
 8007576:	2202      	movs	r2, #2
 8007578:	2101      	movs	r1, #1
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f001 ff8b 	bl	8009496 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2210      	movs	r2, #16
 800758c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007590:	2308      	movs	r3, #8
 8007592:	2203      	movs	r2, #3
 8007594:	2182      	movs	r1, #130	; 0x82
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f001 ff7d 	bl	8009496 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	7c1b      	ldrb	r3, [r3, #16]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d109      	bne.n	80075da <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80075cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075d0:	2101      	movs	r1, #1
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f002 f84e 	bl	8009674 <USBD_LL_PrepareReceive>
 80075d8:	e007      	b.n	80075ea <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80075e0:	2340      	movs	r3, #64	; 0x40
 80075e2:	2101      	movs	r1, #1
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f002 f845 	bl	8009674 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	460b      	mov	r3, r1
 80075fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8007600:	2300      	movs	r3, #0
 8007602:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007604:	2181      	movs	r1, #129	; 0x81
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f001 ff6b 	bl	80094e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007612:	2101      	movs	r1, #1
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f001 ff64 	bl	80094e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007622:	2182      	movs	r1, #130	; 0x82
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f001 ff5c 	bl	80094e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00e      	beq.n	8007662 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007654:	4618      	mov	r0, r3
 8007656:	f002 f89f 	bl	8009798 <free>
    pdev->pClassData = NULL;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8007662:	7bfb      	ldrb	r3, [r7, #15]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3710      	adds	r7, #16
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800767c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800767e:	2300      	movs	r3, #0
 8007680:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007682:	2300      	movs	r3, #0
 8007684:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007686:	2300      	movs	r3, #0
 8007688:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007692:	2b00      	cmp	r3, #0
 8007694:	d03a      	beq.n	800770c <USBD_CDC_Setup+0xa0>
 8007696:	2b20      	cmp	r3, #32
 8007698:	f040 8097 	bne.w	80077ca <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	88db      	ldrh	r3, [r3, #6]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d029      	beq.n	80076f8 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	b25b      	sxtb	r3, r3
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	da11      	bge.n	80076d2 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	683a      	ldr	r2, [r7, #0]
 80076b8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80076ba:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80076bc:	683a      	ldr	r2, [r7, #0]
 80076be:	88d2      	ldrh	r2, [r2, #6]
 80076c0:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80076c2:	6939      	ldr	r1, [r7, #16]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	88db      	ldrh	r3, [r3, #6]
 80076c8:	461a      	mov	r2, r3
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f001 fa9d 	bl	8008c0a <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80076d0:	e082      	b.n	80077d8 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	785a      	ldrb	r2, [r3, #1]
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	88db      	ldrh	r3, [r3, #6]
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80076e8:	6939      	ldr	r1, [r7, #16]
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	88db      	ldrh	r3, [r3, #6]
 80076ee:	461a      	mov	r2, r3
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f001 fab6 	bl	8008c62 <USBD_CtlPrepareRx>
    break;
 80076f6:	e06f      	b.n	80077d8 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	683a      	ldr	r2, [r7, #0]
 8007702:	7850      	ldrb	r0, [r2, #1]
 8007704:	2200      	movs	r2, #0
 8007706:	6839      	ldr	r1, [r7, #0]
 8007708:	4798      	blx	r3
    break;
 800770a:	e065      	b.n	80077d8 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	785b      	ldrb	r3, [r3, #1]
 8007710:	2b0b      	cmp	r3, #11
 8007712:	d84f      	bhi.n	80077b4 <USBD_CDC_Setup+0x148>
 8007714:	a201      	add	r2, pc, #4	; (adr r2, 800771c <USBD_CDC_Setup+0xb0>)
 8007716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771a:	bf00      	nop
 800771c:	0800774d 	.word	0x0800774d
 8007720:	080077c3 	.word	0x080077c3
 8007724:	080077b5 	.word	0x080077b5
 8007728:	080077b5 	.word	0x080077b5
 800772c:	080077b5 	.word	0x080077b5
 8007730:	080077b5 	.word	0x080077b5
 8007734:	080077b5 	.word	0x080077b5
 8007738:	080077b5 	.word	0x080077b5
 800773c:	080077b5 	.word	0x080077b5
 8007740:	080077b5 	.word	0x080077b5
 8007744:	08007775 	.word	0x08007775
 8007748:	0800779d 	.word	0x0800779d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007752:	2b03      	cmp	r3, #3
 8007754:	d107      	bne.n	8007766 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007756:	f107 030c 	add.w	r3, r7, #12
 800775a:	2202      	movs	r2, #2
 800775c:	4619      	mov	r1, r3
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f001 fa53 	bl	8008c0a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007764:	e030      	b.n	80077c8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007766:	6839      	ldr	r1, [r7, #0]
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f001 f9dd 	bl	8008b28 <USBD_CtlError>
        ret = USBD_FAIL;
 800776e:	2303      	movs	r3, #3
 8007770:	75fb      	strb	r3, [r7, #23]
      break;
 8007772:	e029      	b.n	80077c8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800777a:	2b03      	cmp	r3, #3
 800777c:	d107      	bne.n	800778e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800777e:	f107 030f 	add.w	r3, r7, #15
 8007782:	2201      	movs	r2, #1
 8007784:	4619      	mov	r1, r3
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f001 fa3f 	bl	8008c0a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800778c:	e01c      	b.n	80077c8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800778e:	6839      	ldr	r1, [r7, #0]
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f001 f9c9 	bl	8008b28 <USBD_CtlError>
        ret = USBD_FAIL;
 8007796:	2303      	movs	r3, #3
 8007798:	75fb      	strb	r3, [r7, #23]
      break;
 800779a:	e015      	b.n	80077c8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077a2:	2b03      	cmp	r3, #3
 80077a4:	d00f      	beq.n	80077c6 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80077a6:	6839      	ldr	r1, [r7, #0]
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f001 f9bd 	bl	8008b28 <USBD_CtlError>
        ret = USBD_FAIL;
 80077ae:	2303      	movs	r3, #3
 80077b0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80077b2:	e008      	b.n	80077c6 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80077b4:	6839      	ldr	r1, [r7, #0]
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f001 f9b6 	bl	8008b28 <USBD_CtlError>
      ret = USBD_FAIL;
 80077bc:	2303      	movs	r3, #3
 80077be:	75fb      	strb	r3, [r7, #23]
      break;
 80077c0:	e002      	b.n	80077c8 <USBD_CDC_Setup+0x15c>
      break;
 80077c2:	bf00      	nop
 80077c4:	e008      	b.n	80077d8 <USBD_CDC_Setup+0x16c>
      break;
 80077c6:	bf00      	nop
    }
    break;
 80077c8:	e006      	b.n	80077d8 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80077ca:	6839      	ldr	r1, [r7, #0]
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f001 f9ab 	bl	8008b28 <USBD_CtlError>
    ret = USBD_FAIL;
 80077d2:	2303      	movs	r3, #3
 80077d4:	75fb      	strb	r3, [r7, #23]
    break;
 80077d6:	bf00      	nop
  }

  return (uint8_t)ret;
 80077d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3718      	adds	r7, #24
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop

080077e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	460b      	mov	r3, r1
 80077ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d101      	bne.n	8007806 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007802:	2303      	movs	r3, #3
 8007804:	e049      	b.n	800789a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800780c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800780e:	78fa      	ldrb	r2, [r7, #3]
 8007810:	6879      	ldr	r1, [r7, #4]
 8007812:	4613      	mov	r3, r2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	4413      	add	r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	440b      	add	r3, r1
 800781c:	3318      	adds	r3, #24
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d029      	beq.n	8007878 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007824:	78fa      	ldrb	r2, [r7, #3]
 8007826:	6879      	ldr	r1, [r7, #4]
 8007828:	4613      	mov	r3, r2
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	4413      	add	r3, r2
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	440b      	add	r3, r1
 8007832:	3318      	adds	r3, #24
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	78f9      	ldrb	r1, [r7, #3]
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	460b      	mov	r3, r1
 800783c:	00db      	lsls	r3, r3, #3
 800783e:	1a5b      	subs	r3, r3, r1
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	4403      	add	r3, r0
 8007844:	3344      	adds	r3, #68	; 0x44
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	fbb2 f1f3 	udiv	r1, r2, r3
 800784c:	fb03 f301 	mul.w	r3, r3, r1
 8007850:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007852:	2b00      	cmp	r3, #0
 8007854:	d110      	bne.n	8007878 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007856:	78fa      	ldrb	r2, [r7, #3]
 8007858:	6879      	ldr	r1, [r7, #4]
 800785a:	4613      	mov	r3, r2
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	4413      	add	r3, r2
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	440b      	add	r3, r1
 8007864:	3318      	adds	r3, #24
 8007866:	2200      	movs	r2, #0
 8007868:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800786a:	78f9      	ldrb	r1, [r7, #3]
 800786c:	2300      	movs	r3, #0
 800786e:	2200      	movs	r2, #0
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f001 fede 	bl	8009632 <USBD_LL_Transmit>
 8007876:	e00f      	b.n	8007898 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	2200      	movs	r2, #0
 800787c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	68ba      	ldr	r2, [r7, #8]
 800788a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007894:	78fa      	ldrb	r2, [r7, #3]
 8007896:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b084      	sub	sp, #16
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
 80078aa:	460b      	mov	r3, r1
 80078ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078b4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d101      	bne.n	80078c4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80078c0:	2303      	movs	r3, #3
 80078c2:	e015      	b.n	80078f0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80078c4:	78fb      	ldrb	r3, [r7, #3]
 80078c6:	4619      	mov	r1, r3
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f001 fef4 	bl	80096b6 <USBD_LL_GetRxDataSize>
 80078ce:	4602      	mov	r2, r0
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80078ea:	4611      	mov	r1, r2
 80078ec:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007906:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d015      	beq.n	800793e <USBD_CDC_EP0_RxReady+0x46>
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007918:	2bff      	cmp	r3, #255	; 0xff
 800791a:	d010      	beq.n	800793e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800792a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007932:	b292      	uxth	r2, r2
 8007934:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	22ff      	movs	r2, #255	; 0xff
 800793a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2243      	movs	r2, #67	; 0x43
 8007954:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007956:	4b03      	ldr	r3, [pc, #12]	; (8007964 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007958:	4618      	mov	r0, r3
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr
 8007964:	20000094 	.word	0x20000094

08007968 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2243      	movs	r2, #67	; 0x43
 8007974:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007976:	4b03      	ldr	r3, [pc, #12]	; (8007984 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007978:	4618      	mov	r0, r3
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr
 8007984:	20000050 	.word	0x20000050

08007988 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2243      	movs	r2, #67	; 0x43
 8007994:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007996:	4b03      	ldr	r3, [pc, #12]	; (80079a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007998:	4618      	mov	r0, r3
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr
 80079a4:	200000d8 	.word	0x200000d8

080079a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	220a      	movs	r2, #10
 80079b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80079b6:	4b03      	ldr	r3, [pc, #12]	; (80079c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr
 80079c4:	2000000c 	.word	0x2000000c

080079c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d101      	bne.n	80079dc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80079d8:	2303      	movs	r3, #3
 80079da:	e004      	b.n	80079e6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	683a      	ldr	r2, [r7, #0]
 80079e0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	370c      	adds	r7, #12
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr

080079f2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80079f2:	b480      	push	{r7}
 80079f4:	b087      	sub	sp, #28
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	60f8      	str	r0, [r7, #12]
 80079fa:	60b9      	str	r1, [r7, #8]
 80079fc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a04:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	68ba      	ldr	r2, [r7, #8]
 8007a0a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	371c      	adds	r7, #28
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a34:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	683a      	ldr	r2, [r7, #0]
 8007a3a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3714      	adds	r7, #20
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a5a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d101      	bne.n	8007a6e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	e01a      	b.n	8007aa4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d114      	bne.n	8007aa2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007a96:	2181      	movs	r1, #129	; 0x81
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f001 fdca 	bl	8009632 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3710      	adds	r7, #16
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007aba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d101      	bne.n	8007aca <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e016      	b.n	8007af8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	7c1b      	ldrb	r3, [r3, #16]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d109      	bne.n	8007ae6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ad8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007adc:	2101      	movs	r1, #1
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f001 fdc8 	bl	8009674 <USBD_LL_PrepareReceive>
 8007ae4:	e007      	b.n	8007af6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007aec:	2340      	movs	r3, #64	; 0x40
 8007aee:	2101      	movs	r1, #1
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f001 fdbf 	bl	8009674 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3710      	adds	r7, #16
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b086      	sub	sp, #24
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d101      	bne.n	8007b18 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007b14:	2303      	movs	r3, #3
 8007b16:	e025      	b.n	8007b64 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d003      	beq.n	8007b2a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d003      	beq.n	8007b3c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d003      	beq.n	8007b4a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	79fa      	ldrb	r2, [r7, #7]
 8007b56:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f001 fc35 	bl	80093c8 <USBD_LL_Init>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3718      	adds	r7, #24
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b76:	2300      	movs	r3, #0
 8007b78:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d101      	bne.n	8007b84 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007b80:	2303      	movs	r3, #3
 8007b82:	e010      	b.n	8007ba6 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	683a      	ldr	r2, [r7, #0]
 8007b88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b94:	f107 020e 	add.w	r2, r7, #14
 8007b98:	4610      	mov	r0, r2
 8007b9a:	4798      	blx	r3
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b082      	sub	sp, #8
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f001 fc52 	bl	8009460 <USBD_LL_Start>
 8007bbc:	4603      	mov	r3, r0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3708      	adds	r7, #8
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007bc6:	b480      	push	{r7}
 8007bc8:	b083      	sub	sp, #12
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	460b      	mov	r3, r1
 8007be6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007be8:	2303      	movs	r3, #3
 8007bea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d009      	beq.n	8007c0a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	78fa      	ldrb	r2, [r7, #3]
 8007c00:	4611      	mov	r1, r2
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	4798      	blx	r3
 8007c06:	4603      	mov	r3, r0
 8007c08:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d007      	beq.n	8007c3a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	78fa      	ldrb	r2, [r7, #3]
 8007c34:	4611      	mov	r1, r2
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	4798      	blx	r3
  }

  return USBD_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3708      	adds	r7, #8
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c54:	6839      	ldr	r1, [r7, #0]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f000 ff2c 	bl	8008ab4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c78:	f003 031f 	and.w	r3, r3, #31
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d00e      	beq.n	8007c9e <USBD_LL_SetupStage+0x5a>
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d302      	bcc.n	8007c8a <USBD_LL_SetupStage+0x46>
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	d014      	beq.n	8007cb2 <USBD_LL_SetupStage+0x6e>
 8007c88:	e01d      	b.n	8007cc6 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c90:	4619      	mov	r1, r3
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 fa18 	bl	80080c8 <USBD_StdDevReq>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8007c9c:	e020      	b.n	8007ce0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 fa7c 	bl	80081a4 <USBD_StdItfReq>
 8007cac:	4603      	mov	r3, r0
 8007cae:	73fb      	strb	r3, [r7, #15]
      break;
 8007cb0:	e016      	b.n	8007ce0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cb8:	4619      	mov	r1, r3
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fab8 	bl	8008230 <USBD_StdEPReq>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8007cc4:	e00c      	b.n	8007ce0 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007ccc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f001 fc23 	bl	8009520 <USBD_LL_StallEP>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	73fb      	strb	r3, [r7, #15]
      break;
 8007cde:	bf00      	nop
  }

  return ret;
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b086      	sub	sp, #24
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	60f8      	str	r0, [r7, #12]
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	607a      	str	r2, [r7, #4]
 8007cf6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007cf8:	7afb      	ldrb	r3, [r7, #11]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d137      	bne.n	8007d6e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007d04:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d0c:	2b03      	cmp	r3, #3
 8007d0e:	d14a      	bne.n	8007da6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	689a      	ldr	r2, [r3, #8]
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d913      	bls.n	8007d44 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	689a      	ldr	r2, [r3, #8]
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	1ad2      	subs	r2, r2, r3
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	68da      	ldr	r2, [r3, #12]
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	4293      	cmp	r3, r2
 8007d34:	bf28      	it	cs
 8007d36:	4613      	movcs	r3, r2
 8007d38:	461a      	mov	r2, r3
 8007d3a:	6879      	ldr	r1, [r7, #4]
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f000 ffad 	bl	8008c9c <USBD_CtlContinueRx>
 8007d42:	e030      	b.n	8007da6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00a      	beq.n	8007d66 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007d56:	2b03      	cmp	r3, #3
 8007d58:	d105      	bne.n	8007d66 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8007d66:	68f8      	ldr	r0, [r7, #12]
 8007d68:	f000 ffa9 	bl	8008cbe <USBD_CtlSendStatus>
 8007d6c:	e01b      	b.n	8007da6 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d013      	beq.n	8007da2 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007d80:	2b03      	cmp	r3, #3
 8007d82:	d10e      	bne.n	8007da2 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d8a:	699b      	ldr	r3, [r3, #24]
 8007d8c:	7afa      	ldrb	r2, [r7, #11]
 8007d8e:	4611      	mov	r1, r2
 8007d90:	68f8      	ldr	r0, [r7, #12]
 8007d92:	4798      	blx	r3
 8007d94:	4603      	mov	r3, r0
 8007d96:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007d98:	7dfb      	ldrb	r3, [r7, #23]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d003      	beq.n	8007da6 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8007d9e:	7dfb      	ldrb	r3, [r7, #23]
 8007da0:	e002      	b.n	8007da8 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007da2:	2303      	movs	r3, #3
 8007da4:	e000      	b.n	8007da8 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3718      	adds	r7, #24
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b086      	sub	sp, #24
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	460b      	mov	r3, r1
 8007dba:	607a      	str	r2, [r7, #4]
 8007dbc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007dbe:	7afb      	ldrb	r3, [r7, #11]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d16a      	bne.n	8007e9a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	3314      	adds	r3, #20
 8007dc8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	d155      	bne.n	8007e80 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	689a      	ldr	r2, [r3, #8]
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d914      	bls.n	8007e0a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	689a      	ldr	r2, [r3, #8]
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	1ad2      	subs	r2, r2, r3
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	461a      	mov	r2, r3
 8007df4:	6879      	ldr	r1, [r7, #4]
 8007df6:	68f8      	ldr	r0, [r7, #12]
 8007df8:	f000 ff22 	bl	8008c40 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	2200      	movs	r2, #0
 8007e00:	2100      	movs	r1, #0
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f001 fc36 	bl	8009674 <USBD_LL_PrepareReceive>
 8007e08:	e03a      	b.n	8007e80 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	68da      	ldr	r2, [r3, #12]
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d11c      	bne.n	8007e50 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	685a      	ldr	r2, [r3, #4]
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d316      	bcc.n	8007e50 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	685a      	ldr	r2, [r3, #4]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d20f      	bcs.n	8007e50 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007e30:	2200      	movs	r2, #0
 8007e32:	2100      	movs	r1, #0
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f000 ff03 	bl	8008c40 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e42:	2300      	movs	r3, #0
 8007e44:	2200      	movs	r2, #0
 8007e46:	2100      	movs	r1, #0
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f001 fc13 	bl	8009674 <USBD_LL_PrepareReceive>
 8007e4e:	e017      	b.n	8007e80 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00a      	beq.n	8007e72 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007e62:	2b03      	cmp	r3, #3
 8007e64:	d105      	bne.n	8007e72 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e72:	2180      	movs	r1, #128	; 0x80
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f001 fb53 	bl	8009520 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007e7a:	68f8      	ldr	r0, [r7, #12]
 8007e7c:	f000 ff32 	bl	8008ce4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d123      	bne.n	8007ed2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f7ff fe9b 	bl	8007bc6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007e98:	e01b      	b.n	8007ed2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ea0:	695b      	ldr	r3, [r3, #20]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d013      	beq.n	8007ece <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007eac:	2b03      	cmp	r3, #3
 8007eae:	d10e      	bne.n	8007ece <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eb6:	695b      	ldr	r3, [r3, #20]
 8007eb8:	7afa      	ldrb	r2, [r7, #11]
 8007eba:	4611      	mov	r1, r2
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	4798      	blx	r3
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007ec4:	7dfb      	ldrb	r3, [r7, #23]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d003      	beq.n	8007ed2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8007eca:	7dfb      	ldrb	r3, [r7, #23]
 8007ecc:	e002      	b.n	8007ed4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e000      	b.n	8007ed4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3718      	adds	r7, #24
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d009      	beq.n	8007f20 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	6852      	ldr	r2, [r2, #4]
 8007f18:	b2d2      	uxtb	r2, r2
 8007f1a:	4611      	mov	r1, r2
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f20:	2340      	movs	r3, #64	; 0x40
 8007f22:	2200      	movs	r2, #0
 8007f24:	2100      	movs	r1, #0
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f001 fab5 	bl	8009496 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2240      	movs	r2, #64	; 0x40
 8007f38:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f3c:	2340      	movs	r3, #64	; 0x40
 8007f3e:	2200      	movs	r2, #0
 8007f40:	2180      	movs	r1, #128	; 0x80
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f001 faa7 	bl	8009496 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2240      	movs	r2, #64	; 0x40
 8007f52:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3708      	adds	r7, #8
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007f5e:	b480      	push	{r7}
 8007f60:	b083      	sub	sp, #12
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
 8007f66:	460b      	mov	r3, r1
 8007f68:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	78fa      	ldrb	r2, [r7, #3]
 8007f6e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	370c      	adds	r7, #12
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr

08007f7e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007f7e:	b480      	push	{r7}
 8007f80:	b083      	sub	sp, #12
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2204      	movs	r2, #4
 8007f96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fb6:	2b04      	cmp	r3, #4
 8007fb8:	d105      	bne.n	8007fc6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	370c      	adds	r7, #12
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fe2:	2b03      	cmp	r3, #3
 8007fe4:	d10b      	bne.n	8007ffe <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fec:	69db      	ldr	r3, [r3, #28]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d005      	beq.n	8007ffe <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff8:	69db      	ldr	r3, [r3, #28]
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	3708      	adds	r7, #8
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	460b      	mov	r3, r1
 8008012:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	370c      	adds	r7, #12
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr

08008022 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008022:	b480      	push	{r7}
 8008024:	b083      	sub	sp, #12
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
 800802a:	460b      	mov	r3, r1
 800802c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	370c      	adds	r7, #12
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr

08008052 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b082      	sub	sp, #8
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2201      	movs	r2, #1
 800805e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008068:	2b00      	cmp	r3, #0
 800806a:	d009      	beq.n	8008080 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	6852      	ldr	r2, [r2, #4]
 8008078:	b2d2      	uxtb	r2, r2
 800807a:	4611      	mov	r1, r2
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	4798      	blx	r3
  }

  return USBD_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800808a:	b480      	push	{r7}
 800808c:	b087      	sub	sp, #28
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	3301      	adds	r3, #1
 80080a0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80080a8:	8a3b      	ldrh	r3, [r7, #16]
 80080aa:	021b      	lsls	r3, r3, #8
 80080ac:	b21a      	sxth	r2, r3
 80080ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	b21b      	sxth	r3, r3
 80080b6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80080b8:	89fb      	ldrh	r3, [r7, #14]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	371c      	adds	r7, #28
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr
	...

080080c8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080d2:	2300      	movs	r3, #0
 80080d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080de:	2b20      	cmp	r3, #32
 80080e0:	d004      	beq.n	80080ec <USBD_StdDevReq+0x24>
 80080e2:	2b40      	cmp	r3, #64	; 0x40
 80080e4:	d002      	beq.n	80080ec <USBD_StdDevReq+0x24>
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00a      	beq.n	8008100 <USBD_StdDevReq+0x38>
 80080ea:	e050      	b.n	800818e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	6839      	ldr	r1, [r7, #0]
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	4798      	blx	r3
 80080fa:	4603      	mov	r3, r0
 80080fc:	73fb      	strb	r3, [r7, #15]
    break;
 80080fe:	e04b      	b.n	8008198 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	785b      	ldrb	r3, [r3, #1]
 8008104:	2b09      	cmp	r3, #9
 8008106:	d83c      	bhi.n	8008182 <USBD_StdDevReq+0xba>
 8008108:	a201      	add	r2, pc, #4	; (adr r2, 8008110 <USBD_StdDevReq+0x48>)
 800810a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800810e:	bf00      	nop
 8008110:	08008165 	.word	0x08008165
 8008114:	08008179 	.word	0x08008179
 8008118:	08008183 	.word	0x08008183
 800811c:	0800816f 	.word	0x0800816f
 8008120:	08008183 	.word	0x08008183
 8008124:	08008143 	.word	0x08008143
 8008128:	08008139 	.word	0x08008139
 800812c:	08008183 	.word	0x08008183
 8008130:	0800815b 	.word	0x0800815b
 8008134:	0800814d 	.word	0x0800814d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008138:	6839      	ldr	r1, [r7, #0]
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f9ce 	bl	80084dc <USBD_GetDescriptor>
      break;
 8008140:	e024      	b.n	800818c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008142:	6839      	ldr	r1, [r7, #0]
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 fb33 	bl	80087b0 <USBD_SetAddress>
      break;
 800814a:	e01f      	b.n	800818c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800814c:	6839      	ldr	r1, [r7, #0]
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 fb70 	bl	8008834 <USBD_SetConfig>
 8008154:	4603      	mov	r3, r0
 8008156:	73fb      	strb	r3, [r7, #15]
      break;
 8008158:	e018      	b.n	800818c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800815a:	6839      	ldr	r1, [r7, #0]
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 fc0d 	bl	800897c <USBD_GetConfig>
      break;
 8008162:	e013      	b.n	800818c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008164:	6839      	ldr	r1, [r7, #0]
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 fc3c 	bl	80089e4 <USBD_GetStatus>
      break;
 800816c:	e00e      	b.n	800818c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800816e:	6839      	ldr	r1, [r7, #0]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 fc6a 	bl	8008a4a <USBD_SetFeature>
      break;
 8008176:	e009      	b.n	800818c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008178:	6839      	ldr	r1, [r7, #0]
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fc79 	bl	8008a72 <USBD_ClrFeature>
      break;
 8008180:	e004      	b.n	800818c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008182:	6839      	ldr	r1, [r7, #0]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 fccf 	bl	8008b28 <USBD_CtlError>
      break;
 800818a:	bf00      	nop
    }
    break;
 800818c:	e004      	b.n	8008198 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800818e:	6839      	ldr	r1, [r7, #0]
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 fcc9 	bl	8008b28 <USBD_CtlError>
    break;
 8008196:	bf00      	nop
  }

  return ret;
 8008198:	7bfb      	ldrb	r3, [r7, #15]
}
 800819a:	4618      	mov	r0, r3
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop

080081a4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081ae:	2300      	movs	r3, #0
 80081b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081ba:	2b20      	cmp	r3, #32
 80081bc:	d003      	beq.n	80081c6 <USBD_StdItfReq+0x22>
 80081be:	2b40      	cmp	r3, #64	; 0x40
 80081c0:	d001      	beq.n	80081c6 <USBD_StdItfReq+0x22>
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d12a      	bne.n	800821c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081cc:	3b01      	subs	r3, #1
 80081ce:	2b02      	cmp	r3, #2
 80081d0:	d81d      	bhi.n	800820e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	889b      	ldrh	r3, [r3, #4]
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d813      	bhi.n	8008204 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	6839      	ldr	r1, [r7, #0]
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	4798      	blx	r3
 80081ea:	4603      	mov	r3, r0
 80081ec:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	88db      	ldrh	r3, [r3, #6]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d110      	bne.n	8008218 <USBD_StdItfReq+0x74>
 80081f6:	7bfb      	ldrb	r3, [r7, #15]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10d      	bne.n	8008218 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 fd5e 	bl	8008cbe <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008202:	e009      	b.n	8008218 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008204:	6839      	ldr	r1, [r7, #0]
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 fc8e 	bl	8008b28 <USBD_CtlError>
      break;
 800820c:	e004      	b.n	8008218 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800820e:	6839      	ldr	r1, [r7, #0]
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 fc89 	bl	8008b28 <USBD_CtlError>
      break;
 8008216:	e000      	b.n	800821a <USBD_StdItfReq+0x76>
      break;
 8008218:	bf00      	nop
    }
    break;
 800821a:	e004      	b.n	8008226 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800821c:	6839      	ldr	r1, [r7, #0]
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 fc82 	bl	8008b28 <USBD_CtlError>
    break;
 8008224:	bf00      	nop
  }

  return ret;
 8008226:	7bfb      	ldrb	r3, [r7, #15]
}
 8008228:	4618      	mov	r0, r3
 800822a:	3710      	adds	r7, #16
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800823a:	2300      	movs	r3, #0
 800823c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	889b      	ldrh	r3, [r3, #4]
 8008242:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800824c:	2b20      	cmp	r3, #32
 800824e:	d004      	beq.n	800825a <USBD_StdEPReq+0x2a>
 8008250:	2b40      	cmp	r3, #64	; 0x40
 8008252:	d002      	beq.n	800825a <USBD_StdEPReq+0x2a>
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00a      	beq.n	800826e <USBD_StdEPReq+0x3e>
 8008258:	e135      	b.n	80084c6 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	6839      	ldr	r1, [r7, #0]
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	4798      	blx	r3
 8008268:	4603      	mov	r3, r0
 800826a:	73fb      	strb	r3, [r7, #15]
    break;
 800826c:	e130      	b.n	80084d0 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	785b      	ldrb	r3, [r3, #1]
 8008272:	2b01      	cmp	r3, #1
 8008274:	d03e      	beq.n	80082f4 <USBD_StdEPReq+0xc4>
 8008276:	2b03      	cmp	r3, #3
 8008278:	d002      	beq.n	8008280 <USBD_StdEPReq+0x50>
 800827a:	2b00      	cmp	r3, #0
 800827c:	d077      	beq.n	800836e <USBD_StdEPReq+0x13e>
 800827e:	e11c      	b.n	80084ba <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008286:	2b02      	cmp	r3, #2
 8008288:	d002      	beq.n	8008290 <USBD_StdEPReq+0x60>
 800828a:	2b03      	cmp	r3, #3
 800828c:	d015      	beq.n	80082ba <USBD_StdEPReq+0x8a>
 800828e:	e02b      	b.n	80082e8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008290:	7bbb      	ldrb	r3, [r7, #14]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00c      	beq.n	80082b0 <USBD_StdEPReq+0x80>
 8008296:	7bbb      	ldrb	r3, [r7, #14]
 8008298:	2b80      	cmp	r3, #128	; 0x80
 800829a:	d009      	beq.n	80082b0 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800829c:	7bbb      	ldrb	r3, [r7, #14]
 800829e:	4619      	mov	r1, r3
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f001 f93d 	bl	8009520 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80082a6:	2180      	movs	r1, #128	; 0x80
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f001 f939 	bl	8009520 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80082ae:	e020      	b.n	80082f2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80082b0:	6839      	ldr	r1, [r7, #0]
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fc38 	bl	8008b28 <USBD_CtlError>
        break;
 80082b8:	e01b      	b.n	80082f2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	885b      	ldrh	r3, [r3, #2]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d10e      	bne.n	80082e0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80082c2:	7bbb      	ldrb	r3, [r7, #14]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00b      	beq.n	80082e0 <USBD_StdEPReq+0xb0>
 80082c8:	7bbb      	ldrb	r3, [r7, #14]
 80082ca:	2b80      	cmp	r3, #128	; 0x80
 80082cc:	d008      	beq.n	80082e0 <USBD_StdEPReq+0xb0>
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	88db      	ldrh	r3, [r3, #6]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d104      	bne.n	80082e0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80082d6:	7bbb      	ldrb	r3, [r7, #14]
 80082d8:	4619      	mov	r1, r3
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f001 f920 	bl	8009520 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 fcec 	bl	8008cbe <USBD_CtlSendStatus>

        break;
 80082e6:	e004      	b.n	80082f2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80082e8:	6839      	ldr	r1, [r7, #0]
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 fc1c 	bl	8008b28 <USBD_CtlError>
        break;
 80082f0:	bf00      	nop
      }
      break;
 80082f2:	e0e7      	b.n	80084c4 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082fa:	2b02      	cmp	r3, #2
 80082fc:	d002      	beq.n	8008304 <USBD_StdEPReq+0xd4>
 80082fe:	2b03      	cmp	r3, #3
 8008300:	d015      	beq.n	800832e <USBD_StdEPReq+0xfe>
 8008302:	e02d      	b.n	8008360 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008304:	7bbb      	ldrb	r3, [r7, #14]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00c      	beq.n	8008324 <USBD_StdEPReq+0xf4>
 800830a:	7bbb      	ldrb	r3, [r7, #14]
 800830c:	2b80      	cmp	r3, #128	; 0x80
 800830e:	d009      	beq.n	8008324 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008310:	7bbb      	ldrb	r3, [r7, #14]
 8008312:	4619      	mov	r1, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f001 f903 	bl	8009520 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800831a:	2180      	movs	r1, #128	; 0x80
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f001 f8ff 	bl	8009520 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008322:	e023      	b.n	800836c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8008324:	6839      	ldr	r1, [r7, #0]
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 fbfe 	bl	8008b28 <USBD_CtlError>
        break;
 800832c:	e01e      	b.n	800836c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	885b      	ldrh	r3, [r3, #2]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d119      	bne.n	800836a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008336:	7bbb      	ldrb	r3, [r7, #14]
 8008338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800833c:	2b00      	cmp	r3, #0
 800833e:	d004      	beq.n	800834a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008340:	7bbb      	ldrb	r3, [r7, #14]
 8008342:	4619      	mov	r1, r3
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f001 f90a 	bl	800955e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 fcb7 	bl	8008cbe <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	6839      	ldr	r1, [r7, #0]
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	4798      	blx	r3
        }
        break;
 800835e:	e004      	b.n	800836a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8008360:	6839      	ldr	r1, [r7, #0]
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fbe0 	bl	8008b28 <USBD_CtlError>
        break;
 8008368:	e000      	b.n	800836c <USBD_StdEPReq+0x13c>
        break;
 800836a:	bf00      	nop
      }
      break;
 800836c:	e0aa      	b.n	80084c4 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008374:	2b02      	cmp	r3, #2
 8008376:	d002      	beq.n	800837e <USBD_StdEPReq+0x14e>
 8008378:	2b03      	cmp	r3, #3
 800837a:	d032      	beq.n	80083e2 <USBD_StdEPReq+0x1b2>
 800837c:	e097      	b.n	80084ae <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800837e:	7bbb      	ldrb	r3, [r7, #14]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d007      	beq.n	8008394 <USBD_StdEPReq+0x164>
 8008384:	7bbb      	ldrb	r3, [r7, #14]
 8008386:	2b80      	cmp	r3, #128	; 0x80
 8008388:	d004      	beq.n	8008394 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800838a:	6839      	ldr	r1, [r7, #0]
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 fbcb 	bl	8008b28 <USBD_CtlError>
          break;
 8008392:	e091      	b.n	80084b8 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008394:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008398:	2b00      	cmp	r3, #0
 800839a:	da0b      	bge.n	80083b4 <USBD_StdEPReq+0x184>
 800839c:	7bbb      	ldrb	r3, [r7, #14]
 800839e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083a2:	4613      	mov	r3, r2
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	4413      	add	r3, r2
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	3310      	adds	r3, #16
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	4413      	add	r3, r2
 80083b0:	3304      	adds	r3, #4
 80083b2:	e00b      	b.n	80083cc <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80083b4:	7bbb      	ldrb	r3, [r7, #14]
 80083b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083ba:	4613      	mov	r3, r2
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	4413      	add	r3, r2
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	4413      	add	r3, r2
 80083ca:	3304      	adds	r3, #4
 80083cc:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	2200      	movs	r2, #0
 80083d2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	2202      	movs	r2, #2
 80083d8:	4619      	mov	r1, r3
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 fc15 	bl	8008c0a <USBD_CtlSendData>
        break;
 80083e0:	e06a      	b.n	80084b8 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80083e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	da11      	bge.n	800840e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80083ea:	7bbb      	ldrb	r3, [r7, #14]
 80083ec:	f003 020f 	and.w	r2, r3, #15
 80083f0:	6879      	ldr	r1, [r7, #4]
 80083f2:	4613      	mov	r3, r2
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	4413      	add	r3, r2
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	440b      	add	r3, r1
 80083fc:	3324      	adds	r3, #36	; 0x24
 80083fe:	881b      	ldrh	r3, [r3, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d117      	bne.n	8008434 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008404:	6839      	ldr	r1, [r7, #0]
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 fb8e 	bl	8008b28 <USBD_CtlError>
            break;
 800840c:	e054      	b.n	80084b8 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800840e:	7bbb      	ldrb	r3, [r7, #14]
 8008410:	f003 020f 	and.w	r2, r3, #15
 8008414:	6879      	ldr	r1, [r7, #4]
 8008416:	4613      	mov	r3, r2
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	4413      	add	r3, r2
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	440b      	add	r3, r1
 8008420:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008424:	881b      	ldrh	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d104      	bne.n	8008434 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800842a:	6839      	ldr	r1, [r7, #0]
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 fb7b 	bl	8008b28 <USBD_CtlError>
            break;
 8008432:	e041      	b.n	80084b8 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008434:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008438:	2b00      	cmp	r3, #0
 800843a:	da0b      	bge.n	8008454 <USBD_StdEPReq+0x224>
 800843c:	7bbb      	ldrb	r3, [r7, #14]
 800843e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008442:	4613      	mov	r3, r2
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	4413      	add	r3, r2
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	3310      	adds	r3, #16
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	4413      	add	r3, r2
 8008450:	3304      	adds	r3, #4
 8008452:	e00b      	b.n	800846c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008454:	7bbb      	ldrb	r3, [r7, #14]
 8008456:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800845a:	4613      	mov	r3, r2
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	4413      	add	r3, r2
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	4413      	add	r3, r2
 800846a:	3304      	adds	r3, #4
 800846c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800846e:	7bbb      	ldrb	r3, [r7, #14]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d002      	beq.n	800847a <USBD_StdEPReq+0x24a>
 8008474:	7bbb      	ldrb	r3, [r7, #14]
 8008476:	2b80      	cmp	r3, #128	; 0x80
 8008478:	d103      	bne.n	8008482 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	2200      	movs	r2, #0
 800847e:	601a      	str	r2, [r3, #0]
 8008480:	e00e      	b.n	80084a0 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008482:	7bbb      	ldrb	r3, [r7, #14]
 8008484:	4619      	mov	r1, r3
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f001 f888 	bl	800959c <USBD_LL_IsStallEP>
 800848c:	4603      	mov	r3, r0
 800848e:	2b00      	cmp	r3, #0
 8008490:	d003      	beq.n	800849a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	2201      	movs	r2, #1
 8008496:	601a      	str	r2, [r3, #0]
 8008498:	e002      	b.n	80084a0 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	2200      	movs	r2, #0
 800849e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	2202      	movs	r2, #2
 80084a4:	4619      	mov	r1, r3
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fbaf 	bl	8008c0a <USBD_CtlSendData>
          break;
 80084ac:	e004      	b.n	80084b8 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80084ae:	6839      	ldr	r1, [r7, #0]
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 fb39 	bl	8008b28 <USBD_CtlError>
        break;
 80084b6:	bf00      	nop
      }
      break;
 80084b8:	e004      	b.n	80084c4 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80084ba:	6839      	ldr	r1, [r7, #0]
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fb33 	bl	8008b28 <USBD_CtlError>
      break;
 80084c2:	bf00      	nop
    }
    break;
 80084c4:	e004      	b.n	80084d0 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80084c6:	6839      	ldr	r1, [r7, #0]
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 fb2d 	bl	8008b28 <USBD_CtlError>
    break;
 80084ce:	bf00      	nop
  }

  return ret;
 80084d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
	...

080084dc <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084e6:	2300      	movs	r3, #0
 80084e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80084ea:	2300      	movs	r3, #0
 80084ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80084ee:	2300      	movs	r3, #0
 80084f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	885b      	ldrh	r3, [r3, #2]
 80084f6:	0a1b      	lsrs	r3, r3, #8
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	3b01      	subs	r3, #1
 80084fc:	2b06      	cmp	r3, #6
 80084fe:	f200 8128 	bhi.w	8008752 <USBD_GetDescriptor+0x276>
 8008502:	a201      	add	r2, pc, #4	; (adr r2, 8008508 <USBD_GetDescriptor+0x2c>)
 8008504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008508:	08008525 	.word	0x08008525
 800850c:	0800853d 	.word	0x0800853d
 8008510:	0800857d 	.word	0x0800857d
 8008514:	08008753 	.word	0x08008753
 8008518:	08008753 	.word	0x08008753
 800851c:	080086f3 	.word	0x080086f3
 8008520:	0800871f 	.word	0x0800871f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	7c12      	ldrb	r2, [r2, #16]
 8008530:	f107 0108 	add.w	r1, r7, #8
 8008534:	4610      	mov	r0, r2
 8008536:	4798      	blx	r3
 8008538:	60f8      	str	r0, [r7, #12]
    break;
 800853a:	e112      	b.n	8008762 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	7c1b      	ldrb	r3, [r3, #16]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d10d      	bne.n	8008560 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800854a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800854c:	f107 0208 	add.w	r2, r7, #8
 8008550:	4610      	mov	r0, r2
 8008552:	4798      	blx	r3
 8008554:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	3301      	adds	r3, #1
 800855a:	2202      	movs	r2, #2
 800855c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800855e:	e100      	b.n	8008762 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008568:	f107 0208 	add.w	r2, r7, #8
 800856c:	4610      	mov	r0, r2
 800856e:	4798      	blx	r3
 8008570:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	3301      	adds	r3, #1
 8008576:	2202      	movs	r2, #2
 8008578:	701a      	strb	r2, [r3, #0]
    break;
 800857a:	e0f2      	b.n	8008762 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	885b      	ldrh	r3, [r3, #2]
 8008580:	b2db      	uxtb	r3, r3
 8008582:	2b05      	cmp	r3, #5
 8008584:	f200 80ac 	bhi.w	80086e0 <USBD_GetDescriptor+0x204>
 8008588:	a201      	add	r2, pc, #4	; (adr r2, 8008590 <USBD_GetDescriptor+0xb4>)
 800858a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800858e:	bf00      	nop
 8008590:	080085a9 	.word	0x080085a9
 8008594:	080085dd 	.word	0x080085dd
 8008598:	08008611 	.word	0x08008611
 800859c:	08008645 	.word	0x08008645
 80085a0:	08008679 	.word	0x08008679
 80085a4:	080086ad 	.word	0x080086ad
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00b      	beq.n	80085cc <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	7c12      	ldrb	r2, [r2, #16]
 80085c0:	f107 0108 	add.w	r1, r7, #8
 80085c4:	4610      	mov	r0, r2
 80085c6:	4798      	blx	r3
 80085c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80085ca:	e091      	b.n	80086f0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80085cc:	6839      	ldr	r1, [r7, #0]
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 faaa 	bl	8008b28 <USBD_CtlError>
        err++;
 80085d4:	7afb      	ldrb	r3, [r7, #11]
 80085d6:	3301      	adds	r3, #1
 80085d8:	72fb      	strb	r3, [r7, #11]
      break;
 80085da:	e089      	b.n	80086f0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00b      	beq.n	8008600 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	7c12      	ldrb	r2, [r2, #16]
 80085f4:	f107 0108 	add.w	r1, r7, #8
 80085f8:	4610      	mov	r0, r2
 80085fa:	4798      	blx	r3
 80085fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80085fe:	e077      	b.n	80086f0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008600:	6839      	ldr	r1, [r7, #0]
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fa90 	bl	8008b28 <USBD_CtlError>
        err++;
 8008608:	7afb      	ldrb	r3, [r7, #11]
 800860a:	3301      	adds	r3, #1
 800860c:	72fb      	strb	r3, [r7, #11]
      break;
 800860e:	e06f      	b.n	80086f0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d00b      	beq.n	8008634 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	7c12      	ldrb	r2, [r2, #16]
 8008628:	f107 0108 	add.w	r1, r7, #8
 800862c:	4610      	mov	r0, r2
 800862e:	4798      	blx	r3
 8008630:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008632:	e05d      	b.n	80086f0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008634:	6839      	ldr	r1, [r7, #0]
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 fa76 	bl	8008b28 <USBD_CtlError>
        err++;
 800863c:	7afb      	ldrb	r3, [r7, #11]
 800863e:	3301      	adds	r3, #1
 8008640:	72fb      	strb	r3, [r7, #11]
      break;
 8008642:	e055      	b.n	80086f0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00b      	beq.n	8008668 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	7c12      	ldrb	r2, [r2, #16]
 800865c:	f107 0108 	add.w	r1, r7, #8
 8008660:	4610      	mov	r0, r2
 8008662:	4798      	blx	r3
 8008664:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008666:	e043      	b.n	80086f0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008668:	6839      	ldr	r1, [r7, #0]
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 fa5c 	bl	8008b28 <USBD_CtlError>
        err++;
 8008670:	7afb      	ldrb	r3, [r7, #11]
 8008672:	3301      	adds	r3, #1
 8008674:	72fb      	strb	r3, [r7, #11]
      break;
 8008676:	e03b      	b.n	80086f0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800867e:	695b      	ldr	r3, [r3, #20]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d00b      	beq.n	800869c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800868a:	695b      	ldr	r3, [r3, #20]
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	7c12      	ldrb	r2, [r2, #16]
 8008690:	f107 0108 	add.w	r1, r7, #8
 8008694:	4610      	mov	r0, r2
 8008696:	4798      	blx	r3
 8008698:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800869a:	e029      	b.n	80086f0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800869c:	6839      	ldr	r1, [r7, #0]
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 fa42 	bl	8008b28 <USBD_CtlError>
        err++;
 80086a4:	7afb      	ldrb	r3, [r7, #11]
 80086a6:	3301      	adds	r3, #1
 80086a8:	72fb      	strb	r3, [r7, #11]
      break;
 80086aa:	e021      	b.n	80086f0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086b2:	699b      	ldr	r3, [r3, #24]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00b      	beq.n	80086d0 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086be:	699b      	ldr	r3, [r3, #24]
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	7c12      	ldrb	r2, [r2, #16]
 80086c4:	f107 0108 	add.w	r1, r7, #8
 80086c8:	4610      	mov	r0, r2
 80086ca:	4798      	blx	r3
 80086cc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086ce:	e00f      	b.n	80086f0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80086d0:	6839      	ldr	r1, [r7, #0]
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fa28 	bl	8008b28 <USBD_CtlError>
        err++;
 80086d8:	7afb      	ldrb	r3, [r7, #11]
 80086da:	3301      	adds	r3, #1
 80086dc:	72fb      	strb	r3, [r7, #11]
      break;
 80086de:	e007      	b.n	80086f0 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80086e0:	6839      	ldr	r1, [r7, #0]
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 fa20 	bl	8008b28 <USBD_CtlError>
      err++;
 80086e8:	7afb      	ldrb	r3, [r7, #11]
 80086ea:	3301      	adds	r3, #1
 80086ec:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80086ee:	bf00      	nop
    }
    break;
 80086f0:	e037      	b.n	8008762 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	7c1b      	ldrb	r3, [r3, #16]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d109      	bne.n	800870e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008702:	f107 0208 	add.w	r2, r7, #8
 8008706:	4610      	mov	r0, r2
 8008708:	4798      	blx	r3
 800870a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800870c:	e029      	b.n	8008762 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800870e:	6839      	ldr	r1, [r7, #0]
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 fa09 	bl	8008b28 <USBD_CtlError>
      err++;
 8008716:	7afb      	ldrb	r3, [r7, #11]
 8008718:	3301      	adds	r3, #1
 800871a:	72fb      	strb	r3, [r7, #11]
    break;
 800871c:	e021      	b.n	8008762 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	7c1b      	ldrb	r3, [r3, #16]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d10d      	bne.n	8008742 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800872c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800872e:	f107 0208 	add.w	r2, r7, #8
 8008732:	4610      	mov	r0, r2
 8008734:	4798      	blx	r3
 8008736:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	3301      	adds	r3, #1
 800873c:	2207      	movs	r2, #7
 800873e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008740:	e00f      	b.n	8008762 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008742:	6839      	ldr	r1, [r7, #0]
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 f9ef 	bl	8008b28 <USBD_CtlError>
      err++;
 800874a:	7afb      	ldrb	r3, [r7, #11]
 800874c:	3301      	adds	r3, #1
 800874e:	72fb      	strb	r3, [r7, #11]
    break;
 8008750:	e007      	b.n	8008762 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8008752:	6839      	ldr	r1, [r7, #0]
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 f9e7 	bl	8008b28 <USBD_CtlError>
    err++;
 800875a:	7afb      	ldrb	r3, [r7, #11]
 800875c:	3301      	adds	r3, #1
 800875e:	72fb      	strb	r3, [r7, #11]
    break;
 8008760:	bf00      	nop
  }

  if (err != 0U)
 8008762:	7afb      	ldrb	r3, [r7, #11]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d11e      	bne.n	80087a6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	88db      	ldrh	r3, [r3, #6]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d016      	beq.n	800879e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8008770:	893b      	ldrh	r3, [r7, #8]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00e      	beq.n	8008794 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	88da      	ldrh	r2, [r3, #6]
 800877a:	893b      	ldrh	r3, [r7, #8]
 800877c:	4293      	cmp	r3, r2
 800877e:	bf28      	it	cs
 8008780:	4613      	movcs	r3, r2
 8008782:	b29b      	uxth	r3, r3
 8008784:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008786:	893b      	ldrh	r3, [r7, #8]
 8008788:	461a      	mov	r2, r3
 800878a:	68f9      	ldr	r1, [r7, #12]
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fa3c 	bl	8008c0a <USBD_CtlSendData>
 8008792:	e009      	b.n	80087a8 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008794:	6839      	ldr	r1, [r7, #0]
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 f9c6 	bl	8008b28 <USBD_CtlError>
 800879c:	e004      	b.n	80087a8 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 fa8d 	bl	8008cbe <USBD_CtlSendStatus>
 80087a4:	e000      	b.n	80087a8 <USBD_GetDescriptor+0x2cc>
    return;
 80087a6:	bf00      	nop
    }
  }
}
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop

080087b0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	889b      	ldrh	r3, [r3, #4]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d130      	bne.n	8008824 <USBD_SetAddress+0x74>
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	88db      	ldrh	r3, [r3, #6]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d12c      	bne.n	8008824 <USBD_SetAddress+0x74>
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	885b      	ldrh	r3, [r3, #2]
 80087ce:	2b7f      	cmp	r3, #127	; 0x7f
 80087d0:	d828      	bhi.n	8008824 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	885b      	ldrh	r3, [r3, #2]
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087e4:	2b03      	cmp	r3, #3
 80087e6:	d104      	bne.n	80087f2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80087e8:	6839      	ldr	r1, [r7, #0]
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 f99c 	bl	8008b28 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087f0:	e01c      	b.n	800882c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	7bfa      	ldrb	r2, [r7, #15]
 80087f6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80087fa:	7bfb      	ldrb	r3, [r7, #15]
 80087fc:	4619      	mov	r1, r3
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 fef8 	bl	80095f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 fa5a 	bl	8008cbe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800880a:	7bfb      	ldrb	r3, [r7, #15]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d004      	beq.n	800881a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2202      	movs	r2, #2
 8008814:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008818:	e008      	b.n	800882c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2201      	movs	r2, #1
 800881e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008822:	e003      	b.n	800882c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008824:	6839      	ldr	r1, [r7, #0]
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f97e 	bl	8008b28 <USBD_CtlError>
  }
}
 800882c:	bf00      	nop
 800882e:	3710      	adds	r7, #16
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800883e:	2300      	movs	r3, #0
 8008840:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	885b      	ldrh	r3, [r3, #2]
 8008846:	b2da      	uxtb	r2, r3
 8008848:	4b4b      	ldr	r3, [pc, #300]	; (8008978 <USBD_SetConfig+0x144>)
 800884a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800884c:	4b4a      	ldr	r3, [pc, #296]	; (8008978 <USBD_SetConfig+0x144>)
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d905      	bls.n	8008860 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008854:	6839      	ldr	r1, [r7, #0]
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 f966 	bl	8008b28 <USBD_CtlError>
    return USBD_FAIL;
 800885c:	2303      	movs	r3, #3
 800885e:	e087      	b.n	8008970 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008866:	2b02      	cmp	r3, #2
 8008868:	d002      	beq.n	8008870 <USBD_SetConfig+0x3c>
 800886a:	2b03      	cmp	r3, #3
 800886c:	d025      	beq.n	80088ba <USBD_SetConfig+0x86>
 800886e:	e071      	b.n	8008954 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008870:	4b41      	ldr	r3, [pc, #260]	; (8008978 <USBD_SetConfig+0x144>)
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d01c      	beq.n	80088b2 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008878:	4b3f      	ldr	r3, [pc, #252]	; (8008978 <USBD_SetConfig+0x144>)
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	461a      	mov	r2, r3
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008882:	4b3d      	ldr	r3, [pc, #244]	; (8008978 <USBD_SetConfig+0x144>)
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	4619      	mov	r1, r3
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f7ff f9a7 	bl	8007bdc <USBD_SetClassConfig>
 800888e:	4603      	mov	r3, r0
 8008890:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008892:	7bfb      	ldrb	r3, [r7, #15]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d004      	beq.n	80088a2 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008898:	6839      	ldr	r1, [r7, #0]
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 f944 	bl	8008b28 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80088a0:	e065      	b.n	800896e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 fa0b 	bl	8008cbe <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2203      	movs	r2, #3
 80088ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80088b0:	e05d      	b.n	800896e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 fa03 	bl	8008cbe <USBD_CtlSendStatus>
    break;
 80088b8:	e059      	b.n	800896e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80088ba:	4b2f      	ldr	r3, [pc, #188]	; (8008978 <USBD_SetConfig+0x144>)
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d112      	bne.n	80088e8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2202      	movs	r2, #2
 80088c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80088ca:	4b2b      	ldr	r3, [pc, #172]	; (8008978 <USBD_SetConfig+0x144>)
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	461a      	mov	r2, r3
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80088d4:	4b28      	ldr	r3, [pc, #160]	; (8008978 <USBD_SetConfig+0x144>)
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	4619      	mov	r1, r3
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f7ff f99a 	bl	8007c14 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 f9ec 	bl	8008cbe <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80088e6:	e042      	b.n	800896e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80088e8:	4b23      	ldr	r3, [pc, #140]	; (8008978 <USBD_SetConfig+0x144>)
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	461a      	mov	r2, r3
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d02a      	beq.n	800894c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	4619      	mov	r1, r3
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f7ff f988 	bl	8007c14 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008904:	4b1c      	ldr	r3, [pc, #112]	; (8008978 <USBD_SetConfig+0x144>)
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	461a      	mov	r2, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800890e:	4b1a      	ldr	r3, [pc, #104]	; (8008978 <USBD_SetConfig+0x144>)
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	4619      	mov	r1, r3
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f7ff f961 	bl	8007bdc <USBD_SetClassConfig>
 800891a:	4603      	mov	r3, r0
 800891c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800891e:	7bfb      	ldrb	r3, [r7, #15]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00f      	beq.n	8008944 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008924:	6839      	ldr	r1, [r7, #0]
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f8fe 	bl	8008b28 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	b2db      	uxtb	r3, r3
 8008932:	4619      	mov	r1, r3
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f7ff f96d 	bl	8007c14 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2202      	movs	r2, #2
 800893e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008942:	e014      	b.n	800896e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 f9ba 	bl	8008cbe <USBD_CtlSendStatus>
    break;
 800894a:	e010      	b.n	800896e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 f9b6 	bl	8008cbe <USBD_CtlSendStatus>
    break;
 8008952:	e00c      	b.n	800896e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008954:	6839      	ldr	r1, [r7, #0]
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f8e6 	bl	8008b28 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800895c:	4b06      	ldr	r3, [pc, #24]	; (8008978 <USBD_SetConfig+0x144>)
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	4619      	mov	r1, r3
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7ff f956 	bl	8007c14 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008968:	2303      	movs	r3, #3
 800896a:	73fb      	strb	r3, [r7, #15]
    break;
 800896c:	bf00      	nop
  }

  return ret;
 800896e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008970:	4618      	mov	r0, r3
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}
 8008978:	20000378 	.word	0x20000378

0800897c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	88db      	ldrh	r3, [r3, #6]
 800898a:	2b01      	cmp	r3, #1
 800898c:	d004      	beq.n	8008998 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800898e:	6839      	ldr	r1, [r7, #0]
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 f8c9 	bl	8008b28 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008996:	e021      	b.n	80089dc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800899e:	2b01      	cmp	r3, #1
 80089a0:	db17      	blt.n	80089d2 <USBD_GetConfig+0x56>
 80089a2:	2b02      	cmp	r3, #2
 80089a4:	dd02      	ble.n	80089ac <USBD_GetConfig+0x30>
 80089a6:	2b03      	cmp	r3, #3
 80089a8:	d00b      	beq.n	80089c2 <USBD_GetConfig+0x46>
 80089aa:	e012      	b.n	80089d2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	3308      	adds	r3, #8
 80089b6:	2201      	movs	r2, #1
 80089b8:	4619      	mov	r1, r3
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 f925 	bl	8008c0a <USBD_CtlSendData>
      break;
 80089c0:	e00c      	b.n	80089dc <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	3304      	adds	r3, #4
 80089c6:	2201      	movs	r2, #1
 80089c8:	4619      	mov	r1, r3
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f91d 	bl	8008c0a <USBD_CtlSendData>
      break;
 80089d0:	e004      	b.n	80089dc <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80089d2:	6839      	ldr	r1, [r7, #0]
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 f8a7 	bl	8008b28 <USBD_CtlError>
      break;
 80089da:	bf00      	nop
}
 80089dc:	bf00      	nop
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089f4:	3b01      	subs	r3, #1
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	d81e      	bhi.n	8008a38 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	88db      	ldrh	r3, [r3, #6]
 80089fe:	2b02      	cmp	r3, #2
 8008a00:	d004      	beq.n	8008a0c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008a02:	6839      	ldr	r1, [r7, #0]
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f88f 	bl	8008b28 <USBD_CtlError>
      break;
 8008a0a:	e01a      	b.n	8008a42 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d005      	beq.n	8008a28 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	f043 0202 	orr.w	r2, r3, #2
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	330c      	adds	r3, #12
 8008a2c:	2202      	movs	r2, #2
 8008a2e:	4619      	mov	r1, r3
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 f8ea 	bl	8008c0a <USBD_CtlSendData>
    break;
 8008a36:	e004      	b.n	8008a42 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008a38:	6839      	ldr	r1, [r7, #0]
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 f874 	bl	8008b28 <USBD_CtlError>
    break;
 8008a40:	bf00      	nop
  }
}
 8008a42:	bf00      	nop
 8008a44:	3708      	adds	r7, #8
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b082      	sub	sp, #8
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
 8008a52:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	885b      	ldrh	r3, [r3, #2]
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d106      	bne.n	8008a6a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 f92a 	bl	8008cbe <USBD_CtlSendStatus>
  }
}
 8008a6a:	bf00      	nop
 8008a6c:	3708      	adds	r7, #8
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b082      	sub	sp, #8
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
 8008a7a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a82:	3b01      	subs	r3, #1
 8008a84:	2b02      	cmp	r3, #2
 8008a86:	d80b      	bhi.n	8008aa0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	885b      	ldrh	r3, [r3, #2]
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d10c      	bne.n	8008aaa <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 f910 	bl	8008cbe <USBD_CtlSendStatus>
      }
      break;
 8008a9e:	e004      	b.n	8008aaa <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008aa0:	6839      	ldr	r1, [r7, #0]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f840 	bl	8008b28 <USBD_CtlError>
      break;
 8008aa8:	e000      	b.n	8008aac <USBD_ClrFeature+0x3a>
      break;
 8008aaa:	bf00      	nop
  }
}
 8008aac:	bf00      	nop
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	781a      	ldrb	r2, [r3, #0]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	3301      	adds	r3, #1
 8008ace:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	781a      	ldrb	r2, [r3, #0]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	3301      	adds	r3, #1
 8008adc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008ade:	68f8      	ldr	r0, [r7, #12]
 8008ae0:	f7ff fad3 	bl	800808a <SWAPBYTE>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	3301      	adds	r3, #1
 8008af0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	3301      	adds	r3, #1
 8008af6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f7ff fac6 	bl	800808a <SWAPBYTE>
 8008afe:	4603      	mov	r3, r0
 8008b00:	461a      	mov	r2, r3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008b12:	68f8      	ldr	r0, [r7, #12]
 8008b14:	f7ff fab9 	bl	800808a <SWAPBYTE>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	80da      	strh	r2, [r3, #6]
}
 8008b20:	bf00      	nop
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b32:	2180      	movs	r1, #128	; 0x80
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 fcf3 	bl	8009520 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 fcef 	bl	8009520 <USBD_LL_StallEP>
}
 8008b42:	bf00      	nop
 8008b44:	3708      	adds	r7, #8
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b086      	sub	sp, #24
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	60f8      	str	r0, [r7, #12]
 8008b52:	60b9      	str	r1, [r7, #8]
 8008b54:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b56:	2300      	movs	r3, #0
 8008b58:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d036      	beq.n	8008bce <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008b64:	6938      	ldr	r0, [r7, #16]
 8008b66:	f000 f836 	bl	8008bd6 <USBD_GetLen>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	005b      	lsls	r3, r3, #1
 8008b72:	b29a      	uxth	r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008b78:	7dfb      	ldrb	r3, [r7, #23]
 8008b7a:	68ba      	ldr	r2, [r7, #8]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	7812      	ldrb	r2, [r2, #0]
 8008b82:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b84:	7dfb      	ldrb	r3, [r7, #23]
 8008b86:	3301      	adds	r3, #1
 8008b88:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008b8a:	7dfb      	ldrb	r3, [r7, #23]
 8008b8c:	68ba      	ldr	r2, [r7, #8]
 8008b8e:	4413      	add	r3, r2
 8008b90:	2203      	movs	r2, #3
 8008b92:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b94:	7dfb      	ldrb	r3, [r7, #23]
 8008b96:	3301      	adds	r3, #1
 8008b98:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008b9a:	e013      	b.n	8008bc4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008b9c:	7dfb      	ldrb	r3, [r7, #23]
 8008b9e:	68ba      	ldr	r2, [r7, #8]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	693a      	ldr	r2, [r7, #16]
 8008ba4:	7812      	ldrb	r2, [r2, #0]
 8008ba6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	3301      	adds	r3, #1
 8008bac:	613b      	str	r3, [r7, #16]
    idx++;
 8008bae:	7dfb      	ldrb	r3, [r7, #23]
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008bb4:	7dfb      	ldrb	r3, [r7, #23]
 8008bb6:	68ba      	ldr	r2, [r7, #8]
 8008bb8:	4413      	add	r3, r2
 8008bba:	2200      	movs	r2, #0
 8008bbc:	701a      	strb	r2, [r3, #0]
    idx++;
 8008bbe:	7dfb      	ldrb	r3, [r7, #23]
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d1e7      	bne.n	8008b9c <USBD_GetString+0x52>
 8008bcc:	e000      	b.n	8008bd0 <USBD_GetString+0x86>
    return;
 8008bce:	bf00      	nop
  }
}
 8008bd0:	3718      	adds	r7, #24
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}

08008bd6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008bd6:	b480      	push	{r7}
 8008bd8:	b085      	sub	sp, #20
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008bde:	2300      	movs	r3, #0
 8008be0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008be6:	e005      	b.n	8008bf4 <USBD_GetLen+0x1e>
  {
    len++;
 8008be8:	7bfb      	ldrb	r3, [r7, #15]
 8008bea:	3301      	adds	r3, #1
 8008bec:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1f5      	bne.n	8008be8 <USBD_GetLen+0x12>
  }

  return len;
 8008bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3714      	adds	r7, #20
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr

08008c0a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b084      	sub	sp, #16
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	60f8      	str	r0, [r7, #12]
 8008c12:	60b9      	str	r1, [r7, #8]
 8008c14:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2202      	movs	r2, #2
 8008c1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	68ba      	ldr	r2, [r7, #8]
 8008c2e:	2100      	movs	r1, #0
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	f000 fcfe 	bl	8009632 <USBD_LL_Transmit>

  return USBD_OK;
 8008c36:	2300      	movs	r3, #0
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3710      	adds	r7, #16
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	68ba      	ldr	r2, [r7, #8]
 8008c50:	2100      	movs	r1, #0
 8008c52:	68f8      	ldr	r0, [r7, #12]
 8008c54:	f000 fced 	bl	8009632 <USBD_LL_Transmit>

  return USBD_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b084      	sub	sp, #16
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	60f8      	str	r0, [r7, #12]
 8008c6a:	60b9      	str	r1, [r7, #8]
 8008c6c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2203      	movs	r2, #3
 8008c72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	68ba      	ldr	r2, [r7, #8]
 8008c8a:	2100      	movs	r1, #0
 8008c8c:	68f8      	ldr	r0, [r7, #12]
 8008c8e:	f000 fcf1 	bl	8009674 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3710      	adds	r7, #16
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	68ba      	ldr	r2, [r7, #8]
 8008cac:	2100      	movs	r1, #0
 8008cae:	68f8      	ldr	r0, [r7, #12]
 8008cb0:	f000 fce0 	bl	8009674 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cb4:	2300      	movs	r3, #0
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b082      	sub	sp, #8
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2204      	movs	r2, #4
 8008cca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008cce:	2300      	movs	r3, #0
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	2100      	movs	r1, #0
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 fcac 	bl	8009632 <USBD_LL_Transmit>

  return USBD_OK;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3708      	adds	r7, #8
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2205      	movs	r2, #5
 8008cf0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 fcba 	bl	8009674 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3708      	adds	r7, #8
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
	...

08008d0c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d10:	2200      	movs	r2, #0
 8008d12:	4912      	ldr	r1, [pc, #72]	; (8008d5c <MX_USB_DEVICE_Init+0x50>)
 8008d14:	4812      	ldr	r0, [pc, #72]	; (8008d60 <MX_USB_DEVICE_Init+0x54>)
 8008d16:	f7fe fef3 	bl	8007b00 <USBD_Init>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d001      	beq.n	8008d24 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d20:	f7f8 fcfa 	bl	8001718 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008d24:	490f      	ldr	r1, [pc, #60]	; (8008d64 <MX_USB_DEVICE_Init+0x58>)
 8008d26:	480e      	ldr	r0, [pc, #56]	; (8008d60 <MX_USB_DEVICE_Init+0x54>)
 8008d28:	f7fe ff20 	bl	8007b6c <USBD_RegisterClass>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d001      	beq.n	8008d36 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d32:	f7f8 fcf1 	bl	8001718 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008d36:	490c      	ldr	r1, [pc, #48]	; (8008d68 <MX_USB_DEVICE_Init+0x5c>)
 8008d38:	4809      	ldr	r0, [pc, #36]	; (8008d60 <MX_USB_DEVICE_Init+0x54>)
 8008d3a:	f7fe fe45 	bl	80079c8 <USBD_CDC_RegisterInterface>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d001      	beq.n	8008d48 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d44:	f7f8 fce8 	bl	8001718 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d48:	4805      	ldr	r0, [pc, #20]	; (8008d60 <MX_USB_DEVICE_Init+0x54>)
 8008d4a:	f7fe ff30 	bl	8007bae <USBD_Start>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d001      	beq.n	8008d58 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008d54:	f7f8 fce0 	bl	8001718 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008d58:	bf00      	nop
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	20000138 	.word	0x20000138
 8008d60:	200004f0 	.word	0x200004f0
 8008d64:	20000018 	.word	0x20000018
 8008d68:	20000124 	.word	0x20000124

08008d6c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008d70:	2200      	movs	r2, #0
 8008d72:	4905      	ldr	r1, [pc, #20]	; (8008d88 <CDC_Init_FS+0x1c>)
 8008d74:	4805      	ldr	r0, [pc, #20]	; (8008d8c <CDC_Init_FS+0x20>)
 8008d76:	f7fe fe3c 	bl	80079f2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008d7a:	4905      	ldr	r1, [pc, #20]	; (8008d90 <CDC_Init_FS+0x24>)
 8008d7c:	4803      	ldr	r0, [pc, #12]	; (8008d8c <CDC_Init_FS+0x20>)
 8008d7e:	f7fe fe51 	bl	8007a24 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008d82:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	20000fc0 	.word	0x20000fc0
 8008d8c:	200004f0 	.word	0x200004f0
 8008d90:	200007c0 	.word	0x200007c0

08008d94 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008d94:	b480      	push	{r7}
 8008d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008d98:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	4603      	mov	r3, r0
 8008dac:	6039      	str	r1, [r7, #0]
 8008dae:	71fb      	strb	r3, [r7, #7]
 8008db0:	4613      	mov	r3, r2
 8008db2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008db4:	79fb      	ldrb	r3, [r7, #7]
 8008db6:	2b23      	cmp	r3, #35	; 0x23
 8008db8:	d85c      	bhi.n	8008e74 <CDC_Control_FS+0xd0>
 8008dba:	a201      	add	r2, pc, #4	; (adr r2, 8008dc0 <CDC_Control_FS+0x1c>)
 8008dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc0:	08008e75 	.word	0x08008e75
 8008dc4:	08008e75 	.word	0x08008e75
 8008dc8:	08008e75 	.word	0x08008e75
 8008dcc:	08008e75 	.word	0x08008e75
 8008dd0:	08008e75 	.word	0x08008e75
 8008dd4:	08008e75 	.word	0x08008e75
 8008dd8:	08008e75 	.word	0x08008e75
 8008ddc:	08008e75 	.word	0x08008e75
 8008de0:	08008e75 	.word	0x08008e75
 8008de4:	08008e75 	.word	0x08008e75
 8008de8:	08008e75 	.word	0x08008e75
 8008dec:	08008e75 	.word	0x08008e75
 8008df0:	08008e75 	.word	0x08008e75
 8008df4:	08008e75 	.word	0x08008e75
 8008df8:	08008e75 	.word	0x08008e75
 8008dfc:	08008e75 	.word	0x08008e75
 8008e00:	08008e75 	.word	0x08008e75
 8008e04:	08008e75 	.word	0x08008e75
 8008e08:	08008e75 	.word	0x08008e75
 8008e0c:	08008e75 	.word	0x08008e75
 8008e10:	08008e75 	.word	0x08008e75
 8008e14:	08008e75 	.word	0x08008e75
 8008e18:	08008e75 	.word	0x08008e75
 8008e1c:	08008e75 	.word	0x08008e75
 8008e20:	08008e75 	.word	0x08008e75
 8008e24:	08008e75 	.word	0x08008e75
 8008e28:	08008e75 	.word	0x08008e75
 8008e2c:	08008e75 	.word	0x08008e75
 8008e30:	08008e75 	.word	0x08008e75
 8008e34:	08008e75 	.word	0x08008e75
 8008e38:	08008e75 	.word	0x08008e75
 8008e3c:	08008e75 	.word	0x08008e75
 8008e40:	08008e51 	.word	0x08008e51
 8008e44:	08008e63 	.word	0x08008e63
 8008e48:	08008e75 	.word	0x08008e75
 8008e4c:	08008e75 	.word	0x08008e75
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8008e50:	4b0c      	ldr	r3, [pc, #48]	; (8008e84 <CDC_Control_FS+0xe0>)
 8008e52:	683a      	ldr	r2, [r7, #0]
 8008e54:	6810      	ldr	r0, [r2, #0]
 8008e56:	6018      	str	r0, [r3, #0]
 8008e58:	8891      	ldrh	r1, [r2, #4]
 8008e5a:	7992      	ldrb	r2, [r2, #6]
 8008e5c:	8099      	strh	r1, [r3, #4]
 8008e5e:	719a      	strb	r2, [r3, #6]
    break;
 8008e60:	e009      	b.n	8008e76 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	4a07      	ldr	r2, [pc, #28]	; (8008e84 <CDC_Control_FS+0xe0>)
 8008e66:	6810      	ldr	r0, [r2, #0]
 8008e68:	6018      	str	r0, [r3, #0]
 8008e6a:	8891      	ldrh	r1, [r2, #4]
 8008e6c:	7992      	ldrb	r2, [r2, #6]
 8008e6e:	8099      	strh	r1, [r3, #4]
 8008e70:	719a      	strb	r2, [r3, #6]
    break;
 8008e72:	e000      	b.n	8008e76 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008e74:	bf00      	nop
  }

  return (USBD_OK);
 8008e76:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr
 8008e84:	2000011c 	.word	0x2000011c

08008e88 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008e92:	6879      	ldr	r1, [r7, #4]
 8008e94:	4805      	ldr	r0, [pc, #20]	; (8008eac <CDC_Receive_FS+0x24>)
 8008e96:	f7fe fdc5 	bl	8007a24 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008e9a:	4804      	ldr	r0, [pc, #16]	; (8008eac <CDC_Receive_FS+0x24>)
 8008e9c:	f7fe fe06 	bl	8007aac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008ea0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	200004f0 	.word	0x200004f0

08008eb0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	460b      	mov	r3, r1
 8008eba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008ec0:	4b0d      	ldr	r3, [pc, #52]	; (8008ef8 <CDC_Transmit_FS+0x48>)
 8008ec2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ec6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d001      	beq.n	8008ed6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e00b      	b.n	8008eee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008ed6:	887b      	ldrh	r3, [r7, #2]
 8008ed8:	461a      	mov	r2, r3
 8008eda:	6879      	ldr	r1, [r7, #4]
 8008edc:	4806      	ldr	r0, [pc, #24]	; (8008ef8 <CDC_Transmit_FS+0x48>)
 8008ede:	f7fe fd88 	bl	80079f2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008ee2:	4805      	ldr	r0, [pc, #20]	; (8008ef8 <CDC_Transmit_FS+0x48>)
 8008ee4:	f7fe fdb2 	bl	8007a4c <USBD_CDC_TransmitPacket>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	200004f0 	.word	0x200004f0

08008efc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b087      	sub	sp, #28
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	4613      	mov	r3, r2
 8008f08:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008f0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	371c      	adds	r7, #28
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr
	...

08008f20 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	4603      	mov	r3, r0
 8008f28:	6039      	str	r1, [r7, #0]
 8008f2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	2212      	movs	r2, #18
 8008f30:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008f32:	4b03      	ldr	r3, [pc, #12]	; (8008f40 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr
 8008f40:	20000154 	.word	0x20000154

08008f44 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	6039      	str	r1, [r7, #0]
 8008f4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	2204      	movs	r2, #4
 8008f54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008f56:	4b03      	ldr	r3, [pc, #12]	; (8008f64 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr
 8008f64:	20000168 	.word	0x20000168

08008f68 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	4603      	mov	r3, r0
 8008f70:	6039      	str	r1, [r7, #0]
 8008f72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f74:	79fb      	ldrb	r3, [r7, #7]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d105      	bne.n	8008f86 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f7a:	683a      	ldr	r2, [r7, #0]
 8008f7c:	4907      	ldr	r1, [pc, #28]	; (8008f9c <USBD_FS_ProductStrDescriptor+0x34>)
 8008f7e:	4808      	ldr	r0, [pc, #32]	; (8008fa0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f80:	f7ff fde3 	bl	8008b4a <USBD_GetString>
 8008f84:	e004      	b.n	8008f90 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f86:	683a      	ldr	r2, [r7, #0]
 8008f88:	4904      	ldr	r1, [pc, #16]	; (8008f9c <USBD_FS_ProductStrDescriptor+0x34>)
 8008f8a:	4805      	ldr	r0, [pc, #20]	; (8008fa0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f8c:	f7ff fddd 	bl	8008b4a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f90:	4b02      	ldr	r3, [pc, #8]	; (8008f9c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3708      	adds	r7, #8
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop
 8008f9c:	200017c0 	.word	0x200017c0
 8008fa0:	0800b844 	.word	0x0800b844

08008fa4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	4603      	mov	r3, r0
 8008fac:	6039      	str	r1, [r7, #0]
 8008fae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008fb0:	683a      	ldr	r2, [r7, #0]
 8008fb2:	4904      	ldr	r1, [pc, #16]	; (8008fc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008fb4:	4804      	ldr	r0, [pc, #16]	; (8008fc8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008fb6:	f7ff fdc8 	bl	8008b4a <USBD_GetString>
  return USBD_StrDesc;
 8008fba:	4b02      	ldr	r3, [pc, #8]	; (8008fc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3708      	adds	r7, #8
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	200017c0 	.word	0x200017c0
 8008fc8:	0800b85c 	.word	0x0800b85c

08008fcc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	6039      	str	r1, [r7, #0]
 8008fd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	221a      	movs	r2, #26
 8008fdc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008fde:	f000 f843 	bl	8009068 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008fe2:	4b02      	ldr	r3, [pc, #8]	; (8008fec <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3708      	adds	r7, #8
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	2000016c 	.word	0x2000016c

08008ff0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	6039      	str	r1, [r7, #0]
 8008ffa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008ffc:	79fb      	ldrb	r3, [r7, #7]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d105      	bne.n	800900e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009002:	683a      	ldr	r2, [r7, #0]
 8009004:	4907      	ldr	r1, [pc, #28]	; (8009024 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009006:	4808      	ldr	r0, [pc, #32]	; (8009028 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009008:	f7ff fd9f 	bl	8008b4a <USBD_GetString>
 800900c:	e004      	b.n	8009018 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800900e:	683a      	ldr	r2, [r7, #0]
 8009010:	4904      	ldr	r1, [pc, #16]	; (8009024 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009012:	4805      	ldr	r0, [pc, #20]	; (8009028 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009014:	f7ff fd99 	bl	8008b4a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009018:	4b02      	ldr	r3, [pc, #8]	; (8009024 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800901a:	4618      	mov	r0, r3
 800901c:	3708      	adds	r7, #8
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	200017c0 	.word	0x200017c0
 8009028:	0800b870 	.word	0x0800b870

0800902c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	4603      	mov	r3, r0
 8009034:	6039      	str	r1, [r7, #0]
 8009036:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009038:	79fb      	ldrb	r3, [r7, #7]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d105      	bne.n	800904a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800903e:	683a      	ldr	r2, [r7, #0]
 8009040:	4907      	ldr	r1, [pc, #28]	; (8009060 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009042:	4808      	ldr	r0, [pc, #32]	; (8009064 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009044:	f7ff fd81 	bl	8008b4a <USBD_GetString>
 8009048:	e004      	b.n	8009054 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800904a:	683a      	ldr	r2, [r7, #0]
 800904c:	4904      	ldr	r1, [pc, #16]	; (8009060 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800904e:	4805      	ldr	r0, [pc, #20]	; (8009064 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009050:	f7ff fd7b 	bl	8008b4a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009054:	4b02      	ldr	r3, [pc, #8]	; (8009060 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009056:	4618      	mov	r0, r3
 8009058:	3708      	adds	r7, #8
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	200017c0 	.word	0x200017c0
 8009064:	0800b87c 	.word	0x0800b87c

08009068 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800906e:	4b0f      	ldr	r3, [pc, #60]	; (80090ac <Get_SerialNum+0x44>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009074:	4b0e      	ldr	r3, [pc, #56]	; (80090b0 <Get_SerialNum+0x48>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800907a:	4b0e      	ldr	r3, [pc, #56]	; (80090b4 <Get_SerialNum+0x4c>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4413      	add	r3, r2
 8009086:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d009      	beq.n	80090a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800908e:	2208      	movs	r2, #8
 8009090:	4909      	ldr	r1, [pc, #36]	; (80090b8 <Get_SerialNum+0x50>)
 8009092:	68f8      	ldr	r0, [r7, #12]
 8009094:	f000 f814 	bl	80090c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009098:	2204      	movs	r2, #4
 800909a:	4908      	ldr	r1, [pc, #32]	; (80090bc <Get_SerialNum+0x54>)
 800909c:	68b8      	ldr	r0, [r7, #8]
 800909e:	f000 f80f 	bl	80090c0 <IntToUnicode>
  }
}
 80090a2:	bf00      	nop
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	1fff7a10 	.word	0x1fff7a10
 80090b0:	1fff7a14 	.word	0x1fff7a14
 80090b4:	1fff7a18 	.word	0x1fff7a18
 80090b8:	2000016e 	.word	0x2000016e
 80090bc:	2000017e 	.word	0x2000017e

080090c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b087      	sub	sp, #28
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	4613      	mov	r3, r2
 80090cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80090ce:	2300      	movs	r3, #0
 80090d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80090d2:	2300      	movs	r3, #0
 80090d4:	75fb      	strb	r3, [r7, #23]
 80090d6:	e027      	b.n	8009128 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	0f1b      	lsrs	r3, r3, #28
 80090dc:	2b09      	cmp	r3, #9
 80090de:	d80b      	bhi.n	80090f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	0f1b      	lsrs	r3, r3, #28
 80090e4:	b2da      	uxtb	r2, r3
 80090e6:	7dfb      	ldrb	r3, [r7, #23]
 80090e8:	005b      	lsls	r3, r3, #1
 80090ea:	4619      	mov	r1, r3
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	440b      	add	r3, r1
 80090f0:	3230      	adds	r2, #48	; 0x30
 80090f2:	b2d2      	uxtb	r2, r2
 80090f4:	701a      	strb	r2, [r3, #0]
 80090f6:	e00a      	b.n	800910e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	0f1b      	lsrs	r3, r3, #28
 80090fc:	b2da      	uxtb	r2, r3
 80090fe:	7dfb      	ldrb	r3, [r7, #23]
 8009100:	005b      	lsls	r3, r3, #1
 8009102:	4619      	mov	r1, r3
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	440b      	add	r3, r1
 8009108:	3237      	adds	r2, #55	; 0x37
 800910a:	b2d2      	uxtb	r2, r2
 800910c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	011b      	lsls	r3, r3, #4
 8009112:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009114:	7dfb      	ldrb	r3, [r7, #23]
 8009116:	005b      	lsls	r3, r3, #1
 8009118:	3301      	adds	r3, #1
 800911a:	68ba      	ldr	r2, [r7, #8]
 800911c:	4413      	add	r3, r2
 800911e:	2200      	movs	r2, #0
 8009120:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009122:	7dfb      	ldrb	r3, [r7, #23]
 8009124:	3301      	adds	r3, #1
 8009126:	75fb      	strb	r3, [r7, #23]
 8009128:	7dfa      	ldrb	r2, [r7, #23]
 800912a:	79fb      	ldrb	r3, [r7, #7]
 800912c:	429a      	cmp	r2, r3
 800912e:	d3d3      	bcc.n	80090d8 <IntToUnicode+0x18>
  }
}
 8009130:	bf00      	nop
 8009132:	371c      	adds	r7, #28
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr

0800913c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b08a      	sub	sp, #40	; 0x28
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009144:	f107 0314 	add.w	r3, r7, #20
 8009148:	2200      	movs	r2, #0
 800914a:	601a      	str	r2, [r3, #0]
 800914c:	605a      	str	r2, [r3, #4]
 800914e:	609a      	str	r2, [r3, #8]
 8009150:	60da      	str	r2, [r3, #12]
 8009152:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800915c:	d13a      	bne.n	80091d4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800915e:	2300      	movs	r3, #0
 8009160:	613b      	str	r3, [r7, #16]
 8009162:	4b1e      	ldr	r3, [pc, #120]	; (80091dc <HAL_PCD_MspInit+0xa0>)
 8009164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009166:	4a1d      	ldr	r2, [pc, #116]	; (80091dc <HAL_PCD_MspInit+0xa0>)
 8009168:	f043 0301 	orr.w	r3, r3, #1
 800916c:	6313      	str	r3, [r2, #48]	; 0x30
 800916e:	4b1b      	ldr	r3, [pc, #108]	; (80091dc <HAL_PCD_MspInit+0xa0>)
 8009170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009172:	f003 0301 	and.w	r3, r3, #1
 8009176:	613b      	str	r3, [r7, #16]
 8009178:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800917a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800917e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009180:	2302      	movs	r3, #2
 8009182:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009184:	2300      	movs	r3, #0
 8009186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009188:	2303      	movs	r3, #3
 800918a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800918c:	230a      	movs	r3, #10
 800918e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009190:	f107 0314 	add.w	r3, r7, #20
 8009194:	4619      	mov	r1, r3
 8009196:	4812      	ldr	r0, [pc, #72]	; (80091e0 <HAL_PCD_MspInit+0xa4>)
 8009198:	f7f8 feb6 	bl	8001f08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800919c:	4b0f      	ldr	r3, [pc, #60]	; (80091dc <HAL_PCD_MspInit+0xa0>)
 800919e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091a0:	4a0e      	ldr	r2, [pc, #56]	; (80091dc <HAL_PCD_MspInit+0xa0>)
 80091a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091a6:	6353      	str	r3, [r2, #52]	; 0x34
 80091a8:	2300      	movs	r3, #0
 80091aa:	60fb      	str	r3, [r7, #12]
 80091ac:	4b0b      	ldr	r3, [pc, #44]	; (80091dc <HAL_PCD_MspInit+0xa0>)
 80091ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091b0:	4a0a      	ldr	r2, [pc, #40]	; (80091dc <HAL_PCD_MspInit+0xa0>)
 80091b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80091b6:	6453      	str	r3, [r2, #68]	; 0x44
 80091b8:	4b08      	ldr	r3, [pc, #32]	; (80091dc <HAL_PCD_MspInit+0xa0>)
 80091ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091c0:	60fb      	str	r3, [r7, #12]
 80091c2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 0);
 80091c4:	2200      	movs	r2, #0
 80091c6:	2101      	movs	r1, #1
 80091c8:	2043      	movs	r0, #67	; 0x43
 80091ca:	f7f8 fe66 	bl	8001e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80091ce:	2043      	movs	r0, #67	; 0x43
 80091d0:	f7f8 fe7f 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80091d4:	bf00      	nop
 80091d6:	3728      	adds	r7, #40	; 0x28
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	40023800 	.word	0x40023800
 80091e0:	40020000 	.word	0x40020000

080091e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80091f8:	4619      	mov	r1, r3
 80091fa:	4610      	mov	r0, r2
 80091fc:	f7fe fd22 	bl	8007c44 <USBD_LL_SetupStage>
}
 8009200:	bf00      	nop
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	460b      	mov	r3, r1
 8009212:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800921a:	78fa      	ldrb	r2, [r7, #3]
 800921c:	6879      	ldr	r1, [r7, #4]
 800921e:	4613      	mov	r3, r2
 8009220:	00db      	lsls	r3, r3, #3
 8009222:	1a9b      	subs	r3, r3, r2
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	440b      	add	r3, r1
 8009228:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	78fb      	ldrb	r3, [r7, #3]
 8009230:	4619      	mov	r1, r3
 8009232:	f7fe fd5a 	bl	8007cea <USBD_LL_DataOutStage>
}
 8009236:	bf00      	nop
 8009238:	3708      	adds	r7, #8
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}

0800923e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800923e:	b580      	push	{r7, lr}
 8009240:	b082      	sub	sp, #8
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
 8009246:	460b      	mov	r3, r1
 8009248:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009250:	78fa      	ldrb	r2, [r7, #3]
 8009252:	6879      	ldr	r1, [r7, #4]
 8009254:	4613      	mov	r3, r2
 8009256:	00db      	lsls	r3, r3, #3
 8009258:	1a9b      	subs	r3, r3, r2
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	440b      	add	r3, r1
 800925e:	3348      	adds	r3, #72	; 0x48
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	78fb      	ldrb	r3, [r7, #3]
 8009264:	4619      	mov	r1, r3
 8009266:	f7fe fda3 	bl	8007db0 <USBD_LL_DataInStage>
}
 800926a:	bf00      	nop
 800926c:	3708      	adds	r7, #8
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}

08009272 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009272:	b580      	push	{r7, lr}
 8009274:	b082      	sub	sp, #8
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009280:	4618      	mov	r0, r3
 8009282:	f7fe fea7 	bl	8007fd4 <USBD_LL_SOF>
}
 8009286:	bf00      	nop
 8009288:	3708      	adds	r7, #8
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b084      	sub	sp, #16
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009296:	2301      	movs	r3, #1
 8009298:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d102      	bne.n	80092a8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80092a2:	2300      	movs	r3, #0
 80092a4:	73fb      	strb	r3, [r7, #15]
 80092a6:	e008      	b.n	80092ba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	2b02      	cmp	r3, #2
 80092ae:	d102      	bne.n	80092b6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80092b0:	2301      	movs	r3, #1
 80092b2:	73fb      	strb	r3, [r7, #15]
 80092b4:	e001      	b.n	80092ba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80092b6:	f7f8 fa2f 	bl	8001718 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80092c0:	7bfa      	ldrb	r2, [r7, #15]
 80092c2:	4611      	mov	r1, r2
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7fe fe4a 	bl	8007f5e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80092d0:	4618      	mov	r0, r3
 80092d2:	f7fe fe03 	bl	8007edc <USBD_LL_Reset>
}
 80092d6:	bf00      	nop
 80092d8:	3710      	adds	r7, #16
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
	...

080092e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80092ee:	4618      	mov	r0, r3
 80092f0:	f7fe fe45 	bl	8007f7e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	6812      	ldr	r2, [r2, #0]
 8009302:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009306:	f043 0301 	orr.w	r3, r3, #1
 800930a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6a1b      	ldr	r3, [r3, #32]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d005      	beq.n	8009320 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009314:	4b04      	ldr	r3, [pc, #16]	; (8009328 <HAL_PCD_SuspendCallback+0x48>)
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	4a03      	ldr	r2, [pc, #12]	; (8009328 <HAL_PCD_SuspendCallback+0x48>)
 800931a:	f043 0306 	orr.w	r3, r3, #6
 800931e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009320:	bf00      	nop
 8009322:	3708      	adds	r7, #8
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}
 8009328:	e000ed00 	.word	0xe000ed00

0800932c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800933a:	4618      	mov	r0, r3
 800933c:	f7fe fe34 	bl	8007fa8 <USBD_LL_Resume>
}
 8009340:	bf00      	nop
 8009342:	3708      	adds	r7, #8
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	460b      	mov	r3, r1
 8009352:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800935a:	78fa      	ldrb	r2, [r7, #3]
 800935c:	4611      	mov	r1, r2
 800935e:	4618      	mov	r0, r3
 8009360:	f7fe fe5f 	bl	8008022 <USBD_LL_IsoOUTIncomplete>
}
 8009364:	bf00      	nop
 8009366:	3708      	adds	r7, #8
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b082      	sub	sp, #8
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	460b      	mov	r3, r1
 8009376:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800937e:	78fa      	ldrb	r2, [r7, #3]
 8009380:	4611      	mov	r1, r2
 8009382:	4618      	mov	r0, r3
 8009384:	f7fe fe40 	bl	8008008 <USBD_LL_IsoINIncomplete>
}
 8009388:	bf00      	nop
 800938a:	3708      	adds	r7, #8
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800939e:	4618      	mov	r0, r3
 80093a0:	f7fe fe4c 	bl	800803c <USBD_LL_DevConnected>
}
 80093a4:	bf00      	nop
 80093a6:	3708      	adds	r7, #8
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7fe fe49 	bl	8008052 <USBD_LL_DevDisconnected>
}
 80093c0:	bf00      	nop
 80093c2:	3708      	adds	r7, #8
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d13c      	bne.n	8009452 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80093d8:	4a20      	ldr	r2, [pc, #128]	; (800945c <USBD_LL_Init+0x94>)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4a1e      	ldr	r2, [pc, #120]	; (800945c <USBD_LL_Init+0x94>)
 80093e4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80093e8:	4b1c      	ldr	r3, [pc, #112]	; (800945c <USBD_LL_Init+0x94>)
 80093ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80093ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80093f0:	4b1a      	ldr	r3, [pc, #104]	; (800945c <USBD_LL_Init+0x94>)
 80093f2:	2204      	movs	r2, #4
 80093f4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80093f6:	4b19      	ldr	r3, [pc, #100]	; (800945c <USBD_LL_Init+0x94>)
 80093f8:	2202      	movs	r2, #2
 80093fa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80093fc:	4b17      	ldr	r3, [pc, #92]	; (800945c <USBD_LL_Init+0x94>)
 80093fe:	2200      	movs	r2, #0
 8009400:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009402:	4b16      	ldr	r3, [pc, #88]	; (800945c <USBD_LL_Init+0x94>)
 8009404:	2202      	movs	r2, #2
 8009406:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009408:	4b14      	ldr	r3, [pc, #80]	; (800945c <USBD_LL_Init+0x94>)
 800940a:	2200      	movs	r2, #0
 800940c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800940e:	4b13      	ldr	r3, [pc, #76]	; (800945c <USBD_LL_Init+0x94>)
 8009410:	2200      	movs	r2, #0
 8009412:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009414:	4b11      	ldr	r3, [pc, #68]	; (800945c <USBD_LL_Init+0x94>)
 8009416:	2200      	movs	r2, #0
 8009418:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800941a:	4b10      	ldr	r3, [pc, #64]	; (800945c <USBD_LL_Init+0x94>)
 800941c:	2200      	movs	r2, #0
 800941e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009420:	4b0e      	ldr	r3, [pc, #56]	; (800945c <USBD_LL_Init+0x94>)
 8009422:	2200      	movs	r2, #0
 8009424:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009426:	480d      	ldr	r0, [pc, #52]	; (800945c <USBD_LL_Init+0x94>)
 8009428:	f7f9 fef9 	bl	800321e <HAL_PCD_Init>
 800942c:	4603      	mov	r3, r0
 800942e:	2b00      	cmp	r3, #0
 8009430:	d001      	beq.n	8009436 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009432:	f7f8 f971 	bl	8001718 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009436:	2180      	movs	r1, #128	; 0x80
 8009438:	4808      	ldr	r0, [pc, #32]	; (800945c <USBD_LL_Init+0x94>)
 800943a:	f7fb f856 	bl	80044ea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800943e:	2240      	movs	r2, #64	; 0x40
 8009440:	2100      	movs	r1, #0
 8009442:	4806      	ldr	r0, [pc, #24]	; (800945c <USBD_LL_Init+0x94>)
 8009444:	f7fb f80a 	bl	800445c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009448:	2280      	movs	r2, #128	; 0x80
 800944a:	2101      	movs	r1, #1
 800944c:	4803      	ldr	r0, [pc, #12]	; (800945c <USBD_LL_Init+0x94>)
 800944e:	f7fb f805 	bl	800445c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	3708      	adds	r7, #8
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	200019c0 	.word	0x200019c0

08009460 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009468:	2300      	movs	r3, #0
 800946a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800946c:	2300      	movs	r3, #0
 800946e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009476:	4618      	mov	r0, r3
 8009478:	f7f9 ffee 	bl	8003458 <HAL_PCD_Start>
 800947c:	4603      	mov	r3, r0
 800947e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009480:	7bfb      	ldrb	r3, [r7, #15]
 8009482:	4618      	mov	r0, r3
 8009484:	f000 f92a 	bl	80096dc <USBD_Get_USB_Status>
 8009488:	4603      	mov	r3, r0
 800948a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800948c:	7bbb      	ldrb	r3, [r7, #14]
}
 800948e:	4618      	mov	r0, r3
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}

08009496 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009496:	b580      	push	{r7, lr}
 8009498:	b084      	sub	sp, #16
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
 800949e:	4608      	mov	r0, r1
 80094a0:	4611      	mov	r1, r2
 80094a2:	461a      	mov	r2, r3
 80094a4:	4603      	mov	r3, r0
 80094a6:	70fb      	strb	r3, [r7, #3]
 80094a8:	460b      	mov	r3, r1
 80094aa:	70bb      	strb	r3, [r7, #2]
 80094ac:	4613      	mov	r3, r2
 80094ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094b0:	2300      	movs	r3, #0
 80094b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094b4:	2300      	movs	r3, #0
 80094b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80094be:	78bb      	ldrb	r3, [r7, #2]
 80094c0:	883a      	ldrh	r2, [r7, #0]
 80094c2:	78f9      	ldrb	r1, [r7, #3]
 80094c4:	f7fa fbd2 	bl	8003c6c <HAL_PCD_EP_Open>
 80094c8:	4603      	mov	r3, r0
 80094ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094cc:	7bfb      	ldrb	r3, [r7, #15]
 80094ce:	4618      	mov	r0, r3
 80094d0:	f000 f904 	bl	80096dc <USBD_Get_USB_Status>
 80094d4:	4603      	mov	r3, r0
 80094d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3710      	adds	r7, #16
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b084      	sub	sp, #16
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
 80094ea:	460b      	mov	r3, r1
 80094ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094ee:	2300      	movs	r3, #0
 80094f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094f2:	2300      	movs	r3, #0
 80094f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80094fc:	78fa      	ldrb	r2, [r7, #3]
 80094fe:	4611      	mov	r1, r2
 8009500:	4618      	mov	r0, r3
 8009502:	f7fa fc1b 	bl	8003d3c <HAL_PCD_EP_Close>
 8009506:	4603      	mov	r3, r0
 8009508:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800950a:	7bfb      	ldrb	r3, [r7, #15]
 800950c:	4618      	mov	r0, r3
 800950e:	f000 f8e5 	bl	80096dc <USBD_Get_USB_Status>
 8009512:	4603      	mov	r3, r0
 8009514:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009516:	7bbb      	ldrb	r3, [r7, #14]
}
 8009518:	4618      	mov	r0, r3
 800951a:	3710      	adds	r7, #16
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	460b      	mov	r3, r1
 800952a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800952c:	2300      	movs	r3, #0
 800952e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009530:	2300      	movs	r3, #0
 8009532:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800953a:	78fa      	ldrb	r2, [r7, #3]
 800953c:	4611      	mov	r1, r2
 800953e:	4618      	mov	r0, r3
 8009540:	f7fa fcf3 	bl	8003f2a <HAL_PCD_EP_SetStall>
 8009544:	4603      	mov	r3, r0
 8009546:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009548:	7bfb      	ldrb	r3, [r7, #15]
 800954a:	4618      	mov	r0, r3
 800954c:	f000 f8c6 	bl	80096dc <USBD_Get_USB_Status>
 8009550:	4603      	mov	r3, r0
 8009552:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009554:	7bbb      	ldrb	r3, [r7, #14]
}
 8009556:	4618      	mov	r0, r3
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800955e:	b580      	push	{r7, lr}
 8009560:	b084      	sub	sp, #16
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
 8009566:	460b      	mov	r3, r1
 8009568:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800956a:	2300      	movs	r3, #0
 800956c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800956e:	2300      	movs	r3, #0
 8009570:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009578:	78fa      	ldrb	r2, [r7, #3]
 800957a:	4611      	mov	r1, r2
 800957c:	4618      	mov	r0, r3
 800957e:	f7fa fd38 	bl	8003ff2 <HAL_PCD_EP_ClrStall>
 8009582:	4603      	mov	r3, r0
 8009584:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009586:	7bfb      	ldrb	r3, [r7, #15]
 8009588:	4618      	mov	r0, r3
 800958a:	f000 f8a7 	bl	80096dc <USBD_Get_USB_Status>
 800958e:	4603      	mov	r3, r0
 8009590:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009592:	7bbb      	ldrb	r3, [r7, #14]
}
 8009594:	4618      	mov	r0, r3
 8009596:	3710      	adds	r7, #16
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800959c:	b480      	push	{r7}
 800959e:	b085      	sub	sp, #20
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	460b      	mov	r3, r1
 80095a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80095ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80095b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	da0b      	bge.n	80095d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80095b8:	78fb      	ldrb	r3, [r7, #3]
 80095ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095be:	68f9      	ldr	r1, [r7, #12]
 80095c0:	4613      	mov	r3, r2
 80095c2:	00db      	lsls	r3, r3, #3
 80095c4:	1a9b      	subs	r3, r3, r2
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	440b      	add	r3, r1
 80095ca:	333e      	adds	r3, #62	; 0x3e
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	e00b      	b.n	80095e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80095d0:	78fb      	ldrb	r3, [r7, #3]
 80095d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095d6:	68f9      	ldr	r1, [r7, #12]
 80095d8:	4613      	mov	r3, r2
 80095da:	00db      	lsls	r3, r3, #3
 80095dc:	1a9b      	subs	r3, r3, r2
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	440b      	add	r3, r1
 80095e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80095e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3714      	adds	r7, #20
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	460b      	mov	r3, r1
 80095fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009600:	2300      	movs	r3, #0
 8009602:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009604:	2300      	movs	r3, #0
 8009606:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800960e:	78fa      	ldrb	r2, [r7, #3]
 8009610:	4611      	mov	r1, r2
 8009612:	4618      	mov	r0, r3
 8009614:	f7fa fb05 	bl	8003c22 <HAL_PCD_SetAddress>
 8009618:	4603      	mov	r3, r0
 800961a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800961c:	7bfb      	ldrb	r3, [r7, #15]
 800961e:	4618      	mov	r0, r3
 8009620:	f000 f85c 	bl	80096dc <USBD_Get_USB_Status>
 8009624:	4603      	mov	r3, r0
 8009626:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009628:	7bbb      	ldrb	r3, [r7, #14]
}
 800962a:	4618      	mov	r0, r3
 800962c:	3710      	adds	r7, #16
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009632:	b580      	push	{r7, lr}
 8009634:	b086      	sub	sp, #24
 8009636:	af00      	add	r7, sp, #0
 8009638:	60f8      	str	r0, [r7, #12]
 800963a:	607a      	str	r2, [r7, #4]
 800963c:	603b      	str	r3, [r7, #0]
 800963e:	460b      	mov	r3, r1
 8009640:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009642:	2300      	movs	r3, #0
 8009644:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009646:	2300      	movs	r3, #0
 8009648:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009650:	7af9      	ldrb	r1, [r7, #11]
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	f7fa fc1e 	bl	8003e96 <HAL_PCD_EP_Transmit>
 800965a:	4603      	mov	r3, r0
 800965c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800965e:	7dfb      	ldrb	r3, [r7, #23]
 8009660:	4618      	mov	r0, r3
 8009662:	f000 f83b 	bl	80096dc <USBD_Get_USB_Status>
 8009666:	4603      	mov	r3, r0
 8009668:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800966a:	7dbb      	ldrb	r3, [r7, #22]
}
 800966c:	4618      	mov	r0, r3
 800966e:	3718      	adds	r7, #24
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b086      	sub	sp, #24
 8009678:	af00      	add	r7, sp, #0
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	607a      	str	r2, [r7, #4]
 800967e:	603b      	str	r3, [r7, #0]
 8009680:	460b      	mov	r3, r1
 8009682:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009684:	2300      	movs	r3, #0
 8009686:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009688:	2300      	movs	r3, #0
 800968a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009692:	7af9      	ldrb	r1, [r7, #11]
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	f7fa fb9a 	bl	8003dd0 <HAL_PCD_EP_Receive>
 800969c:	4603      	mov	r3, r0
 800969e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096a0:	7dfb      	ldrb	r3, [r7, #23]
 80096a2:	4618      	mov	r0, r3
 80096a4:	f000 f81a 	bl	80096dc <USBD_Get_USB_Status>
 80096a8:	4603      	mov	r3, r0
 80096aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096ac:	7dbb      	ldrb	r3, [r7, #22]
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3718      	adds	r7, #24
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b082      	sub	sp, #8
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
 80096be:	460b      	mov	r3, r1
 80096c0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80096c8:	78fa      	ldrb	r2, [r7, #3]
 80096ca:	4611      	mov	r1, r2
 80096cc:	4618      	mov	r0, r3
 80096ce:	f7fa fbca 	bl	8003e66 <HAL_PCD_EP_GetRxCount>
 80096d2:	4603      	mov	r3, r0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3708      	adds	r7, #8
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80096dc:	b480      	push	{r7}
 80096de:	b085      	sub	sp, #20
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	4603      	mov	r3, r0
 80096e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096e6:	2300      	movs	r3, #0
 80096e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80096ea:	79fb      	ldrb	r3, [r7, #7]
 80096ec:	2b03      	cmp	r3, #3
 80096ee:	d817      	bhi.n	8009720 <USBD_Get_USB_Status+0x44>
 80096f0:	a201      	add	r2, pc, #4	; (adr r2, 80096f8 <USBD_Get_USB_Status+0x1c>)
 80096f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f6:	bf00      	nop
 80096f8:	08009709 	.word	0x08009709
 80096fc:	0800970f 	.word	0x0800970f
 8009700:	08009715 	.word	0x08009715
 8009704:	0800971b 	.word	0x0800971b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009708:	2300      	movs	r3, #0
 800970a:	73fb      	strb	r3, [r7, #15]
    break;
 800970c:	e00b      	b.n	8009726 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800970e:	2303      	movs	r3, #3
 8009710:	73fb      	strb	r3, [r7, #15]
    break;
 8009712:	e008      	b.n	8009726 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009714:	2301      	movs	r3, #1
 8009716:	73fb      	strb	r3, [r7, #15]
    break;
 8009718:	e005      	b.n	8009726 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800971a:	2303      	movs	r3, #3
 800971c:	73fb      	strb	r3, [r7, #15]
    break;
 800971e:	e002      	b.n	8009726 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009720:	2303      	movs	r3, #3
 8009722:	73fb      	strb	r3, [r7, #15]
    break;
 8009724:	bf00      	nop
  }
  return usb_status;
 8009726:	7bfb      	ldrb	r3, [r7, #15]
}
 8009728:	4618      	mov	r0, r3
 800972a:	3714      	adds	r7, #20
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <__errno>:
 8009734:	4b01      	ldr	r3, [pc, #4]	; (800973c <__errno+0x8>)
 8009736:	6818      	ldr	r0, [r3, #0]
 8009738:	4770      	bx	lr
 800973a:	bf00      	nop
 800973c:	20000188 	.word	0x20000188

08009740 <__libc_init_array>:
 8009740:	b570      	push	{r4, r5, r6, lr}
 8009742:	4e0d      	ldr	r6, [pc, #52]	; (8009778 <__libc_init_array+0x38>)
 8009744:	4c0d      	ldr	r4, [pc, #52]	; (800977c <__libc_init_array+0x3c>)
 8009746:	1ba4      	subs	r4, r4, r6
 8009748:	10a4      	asrs	r4, r4, #2
 800974a:	2500      	movs	r5, #0
 800974c:	42a5      	cmp	r5, r4
 800974e:	d109      	bne.n	8009764 <__libc_init_array+0x24>
 8009750:	4e0b      	ldr	r6, [pc, #44]	; (8009780 <__libc_init_array+0x40>)
 8009752:	4c0c      	ldr	r4, [pc, #48]	; (8009784 <__libc_init_array+0x44>)
 8009754:	f002 f864 	bl	800b820 <_init>
 8009758:	1ba4      	subs	r4, r4, r6
 800975a:	10a4      	asrs	r4, r4, #2
 800975c:	2500      	movs	r5, #0
 800975e:	42a5      	cmp	r5, r4
 8009760:	d105      	bne.n	800976e <__libc_init_array+0x2e>
 8009762:	bd70      	pop	{r4, r5, r6, pc}
 8009764:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009768:	4798      	blx	r3
 800976a:	3501      	adds	r5, #1
 800976c:	e7ee      	b.n	800974c <__libc_init_array+0xc>
 800976e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009772:	4798      	blx	r3
 8009774:	3501      	adds	r5, #1
 8009776:	e7f2      	b.n	800975e <__libc_init_array+0x1e>
 8009778:	0800bb08 	.word	0x0800bb08
 800977c:	0800bb08 	.word	0x0800bb08
 8009780:	0800bb08 	.word	0x0800bb08
 8009784:	0800bb0c 	.word	0x0800bb0c

08009788 <malloc>:
 8009788:	4b02      	ldr	r3, [pc, #8]	; (8009794 <malloc+0xc>)
 800978a:	4601      	mov	r1, r0
 800978c:	6818      	ldr	r0, [r3, #0]
 800978e:	f000 b861 	b.w	8009854 <_malloc_r>
 8009792:	bf00      	nop
 8009794:	20000188 	.word	0x20000188

08009798 <free>:
 8009798:	4b02      	ldr	r3, [pc, #8]	; (80097a4 <free+0xc>)
 800979a:	4601      	mov	r1, r0
 800979c:	6818      	ldr	r0, [r3, #0]
 800979e:	f000 b80b 	b.w	80097b8 <_free_r>
 80097a2:	bf00      	nop
 80097a4:	20000188 	.word	0x20000188

080097a8 <memset>:
 80097a8:	4402      	add	r2, r0
 80097aa:	4603      	mov	r3, r0
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d100      	bne.n	80097b2 <memset+0xa>
 80097b0:	4770      	bx	lr
 80097b2:	f803 1b01 	strb.w	r1, [r3], #1
 80097b6:	e7f9      	b.n	80097ac <memset+0x4>

080097b8 <_free_r>:
 80097b8:	b538      	push	{r3, r4, r5, lr}
 80097ba:	4605      	mov	r5, r0
 80097bc:	2900      	cmp	r1, #0
 80097be:	d045      	beq.n	800984c <_free_r+0x94>
 80097c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097c4:	1f0c      	subs	r4, r1, #4
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	bfb8      	it	lt
 80097ca:	18e4      	addlt	r4, r4, r3
 80097cc:	f001 fb85 	bl	800aeda <__malloc_lock>
 80097d0:	4a1f      	ldr	r2, [pc, #124]	; (8009850 <_free_r+0x98>)
 80097d2:	6813      	ldr	r3, [r2, #0]
 80097d4:	4610      	mov	r0, r2
 80097d6:	b933      	cbnz	r3, 80097e6 <_free_r+0x2e>
 80097d8:	6063      	str	r3, [r4, #4]
 80097da:	6014      	str	r4, [r2, #0]
 80097dc:	4628      	mov	r0, r5
 80097de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097e2:	f001 bb7b 	b.w	800aedc <__malloc_unlock>
 80097e6:	42a3      	cmp	r3, r4
 80097e8:	d90c      	bls.n	8009804 <_free_r+0x4c>
 80097ea:	6821      	ldr	r1, [r4, #0]
 80097ec:	1862      	adds	r2, r4, r1
 80097ee:	4293      	cmp	r3, r2
 80097f0:	bf04      	itt	eq
 80097f2:	681a      	ldreq	r2, [r3, #0]
 80097f4:	685b      	ldreq	r3, [r3, #4]
 80097f6:	6063      	str	r3, [r4, #4]
 80097f8:	bf04      	itt	eq
 80097fa:	1852      	addeq	r2, r2, r1
 80097fc:	6022      	streq	r2, [r4, #0]
 80097fe:	6004      	str	r4, [r0, #0]
 8009800:	e7ec      	b.n	80097dc <_free_r+0x24>
 8009802:	4613      	mov	r3, r2
 8009804:	685a      	ldr	r2, [r3, #4]
 8009806:	b10a      	cbz	r2, 800980c <_free_r+0x54>
 8009808:	42a2      	cmp	r2, r4
 800980a:	d9fa      	bls.n	8009802 <_free_r+0x4a>
 800980c:	6819      	ldr	r1, [r3, #0]
 800980e:	1858      	adds	r0, r3, r1
 8009810:	42a0      	cmp	r0, r4
 8009812:	d10b      	bne.n	800982c <_free_r+0x74>
 8009814:	6820      	ldr	r0, [r4, #0]
 8009816:	4401      	add	r1, r0
 8009818:	1858      	adds	r0, r3, r1
 800981a:	4282      	cmp	r2, r0
 800981c:	6019      	str	r1, [r3, #0]
 800981e:	d1dd      	bne.n	80097dc <_free_r+0x24>
 8009820:	6810      	ldr	r0, [r2, #0]
 8009822:	6852      	ldr	r2, [r2, #4]
 8009824:	605a      	str	r2, [r3, #4]
 8009826:	4401      	add	r1, r0
 8009828:	6019      	str	r1, [r3, #0]
 800982a:	e7d7      	b.n	80097dc <_free_r+0x24>
 800982c:	d902      	bls.n	8009834 <_free_r+0x7c>
 800982e:	230c      	movs	r3, #12
 8009830:	602b      	str	r3, [r5, #0]
 8009832:	e7d3      	b.n	80097dc <_free_r+0x24>
 8009834:	6820      	ldr	r0, [r4, #0]
 8009836:	1821      	adds	r1, r4, r0
 8009838:	428a      	cmp	r2, r1
 800983a:	bf04      	itt	eq
 800983c:	6811      	ldreq	r1, [r2, #0]
 800983e:	6852      	ldreq	r2, [r2, #4]
 8009840:	6062      	str	r2, [r4, #4]
 8009842:	bf04      	itt	eq
 8009844:	1809      	addeq	r1, r1, r0
 8009846:	6021      	streq	r1, [r4, #0]
 8009848:	605c      	str	r4, [r3, #4]
 800984a:	e7c7      	b.n	80097dc <_free_r+0x24>
 800984c:	bd38      	pop	{r3, r4, r5, pc}
 800984e:	bf00      	nop
 8009850:	2000037c 	.word	0x2000037c

08009854 <_malloc_r>:
 8009854:	b570      	push	{r4, r5, r6, lr}
 8009856:	1ccd      	adds	r5, r1, #3
 8009858:	f025 0503 	bic.w	r5, r5, #3
 800985c:	3508      	adds	r5, #8
 800985e:	2d0c      	cmp	r5, #12
 8009860:	bf38      	it	cc
 8009862:	250c      	movcc	r5, #12
 8009864:	2d00      	cmp	r5, #0
 8009866:	4606      	mov	r6, r0
 8009868:	db01      	blt.n	800986e <_malloc_r+0x1a>
 800986a:	42a9      	cmp	r1, r5
 800986c:	d903      	bls.n	8009876 <_malloc_r+0x22>
 800986e:	230c      	movs	r3, #12
 8009870:	6033      	str	r3, [r6, #0]
 8009872:	2000      	movs	r0, #0
 8009874:	bd70      	pop	{r4, r5, r6, pc}
 8009876:	f001 fb30 	bl	800aeda <__malloc_lock>
 800987a:	4a21      	ldr	r2, [pc, #132]	; (8009900 <_malloc_r+0xac>)
 800987c:	6814      	ldr	r4, [r2, #0]
 800987e:	4621      	mov	r1, r4
 8009880:	b991      	cbnz	r1, 80098a8 <_malloc_r+0x54>
 8009882:	4c20      	ldr	r4, [pc, #128]	; (8009904 <_malloc_r+0xb0>)
 8009884:	6823      	ldr	r3, [r4, #0]
 8009886:	b91b      	cbnz	r3, 8009890 <_malloc_r+0x3c>
 8009888:	4630      	mov	r0, r6
 800988a:	f000 fc99 	bl	800a1c0 <_sbrk_r>
 800988e:	6020      	str	r0, [r4, #0]
 8009890:	4629      	mov	r1, r5
 8009892:	4630      	mov	r0, r6
 8009894:	f000 fc94 	bl	800a1c0 <_sbrk_r>
 8009898:	1c43      	adds	r3, r0, #1
 800989a:	d124      	bne.n	80098e6 <_malloc_r+0x92>
 800989c:	230c      	movs	r3, #12
 800989e:	6033      	str	r3, [r6, #0]
 80098a0:	4630      	mov	r0, r6
 80098a2:	f001 fb1b 	bl	800aedc <__malloc_unlock>
 80098a6:	e7e4      	b.n	8009872 <_malloc_r+0x1e>
 80098a8:	680b      	ldr	r3, [r1, #0]
 80098aa:	1b5b      	subs	r3, r3, r5
 80098ac:	d418      	bmi.n	80098e0 <_malloc_r+0x8c>
 80098ae:	2b0b      	cmp	r3, #11
 80098b0:	d90f      	bls.n	80098d2 <_malloc_r+0x7e>
 80098b2:	600b      	str	r3, [r1, #0]
 80098b4:	50cd      	str	r5, [r1, r3]
 80098b6:	18cc      	adds	r4, r1, r3
 80098b8:	4630      	mov	r0, r6
 80098ba:	f001 fb0f 	bl	800aedc <__malloc_unlock>
 80098be:	f104 000b 	add.w	r0, r4, #11
 80098c2:	1d23      	adds	r3, r4, #4
 80098c4:	f020 0007 	bic.w	r0, r0, #7
 80098c8:	1ac3      	subs	r3, r0, r3
 80098ca:	d0d3      	beq.n	8009874 <_malloc_r+0x20>
 80098cc:	425a      	negs	r2, r3
 80098ce:	50e2      	str	r2, [r4, r3]
 80098d0:	e7d0      	b.n	8009874 <_malloc_r+0x20>
 80098d2:	428c      	cmp	r4, r1
 80098d4:	684b      	ldr	r3, [r1, #4]
 80098d6:	bf16      	itet	ne
 80098d8:	6063      	strne	r3, [r4, #4]
 80098da:	6013      	streq	r3, [r2, #0]
 80098dc:	460c      	movne	r4, r1
 80098de:	e7eb      	b.n	80098b8 <_malloc_r+0x64>
 80098e0:	460c      	mov	r4, r1
 80098e2:	6849      	ldr	r1, [r1, #4]
 80098e4:	e7cc      	b.n	8009880 <_malloc_r+0x2c>
 80098e6:	1cc4      	adds	r4, r0, #3
 80098e8:	f024 0403 	bic.w	r4, r4, #3
 80098ec:	42a0      	cmp	r0, r4
 80098ee:	d005      	beq.n	80098fc <_malloc_r+0xa8>
 80098f0:	1a21      	subs	r1, r4, r0
 80098f2:	4630      	mov	r0, r6
 80098f4:	f000 fc64 	bl	800a1c0 <_sbrk_r>
 80098f8:	3001      	adds	r0, #1
 80098fa:	d0cf      	beq.n	800989c <_malloc_r+0x48>
 80098fc:	6025      	str	r5, [r4, #0]
 80098fe:	e7db      	b.n	80098b8 <_malloc_r+0x64>
 8009900:	2000037c 	.word	0x2000037c
 8009904:	20000380 	.word	0x20000380

08009908 <__cvt>:
 8009908:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800990c:	ec55 4b10 	vmov	r4, r5, d0
 8009910:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009912:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009916:	2d00      	cmp	r5, #0
 8009918:	460e      	mov	r6, r1
 800991a:	4691      	mov	r9, r2
 800991c:	4619      	mov	r1, r3
 800991e:	bfb8      	it	lt
 8009920:	4622      	movlt	r2, r4
 8009922:	462b      	mov	r3, r5
 8009924:	f027 0720 	bic.w	r7, r7, #32
 8009928:	bfbb      	ittet	lt
 800992a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800992e:	461d      	movlt	r5, r3
 8009930:	2300      	movge	r3, #0
 8009932:	232d      	movlt	r3, #45	; 0x2d
 8009934:	bfb8      	it	lt
 8009936:	4614      	movlt	r4, r2
 8009938:	2f46      	cmp	r7, #70	; 0x46
 800993a:	700b      	strb	r3, [r1, #0]
 800993c:	d004      	beq.n	8009948 <__cvt+0x40>
 800993e:	2f45      	cmp	r7, #69	; 0x45
 8009940:	d100      	bne.n	8009944 <__cvt+0x3c>
 8009942:	3601      	adds	r6, #1
 8009944:	2102      	movs	r1, #2
 8009946:	e000      	b.n	800994a <__cvt+0x42>
 8009948:	2103      	movs	r1, #3
 800994a:	ab03      	add	r3, sp, #12
 800994c:	9301      	str	r3, [sp, #4]
 800994e:	ab02      	add	r3, sp, #8
 8009950:	9300      	str	r3, [sp, #0]
 8009952:	4632      	mov	r2, r6
 8009954:	4653      	mov	r3, sl
 8009956:	ec45 4b10 	vmov	d0, r4, r5
 800995a:	f000 fced 	bl	800a338 <_dtoa_r>
 800995e:	2f47      	cmp	r7, #71	; 0x47
 8009960:	4680      	mov	r8, r0
 8009962:	d102      	bne.n	800996a <__cvt+0x62>
 8009964:	f019 0f01 	tst.w	r9, #1
 8009968:	d026      	beq.n	80099b8 <__cvt+0xb0>
 800996a:	2f46      	cmp	r7, #70	; 0x46
 800996c:	eb08 0906 	add.w	r9, r8, r6
 8009970:	d111      	bne.n	8009996 <__cvt+0x8e>
 8009972:	f898 3000 	ldrb.w	r3, [r8]
 8009976:	2b30      	cmp	r3, #48	; 0x30
 8009978:	d10a      	bne.n	8009990 <__cvt+0x88>
 800997a:	2200      	movs	r2, #0
 800997c:	2300      	movs	r3, #0
 800997e:	4620      	mov	r0, r4
 8009980:	4629      	mov	r1, r5
 8009982:	f7f7 f8a1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009986:	b918      	cbnz	r0, 8009990 <__cvt+0x88>
 8009988:	f1c6 0601 	rsb	r6, r6, #1
 800998c:	f8ca 6000 	str.w	r6, [sl]
 8009990:	f8da 3000 	ldr.w	r3, [sl]
 8009994:	4499      	add	r9, r3
 8009996:	2200      	movs	r2, #0
 8009998:	2300      	movs	r3, #0
 800999a:	4620      	mov	r0, r4
 800999c:	4629      	mov	r1, r5
 800999e:	f7f7 f893 	bl	8000ac8 <__aeabi_dcmpeq>
 80099a2:	b938      	cbnz	r0, 80099b4 <__cvt+0xac>
 80099a4:	2230      	movs	r2, #48	; 0x30
 80099a6:	9b03      	ldr	r3, [sp, #12]
 80099a8:	454b      	cmp	r3, r9
 80099aa:	d205      	bcs.n	80099b8 <__cvt+0xb0>
 80099ac:	1c59      	adds	r1, r3, #1
 80099ae:	9103      	str	r1, [sp, #12]
 80099b0:	701a      	strb	r2, [r3, #0]
 80099b2:	e7f8      	b.n	80099a6 <__cvt+0x9e>
 80099b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80099b8:	9b03      	ldr	r3, [sp, #12]
 80099ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099bc:	eba3 0308 	sub.w	r3, r3, r8
 80099c0:	4640      	mov	r0, r8
 80099c2:	6013      	str	r3, [r2, #0]
 80099c4:	b004      	add	sp, #16
 80099c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080099ca <__exponent>:
 80099ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099cc:	2900      	cmp	r1, #0
 80099ce:	4604      	mov	r4, r0
 80099d0:	bfba      	itte	lt
 80099d2:	4249      	neglt	r1, r1
 80099d4:	232d      	movlt	r3, #45	; 0x2d
 80099d6:	232b      	movge	r3, #43	; 0x2b
 80099d8:	2909      	cmp	r1, #9
 80099da:	f804 2b02 	strb.w	r2, [r4], #2
 80099de:	7043      	strb	r3, [r0, #1]
 80099e0:	dd20      	ble.n	8009a24 <__exponent+0x5a>
 80099e2:	f10d 0307 	add.w	r3, sp, #7
 80099e6:	461f      	mov	r7, r3
 80099e8:	260a      	movs	r6, #10
 80099ea:	fb91 f5f6 	sdiv	r5, r1, r6
 80099ee:	fb06 1115 	mls	r1, r6, r5, r1
 80099f2:	3130      	adds	r1, #48	; 0x30
 80099f4:	2d09      	cmp	r5, #9
 80099f6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80099fa:	f103 32ff 	add.w	r2, r3, #4294967295
 80099fe:	4629      	mov	r1, r5
 8009a00:	dc09      	bgt.n	8009a16 <__exponent+0x4c>
 8009a02:	3130      	adds	r1, #48	; 0x30
 8009a04:	3b02      	subs	r3, #2
 8009a06:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009a0a:	42bb      	cmp	r3, r7
 8009a0c:	4622      	mov	r2, r4
 8009a0e:	d304      	bcc.n	8009a1a <__exponent+0x50>
 8009a10:	1a10      	subs	r0, r2, r0
 8009a12:	b003      	add	sp, #12
 8009a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a16:	4613      	mov	r3, r2
 8009a18:	e7e7      	b.n	80099ea <__exponent+0x20>
 8009a1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a1e:	f804 2b01 	strb.w	r2, [r4], #1
 8009a22:	e7f2      	b.n	8009a0a <__exponent+0x40>
 8009a24:	2330      	movs	r3, #48	; 0x30
 8009a26:	4419      	add	r1, r3
 8009a28:	7083      	strb	r3, [r0, #2]
 8009a2a:	1d02      	adds	r2, r0, #4
 8009a2c:	70c1      	strb	r1, [r0, #3]
 8009a2e:	e7ef      	b.n	8009a10 <__exponent+0x46>

08009a30 <_printf_float>:
 8009a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a34:	b08d      	sub	sp, #52	; 0x34
 8009a36:	460c      	mov	r4, r1
 8009a38:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009a3c:	4616      	mov	r6, r2
 8009a3e:	461f      	mov	r7, r3
 8009a40:	4605      	mov	r5, r0
 8009a42:	f001 fa31 	bl	800aea8 <_localeconv_r>
 8009a46:	6803      	ldr	r3, [r0, #0]
 8009a48:	9304      	str	r3, [sp, #16]
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7f6 fbc0 	bl	80001d0 <strlen>
 8009a50:	2300      	movs	r3, #0
 8009a52:	930a      	str	r3, [sp, #40]	; 0x28
 8009a54:	f8d8 3000 	ldr.w	r3, [r8]
 8009a58:	9005      	str	r0, [sp, #20]
 8009a5a:	3307      	adds	r3, #7
 8009a5c:	f023 0307 	bic.w	r3, r3, #7
 8009a60:	f103 0208 	add.w	r2, r3, #8
 8009a64:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009a68:	f8d4 b000 	ldr.w	fp, [r4]
 8009a6c:	f8c8 2000 	str.w	r2, [r8]
 8009a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a74:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009a78:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009a7c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009a80:	9307      	str	r3, [sp, #28]
 8009a82:	f8cd 8018 	str.w	r8, [sp, #24]
 8009a86:	f04f 32ff 	mov.w	r2, #4294967295
 8009a8a:	4ba7      	ldr	r3, [pc, #668]	; (8009d28 <_printf_float+0x2f8>)
 8009a8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a90:	f7f7 f84c 	bl	8000b2c <__aeabi_dcmpun>
 8009a94:	bb70      	cbnz	r0, 8009af4 <_printf_float+0xc4>
 8009a96:	f04f 32ff 	mov.w	r2, #4294967295
 8009a9a:	4ba3      	ldr	r3, [pc, #652]	; (8009d28 <_printf_float+0x2f8>)
 8009a9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009aa0:	f7f7 f826 	bl	8000af0 <__aeabi_dcmple>
 8009aa4:	bb30      	cbnz	r0, 8009af4 <_printf_float+0xc4>
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	4640      	mov	r0, r8
 8009aac:	4649      	mov	r1, r9
 8009aae:	f7f7 f815 	bl	8000adc <__aeabi_dcmplt>
 8009ab2:	b110      	cbz	r0, 8009aba <_printf_float+0x8a>
 8009ab4:	232d      	movs	r3, #45	; 0x2d
 8009ab6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009aba:	4a9c      	ldr	r2, [pc, #624]	; (8009d2c <_printf_float+0x2fc>)
 8009abc:	4b9c      	ldr	r3, [pc, #624]	; (8009d30 <_printf_float+0x300>)
 8009abe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009ac2:	bf8c      	ite	hi
 8009ac4:	4690      	movhi	r8, r2
 8009ac6:	4698      	movls	r8, r3
 8009ac8:	2303      	movs	r3, #3
 8009aca:	f02b 0204 	bic.w	r2, fp, #4
 8009ace:	6123      	str	r3, [r4, #16]
 8009ad0:	6022      	str	r2, [r4, #0]
 8009ad2:	f04f 0900 	mov.w	r9, #0
 8009ad6:	9700      	str	r7, [sp, #0]
 8009ad8:	4633      	mov	r3, r6
 8009ada:	aa0b      	add	r2, sp, #44	; 0x2c
 8009adc:	4621      	mov	r1, r4
 8009ade:	4628      	mov	r0, r5
 8009ae0:	f000 f9e6 	bl	8009eb0 <_printf_common>
 8009ae4:	3001      	adds	r0, #1
 8009ae6:	f040 808d 	bne.w	8009c04 <_printf_float+0x1d4>
 8009aea:	f04f 30ff 	mov.w	r0, #4294967295
 8009aee:	b00d      	add	sp, #52	; 0x34
 8009af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009af4:	4642      	mov	r2, r8
 8009af6:	464b      	mov	r3, r9
 8009af8:	4640      	mov	r0, r8
 8009afa:	4649      	mov	r1, r9
 8009afc:	f7f7 f816 	bl	8000b2c <__aeabi_dcmpun>
 8009b00:	b110      	cbz	r0, 8009b08 <_printf_float+0xd8>
 8009b02:	4a8c      	ldr	r2, [pc, #560]	; (8009d34 <_printf_float+0x304>)
 8009b04:	4b8c      	ldr	r3, [pc, #560]	; (8009d38 <_printf_float+0x308>)
 8009b06:	e7da      	b.n	8009abe <_printf_float+0x8e>
 8009b08:	6861      	ldr	r1, [r4, #4]
 8009b0a:	1c4b      	adds	r3, r1, #1
 8009b0c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009b10:	a80a      	add	r0, sp, #40	; 0x28
 8009b12:	d13e      	bne.n	8009b92 <_printf_float+0x162>
 8009b14:	2306      	movs	r3, #6
 8009b16:	6063      	str	r3, [r4, #4]
 8009b18:	2300      	movs	r3, #0
 8009b1a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009b1e:	ab09      	add	r3, sp, #36	; 0x24
 8009b20:	9300      	str	r3, [sp, #0]
 8009b22:	ec49 8b10 	vmov	d0, r8, r9
 8009b26:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009b2a:	6022      	str	r2, [r4, #0]
 8009b2c:	f8cd a004 	str.w	sl, [sp, #4]
 8009b30:	6861      	ldr	r1, [r4, #4]
 8009b32:	4628      	mov	r0, r5
 8009b34:	f7ff fee8 	bl	8009908 <__cvt>
 8009b38:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009b3c:	2b47      	cmp	r3, #71	; 0x47
 8009b3e:	4680      	mov	r8, r0
 8009b40:	d109      	bne.n	8009b56 <_printf_float+0x126>
 8009b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b44:	1cd8      	adds	r0, r3, #3
 8009b46:	db02      	blt.n	8009b4e <_printf_float+0x11e>
 8009b48:	6862      	ldr	r2, [r4, #4]
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	dd47      	ble.n	8009bde <_printf_float+0x1ae>
 8009b4e:	f1aa 0a02 	sub.w	sl, sl, #2
 8009b52:	fa5f fa8a 	uxtb.w	sl, sl
 8009b56:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009b5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b5c:	d824      	bhi.n	8009ba8 <_printf_float+0x178>
 8009b5e:	3901      	subs	r1, #1
 8009b60:	4652      	mov	r2, sl
 8009b62:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009b66:	9109      	str	r1, [sp, #36]	; 0x24
 8009b68:	f7ff ff2f 	bl	80099ca <__exponent>
 8009b6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b6e:	1813      	adds	r3, r2, r0
 8009b70:	2a01      	cmp	r2, #1
 8009b72:	4681      	mov	r9, r0
 8009b74:	6123      	str	r3, [r4, #16]
 8009b76:	dc02      	bgt.n	8009b7e <_printf_float+0x14e>
 8009b78:	6822      	ldr	r2, [r4, #0]
 8009b7a:	07d1      	lsls	r1, r2, #31
 8009b7c:	d501      	bpl.n	8009b82 <_printf_float+0x152>
 8009b7e:	3301      	adds	r3, #1
 8009b80:	6123      	str	r3, [r4, #16]
 8009b82:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d0a5      	beq.n	8009ad6 <_printf_float+0xa6>
 8009b8a:	232d      	movs	r3, #45	; 0x2d
 8009b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b90:	e7a1      	b.n	8009ad6 <_printf_float+0xa6>
 8009b92:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8009b96:	f000 8177 	beq.w	8009e88 <_printf_float+0x458>
 8009b9a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009b9e:	d1bb      	bne.n	8009b18 <_printf_float+0xe8>
 8009ba0:	2900      	cmp	r1, #0
 8009ba2:	d1b9      	bne.n	8009b18 <_printf_float+0xe8>
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	e7b6      	b.n	8009b16 <_printf_float+0xe6>
 8009ba8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009bac:	d119      	bne.n	8009be2 <_printf_float+0x1b2>
 8009bae:	2900      	cmp	r1, #0
 8009bb0:	6863      	ldr	r3, [r4, #4]
 8009bb2:	dd0c      	ble.n	8009bce <_printf_float+0x19e>
 8009bb4:	6121      	str	r1, [r4, #16]
 8009bb6:	b913      	cbnz	r3, 8009bbe <_printf_float+0x18e>
 8009bb8:	6822      	ldr	r2, [r4, #0]
 8009bba:	07d2      	lsls	r2, r2, #31
 8009bbc:	d502      	bpl.n	8009bc4 <_printf_float+0x194>
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	440b      	add	r3, r1
 8009bc2:	6123      	str	r3, [r4, #16]
 8009bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bc6:	65a3      	str	r3, [r4, #88]	; 0x58
 8009bc8:	f04f 0900 	mov.w	r9, #0
 8009bcc:	e7d9      	b.n	8009b82 <_printf_float+0x152>
 8009bce:	b913      	cbnz	r3, 8009bd6 <_printf_float+0x1a6>
 8009bd0:	6822      	ldr	r2, [r4, #0]
 8009bd2:	07d0      	lsls	r0, r2, #31
 8009bd4:	d501      	bpl.n	8009bda <_printf_float+0x1aa>
 8009bd6:	3302      	adds	r3, #2
 8009bd8:	e7f3      	b.n	8009bc2 <_printf_float+0x192>
 8009bda:	2301      	movs	r3, #1
 8009bdc:	e7f1      	b.n	8009bc2 <_printf_float+0x192>
 8009bde:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8009be2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009be6:	4293      	cmp	r3, r2
 8009be8:	db05      	blt.n	8009bf6 <_printf_float+0x1c6>
 8009bea:	6822      	ldr	r2, [r4, #0]
 8009bec:	6123      	str	r3, [r4, #16]
 8009bee:	07d1      	lsls	r1, r2, #31
 8009bf0:	d5e8      	bpl.n	8009bc4 <_printf_float+0x194>
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	e7e5      	b.n	8009bc2 <_printf_float+0x192>
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	bfd4      	ite	le
 8009bfa:	f1c3 0302 	rsble	r3, r3, #2
 8009bfe:	2301      	movgt	r3, #1
 8009c00:	4413      	add	r3, r2
 8009c02:	e7de      	b.n	8009bc2 <_printf_float+0x192>
 8009c04:	6823      	ldr	r3, [r4, #0]
 8009c06:	055a      	lsls	r2, r3, #21
 8009c08:	d407      	bmi.n	8009c1a <_printf_float+0x1ea>
 8009c0a:	6923      	ldr	r3, [r4, #16]
 8009c0c:	4642      	mov	r2, r8
 8009c0e:	4631      	mov	r1, r6
 8009c10:	4628      	mov	r0, r5
 8009c12:	47b8      	blx	r7
 8009c14:	3001      	adds	r0, #1
 8009c16:	d12b      	bne.n	8009c70 <_printf_float+0x240>
 8009c18:	e767      	b.n	8009aea <_printf_float+0xba>
 8009c1a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009c1e:	f240 80dc 	bls.w	8009dda <_printf_float+0x3aa>
 8009c22:	2200      	movs	r2, #0
 8009c24:	2300      	movs	r3, #0
 8009c26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009c2a:	f7f6 ff4d 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c2e:	2800      	cmp	r0, #0
 8009c30:	d033      	beq.n	8009c9a <_printf_float+0x26a>
 8009c32:	2301      	movs	r3, #1
 8009c34:	4a41      	ldr	r2, [pc, #260]	; (8009d3c <_printf_float+0x30c>)
 8009c36:	4631      	mov	r1, r6
 8009c38:	4628      	mov	r0, r5
 8009c3a:	47b8      	blx	r7
 8009c3c:	3001      	adds	r0, #1
 8009c3e:	f43f af54 	beq.w	8009aea <_printf_float+0xba>
 8009c42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c46:	429a      	cmp	r2, r3
 8009c48:	db02      	blt.n	8009c50 <_printf_float+0x220>
 8009c4a:	6823      	ldr	r3, [r4, #0]
 8009c4c:	07d8      	lsls	r0, r3, #31
 8009c4e:	d50f      	bpl.n	8009c70 <_printf_float+0x240>
 8009c50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c54:	4631      	mov	r1, r6
 8009c56:	4628      	mov	r0, r5
 8009c58:	47b8      	blx	r7
 8009c5a:	3001      	adds	r0, #1
 8009c5c:	f43f af45 	beq.w	8009aea <_printf_float+0xba>
 8009c60:	f04f 0800 	mov.w	r8, #0
 8009c64:	f104 091a 	add.w	r9, r4, #26
 8009c68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c6a:	3b01      	subs	r3, #1
 8009c6c:	4543      	cmp	r3, r8
 8009c6e:	dc09      	bgt.n	8009c84 <_printf_float+0x254>
 8009c70:	6823      	ldr	r3, [r4, #0]
 8009c72:	079b      	lsls	r3, r3, #30
 8009c74:	f100 8103 	bmi.w	8009e7e <_printf_float+0x44e>
 8009c78:	68e0      	ldr	r0, [r4, #12]
 8009c7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c7c:	4298      	cmp	r0, r3
 8009c7e:	bfb8      	it	lt
 8009c80:	4618      	movlt	r0, r3
 8009c82:	e734      	b.n	8009aee <_printf_float+0xbe>
 8009c84:	2301      	movs	r3, #1
 8009c86:	464a      	mov	r2, r9
 8009c88:	4631      	mov	r1, r6
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	47b8      	blx	r7
 8009c8e:	3001      	adds	r0, #1
 8009c90:	f43f af2b 	beq.w	8009aea <_printf_float+0xba>
 8009c94:	f108 0801 	add.w	r8, r8, #1
 8009c98:	e7e6      	b.n	8009c68 <_printf_float+0x238>
 8009c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	dc2b      	bgt.n	8009cf8 <_printf_float+0x2c8>
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	4a26      	ldr	r2, [pc, #152]	; (8009d3c <_printf_float+0x30c>)
 8009ca4:	4631      	mov	r1, r6
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	47b8      	blx	r7
 8009caa:	3001      	adds	r0, #1
 8009cac:	f43f af1d 	beq.w	8009aea <_printf_float+0xba>
 8009cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cb2:	b923      	cbnz	r3, 8009cbe <_printf_float+0x28e>
 8009cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cb6:	b913      	cbnz	r3, 8009cbe <_printf_float+0x28e>
 8009cb8:	6823      	ldr	r3, [r4, #0]
 8009cba:	07d9      	lsls	r1, r3, #31
 8009cbc:	d5d8      	bpl.n	8009c70 <_printf_float+0x240>
 8009cbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cc2:	4631      	mov	r1, r6
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	47b8      	blx	r7
 8009cc8:	3001      	adds	r0, #1
 8009cca:	f43f af0e 	beq.w	8009aea <_printf_float+0xba>
 8009cce:	f04f 0900 	mov.w	r9, #0
 8009cd2:	f104 0a1a 	add.w	sl, r4, #26
 8009cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cd8:	425b      	negs	r3, r3
 8009cda:	454b      	cmp	r3, r9
 8009cdc:	dc01      	bgt.n	8009ce2 <_printf_float+0x2b2>
 8009cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ce0:	e794      	b.n	8009c0c <_printf_float+0x1dc>
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	4652      	mov	r2, sl
 8009ce6:	4631      	mov	r1, r6
 8009ce8:	4628      	mov	r0, r5
 8009cea:	47b8      	blx	r7
 8009cec:	3001      	adds	r0, #1
 8009cee:	f43f aefc 	beq.w	8009aea <_printf_float+0xba>
 8009cf2:	f109 0901 	add.w	r9, r9, #1
 8009cf6:	e7ee      	b.n	8009cd6 <_printf_float+0x2a6>
 8009cf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cfa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	bfa8      	it	ge
 8009d00:	461a      	movge	r2, r3
 8009d02:	2a00      	cmp	r2, #0
 8009d04:	4691      	mov	r9, r2
 8009d06:	dd07      	ble.n	8009d18 <_printf_float+0x2e8>
 8009d08:	4613      	mov	r3, r2
 8009d0a:	4631      	mov	r1, r6
 8009d0c:	4642      	mov	r2, r8
 8009d0e:	4628      	mov	r0, r5
 8009d10:	47b8      	blx	r7
 8009d12:	3001      	adds	r0, #1
 8009d14:	f43f aee9 	beq.w	8009aea <_printf_float+0xba>
 8009d18:	f104 031a 	add.w	r3, r4, #26
 8009d1c:	f04f 0b00 	mov.w	fp, #0
 8009d20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d24:	9306      	str	r3, [sp, #24]
 8009d26:	e015      	b.n	8009d54 <_printf_float+0x324>
 8009d28:	7fefffff 	.word	0x7fefffff
 8009d2c:	0800b8a8 	.word	0x0800b8a8
 8009d30:	0800b8a4 	.word	0x0800b8a4
 8009d34:	0800b8b0 	.word	0x0800b8b0
 8009d38:	0800b8ac 	.word	0x0800b8ac
 8009d3c:	0800b8b4 	.word	0x0800b8b4
 8009d40:	2301      	movs	r3, #1
 8009d42:	9a06      	ldr	r2, [sp, #24]
 8009d44:	4631      	mov	r1, r6
 8009d46:	4628      	mov	r0, r5
 8009d48:	47b8      	blx	r7
 8009d4a:	3001      	adds	r0, #1
 8009d4c:	f43f aecd 	beq.w	8009aea <_printf_float+0xba>
 8009d50:	f10b 0b01 	add.w	fp, fp, #1
 8009d54:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009d58:	ebaa 0309 	sub.w	r3, sl, r9
 8009d5c:	455b      	cmp	r3, fp
 8009d5e:	dcef      	bgt.n	8009d40 <_printf_float+0x310>
 8009d60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d64:	429a      	cmp	r2, r3
 8009d66:	44d0      	add	r8, sl
 8009d68:	db15      	blt.n	8009d96 <_printf_float+0x366>
 8009d6a:	6823      	ldr	r3, [r4, #0]
 8009d6c:	07da      	lsls	r2, r3, #31
 8009d6e:	d412      	bmi.n	8009d96 <_printf_float+0x366>
 8009d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d74:	eba3 020a 	sub.w	r2, r3, sl
 8009d78:	eba3 0a01 	sub.w	sl, r3, r1
 8009d7c:	4592      	cmp	sl, r2
 8009d7e:	bfa8      	it	ge
 8009d80:	4692      	movge	sl, r2
 8009d82:	f1ba 0f00 	cmp.w	sl, #0
 8009d86:	dc0e      	bgt.n	8009da6 <_printf_float+0x376>
 8009d88:	f04f 0800 	mov.w	r8, #0
 8009d8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d90:	f104 091a 	add.w	r9, r4, #26
 8009d94:	e019      	b.n	8009dca <_printf_float+0x39a>
 8009d96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d9a:	4631      	mov	r1, r6
 8009d9c:	4628      	mov	r0, r5
 8009d9e:	47b8      	blx	r7
 8009da0:	3001      	adds	r0, #1
 8009da2:	d1e5      	bne.n	8009d70 <_printf_float+0x340>
 8009da4:	e6a1      	b.n	8009aea <_printf_float+0xba>
 8009da6:	4653      	mov	r3, sl
 8009da8:	4642      	mov	r2, r8
 8009daa:	4631      	mov	r1, r6
 8009dac:	4628      	mov	r0, r5
 8009dae:	47b8      	blx	r7
 8009db0:	3001      	adds	r0, #1
 8009db2:	d1e9      	bne.n	8009d88 <_printf_float+0x358>
 8009db4:	e699      	b.n	8009aea <_printf_float+0xba>
 8009db6:	2301      	movs	r3, #1
 8009db8:	464a      	mov	r2, r9
 8009dba:	4631      	mov	r1, r6
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	47b8      	blx	r7
 8009dc0:	3001      	adds	r0, #1
 8009dc2:	f43f ae92 	beq.w	8009aea <_printf_float+0xba>
 8009dc6:	f108 0801 	add.w	r8, r8, #1
 8009dca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009dce:	1a9b      	subs	r3, r3, r2
 8009dd0:	eba3 030a 	sub.w	r3, r3, sl
 8009dd4:	4543      	cmp	r3, r8
 8009dd6:	dcee      	bgt.n	8009db6 <_printf_float+0x386>
 8009dd8:	e74a      	b.n	8009c70 <_printf_float+0x240>
 8009dda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ddc:	2a01      	cmp	r2, #1
 8009dde:	dc01      	bgt.n	8009de4 <_printf_float+0x3b4>
 8009de0:	07db      	lsls	r3, r3, #31
 8009de2:	d53a      	bpl.n	8009e5a <_printf_float+0x42a>
 8009de4:	2301      	movs	r3, #1
 8009de6:	4642      	mov	r2, r8
 8009de8:	4631      	mov	r1, r6
 8009dea:	4628      	mov	r0, r5
 8009dec:	47b8      	blx	r7
 8009dee:	3001      	adds	r0, #1
 8009df0:	f43f ae7b 	beq.w	8009aea <_printf_float+0xba>
 8009df4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009df8:	4631      	mov	r1, r6
 8009dfa:	4628      	mov	r0, r5
 8009dfc:	47b8      	blx	r7
 8009dfe:	3001      	adds	r0, #1
 8009e00:	f108 0801 	add.w	r8, r8, #1
 8009e04:	f43f ae71 	beq.w	8009aea <_printf_float+0xba>
 8009e08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f103 3aff 	add.w	sl, r3, #4294967295
 8009e10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e14:	2300      	movs	r3, #0
 8009e16:	f7f6 fe57 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e1a:	b9c8      	cbnz	r0, 8009e50 <_printf_float+0x420>
 8009e1c:	4653      	mov	r3, sl
 8009e1e:	4642      	mov	r2, r8
 8009e20:	4631      	mov	r1, r6
 8009e22:	4628      	mov	r0, r5
 8009e24:	47b8      	blx	r7
 8009e26:	3001      	adds	r0, #1
 8009e28:	d10e      	bne.n	8009e48 <_printf_float+0x418>
 8009e2a:	e65e      	b.n	8009aea <_printf_float+0xba>
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	4652      	mov	r2, sl
 8009e30:	4631      	mov	r1, r6
 8009e32:	4628      	mov	r0, r5
 8009e34:	47b8      	blx	r7
 8009e36:	3001      	adds	r0, #1
 8009e38:	f43f ae57 	beq.w	8009aea <_printf_float+0xba>
 8009e3c:	f108 0801 	add.w	r8, r8, #1
 8009e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e42:	3b01      	subs	r3, #1
 8009e44:	4543      	cmp	r3, r8
 8009e46:	dcf1      	bgt.n	8009e2c <_printf_float+0x3fc>
 8009e48:	464b      	mov	r3, r9
 8009e4a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009e4e:	e6de      	b.n	8009c0e <_printf_float+0x1de>
 8009e50:	f04f 0800 	mov.w	r8, #0
 8009e54:	f104 0a1a 	add.w	sl, r4, #26
 8009e58:	e7f2      	b.n	8009e40 <_printf_float+0x410>
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	e7df      	b.n	8009e1e <_printf_float+0x3ee>
 8009e5e:	2301      	movs	r3, #1
 8009e60:	464a      	mov	r2, r9
 8009e62:	4631      	mov	r1, r6
 8009e64:	4628      	mov	r0, r5
 8009e66:	47b8      	blx	r7
 8009e68:	3001      	adds	r0, #1
 8009e6a:	f43f ae3e 	beq.w	8009aea <_printf_float+0xba>
 8009e6e:	f108 0801 	add.w	r8, r8, #1
 8009e72:	68e3      	ldr	r3, [r4, #12]
 8009e74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e76:	1a9b      	subs	r3, r3, r2
 8009e78:	4543      	cmp	r3, r8
 8009e7a:	dcf0      	bgt.n	8009e5e <_printf_float+0x42e>
 8009e7c:	e6fc      	b.n	8009c78 <_printf_float+0x248>
 8009e7e:	f04f 0800 	mov.w	r8, #0
 8009e82:	f104 0919 	add.w	r9, r4, #25
 8009e86:	e7f4      	b.n	8009e72 <_printf_float+0x442>
 8009e88:	2900      	cmp	r1, #0
 8009e8a:	f43f ae8b 	beq.w	8009ba4 <_printf_float+0x174>
 8009e8e:	2300      	movs	r3, #0
 8009e90:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009e94:	ab09      	add	r3, sp, #36	; 0x24
 8009e96:	9300      	str	r3, [sp, #0]
 8009e98:	ec49 8b10 	vmov	d0, r8, r9
 8009e9c:	6022      	str	r2, [r4, #0]
 8009e9e:	f8cd a004 	str.w	sl, [sp, #4]
 8009ea2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009ea6:	4628      	mov	r0, r5
 8009ea8:	f7ff fd2e 	bl	8009908 <__cvt>
 8009eac:	4680      	mov	r8, r0
 8009eae:	e648      	b.n	8009b42 <_printf_float+0x112>

08009eb0 <_printf_common>:
 8009eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009eb4:	4691      	mov	r9, r2
 8009eb6:	461f      	mov	r7, r3
 8009eb8:	688a      	ldr	r2, [r1, #8]
 8009eba:	690b      	ldr	r3, [r1, #16]
 8009ebc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	bfb8      	it	lt
 8009ec4:	4613      	movlt	r3, r2
 8009ec6:	f8c9 3000 	str.w	r3, [r9]
 8009eca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ece:	4606      	mov	r6, r0
 8009ed0:	460c      	mov	r4, r1
 8009ed2:	b112      	cbz	r2, 8009eda <_printf_common+0x2a>
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	f8c9 3000 	str.w	r3, [r9]
 8009eda:	6823      	ldr	r3, [r4, #0]
 8009edc:	0699      	lsls	r1, r3, #26
 8009ede:	bf42      	ittt	mi
 8009ee0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009ee4:	3302      	addmi	r3, #2
 8009ee6:	f8c9 3000 	strmi.w	r3, [r9]
 8009eea:	6825      	ldr	r5, [r4, #0]
 8009eec:	f015 0506 	ands.w	r5, r5, #6
 8009ef0:	d107      	bne.n	8009f02 <_printf_common+0x52>
 8009ef2:	f104 0a19 	add.w	sl, r4, #25
 8009ef6:	68e3      	ldr	r3, [r4, #12]
 8009ef8:	f8d9 2000 	ldr.w	r2, [r9]
 8009efc:	1a9b      	subs	r3, r3, r2
 8009efe:	42ab      	cmp	r3, r5
 8009f00:	dc28      	bgt.n	8009f54 <_printf_common+0xa4>
 8009f02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009f06:	6822      	ldr	r2, [r4, #0]
 8009f08:	3300      	adds	r3, #0
 8009f0a:	bf18      	it	ne
 8009f0c:	2301      	movne	r3, #1
 8009f0e:	0692      	lsls	r2, r2, #26
 8009f10:	d42d      	bmi.n	8009f6e <_printf_common+0xbe>
 8009f12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f16:	4639      	mov	r1, r7
 8009f18:	4630      	mov	r0, r6
 8009f1a:	47c0      	blx	r8
 8009f1c:	3001      	adds	r0, #1
 8009f1e:	d020      	beq.n	8009f62 <_printf_common+0xb2>
 8009f20:	6823      	ldr	r3, [r4, #0]
 8009f22:	68e5      	ldr	r5, [r4, #12]
 8009f24:	f8d9 2000 	ldr.w	r2, [r9]
 8009f28:	f003 0306 	and.w	r3, r3, #6
 8009f2c:	2b04      	cmp	r3, #4
 8009f2e:	bf08      	it	eq
 8009f30:	1aad      	subeq	r5, r5, r2
 8009f32:	68a3      	ldr	r3, [r4, #8]
 8009f34:	6922      	ldr	r2, [r4, #16]
 8009f36:	bf0c      	ite	eq
 8009f38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f3c:	2500      	movne	r5, #0
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	bfc4      	itt	gt
 8009f42:	1a9b      	subgt	r3, r3, r2
 8009f44:	18ed      	addgt	r5, r5, r3
 8009f46:	f04f 0900 	mov.w	r9, #0
 8009f4a:	341a      	adds	r4, #26
 8009f4c:	454d      	cmp	r5, r9
 8009f4e:	d11a      	bne.n	8009f86 <_printf_common+0xd6>
 8009f50:	2000      	movs	r0, #0
 8009f52:	e008      	b.n	8009f66 <_printf_common+0xb6>
 8009f54:	2301      	movs	r3, #1
 8009f56:	4652      	mov	r2, sl
 8009f58:	4639      	mov	r1, r7
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	47c0      	blx	r8
 8009f5e:	3001      	adds	r0, #1
 8009f60:	d103      	bne.n	8009f6a <_printf_common+0xba>
 8009f62:	f04f 30ff 	mov.w	r0, #4294967295
 8009f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f6a:	3501      	adds	r5, #1
 8009f6c:	e7c3      	b.n	8009ef6 <_printf_common+0x46>
 8009f6e:	18e1      	adds	r1, r4, r3
 8009f70:	1c5a      	adds	r2, r3, #1
 8009f72:	2030      	movs	r0, #48	; 0x30
 8009f74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f78:	4422      	add	r2, r4
 8009f7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f82:	3302      	adds	r3, #2
 8009f84:	e7c5      	b.n	8009f12 <_printf_common+0x62>
 8009f86:	2301      	movs	r3, #1
 8009f88:	4622      	mov	r2, r4
 8009f8a:	4639      	mov	r1, r7
 8009f8c:	4630      	mov	r0, r6
 8009f8e:	47c0      	blx	r8
 8009f90:	3001      	adds	r0, #1
 8009f92:	d0e6      	beq.n	8009f62 <_printf_common+0xb2>
 8009f94:	f109 0901 	add.w	r9, r9, #1
 8009f98:	e7d8      	b.n	8009f4c <_printf_common+0x9c>
	...

08009f9c <_printf_i>:
 8009f9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009fa0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009fa4:	460c      	mov	r4, r1
 8009fa6:	7e09      	ldrb	r1, [r1, #24]
 8009fa8:	b085      	sub	sp, #20
 8009faa:	296e      	cmp	r1, #110	; 0x6e
 8009fac:	4617      	mov	r7, r2
 8009fae:	4606      	mov	r6, r0
 8009fb0:	4698      	mov	r8, r3
 8009fb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fb4:	f000 80b3 	beq.w	800a11e <_printf_i+0x182>
 8009fb8:	d822      	bhi.n	800a000 <_printf_i+0x64>
 8009fba:	2963      	cmp	r1, #99	; 0x63
 8009fbc:	d036      	beq.n	800a02c <_printf_i+0x90>
 8009fbe:	d80a      	bhi.n	8009fd6 <_printf_i+0x3a>
 8009fc0:	2900      	cmp	r1, #0
 8009fc2:	f000 80b9 	beq.w	800a138 <_printf_i+0x19c>
 8009fc6:	2958      	cmp	r1, #88	; 0x58
 8009fc8:	f000 8083 	beq.w	800a0d2 <_printf_i+0x136>
 8009fcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fd0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009fd4:	e032      	b.n	800a03c <_printf_i+0xa0>
 8009fd6:	2964      	cmp	r1, #100	; 0x64
 8009fd8:	d001      	beq.n	8009fde <_printf_i+0x42>
 8009fda:	2969      	cmp	r1, #105	; 0x69
 8009fdc:	d1f6      	bne.n	8009fcc <_printf_i+0x30>
 8009fde:	6820      	ldr	r0, [r4, #0]
 8009fe0:	6813      	ldr	r3, [r2, #0]
 8009fe2:	0605      	lsls	r5, r0, #24
 8009fe4:	f103 0104 	add.w	r1, r3, #4
 8009fe8:	d52a      	bpl.n	800a040 <_printf_i+0xa4>
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	6011      	str	r1, [r2, #0]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	da03      	bge.n	8009ffa <_printf_i+0x5e>
 8009ff2:	222d      	movs	r2, #45	; 0x2d
 8009ff4:	425b      	negs	r3, r3
 8009ff6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009ffa:	486f      	ldr	r0, [pc, #444]	; (800a1b8 <_printf_i+0x21c>)
 8009ffc:	220a      	movs	r2, #10
 8009ffe:	e039      	b.n	800a074 <_printf_i+0xd8>
 800a000:	2973      	cmp	r1, #115	; 0x73
 800a002:	f000 809d 	beq.w	800a140 <_printf_i+0x1a4>
 800a006:	d808      	bhi.n	800a01a <_printf_i+0x7e>
 800a008:	296f      	cmp	r1, #111	; 0x6f
 800a00a:	d020      	beq.n	800a04e <_printf_i+0xb2>
 800a00c:	2970      	cmp	r1, #112	; 0x70
 800a00e:	d1dd      	bne.n	8009fcc <_printf_i+0x30>
 800a010:	6823      	ldr	r3, [r4, #0]
 800a012:	f043 0320 	orr.w	r3, r3, #32
 800a016:	6023      	str	r3, [r4, #0]
 800a018:	e003      	b.n	800a022 <_printf_i+0x86>
 800a01a:	2975      	cmp	r1, #117	; 0x75
 800a01c:	d017      	beq.n	800a04e <_printf_i+0xb2>
 800a01e:	2978      	cmp	r1, #120	; 0x78
 800a020:	d1d4      	bne.n	8009fcc <_printf_i+0x30>
 800a022:	2378      	movs	r3, #120	; 0x78
 800a024:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a028:	4864      	ldr	r0, [pc, #400]	; (800a1bc <_printf_i+0x220>)
 800a02a:	e055      	b.n	800a0d8 <_printf_i+0x13c>
 800a02c:	6813      	ldr	r3, [r2, #0]
 800a02e:	1d19      	adds	r1, r3, #4
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	6011      	str	r1, [r2, #0]
 800a034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a038:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a03c:	2301      	movs	r3, #1
 800a03e:	e08c      	b.n	800a15a <_printf_i+0x1be>
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	6011      	str	r1, [r2, #0]
 800a044:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a048:	bf18      	it	ne
 800a04a:	b21b      	sxthne	r3, r3
 800a04c:	e7cf      	b.n	8009fee <_printf_i+0x52>
 800a04e:	6813      	ldr	r3, [r2, #0]
 800a050:	6825      	ldr	r5, [r4, #0]
 800a052:	1d18      	adds	r0, r3, #4
 800a054:	6010      	str	r0, [r2, #0]
 800a056:	0628      	lsls	r0, r5, #24
 800a058:	d501      	bpl.n	800a05e <_printf_i+0xc2>
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	e002      	b.n	800a064 <_printf_i+0xc8>
 800a05e:	0668      	lsls	r0, r5, #25
 800a060:	d5fb      	bpl.n	800a05a <_printf_i+0xbe>
 800a062:	881b      	ldrh	r3, [r3, #0]
 800a064:	4854      	ldr	r0, [pc, #336]	; (800a1b8 <_printf_i+0x21c>)
 800a066:	296f      	cmp	r1, #111	; 0x6f
 800a068:	bf14      	ite	ne
 800a06a:	220a      	movne	r2, #10
 800a06c:	2208      	moveq	r2, #8
 800a06e:	2100      	movs	r1, #0
 800a070:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a074:	6865      	ldr	r5, [r4, #4]
 800a076:	60a5      	str	r5, [r4, #8]
 800a078:	2d00      	cmp	r5, #0
 800a07a:	f2c0 8095 	blt.w	800a1a8 <_printf_i+0x20c>
 800a07e:	6821      	ldr	r1, [r4, #0]
 800a080:	f021 0104 	bic.w	r1, r1, #4
 800a084:	6021      	str	r1, [r4, #0]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d13d      	bne.n	800a106 <_printf_i+0x16a>
 800a08a:	2d00      	cmp	r5, #0
 800a08c:	f040 808e 	bne.w	800a1ac <_printf_i+0x210>
 800a090:	4665      	mov	r5, ip
 800a092:	2a08      	cmp	r2, #8
 800a094:	d10b      	bne.n	800a0ae <_printf_i+0x112>
 800a096:	6823      	ldr	r3, [r4, #0]
 800a098:	07db      	lsls	r3, r3, #31
 800a09a:	d508      	bpl.n	800a0ae <_printf_i+0x112>
 800a09c:	6923      	ldr	r3, [r4, #16]
 800a09e:	6862      	ldr	r2, [r4, #4]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	bfde      	ittt	le
 800a0a4:	2330      	movle	r3, #48	; 0x30
 800a0a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a0aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a0ae:	ebac 0305 	sub.w	r3, ip, r5
 800a0b2:	6123      	str	r3, [r4, #16]
 800a0b4:	f8cd 8000 	str.w	r8, [sp]
 800a0b8:	463b      	mov	r3, r7
 800a0ba:	aa03      	add	r2, sp, #12
 800a0bc:	4621      	mov	r1, r4
 800a0be:	4630      	mov	r0, r6
 800a0c0:	f7ff fef6 	bl	8009eb0 <_printf_common>
 800a0c4:	3001      	adds	r0, #1
 800a0c6:	d14d      	bne.n	800a164 <_printf_i+0x1c8>
 800a0c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0cc:	b005      	add	sp, #20
 800a0ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0d2:	4839      	ldr	r0, [pc, #228]	; (800a1b8 <_printf_i+0x21c>)
 800a0d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a0d8:	6813      	ldr	r3, [r2, #0]
 800a0da:	6821      	ldr	r1, [r4, #0]
 800a0dc:	1d1d      	adds	r5, r3, #4
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	6015      	str	r5, [r2, #0]
 800a0e2:	060a      	lsls	r2, r1, #24
 800a0e4:	d50b      	bpl.n	800a0fe <_printf_i+0x162>
 800a0e6:	07ca      	lsls	r2, r1, #31
 800a0e8:	bf44      	itt	mi
 800a0ea:	f041 0120 	orrmi.w	r1, r1, #32
 800a0ee:	6021      	strmi	r1, [r4, #0]
 800a0f0:	b91b      	cbnz	r3, 800a0fa <_printf_i+0x15e>
 800a0f2:	6822      	ldr	r2, [r4, #0]
 800a0f4:	f022 0220 	bic.w	r2, r2, #32
 800a0f8:	6022      	str	r2, [r4, #0]
 800a0fa:	2210      	movs	r2, #16
 800a0fc:	e7b7      	b.n	800a06e <_printf_i+0xd2>
 800a0fe:	064d      	lsls	r5, r1, #25
 800a100:	bf48      	it	mi
 800a102:	b29b      	uxthmi	r3, r3
 800a104:	e7ef      	b.n	800a0e6 <_printf_i+0x14a>
 800a106:	4665      	mov	r5, ip
 800a108:	fbb3 f1f2 	udiv	r1, r3, r2
 800a10c:	fb02 3311 	mls	r3, r2, r1, r3
 800a110:	5cc3      	ldrb	r3, [r0, r3]
 800a112:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a116:	460b      	mov	r3, r1
 800a118:	2900      	cmp	r1, #0
 800a11a:	d1f5      	bne.n	800a108 <_printf_i+0x16c>
 800a11c:	e7b9      	b.n	800a092 <_printf_i+0xf6>
 800a11e:	6813      	ldr	r3, [r2, #0]
 800a120:	6825      	ldr	r5, [r4, #0]
 800a122:	6961      	ldr	r1, [r4, #20]
 800a124:	1d18      	adds	r0, r3, #4
 800a126:	6010      	str	r0, [r2, #0]
 800a128:	0628      	lsls	r0, r5, #24
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	d501      	bpl.n	800a132 <_printf_i+0x196>
 800a12e:	6019      	str	r1, [r3, #0]
 800a130:	e002      	b.n	800a138 <_printf_i+0x19c>
 800a132:	066a      	lsls	r2, r5, #25
 800a134:	d5fb      	bpl.n	800a12e <_printf_i+0x192>
 800a136:	8019      	strh	r1, [r3, #0]
 800a138:	2300      	movs	r3, #0
 800a13a:	6123      	str	r3, [r4, #16]
 800a13c:	4665      	mov	r5, ip
 800a13e:	e7b9      	b.n	800a0b4 <_printf_i+0x118>
 800a140:	6813      	ldr	r3, [r2, #0]
 800a142:	1d19      	adds	r1, r3, #4
 800a144:	6011      	str	r1, [r2, #0]
 800a146:	681d      	ldr	r5, [r3, #0]
 800a148:	6862      	ldr	r2, [r4, #4]
 800a14a:	2100      	movs	r1, #0
 800a14c:	4628      	mov	r0, r5
 800a14e:	f7f6 f847 	bl	80001e0 <memchr>
 800a152:	b108      	cbz	r0, 800a158 <_printf_i+0x1bc>
 800a154:	1b40      	subs	r0, r0, r5
 800a156:	6060      	str	r0, [r4, #4]
 800a158:	6863      	ldr	r3, [r4, #4]
 800a15a:	6123      	str	r3, [r4, #16]
 800a15c:	2300      	movs	r3, #0
 800a15e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a162:	e7a7      	b.n	800a0b4 <_printf_i+0x118>
 800a164:	6923      	ldr	r3, [r4, #16]
 800a166:	462a      	mov	r2, r5
 800a168:	4639      	mov	r1, r7
 800a16a:	4630      	mov	r0, r6
 800a16c:	47c0      	blx	r8
 800a16e:	3001      	adds	r0, #1
 800a170:	d0aa      	beq.n	800a0c8 <_printf_i+0x12c>
 800a172:	6823      	ldr	r3, [r4, #0]
 800a174:	079b      	lsls	r3, r3, #30
 800a176:	d413      	bmi.n	800a1a0 <_printf_i+0x204>
 800a178:	68e0      	ldr	r0, [r4, #12]
 800a17a:	9b03      	ldr	r3, [sp, #12]
 800a17c:	4298      	cmp	r0, r3
 800a17e:	bfb8      	it	lt
 800a180:	4618      	movlt	r0, r3
 800a182:	e7a3      	b.n	800a0cc <_printf_i+0x130>
 800a184:	2301      	movs	r3, #1
 800a186:	464a      	mov	r2, r9
 800a188:	4639      	mov	r1, r7
 800a18a:	4630      	mov	r0, r6
 800a18c:	47c0      	blx	r8
 800a18e:	3001      	adds	r0, #1
 800a190:	d09a      	beq.n	800a0c8 <_printf_i+0x12c>
 800a192:	3501      	adds	r5, #1
 800a194:	68e3      	ldr	r3, [r4, #12]
 800a196:	9a03      	ldr	r2, [sp, #12]
 800a198:	1a9b      	subs	r3, r3, r2
 800a19a:	42ab      	cmp	r3, r5
 800a19c:	dcf2      	bgt.n	800a184 <_printf_i+0x1e8>
 800a19e:	e7eb      	b.n	800a178 <_printf_i+0x1dc>
 800a1a0:	2500      	movs	r5, #0
 800a1a2:	f104 0919 	add.w	r9, r4, #25
 800a1a6:	e7f5      	b.n	800a194 <_printf_i+0x1f8>
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d1ac      	bne.n	800a106 <_printf_i+0x16a>
 800a1ac:	7803      	ldrb	r3, [r0, #0]
 800a1ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1b6:	e76c      	b.n	800a092 <_printf_i+0xf6>
 800a1b8:	0800b8b6 	.word	0x0800b8b6
 800a1bc:	0800b8c7 	.word	0x0800b8c7

0800a1c0 <_sbrk_r>:
 800a1c0:	b538      	push	{r3, r4, r5, lr}
 800a1c2:	4c06      	ldr	r4, [pc, #24]	; (800a1dc <_sbrk_r+0x1c>)
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	4605      	mov	r5, r0
 800a1c8:	4608      	mov	r0, r1
 800a1ca:	6023      	str	r3, [r4, #0]
 800a1cc:	f7f7 fc80 	bl	8001ad0 <_sbrk>
 800a1d0:	1c43      	adds	r3, r0, #1
 800a1d2:	d102      	bne.n	800a1da <_sbrk_r+0x1a>
 800a1d4:	6823      	ldr	r3, [r4, #0]
 800a1d6:	b103      	cbz	r3, 800a1da <_sbrk_r+0x1a>
 800a1d8:	602b      	str	r3, [r5, #0]
 800a1da:	bd38      	pop	{r3, r4, r5, pc}
 800a1dc:	20001dc8 	.word	0x20001dc8

0800a1e0 <siprintf>:
 800a1e0:	b40e      	push	{r1, r2, r3}
 800a1e2:	b500      	push	{lr}
 800a1e4:	b09c      	sub	sp, #112	; 0x70
 800a1e6:	ab1d      	add	r3, sp, #116	; 0x74
 800a1e8:	9002      	str	r0, [sp, #8]
 800a1ea:	9006      	str	r0, [sp, #24]
 800a1ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a1f0:	4809      	ldr	r0, [pc, #36]	; (800a218 <siprintf+0x38>)
 800a1f2:	9107      	str	r1, [sp, #28]
 800a1f4:	9104      	str	r1, [sp, #16]
 800a1f6:	4909      	ldr	r1, [pc, #36]	; (800a21c <siprintf+0x3c>)
 800a1f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1fc:	9105      	str	r1, [sp, #20]
 800a1fe:	6800      	ldr	r0, [r0, #0]
 800a200:	9301      	str	r3, [sp, #4]
 800a202:	a902      	add	r1, sp, #8
 800a204:	f001 f9ae 	bl	800b564 <_svfiprintf_r>
 800a208:	9b02      	ldr	r3, [sp, #8]
 800a20a:	2200      	movs	r2, #0
 800a20c:	701a      	strb	r2, [r3, #0]
 800a20e:	b01c      	add	sp, #112	; 0x70
 800a210:	f85d eb04 	ldr.w	lr, [sp], #4
 800a214:	b003      	add	sp, #12
 800a216:	4770      	bx	lr
 800a218:	20000188 	.word	0x20000188
 800a21c:	ffff0208 	.word	0xffff0208

0800a220 <quorem>:
 800a220:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a224:	6903      	ldr	r3, [r0, #16]
 800a226:	690c      	ldr	r4, [r1, #16]
 800a228:	42a3      	cmp	r3, r4
 800a22a:	4680      	mov	r8, r0
 800a22c:	f2c0 8082 	blt.w	800a334 <quorem+0x114>
 800a230:	3c01      	subs	r4, #1
 800a232:	f101 0714 	add.w	r7, r1, #20
 800a236:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a23a:	f100 0614 	add.w	r6, r0, #20
 800a23e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a242:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a246:	eb06 030c 	add.w	r3, r6, ip
 800a24a:	3501      	adds	r5, #1
 800a24c:	eb07 090c 	add.w	r9, r7, ip
 800a250:	9301      	str	r3, [sp, #4]
 800a252:	fbb0 f5f5 	udiv	r5, r0, r5
 800a256:	b395      	cbz	r5, 800a2be <quorem+0x9e>
 800a258:	f04f 0a00 	mov.w	sl, #0
 800a25c:	4638      	mov	r0, r7
 800a25e:	46b6      	mov	lr, r6
 800a260:	46d3      	mov	fp, sl
 800a262:	f850 2b04 	ldr.w	r2, [r0], #4
 800a266:	b293      	uxth	r3, r2
 800a268:	fb05 a303 	mla	r3, r5, r3, sl
 800a26c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a270:	b29b      	uxth	r3, r3
 800a272:	ebab 0303 	sub.w	r3, fp, r3
 800a276:	0c12      	lsrs	r2, r2, #16
 800a278:	f8de b000 	ldr.w	fp, [lr]
 800a27c:	fb05 a202 	mla	r2, r5, r2, sl
 800a280:	fa13 f38b 	uxtah	r3, r3, fp
 800a284:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a288:	fa1f fb82 	uxth.w	fp, r2
 800a28c:	f8de 2000 	ldr.w	r2, [lr]
 800a290:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a294:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a298:	b29b      	uxth	r3, r3
 800a29a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a29e:	4581      	cmp	r9, r0
 800a2a0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a2a4:	f84e 3b04 	str.w	r3, [lr], #4
 800a2a8:	d2db      	bcs.n	800a262 <quorem+0x42>
 800a2aa:	f856 300c 	ldr.w	r3, [r6, ip]
 800a2ae:	b933      	cbnz	r3, 800a2be <quorem+0x9e>
 800a2b0:	9b01      	ldr	r3, [sp, #4]
 800a2b2:	3b04      	subs	r3, #4
 800a2b4:	429e      	cmp	r6, r3
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	d330      	bcc.n	800a31c <quorem+0xfc>
 800a2ba:	f8c8 4010 	str.w	r4, [r8, #16]
 800a2be:	4640      	mov	r0, r8
 800a2c0:	f001 f822 	bl	800b308 <__mcmp>
 800a2c4:	2800      	cmp	r0, #0
 800a2c6:	db25      	blt.n	800a314 <quorem+0xf4>
 800a2c8:	3501      	adds	r5, #1
 800a2ca:	4630      	mov	r0, r6
 800a2cc:	f04f 0c00 	mov.w	ip, #0
 800a2d0:	f857 2b04 	ldr.w	r2, [r7], #4
 800a2d4:	f8d0 e000 	ldr.w	lr, [r0]
 800a2d8:	b293      	uxth	r3, r2
 800a2da:	ebac 0303 	sub.w	r3, ip, r3
 800a2de:	0c12      	lsrs	r2, r2, #16
 800a2e0:	fa13 f38e 	uxtah	r3, r3, lr
 800a2e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a2e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2f2:	45b9      	cmp	r9, r7
 800a2f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a2f8:	f840 3b04 	str.w	r3, [r0], #4
 800a2fc:	d2e8      	bcs.n	800a2d0 <quorem+0xb0>
 800a2fe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a302:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a306:	b92a      	cbnz	r2, 800a314 <quorem+0xf4>
 800a308:	3b04      	subs	r3, #4
 800a30a:	429e      	cmp	r6, r3
 800a30c:	461a      	mov	r2, r3
 800a30e:	d30b      	bcc.n	800a328 <quorem+0x108>
 800a310:	f8c8 4010 	str.w	r4, [r8, #16]
 800a314:	4628      	mov	r0, r5
 800a316:	b003      	add	sp, #12
 800a318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a31c:	6812      	ldr	r2, [r2, #0]
 800a31e:	3b04      	subs	r3, #4
 800a320:	2a00      	cmp	r2, #0
 800a322:	d1ca      	bne.n	800a2ba <quorem+0x9a>
 800a324:	3c01      	subs	r4, #1
 800a326:	e7c5      	b.n	800a2b4 <quorem+0x94>
 800a328:	6812      	ldr	r2, [r2, #0]
 800a32a:	3b04      	subs	r3, #4
 800a32c:	2a00      	cmp	r2, #0
 800a32e:	d1ef      	bne.n	800a310 <quorem+0xf0>
 800a330:	3c01      	subs	r4, #1
 800a332:	e7ea      	b.n	800a30a <quorem+0xea>
 800a334:	2000      	movs	r0, #0
 800a336:	e7ee      	b.n	800a316 <quorem+0xf6>

0800a338 <_dtoa_r>:
 800a338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a33c:	ec57 6b10 	vmov	r6, r7, d0
 800a340:	b097      	sub	sp, #92	; 0x5c
 800a342:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a344:	9106      	str	r1, [sp, #24]
 800a346:	4604      	mov	r4, r0
 800a348:	920b      	str	r2, [sp, #44]	; 0x2c
 800a34a:	9312      	str	r3, [sp, #72]	; 0x48
 800a34c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a350:	e9cd 6700 	strd	r6, r7, [sp]
 800a354:	b93d      	cbnz	r5, 800a366 <_dtoa_r+0x2e>
 800a356:	2010      	movs	r0, #16
 800a358:	f7ff fa16 	bl	8009788 <malloc>
 800a35c:	6260      	str	r0, [r4, #36]	; 0x24
 800a35e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a362:	6005      	str	r5, [r0, #0]
 800a364:	60c5      	str	r5, [r0, #12]
 800a366:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a368:	6819      	ldr	r1, [r3, #0]
 800a36a:	b151      	cbz	r1, 800a382 <_dtoa_r+0x4a>
 800a36c:	685a      	ldr	r2, [r3, #4]
 800a36e:	604a      	str	r2, [r1, #4]
 800a370:	2301      	movs	r3, #1
 800a372:	4093      	lsls	r3, r2
 800a374:	608b      	str	r3, [r1, #8]
 800a376:	4620      	mov	r0, r4
 800a378:	f000 fde5 	bl	800af46 <_Bfree>
 800a37c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a37e:	2200      	movs	r2, #0
 800a380:	601a      	str	r2, [r3, #0]
 800a382:	1e3b      	subs	r3, r7, #0
 800a384:	bfbb      	ittet	lt
 800a386:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a38a:	9301      	strlt	r3, [sp, #4]
 800a38c:	2300      	movge	r3, #0
 800a38e:	2201      	movlt	r2, #1
 800a390:	bfac      	ite	ge
 800a392:	f8c8 3000 	strge.w	r3, [r8]
 800a396:	f8c8 2000 	strlt.w	r2, [r8]
 800a39a:	4baf      	ldr	r3, [pc, #700]	; (800a658 <_dtoa_r+0x320>)
 800a39c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a3a0:	ea33 0308 	bics.w	r3, r3, r8
 800a3a4:	d114      	bne.n	800a3d0 <_dtoa_r+0x98>
 800a3a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a3a8:	f242 730f 	movw	r3, #9999	; 0x270f
 800a3ac:	6013      	str	r3, [r2, #0]
 800a3ae:	9b00      	ldr	r3, [sp, #0]
 800a3b0:	b923      	cbnz	r3, 800a3bc <_dtoa_r+0x84>
 800a3b2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a3b6:	2800      	cmp	r0, #0
 800a3b8:	f000 8542 	beq.w	800ae40 <_dtoa_r+0xb08>
 800a3bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3be:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a66c <_dtoa_r+0x334>
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	f000 8544 	beq.w	800ae50 <_dtoa_r+0xb18>
 800a3c8:	f10b 0303 	add.w	r3, fp, #3
 800a3cc:	f000 bd3e 	b.w	800ae4c <_dtoa_r+0xb14>
 800a3d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	4630      	mov	r0, r6
 800a3da:	4639      	mov	r1, r7
 800a3dc:	f7f6 fb74 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3e0:	4681      	mov	r9, r0
 800a3e2:	b168      	cbz	r0, 800a400 <_dtoa_r+0xc8>
 800a3e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	6013      	str	r3, [r2, #0]
 800a3ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	f000 8524 	beq.w	800ae3a <_dtoa_r+0xb02>
 800a3f2:	4b9a      	ldr	r3, [pc, #616]	; (800a65c <_dtoa_r+0x324>)
 800a3f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a3f6:	f103 3bff 	add.w	fp, r3, #4294967295
 800a3fa:	6013      	str	r3, [r2, #0]
 800a3fc:	f000 bd28 	b.w	800ae50 <_dtoa_r+0xb18>
 800a400:	aa14      	add	r2, sp, #80	; 0x50
 800a402:	a915      	add	r1, sp, #84	; 0x54
 800a404:	ec47 6b10 	vmov	d0, r6, r7
 800a408:	4620      	mov	r0, r4
 800a40a:	f000 fff4 	bl	800b3f6 <__d2b>
 800a40e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a412:	9004      	str	r0, [sp, #16]
 800a414:	2d00      	cmp	r5, #0
 800a416:	d07c      	beq.n	800a512 <_dtoa_r+0x1da>
 800a418:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a41c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a420:	46b2      	mov	sl, r6
 800a422:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a426:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a42a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a42e:	2200      	movs	r2, #0
 800a430:	4b8b      	ldr	r3, [pc, #556]	; (800a660 <_dtoa_r+0x328>)
 800a432:	4650      	mov	r0, sl
 800a434:	4659      	mov	r1, fp
 800a436:	f7f5 ff27 	bl	8000288 <__aeabi_dsub>
 800a43a:	a381      	add	r3, pc, #516	; (adr r3, 800a640 <_dtoa_r+0x308>)
 800a43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a440:	f7f6 f8da 	bl	80005f8 <__aeabi_dmul>
 800a444:	a380      	add	r3, pc, #512	; (adr r3, 800a648 <_dtoa_r+0x310>)
 800a446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44a:	f7f5 ff1f 	bl	800028c <__adddf3>
 800a44e:	4606      	mov	r6, r0
 800a450:	4628      	mov	r0, r5
 800a452:	460f      	mov	r7, r1
 800a454:	f7f6 f866 	bl	8000524 <__aeabi_i2d>
 800a458:	a37d      	add	r3, pc, #500	; (adr r3, 800a650 <_dtoa_r+0x318>)
 800a45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a45e:	f7f6 f8cb 	bl	80005f8 <__aeabi_dmul>
 800a462:	4602      	mov	r2, r0
 800a464:	460b      	mov	r3, r1
 800a466:	4630      	mov	r0, r6
 800a468:	4639      	mov	r1, r7
 800a46a:	f7f5 ff0f 	bl	800028c <__adddf3>
 800a46e:	4606      	mov	r6, r0
 800a470:	460f      	mov	r7, r1
 800a472:	f7f6 fb71 	bl	8000b58 <__aeabi_d2iz>
 800a476:	2200      	movs	r2, #0
 800a478:	4682      	mov	sl, r0
 800a47a:	2300      	movs	r3, #0
 800a47c:	4630      	mov	r0, r6
 800a47e:	4639      	mov	r1, r7
 800a480:	f7f6 fb2c 	bl	8000adc <__aeabi_dcmplt>
 800a484:	b148      	cbz	r0, 800a49a <_dtoa_r+0x162>
 800a486:	4650      	mov	r0, sl
 800a488:	f7f6 f84c 	bl	8000524 <__aeabi_i2d>
 800a48c:	4632      	mov	r2, r6
 800a48e:	463b      	mov	r3, r7
 800a490:	f7f6 fb1a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a494:	b908      	cbnz	r0, 800a49a <_dtoa_r+0x162>
 800a496:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a49a:	f1ba 0f16 	cmp.w	sl, #22
 800a49e:	d859      	bhi.n	800a554 <_dtoa_r+0x21c>
 800a4a0:	4970      	ldr	r1, [pc, #448]	; (800a664 <_dtoa_r+0x32c>)
 800a4a2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a4a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4ae:	f7f6 fb33 	bl	8000b18 <__aeabi_dcmpgt>
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	d050      	beq.n	800a558 <_dtoa_r+0x220>
 800a4b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a4c0:	1b5d      	subs	r5, r3, r5
 800a4c2:	f1b5 0801 	subs.w	r8, r5, #1
 800a4c6:	bf49      	itett	mi
 800a4c8:	f1c5 0301 	rsbmi	r3, r5, #1
 800a4cc:	2300      	movpl	r3, #0
 800a4ce:	9305      	strmi	r3, [sp, #20]
 800a4d0:	f04f 0800 	movmi.w	r8, #0
 800a4d4:	bf58      	it	pl
 800a4d6:	9305      	strpl	r3, [sp, #20]
 800a4d8:	f1ba 0f00 	cmp.w	sl, #0
 800a4dc:	db3e      	blt.n	800a55c <_dtoa_r+0x224>
 800a4de:	2300      	movs	r3, #0
 800a4e0:	44d0      	add	r8, sl
 800a4e2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a4e6:	9307      	str	r3, [sp, #28]
 800a4e8:	9b06      	ldr	r3, [sp, #24]
 800a4ea:	2b09      	cmp	r3, #9
 800a4ec:	f200 8090 	bhi.w	800a610 <_dtoa_r+0x2d8>
 800a4f0:	2b05      	cmp	r3, #5
 800a4f2:	bfc4      	itt	gt
 800a4f4:	3b04      	subgt	r3, #4
 800a4f6:	9306      	strgt	r3, [sp, #24]
 800a4f8:	9b06      	ldr	r3, [sp, #24]
 800a4fa:	f1a3 0302 	sub.w	r3, r3, #2
 800a4fe:	bfcc      	ite	gt
 800a500:	2500      	movgt	r5, #0
 800a502:	2501      	movle	r5, #1
 800a504:	2b03      	cmp	r3, #3
 800a506:	f200 808f 	bhi.w	800a628 <_dtoa_r+0x2f0>
 800a50a:	e8df f003 	tbb	[pc, r3]
 800a50e:	7f7d      	.short	0x7f7d
 800a510:	7131      	.short	0x7131
 800a512:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a516:	441d      	add	r5, r3
 800a518:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a51c:	2820      	cmp	r0, #32
 800a51e:	dd13      	ble.n	800a548 <_dtoa_r+0x210>
 800a520:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a524:	9b00      	ldr	r3, [sp, #0]
 800a526:	fa08 f800 	lsl.w	r8, r8, r0
 800a52a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a52e:	fa23 f000 	lsr.w	r0, r3, r0
 800a532:	ea48 0000 	orr.w	r0, r8, r0
 800a536:	f7f5 ffe5 	bl	8000504 <__aeabi_ui2d>
 800a53a:	2301      	movs	r3, #1
 800a53c:	4682      	mov	sl, r0
 800a53e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a542:	3d01      	subs	r5, #1
 800a544:	9313      	str	r3, [sp, #76]	; 0x4c
 800a546:	e772      	b.n	800a42e <_dtoa_r+0xf6>
 800a548:	9b00      	ldr	r3, [sp, #0]
 800a54a:	f1c0 0020 	rsb	r0, r0, #32
 800a54e:	fa03 f000 	lsl.w	r0, r3, r0
 800a552:	e7f0      	b.n	800a536 <_dtoa_r+0x1fe>
 800a554:	2301      	movs	r3, #1
 800a556:	e7b1      	b.n	800a4bc <_dtoa_r+0x184>
 800a558:	900f      	str	r0, [sp, #60]	; 0x3c
 800a55a:	e7b0      	b.n	800a4be <_dtoa_r+0x186>
 800a55c:	9b05      	ldr	r3, [sp, #20]
 800a55e:	eba3 030a 	sub.w	r3, r3, sl
 800a562:	9305      	str	r3, [sp, #20]
 800a564:	f1ca 0300 	rsb	r3, sl, #0
 800a568:	9307      	str	r3, [sp, #28]
 800a56a:	2300      	movs	r3, #0
 800a56c:	930e      	str	r3, [sp, #56]	; 0x38
 800a56e:	e7bb      	b.n	800a4e8 <_dtoa_r+0x1b0>
 800a570:	2301      	movs	r3, #1
 800a572:	930a      	str	r3, [sp, #40]	; 0x28
 800a574:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a576:	2b00      	cmp	r3, #0
 800a578:	dd59      	ble.n	800a62e <_dtoa_r+0x2f6>
 800a57a:	9302      	str	r3, [sp, #8]
 800a57c:	4699      	mov	r9, r3
 800a57e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a580:	2200      	movs	r2, #0
 800a582:	6072      	str	r2, [r6, #4]
 800a584:	2204      	movs	r2, #4
 800a586:	f102 0014 	add.w	r0, r2, #20
 800a58a:	4298      	cmp	r0, r3
 800a58c:	6871      	ldr	r1, [r6, #4]
 800a58e:	d953      	bls.n	800a638 <_dtoa_r+0x300>
 800a590:	4620      	mov	r0, r4
 800a592:	f000 fca4 	bl	800aede <_Balloc>
 800a596:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a598:	6030      	str	r0, [r6, #0]
 800a59a:	f1b9 0f0e 	cmp.w	r9, #14
 800a59e:	f8d3 b000 	ldr.w	fp, [r3]
 800a5a2:	f200 80e6 	bhi.w	800a772 <_dtoa_r+0x43a>
 800a5a6:	2d00      	cmp	r5, #0
 800a5a8:	f000 80e3 	beq.w	800a772 <_dtoa_r+0x43a>
 800a5ac:	ed9d 7b00 	vldr	d7, [sp]
 800a5b0:	f1ba 0f00 	cmp.w	sl, #0
 800a5b4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a5b8:	dd74      	ble.n	800a6a4 <_dtoa_r+0x36c>
 800a5ba:	4a2a      	ldr	r2, [pc, #168]	; (800a664 <_dtoa_r+0x32c>)
 800a5bc:	f00a 030f 	and.w	r3, sl, #15
 800a5c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a5c4:	ed93 7b00 	vldr	d7, [r3]
 800a5c8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a5cc:	06f0      	lsls	r0, r6, #27
 800a5ce:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a5d2:	d565      	bpl.n	800a6a0 <_dtoa_r+0x368>
 800a5d4:	4b24      	ldr	r3, [pc, #144]	; (800a668 <_dtoa_r+0x330>)
 800a5d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a5da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a5de:	f7f6 f935 	bl	800084c <__aeabi_ddiv>
 800a5e2:	e9cd 0100 	strd	r0, r1, [sp]
 800a5e6:	f006 060f 	and.w	r6, r6, #15
 800a5ea:	2503      	movs	r5, #3
 800a5ec:	4f1e      	ldr	r7, [pc, #120]	; (800a668 <_dtoa_r+0x330>)
 800a5ee:	e04c      	b.n	800a68a <_dtoa_r+0x352>
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	930a      	str	r3, [sp, #40]	; 0x28
 800a5f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5f6:	4453      	add	r3, sl
 800a5f8:	f103 0901 	add.w	r9, r3, #1
 800a5fc:	9302      	str	r3, [sp, #8]
 800a5fe:	464b      	mov	r3, r9
 800a600:	2b01      	cmp	r3, #1
 800a602:	bfb8      	it	lt
 800a604:	2301      	movlt	r3, #1
 800a606:	e7ba      	b.n	800a57e <_dtoa_r+0x246>
 800a608:	2300      	movs	r3, #0
 800a60a:	e7b2      	b.n	800a572 <_dtoa_r+0x23a>
 800a60c:	2300      	movs	r3, #0
 800a60e:	e7f0      	b.n	800a5f2 <_dtoa_r+0x2ba>
 800a610:	2501      	movs	r5, #1
 800a612:	2300      	movs	r3, #0
 800a614:	9306      	str	r3, [sp, #24]
 800a616:	950a      	str	r5, [sp, #40]	; 0x28
 800a618:	f04f 33ff 	mov.w	r3, #4294967295
 800a61c:	9302      	str	r3, [sp, #8]
 800a61e:	4699      	mov	r9, r3
 800a620:	2200      	movs	r2, #0
 800a622:	2312      	movs	r3, #18
 800a624:	920b      	str	r2, [sp, #44]	; 0x2c
 800a626:	e7aa      	b.n	800a57e <_dtoa_r+0x246>
 800a628:	2301      	movs	r3, #1
 800a62a:	930a      	str	r3, [sp, #40]	; 0x28
 800a62c:	e7f4      	b.n	800a618 <_dtoa_r+0x2e0>
 800a62e:	2301      	movs	r3, #1
 800a630:	9302      	str	r3, [sp, #8]
 800a632:	4699      	mov	r9, r3
 800a634:	461a      	mov	r2, r3
 800a636:	e7f5      	b.n	800a624 <_dtoa_r+0x2ec>
 800a638:	3101      	adds	r1, #1
 800a63a:	6071      	str	r1, [r6, #4]
 800a63c:	0052      	lsls	r2, r2, #1
 800a63e:	e7a2      	b.n	800a586 <_dtoa_r+0x24e>
 800a640:	636f4361 	.word	0x636f4361
 800a644:	3fd287a7 	.word	0x3fd287a7
 800a648:	8b60c8b3 	.word	0x8b60c8b3
 800a64c:	3fc68a28 	.word	0x3fc68a28
 800a650:	509f79fb 	.word	0x509f79fb
 800a654:	3fd34413 	.word	0x3fd34413
 800a658:	7ff00000 	.word	0x7ff00000
 800a65c:	0800b8b5 	.word	0x0800b8b5
 800a660:	3ff80000 	.word	0x3ff80000
 800a664:	0800b910 	.word	0x0800b910
 800a668:	0800b8e8 	.word	0x0800b8e8
 800a66c:	0800b8e1 	.word	0x0800b8e1
 800a670:	07f1      	lsls	r1, r6, #31
 800a672:	d508      	bpl.n	800a686 <_dtoa_r+0x34e>
 800a674:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a67c:	f7f5 ffbc 	bl	80005f8 <__aeabi_dmul>
 800a680:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a684:	3501      	adds	r5, #1
 800a686:	1076      	asrs	r6, r6, #1
 800a688:	3708      	adds	r7, #8
 800a68a:	2e00      	cmp	r6, #0
 800a68c:	d1f0      	bne.n	800a670 <_dtoa_r+0x338>
 800a68e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a692:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a696:	f7f6 f8d9 	bl	800084c <__aeabi_ddiv>
 800a69a:	e9cd 0100 	strd	r0, r1, [sp]
 800a69e:	e01a      	b.n	800a6d6 <_dtoa_r+0x39e>
 800a6a0:	2502      	movs	r5, #2
 800a6a2:	e7a3      	b.n	800a5ec <_dtoa_r+0x2b4>
 800a6a4:	f000 80a0 	beq.w	800a7e8 <_dtoa_r+0x4b0>
 800a6a8:	f1ca 0600 	rsb	r6, sl, #0
 800a6ac:	4b9f      	ldr	r3, [pc, #636]	; (800a92c <_dtoa_r+0x5f4>)
 800a6ae:	4fa0      	ldr	r7, [pc, #640]	; (800a930 <_dtoa_r+0x5f8>)
 800a6b0:	f006 020f 	and.w	r2, r6, #15
 800a6b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a6c0:	f7f5 ff9a 	bl	80005f8 <__aeabi_dmul>
 800a6c4:	e9cd 0100 	strd	r0, r1, [sp]
 800a6c8:	1136      	asrs	r6, r6, #4
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	2502      	movs	r5, #2
 800a6ce:	2e00      	cmp	r6, #0
 800a6d0:	d17f      	bne.n	800a7d2 <_dtoa_r+0x49a>
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d1e1      	bne.n	800a69a <_dtoa_r+0x362>
 800a6d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	f000 8087 	beq.w	800a7ec <_dtoa_r+0x4b4>
 800a6de:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	4b93      	ldr	r3, [pc, #588]	; (800a934 <_dtoa_r+0x5fc>)
 800a6e6:	4630      	mov	r0, r6
 800a6e8:	4639      	mov	r1, r7
 800a6ea:	f7f6 f9f7 	bl	8000adc <__aeabi_dcmplt>
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	d07c      	beq.n	800a7ec <_dtoa_r+0x4b4>
 800a6f2:	f1b9 0f00 	cmp.w	r9, #0
 800a6f6:	d079      	beq.n	800a7ec <_dtoa_r+0x4b4>
 800a6f8:	9b02      	ldr	r3, [sp, #8]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	dd35      	ble.n	800a76a <_dtoa_r+0x432>
 800a6fe:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a702:	9308      	str	r3, [sp, #32]
 800a704:	4639      	mov	r1, r7
 800a706:	2200      	movs	r2, #0
 800a708:	4b8b      	ldr	r3, [pc, #556]	; (800a938 <_dtoa_r+0x600>)
 800a70a:	4630      	mov	r0, r6
 800a70c:	f7f5 ff74 	bl	80005f8 <__aeabi_dmul>
 800a710:	e9cd 0100 	strd	r0, r1, [sp]
 800a714:	9f02      	ldr	r7, [sp, #8]
 800a716:	3501      	adds	r5, #1
 800a718:	4628      	mov	r0, r5
 800a71a:	f7f5 ff03 	bl	8000524 <__aeabi_i2d>
 800a71e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a722:	f7f5 ff69 	bl	80005f8 <__aeabi_dmul>
 800a726:	2200      	movs	r2, #0
 800a728:	4b84      	ldr	r3, [pc, #528]	; (800a93c <_dtoa_r+0x604>)
 800a72a:	f7f5 fdaf 	bl	800028c <__adddf3>
 800a72e:	4605      	mov	r5, r0
 800a730:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a734:	2f00      	cmp	r7, #0
 800a736:	d15d      	bne.n	800a7f4 <_dtoa_r+0x4bc>
 800a738:	2200      	movs	r2, #0
 800a73a:	4b81      	ldr	r3, [pc, #516]	; (800a940 <_dtoa_r+0x608>)
 800a73c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a740:	f7f5 fda2 	bl	8000288 <__aeabi_dsub>
 800a744:	462a      	mov	r2, r5
 800a746:	4633      	mov	r3, r6
 800a748:	e9cd 0100 	strd	r0, r1, [sp]
 800a74c:	f7f6 f9e4 	bl	8000b18 <__aeabi_dcmpgt>
 800a750:	2800      	cmp	r0, #0
 800a752:	f040 8288 	bne.w	800ac66 <_dtoa_r+0x92e>
 800a756:	462a      	mov	r2, r5
 800a758:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a75c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a760:	f7f6 f9bc 	bl	8000adc <__aeabi_dcmplt>
 800a764:	2800      	cmp	r0, #0
 800a766:	f040 827c 	bne.w	800ac62 <_dtoa_r+0x92a>
 800a76a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a76e:	e9cd 2300 	strd	r2, r3, [sp]
 800a772:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a774:	2b00      	cmp	r3, #0
 800a776:	f2c0 8150 	blt.w	800aa1a <_dtoa_r+0x6e2>
 800a77a:	f1ba 0f0e 	cmp.w	sl, #14
 800a77e:	f300 814c 	bgt.w	800aa1a <_dtoa_r+0x6e2>
 800a782:	4b6a      	ldr	r3, [pc, #424]	; (800a92c <_dtoa_r+0x5f4>)
 800a784:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a788:	ed93 7b00 	vldr	d7, [r3]
 800a78c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a78e:	2b00      	cmp	r3, #0
 800a790:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a794:	f280 80d8 	bge.w	800a948 <_dtoa_r+0x610>
 800a798:	f1b9 0f00 	cmp.w	r9, #0
 800a79c:	f300 80d4 	bgt.w	800a948 <_dtoa_r+0x610>
 800a7a0:	f040 825e 	bne.w	800ac60 <_dtoa_r+0x928>
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	4b66      	ldr	r3, [pc, #408]	; (800a940 <_dtoa_r+0x608>)
 800a7a8:	ec51 0b17 	vmov	r0, r1, d7
 800a7ac:	f7f5 ff24 	bl	80005f8 <__aeabi_dmul>
 800a7b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a7b4:	f7f6 f9a6 	bl	8000b04 <__aeabi_dcmpge>
 800a7b8:	464f      	mov	r7, r9
 800a7ba:	464e      	mov	r6, r9
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	f040 8234 	bne.w	800ac2a <_dtoa_r+0x8f2>
 800a7c2:	2331      	movs	r3, #49	; 0x31
 800a7c4:	f10b 0501 	add.w	r5, fp, #1
 800a7c8:	f88b 3000 	strb.w	r3, [fp]
 800a7cc:	f10a 0a01 	add.w	sl, sl, #1
 800a7d0:	e22f      	b.n	800ac32 <_dtoa_r+0x8fa>
 800a7d2:	07f2      	lsls	r2, r6, #31
 800a7d4:	d505      	bpl.n	800a7e2 <_dtoa_r+0x4aa>
 800a7d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7da:	f7f5 ff0d 	bl	80005f8 <__aeabi_dmul>
 800a7de:	3501      	adds	r5, #1
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	1076      	asrs	r6, r6, #1
 800a7e4:	3708      	adds	r7, #8
 800a7e6:	e772      	b.n	800a6ce <_dtoa_r+0x396>
 800a7e8:	2502      	movs	r5, #2
 800a7ea:	e774      	b.n	800a6d6 <_dtoa_r+0x39e>
 800a7ec:	f8cd a020 	str.w	sl, [sp, #32]
 800a7f0:	464f      	mov	r7, r9
 800a7f2:	e791      	b.n	800a718 <_dtoa_r+0x3e0>
 800a7f4:	4b4d      	ldr	r3, [pc, #308]	; (800a92c <_dtoa_r+0x5f4>)
 800a7f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a7fa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a7fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a800:	2b00      	cmp	r3, #0
 800a802:	d047      	beq.n	800a894 <_dtoa_r+0x55c>
 800a804:	4602      	mov	r2, r0
 800a806:	460b      	mov	r3, r1
 800a808:	2000      	movs	r0, #0
 800a80a:	494e      	ldr	r1, [pc, #312]	; (800a944 <_dtoa_r+0x60c>)
 800a80c:	f7f6 f81e 	bl	800084c <__aeabi_ddiv>
 800a810:	462a      	mov	r2, r5
 800a812:	4633      	mov	r3, r6
 800a814:	f7f5 fd38 	bl	8000288 <__aeabi_dsub>
 800a818:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a81c:	465d      	mov	r5, fp
 800a81e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a822:	f7f6 f999 	bl	8000b58 <__aeabi_d2iz>
 800a826:	4606      	mov	r6, r0
 800a828:	f7f5 fe7c 	bl	8000524 <__aeabi_i2d>
 800a82c:	4602      	mov	r2, r0
 800a82e:	460b      	mov	r3, r1
 800a830:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a834:	f7f5 fd28 	bl	8000288 <__aeabi_dsub>
 800a838:	3630      	adds	r6, #48	; 0x30
 800a83a:	f805 6b01 	strb.w	r6, [r5], #1
 800a83e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a842:	e9cd 0100 	strd	r0, r1, [sp]
 800a846:	f7f6 f949 	bl	8000adc <__aeabi_dcmplt>
 800a84a:	2800      	cmp	r0, #0
 800a84c:	d163      	bne.n	800a916 <_dtoa_r+0x5de>
 800a84e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a852:	2000      	movs	r0, #0
 800a854:	4937      	ldr	r1, [pc, #220]	; (800a934 <_dtoa_r+0x5fc>)
 800a856:	f7f5 fd17 	bl	8000288 <__aeabi_dsub>
 800a85a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a85e:	f7f6 f93d 	bl	8000adc <__aeabi_dcmplt>
 800a862:	2800      	cmp	r0, #0
 800a864:	f040 80b7 	bne.w	800a9d6 <_dtoa_r+0x69e>
 800a868:	eba5 030b 	sub.w	r3, r5, fp
 800a86c:	429f      	cmp	r7, r3
 800a86e:	f77f af7c 	ble.w	800a76a <_dtoa_r+0x432>
 800a872:	2200      	movs	r2, #0
 800a874:	4b30      	ldr	r3, [pc, #192]	; (800a938 <_dtoa_r+0x600>)
 800a876:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a87a:	f7f5 febd 	bl	80005f8 <__aeabi_dmul>
 800a87e:	2200      	movs	r2, #0
 800a880:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a884:	4b2c      	ldr	r3, [pc, #176]	; (800a938 <_dtoa_r+0x600>)
 800a886:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a88a:	f7f5 feb5 	bl	80005f8 <__aeabi_dmul>
 800a88e:	e9cd 0100 	strd	r0, r1, [sp]
 800a892:	e7c4      	b.n	800a81e <_dtoa_r+0x4e6>
 800a894:	462a      	mov	r2, r5
 800a896:	4633      	mov	r3, r6
 800a898:	f7f5 feae 	bl	80005f8 <__aeabi_dmul>
 800a89c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a8a0:	eb0b 0507 	add.w	r5, fp, r7
 800a8a4:	465e      	mov	r6, fp
 800a8a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8aa:	f7f6 f955 	bl	8000b58 <__aeabi_d2iz>
 800a8ae:	4607      	mov	r7, r0
 800a8b0:	f7f5 fe38 	bl	8000524 <__aeabi_i2d>
 800a8b4:	3730      	adds	r7, #48	; 0x30
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8be:	f7f5 fce3 	bl	8000288 <__aeabi_dsub>
 800a8c2:	f806 7b01 	strb.w	r7, [r6], #1
 800a8c6:	42ae      	cmp	r6, r5
 800a8c8:	e9cd 0100 	strd	r0, r1, [sp]
 800a8cc:	f04f 0200 	mov.w	r2, #0
 800a8d0:	d126      	bne.n	800a920 <_dtoa_r+0x5e8>
 800a8d2:	4b1c      	ldr	r3, [pc, #112]	; (800a944 <_dtoa_r+0x60c>)
 800a8d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a8d8:	f7f5 fcd8 	bl	800028c <__adddf3>
 800a8dc:	4602      	mov	r2, r0
 800a8de:	460b      	mov	r3, r1
 800a8e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8e4:	f7f6 f918 	bl	8000b18 <__aeabi_dcmpgt>
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	d174      	bne.n	800a9d6 <_dtoa_r+0x69e>
 800a8ec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a8f0:	2000      	movs	r0, #0
 800a8f2:	4914      	ldr	r1, [pc, #80]	; (800a944 <_dtoa_r+0x60c>)
 800a8f4:	f7f5 fcc8 	bl	8000288 <__aeabi_dsub>
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	460b      	mov	r3, r1
 800a8fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a900:	f7f6 f8ec 	bl	8000adc <__aeabi_dcmplt>
 800a904:	2800      	cmp	r0, #0
 800a906:	f43f af30 	beq.w	800a76a <_dtoa_r+0x432>
 800a90a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a90e:	2b30      	cmp	r3, #48	; 0x30
 800a910:	f105 32ff 	add.w	r2, r5, #4294967295
 800a914:	d002      	beq.n	800a91c <_dtoa_r+0x5e4>
 800a916:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a91a:	e04a      	b.n	800a9b2 <_dtoa_r+0x67a>
 800a91c:	4615      	mov	r5, r2
 800a91e:	e7f4      	b.n	800a90a <_dtoa_r+0x5d2>
 800a920:	4b05      	ldr	r3, [pc, #20]	; (800a938 <_dtoa_r+0x600>)
 800a922:	f7f5 fe69 	bl	80005f8 <__aeabi_dmul>
 800a926:	e9cd 0100 	strd	r0, r1, [sp]
 800a92a:	e7bc      	b.n	800a8a6 <_dtoa_r+0x56e>
 800a92c:	0800b910 	.word	0x0800b910
 800a930:	0800b8e8 	.word	0x0800b8e8
 800a934:	3ff00000 	.word	0x3ff00000
 800a938:	40240000 	.word	0x40240000
 800a93c:	401c0000 	.word	0x401c0000
 800a940:	40140000 	.word	0x40140000
 800a944:	3fe00000 	.word	0x3fe00000
 800a948:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a94c:	465d      	mov	r5, fp
 800a94e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a952:	4630      	mov	r0, r6
 800a954:	4639      	mov	r1, r7
 800a956:	f7f5 ff79 	bl	800084c <__aeabi_ddiv>
 800a95a:	f7f6 f8fd 	bl	8000b58 <__aeabi_d2iz>
 800a95e:	4680      	mov	r8, r0
 800a960:	f7f5 fde0 	bl	8000524 <__aeabi_i2d>
 800a964:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a968:	f7f5 fe46 	bl	80005f8 <__aeabi_dmul>
 800a96c:	4602      	mov	r2, r0
 800a96e:	460b      	mov	r3, r1
 800a970:	4630      	mov	r0, r6
 800a972:	4639      	mov	r1, r7
 800a974:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a978:	f7f5 fc86 	bl	8000288 <__aeabi_dsub>
 800a97c:	f805 6b01 	strb.w	r6, [r5], #1
 800a980:	eba5 060b 	sub.w	r6, r5, fp
 800a984:	45b1      	cmp	r9, r6
 800a986:	4602      	mov	r2, r0
 800a988:	460b      	mov	r3, r1
 800a98a:	d139      	bne.n	800aa00 <_dtoa_r+0x6c8>
 800a98c:	f7f5 fc7e 	bl	800028c <__adddf3>
 800a990:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a994:	4606      	mov	r6, r0
 800a996:	460f      	mov	r7, r1
 800a998:	f7f6 f8be 	bl	8000b18 <__aeabi_dcmpgt>
 800a99c:	b9c8      	cbnz	r0, 800a9d2 <_dtoa_r+0x69a>
 800a99e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9a2:	4630      	mov	r0, r6
 800a9a4:	4639      	mov	r1, r7
 800a9a6:	f7f6 f88f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9aa:	b110      	cbz	r0, 800a9b2 <_dtoa_r+0x67a>
 800a9ac:	f018 0f01 	tst.w	r8, #1
 800a9b0:	d10f      	bne.n	800a9d2 <_dtoa_r+0x69a>
 800a9b2:	9904      	ldr	r1, [sp, #16]
 800a9b4:	4620      	mov	r0, r4
 800a9b6:	f000 fac6 	bl	800af46 <_Bfree>
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a9be:	702b      	strb	r3, [r5, #0]
 800a9c0:	f10a 0301 	add.w	r3, sl, #1
 800a9c4:	6013      	str	r3, [r2, #0]
 800a9c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	f000 8241 	beq.w	800ae50 <_dtoa_r+0xb18>
 800a9ce:	601d      	str	r5, [r3, #0]
 800a9d0:	e23e      	b.n	800ae50 <_dtoa_r+0xb18>
 800a9d2:	f8cd a020 	str.w	sl, [sp, #32]
 800a9d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a9da:	2a39      	cmp	r2, #57	; 0x39
 800a9dc:	f105 33ff 	add.w	r3, r5, #4294967295
 800a9e0:	d108      	bne.n	800a9f4 <_dtoa_r+0x6bc>
 800a9e2:	459b      	cmp	fp, r3
 800a9e4:	d10a      	bne.n	800a9fc <_dtoa_r+0x6c4>
 800a9e6:	9b08      	ldr	r3, [sp, #32]
 800a9e8:	3301      	adds	r3, #1
 800a9ea:	9308      	str	r3, [sp, #32]
 800a9ec:	2330      	movs	r3, #48	; 0x30
 800a9ee:	f88b 3000 	strb.w	r3, [fp]
 800a9f2:	465b      	mov	r3, fp
 800a9f4:	781a      	ldrb	r2, [r3, #0]
 800a9f6:	3201      	adds	r2, #1
 800a9f8:	701a      	strb	r2, [r3, #0]
 800a9fa:	e78c      	b.n	800a916 <_dtoa_r+0x5de>
 800a9fc:	461d      	mov	r5, r3
 800a9fe:	e7ea      	b.n	800a9d6 <_dtoa_r+0x69e>
 800aa00:	2200      	movs	r2, #0
 800aa02:	4b9b      	ldr	r3, [pc, #620]	; (800ac70 <_dtoa_r+0x938>)
 800aa04:	f7f5 fdf8 	bl	80005f8 <__aeabi_dmul>
 800aa08:	2200      	movs	r2, #0
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	4606      	mov	r6, r0
 800aa0e:	460f      	mov	r7, r1
 800aa10:	f7f6 f85a 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa14:	2800      	cmp	r0, #0
 800aa16:	d09a      	beq.n	800a94e <_dtoa_r+0x616>
 800aa18:	e7cb      	b.n	800a9b2 <_dtoa_r+0x67a>
 800aa1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa1c:	2a00      	cmp	r2, #0
 800aa1e:	f000 808b 	beq.w	800ab38 <_dtoa_r+0x800>
 800aa22:	9a06      	ldr	r2, [sp, #24]
 800aa24:	2a01      	cmp	r2, #1
 800aa26:	dc6e      	bgt.n	800ab06 <_dtoa_r+0x7ce>
 800aa28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aa2a:	2a00      	cmp	r2, #0
 800aa2c:	d067      	beq.n	800aafe <_dtoa_r+0x7c6>
 800aa2e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aa32:	9f07      	ldr	r7, [sp, #28]
 800aa34:	9d05      	ldr	r5, [sp, #20]
 800aa36:	9a05      	ldr	r2, [sp, #20]
 800aa38:	2101      	movs	r1, #1
 800aa3a:	441a      	add	r2, r3
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	9205      	str	r2, [sp, #20]
 800aa40:	4498      	add	r8, r3
 800aa42:	f000 fb20 	bl	800b086 <__i2b>
 800aa46:	4606      	mov	r6, r0
 800aa48:	2d00      	cmp	r5, #0
 800aa4a:	dd0c      	ble.n	800aa66 <_dtoa_r+0x72e>
 800aa4c:	f1b8 0f00 	cmp.w	r8, #0
 800aa50:	dd09      	ble.n	800aa66 <_dtoa_r+0x72e>
 800aa52:	4545      	cmp	r5, r8
 800aa54:	9a05      	ldr	r2, [sp, #20]
 800aa56:	462b      	mov	r3, r5
 800aa58:	bfa8      	it	ge
 800aa5a:	4643      	movge	r3, r8
 800aa5c:	1ad2      	subs	r2, r2, r3
 800aa5e:	9205      	str	r2, [sp, #20]
 800aa60:	1aed      	subs	r5, r5, r3
 800aa62:	eba8 0803 	sub.w	r8, r8, r3
 800aa66:	9b07      	ldr	r3, [sp, #28]
 800aa68:	b1eb      	cbz	r3, 800aaa6 <_dtoa_r+0x76e>
 800aa6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d067      	beq.n	800ab40 <_dtoa_r+0x808>
 800aa70:	b18f      	cbz	r7, 800aa96 <_dtoa_r+0x75e>
 800aa72:	4631      	mov	r1, r6
 800aa74:	463a      	mov	r2, r7
 800aa76:	4620      	mov	r0, r4
 800aa78:	f000 fba4 	bl	800b1c4 <__pow5mult>
 800aa7c:	9a04      	ldr	r2, [sp, #16]
 800aa7e:	4601      	mov	r1, r0
 800aa80:	4606      	mov	r6, r0
 800aa82:	4620      	mov	r0, r4
 800aa84:	f000 fb08 	bl	800b098 <__multiply>
 800aa88:	9904      	ldr	r1, [sp, #16]
 800aa8a:	9008      	str	r0, [sp, #32]
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	f000 fa5a 	bl	800af46 <_Bfree>
 800aa92:	9b08      	ldr	r3, [sp, #32]
 800aa94:	9304      	str	r3, [sp, #16]
 800aa96:	9b07      	ldr	r3, [sp, #28]
 800aa98:	1bda      	subs	r2, r3, r7
 800aa9a:	d004      	beq.n	800aaa6 <_dtoa_r+0x76e>
 800aa9c:	9904      	ldr	r1, [sp, #16]
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	f000 fb90 	bl	800b1c4 <__pow5mult>
 800aaa4:	9004      	str	r0, [sp, #16]
 800aaa6:	2101      	movs	r1, #1
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	f000 faec 	bl	800b086 <__i2b>
 800aaae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aab0:	4607      	mov	r7, r0
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	f000 81d0 	beq.w	800ae58 <_dtoa_r+0xb20>
 800aab8:	461a      	mov	r2, r3
 800aaba:	4601      	mov	r1, r0
 800aabc:	4620      	mov	r0, r4
 800aabe:	f000 fb81 	bl	800b1c4 <__pow5mult>
 800aac2:	9b06      	ldr	r3, [sp, #24]
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	4607      	mov	r7, r0
 800aac8:	dc40      	bgt.n	800ab4c <_dtoa_r+0x814>
 800aaca:	9b00      	ldr	r3, [sp, #0]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d139      	bne.n	800ab44 <_dtoa_r+0x80c>
 800aad0:	9b01      	ldr	r3, [sp, #4]
 800aad2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d136      	bne.n	800ab48 <_dtoa_r+0x810>
 800aada:	9b01      	ldr	r3, [sp, #4]
 800aadc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aae0:	0d1b      	lsrs	r3, r3, #20
 800aae2:	051b      	lsls	r3, r3, #20
 800aae4:	b12b      	cbz	r3, 800aaf2 <_dtoa_r+0x7ba>
 800aae6:	9b05      	ldr	r3, [sp, #20]
 800aae8:	3301      	adds	r3, #1
 800aaea:	9305      	str	r3, [sp, #20]
 800aaec:	f108 0801 	add.w	r8, r8, #1
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	9307      	str	r3, [sp, #28]
 800aaf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d12a      	bne.n	800ab50 <_dtoa_r+0x818>
 800aafa:	2001      	movs	r0, #1
 800aafc:	e030      	b.n	800ab60 <_dtoa_r+0x828>
 800aafe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab00:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ab04:	e795      	b.n	800aa32 <_dtoa_r+0x6fa>
 800ab06:	9b07      	ldr	r3, [sp, #28]
 800ab08:	f109 37ff 	add.w	r7, r9, #4294967295
 800ab0c:	42bb      	cmp	r3, r7
 800ab0e:	bfbf      	itttt	lt
 800ab10:	9b07      	ldrlt	r3, [sp, #28]
 800ab12:	9707      	strlt	r7, [sp, #28]
 800ab14:	1afa      	sublt	r2, r7, r3
 800ab16:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ab18:	bfbb      	ittet	lt
 800ab1a:	189b      	addlt	r3, r3, r2
 800ab1c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ab1e:	1bdf      	subge	r7, r3, r7
 800ab20:	2700      	movlt	r7, #0
 800ab22:	f1b9 0f00 	cmp.w	r9, #0
 800ab26:	bfb5      	itete	lt
 800ab28:	9b05      	ldrlt	r3, [sp, #20]
 800ab2a:	9d05      	ldrge	r5, [sp, #20]
 800ab2c:	eba3 0509 	sublt.w	r5, r3, r9
 800ab30:	464b      	movge	r3, r9
 800ab32:	bfb8      	it	lt
 800ab34:	2300      	movlt	r3, #0
 800ab36:	e77e      	b.n	800aa36 <_dtoa_r+0x6fe>
 800ab38:	9f07      	ldr	r7, [sp, #28]
 800ab3a:	9d05      	ldr	r5, [sp, #20]
 800ab3c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ab3e:	e783      	b.n	800aa48 <_dtoa_r+0x710>
 800ab40:	9a07      	ldr	r2, [sp, #28]
 800ab42:	e7ab      	b.n	800aa9c <_dtoa_r+0x764>
 800ab44:	2300      	movs	r3, #0
 800ab46:	e7d4      	b.n	800aaf2 <_dtoa_r+0x7ba>
 800ab48:	9b00      	ldr	r3, [sp, #0]
 800ab4a:	e7d2      	b.n	800aaf2 <_dtoa_r+0x7ba>
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	9307      	str	r3, [sp, #28]
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800ab56:	6918      	ldr	r0, [r3, #16]
 800ab58:	f000 fa47 	bl	800afea <__hi0bits>
 800ab5c:	f1c0 0020 	rsb	r0, r0, #32
 800ab60:	4440      	add	r0, r8
 800ab62:	f010 001f 	ands.w	r0, r0, #31
 800ab66:	d047      	beq.n	800abf8 <_dtoa_r+0x8c0>
 800ab68:	f1c0 0320 	rsb	r3, r0, #32
 800ab6c:	2b04      	cmp	r3, #4
 800ab6e:	dd3b      	ble.n	800abe8 <_dtoa_r+0x8b0>
 800ab70:	9b05      	ldr	r3, [sp, #20]
 800ab72:	f1c0 001c 	rsb	r0, r0, #28
 800ab76:	4403      	add	r3, r0
 800ab78:	9305      	str	r3, [sp, #20]
 800ab7a:	4405      	add	r5, r0
 800ab7c:	4480      	add	r8, r0
 800ab7e:	9b05      	ldr	r3, [sp, #20]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	dd05      	ble.n	800ab90 <_dtoa_r+0x858>
 800ab84:	461a      	mov	r2, r3
 800ab86:	9904      	ldr	r1, [sp, #16]
 800ab88:	4620      	mov	r0, r4
 800ab8a:	f000 fb69 	bl	800b260 <__lshift>
 800ab8e:	9004      	str	r0, [sp, #16]
 800ab90:	f1b8 0f00 	cmp.w	r8, #0
 800ab94:	dd05      	ble.n	800aba2 <_dtoa_r+0x86a>
 800ab96:	4639      	mov	r1, r7
 800ab98:	4642      	mov	r2, r8
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	f000 fb60 	bl	800b260 <__lshift>
 800aba0:	4607      	mov	r7, r0
 800aba2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aba4:	b353      	cbz	r3, 800abfc <_dtoa_r+0x8c4>
 800aba6:	4639      	mov	r1, r7
 800aba8:	9804      	ldr	r0, [sp, #16]
 800abaa:	f000 fbad 	bl	800b308 <__mcmp>
 800abae:	2800      	cmp	r0, #0
 800abb0:	da24      	bge.n	800abfc <_dtoa_r+0x8c4>
 800abb2:	2300      	movs	r3, #0
 800abb4:	220a      	movs	r2, #10
 800abb6:	9904      	ldr	r1, [sp, #16]
 800abb8:	4620      	mov	r0, r4
 800abba:	f000 f9db 	bl	800af74 <__multadd>
 800abbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abc0:	9004      	str	r0, [sp, #16]
 800abc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	f000 814d 	beq.w	800ae66 <_dtoa_r+0xb2e>
 800abcc:	2300      	movs	r3, #0
 800abce:	4631      	mov	r1, r6
 800abd0:	220a      	movs	r2, #10
 800abd2:	4620      	mov	r0, r4
 800abd4:	f000 f9ce 	bl	800af74 <__multadd>
 800abd8:	9b02      	ldr	r3, [sp, #8]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	4606      	mov	r6, r0
 800abde:	dc4f      	bgt.n	800ac80 <_dtoa_r+0x948>
 800abe0:	9b06      	ldr	r3, [sp, #24]
 800abe2:	2b02      	cmp	r3, #2
 800abe4:	dd4c      	ble.n	800ac80 <_dtoa_r+0x948>
 800abe6:	e011      	b.n	800ac0c <_dtoa_r+0x8d4>
 800abe8:	d0c9      	beq.n	800ab7e <_dtoa_r+0x846>
 800abea:	9a05      	ldr	r2, [sp, #20]
 800abec:	331c      	adds	r3, #28
 800abee:	441a      	add	r2, r3
 800abf0:	9205      	str	r2, [sp, #20]
 800abf2:	441d      	add	r5, r3
 800abf4:	4498      	add	r8, r3
 800abf6:	e7c2      	b.n	800ab7e <_dtoa_r+0x846>
 800abf8:	4603      	mov	r3, r0
 800abfa:	e7f6      	b.n	800abea <_dtoa_r+0x8b2>
 800abfc:	f1b9 0f00 	cmp.w	r9, #0
 800ac00:	dc38      	bgt.n	800ac74 <_dtoa_r+0x93c>
 800ac02:	9b06      	ldr	r3, [sp, #24]
 800ac04:	2b02      	cmp	r3, #2
 800ac06:	dd35      	ble.n	800ac74 <_dtoa_r+0x93c>
 800ac08:	f8cd 9008 	str.w	r9, [sp, #8]
 800ac0c:	9b02      	ldr	r3, [sp, #8]
 800ac0e:	b963      	cbnz	r3, 800ac2a <_dtoa_r+0x8f2>
 800ac10:	4639      	mov	r1, r7
 800ac12:	2205      	movs	r2, #5
 800ac14:	4620      	mov	r0, r4
 800ac16:	f000 f9ad 	bl	800af74 <__multadd>
 800ac1a:	4601      	mov	r1, r0
 800ac1c:	4607      	mov	r7, r0
 800ac1e:	9804      	ldr	r0, [sp, #16]
 800ac20:	f000 fb72 	bl	800b308 <__mcmp>
 800ac24:	2800      	cmp	r0, #0
 800ac26:	f73f adcc 	bgt.w	800a7c2 <_dtoa_r+0x48a>
 800ac2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac2c:	465d      	mov	r5, fp
 800ac2e:	ea6f 0a03 	mvn.w	sl, r3
 800ac32:	f04f 0900 	mov.w	r9, #0
 800ac36:	4639      	mov	r1, r7
 800ac38:	4620      	mov	r0, r4
 800ac3a:	f000 f984 	bl	800af46 <_Bfree>
 800ac3e:	2e00      	cmp	r6, #0
 800ac40:	f43f aeb7 	beq.w	800a9b2 <_dtoa_r+0x67a>
 800ac44:	f1b9 0f00 	cmp.w	r9, #0
 800ac48:	d005      	beq.n	800ac56 <_dtoa_r+0x91e>
 800ac4a:	45b1      	cmp	r9, r6
 800ac4c:	d003      	beq.n	800ac56 <_dtoa_r+0x91e>
 800ac4e:	4649      	mov	r1, r9
 800ac50:	4620      	mov	r0, r4
 800ac52:	f000 f978 	bl	800af46 <_Bfree>
 800ac56:	4631      	mov	r1, r6
 800ac58:	4620      	mov	r0, r4
 800ac5a:	f000 f974 	bl	800af46 <_Bfree>
 800ac5e:	e6a8      	b.n	800a9b2 <_dtoa_r+0x67a>
 800ac60:	2700      	movs	r7, #0
 800ac62:	463e      	mov	r6, r7
 800ac64:	e7e1      	b.n	800ac2a <_dtoa_r+0x8f2>
 800ac66:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ac6a:	463e      	mov	r6, r7
 800ac6c:	e5a9      	b.n	800a7c2 <_dtoa_r+0x48a>
 800ac6e:	bf00      	nop
 800ac70:	40240000 	.word	0x40240000
 800ac74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac76:	f8cd 9008 	str.w	r9, [sp, #8]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	f000 80fa 	beq.w	800ae74 <_dtoa_r+0xb3c>
 800ac80:	2d00      	cmp	r5, #0
 800ac82:	dd05      	ble.n	800ac90 <_dtoa_r+0x958>
 800ac84:	4631      	mov	r1, r6
 800ac86:	462a      	mov	r2, r5
 800ac88:	4620      	mov	r0, r4
 800ac8a:	f000 fae9 	bl	800b260 <__lshift>
 800ac8e:	4606      	mov	r6, r0
 800ac90:	9b07      	ldr	r3, [sp, #28]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d04c      	beq.n	800ad30 <_dtoa_r+0x9f8>
 800ac96:	6871      	ldr	r1, [r6, #4]
 800ac98:	4620      	mov	r0, r4
 800ac9a:	f000 f920 	bl	800aede <_Balloc>
 800ac9e:	6932      	ldr	r2, [r6, #16]
 800aca0:	3202      	adds	r2, #2
 800aca2:	4605      	mov	r5, r0
 800aca4:	0092      	lsls	r2, r2, #2
 800aca6:	f106 010c 	add.w	r1, r6, #12
 800acaa:	300c      	adds	r0, #12
 800acac:	f000 f90a 	bl	800aec4 <memcpy>
 800acb0:	2201      	movs	r2, #1
 800acb2:	4629      	mov	r1, r5
 800acb4:	4620      	mov	r0, r4
 800acb6:	f000 fad3 	bl	800b260 <__lshift>
 800acba:	9b00      	ldr	r3, [sp, #0]
 800acbc:	f8cd b014 	str.w	fp, [sp, #20]
 800acc0:	f003 0301 	and.w	r3, r3, #1
 800acc4:	46b1      	mov	r9, r6
 800acc6:	9307      	str	r3, [sp, #28]
 800acc8:	4606      	mov	r6, r0
 800acca:	4639      	mov	r1, r7
 800accc:	9804      	ldr	r0, [sp, #16]
 800acce:	f7ff faa7 	bl	800a220 <quorem>
 800acd2:	4649      	mov	r1, r9
 800acd4:	4605      	mov	r5, r0
 800acd6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800acda:	9804      	ldr	r0, [sp, #16]
 800acdc:	f000 fb14 	bl	800b308 <__mcmp>
 800ace0:	4632      	mov	r2, r6
 800ace2:	9000      	str	r0, [sp, #0]
 800ace4:	4639      	mov	r1, r7
 800ace6:	4620      	mov	r0, r4
 800ace8:	f000 fb28 	bl	800b33c <__mdiff>
 800acec:	68c3      	ldr	r3, [r0, #12]
 800acee:	4602      	mov	r2, r0
 800acf0:	bb03      	cbnz	r3, 800ad34 <_dtoa_r+0x9fc>
 800acf2:	4601      	mov	r1, r0
 800acf4:	9008      	str	r0, [sp, #32]
 800acf6:	9804      	ldr	r0, [sp, #16]
 800acf8:	f000 fb06 	bl	800b308 <__mcmp>
 800acfc:	9a08      	ldr	r2, [sp, #32]
 800acfe:	4603      	mov	r3, r0
 800ad00:	4611      	mov	r1, r2
 800ad02:	4620      	mov	r0, r4
 800ad04:	9308      	str	r3, [sp, #32]
 800ad06:	f000 f91e 	bl	800af46 <_Bfree>
 800ad0a:	9b08      	ldr	r3, [sp, #32]
 800ad0c:	b9a3      	cbnz	r3, 800ad38 <_dtoa_r+0xa00>
 800ad0e:	9a06      	ldr	r2, [sp, #24]
 800ad10:	b992      	cbnz	r2, 800ad38 <_dtoa_r+0xa00>
 800ad12:	9a07      	ldr	r2, [sp, #28]
 800ad14:	b982      	cbnz	r2, 800ad38 <_dtoa_r+0xa00>
 800ad16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ad1a:	d029      	beq.n	800ad70 <_dtoa_r+0xa38>
 800ad1c:	9b00      	ldr	r3, [sp, #0]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	dd01      	ble.n	800ad26 <_dtoa_r+0x9ee>
 800ad22:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800ad26:	9b05      	ldr	r3, [sp, #20]
 800ad28:	1c5d      	adds	r5, r3, #1
 800ad2a:	f883 8000 	strb.w	r8, [r3]
 800ad2e:	e782      	b.n	800ac36 <_dtoa_r+0x8fe>
 800ad30:	4630      	mov	r0, r6
 800ad32:	e7c2      	b.n	800acba <_dtoa_r+0x982>
 800ad34:	2301      	movs	r3, #1
 800ad36:	e7e3      	b.n	800ad00 <_dtoa_r+0x9c8>
 800ad38:	9a00      	ldr	r2, [sp, #0]
 800ad3a:	2a00      	cmp	r2, #0
 800ad3c:	db04      	blt.n	800ad48 <_dtoa_r+0xa10>
 800ad3e:	d125      	bne.n	800ad8c <_dtoa_r+0xa54>
 800ad40:	9a06      	ldr	r2, [sp, #24]
 800ad42:	bb1a      	cbnz	r2, 800ad8c <_dtoa_r+0xa54>
 800ad44:	9a07      	ldr	r2, [sp, #28]
 800ad46:	bb0a      	cbnz	r2, 800ad8c <_dtoa_r+0xa54>
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	ddec      	ble.n	800ad26 <_dtoa_r+0x9ee>
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	9904      	ldr	r1, [sp, #16]
 800ad50:	4620      	mov	r0, r4
 800ad52:	f000 fa85 	bl	800b260 <__lshift>
 800ad56:	4639      	mov	r1, r7
 800ad58:	9004      	str	r0, [sp, #16]
 800ad5a:	f000 fad5 	bl	800b308 <__mcmp>
 800ad5e:	2800      	cmp	r0, #0
 800ad60:	dc03      	bgt.n	800ad6a <_dtoa_r+0xa32>
 800ad62:	d1e0      	bne.n	800ad26 <_dtoa_r+0x9ee>
 800ad64:	f018 0f01 	tst.w	r8, #1
 800ad68:	d0dd      	beq.n	800ad26 <_dtoa_r+0x9ee>
 800ad6a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ad6e:	d1d8      	bne.n	800ad22 <_dtoa_r+0x9ea>
 800ad70:	9b05      	ldr	r3, [sp, #20]
 800ad72:	9a05      	ldr	r2, [sp, #20]
 800ad74:	1c5d      	adds	r5, r3, #1
 800ad76:	2339      	movs	r3, #57	; 0x39
 800ad78:	7013      	strb	r3, [r2, #0]
 800ad7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ad7e:	2b39      	cmp	r3, #57	; 0x39
 800ad80:	f105 32ff 	add.w	r2, r5, #4294967295
 800ad84:	d04f      	beq.n	800ae26 <_dtoa_r+0xaee>
 800ad86:	3301      	adds	r3, #1
 800ad88:	7013      	strb	r3, [r2, #0]
 800ad8a:	e754      	b.n	800ac36 <_dtoa_r+0x8fe>
 800ad8c:	9a05      	ldr	r2, [sp, #20]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	f102 0501 	add.w	r5, r2, #1
 800ad94:	dd06      	ble.n	800ada4 <_dtoa_r+0xa6c>
 800ad96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ad9a:	d0e9      	beq.n	800ad70 <_dtoa_r+0xa38>
 800ad9c:	f108 0801 	add.w	r8, r8, #1
 800ada0:	9b05      	ldr	r3, [sp, #20]
 800ada2:	e7c2      	b.n	800ad2a <_dtoa_r+0x9f2>
 800ada4:	9a02      	ldr	r2, [sp, #8]
 800ada6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800adaa:	eba5 030b 	sub.w	r3, r5, fp
 800adae:	4293      	cmp	r3, r2
 800adb0:	d021      	beq.n	800adf6 <_dtoa_r+0xabe>
 800adb2:	2300      	movs	r3, #0
 800adb4:	220a      	movs	r2, #10
 800adb6:	9904      	ldr	r1, [sp, #16]
 800adb8:	4620      	mov	r0, r4
 800adba:	f000 f8db 	bl	800af74 <__multadd>
 800adbe:	45b1      	cmp	r9, r6
 800adc0:	9004      	str	r0, [sp, #16]
 800adc2:	f04f 0300 	mov.w	r3, #0
 800adc6:	f04f 020a 	mov.w	r2, #10
 800adca:	4649      	mov	r1, r9
 800adcc:	4620      	mov	r0, r4
 800adce:	d105      	bne.n	800addc <_dtoa_r+0xaa4>
 800add0:	f000 f8d0 	bl	800af74 <__multadd>
 800add4:	4681      	mov	r9, r0
 800add6:	4606      	mov	r6, r0
 800add8:	9505      	str	r5, [sp, #20]
 800adda:	e776      	b.n	800acca <_dtoa_r+0x992>
 800addc:	f000 f8ca 	bl	800af74 <__multadd>
 800ade0:	4631      	mov	r1, r6
 800ade2:	4681      	mov	r9, r0
 800ade4:	2300      	movs	r3, #0
 800ade6:	220a      	movs	r2, #10
 800ade8:	4620      	mov	r0, r4
 800adea:	f000 f8c3 	bl	800af74 <__multadd>
 800adee:	4606      	mov	r6, r0
 800adf0:	e7f2      	b.n	800add8 <_dtoa_r+0xaa0>
 800adf2:	f04f 0900 	mov.w	r9, #0
 800adf6:	2201      	movs	r2, #1
 800adf8:	9904      	ldr	r1, [sp, #16]
 800adfa:	4620      	mov	r0, r4
 800adfc:	f000 fa30 	bl	800b260 <__lshift>
 800ae00:	4639      	mov	r1, r7
 800ae02:	9004      	str	r0, [sp, #16]
 800ae04:	f000 fa80 	bl	800b308 <__mcmp>
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	dcb6      	bgt.n	800ad7a <_dtoa_r+0xa42>
 800ae0c:	d102      	bne.n	800ae14 <_dtoa_r+0xadc>
 800ae0e:	f018 0f01 	tst.w	r8, #1
 800ae12:	d1b2      	bne.n	800ad7a <_dtoa_r+0xa42>
 800ae14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ae18:	2b30      	cmp	r3, #48	; 0x30
 800ae1a:	f105 32ff 	add.w	r2, r5, #4294967295
 800ae1e:	f47f af0a 	bne.w	800ac36 <_dtoa_r+0x8fe>
 800ae22:	4615      	mov	r5, r2
 800ae24:	e7f6      	b.n	800ae14 <_dtoa_r+0xadc>
 800ae26:	4593      	cmp	fp, r2
 800ae28:	d105      	bne.n	800ae36 <_dtoa_r+0xafe>
 800ae2a:	2331      	movs	r3, #49	; 0x31
 800ae2c:	f10a 0a01 	add.w	sl, sl, #1
 800ae30:	f88b 3000 	strb.w	r3, [fp]
 800ae34:	e6ff      	b.n	800ac36 <_dtoa_r+0x8fe>
 800ae36:	4615      	mov	r5, r2
 800ae38:	e79f      	b.n	800ad7a <_dtoa_r+0xa42>
 800ae3a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800aea0 <_dtoa_r+0xb68>
 800ae3e:	e007      	b.n	800ae50 <_dtoa_r+0xb18>
 800ae40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae42:	f8df b060 	ldr.w	fp, [pc, #96]	; 800aea4 <_dtoa_r+0xb6c>
 800ae46:	b11b      	cbz	r3, 800ae50 <_dtoa_r+0xb18>
 800ae48:	f10b 0308 	add.w	r3, fp, #8
 800ae4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ae4e:	6013      	str	r3, [r2, #0]
 800ae50:	4658      	mov	r0, fp
 800ae52:	b017      	add	sp, #92	; 0x5c
 800ae54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae58:	9b06      	ldr	r3, [sp, #24]
 800ae5a:	2b01      	cmp	r3, #1
 800ae5c:	f77f ae35 	ble.w	800aaca <_dtoa_r+0x792>
 800ae60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae62:	9307      	str	r3, [sp, #28]
 800ae64:	e649      	b.n	800aafa <_dtoa_r+0x7c2>
 800ae66:	9b02      	ldr	r3, [sp, #8]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	dc03      	bgt.n	800ae74 <_dtoa_r+0xb3c>
 800ae6c:	9b06      	ldr	r3, [sp, #24]
 800ae6e:	2b02      	cmp	r3, #2
 800ae70:	f73f aecc 	bgt.w	800ac0c <_dtoa_r+0x8d4>
 800ae74:	465d      	mov	r5, fp
 800ae76:	4639      	mov	r1, r7
 800ae78:	9804      	ldr	r0, [sp, #16]
 800ae7a:	f7ff f9d1 	bl	800a220 <quorem>
 800ae7e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ae82:	f805 8b01 	strb.w	r8, [r5], #1
 800ae86:	9a02      	ldr	r2, [sp, #8]
 800ae88:	eba5 030b 	sub.w	r3, r5, fp
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	ddb0      	ble.n	800adf2 <_dtoa_r+0xaba>
 800ae90:	2300      	movs	r3, #0
 800ae92:	220a      	movs	r2, #10
 800ae94:	9904      	ldr	r1, [sp, #16]
 800ae96:	4620      	mov	r0, r4
 800ae98:	f000 f86c 	bl	800af74 <__multadd>
 800ae9c:	9004      	str	r0, [sp, #16]
 800ae9e:	e7ea      	b.n	800ae76 <_dtoa_r+0xb3e>
 800aea0:	0800b8b4 	.word	0x0800b8b4
 800aea4:	0800b8d8 	.word	0x0800b8d8

0800aea8 <_localeconv_r>:
 800aea8:	4b04      	ldr	r3, [pc, #16]	; (800aebc <_localeconv_r+0x14>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	6a18      	ldr	r0, [r3, #32]
 800aeae:	4b04      	ldr	r3, [pc, #16]	; (800aec0 <_localeconv_r+0x18>)
 800aeb0:	2800      	cmp	r0, #0
 800aeb2:	bf08      	it	eq
 800aeb4:	4618      	moveq	r0, r3
 800aeb6:	30f0      	adds	r0, #240	; 0xf0
 800aeb8:	4770      	bx	lr
 800aeba:	bf00      	nop
 800aebc:	20000188 	.word	0x20000188
 800aec0:	200001ec 	.word	0x200001ec

0800aec4 <memcpy>:
 800aec4:	b510      	push	{r4, lr}
 800aec6:	1e43      	subs	r3, r0, #1
 800aec8:	440a      	add	r2, r1
 800aeca:	4291      	cmp	r1, r2
 800aecc:	d100      	bne.n	800aed0 <memcpy+0xc>
 800aece:	bd10      	pop	{r4, pc}
 800aed0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aed4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aed8:	e7f7      	b.n	800aeca <memcpy+0x6>

0800aeda <__malloc_lock>:
 800aeda:	4770      	bx	lr

0800aedc <__malloc_unlock>:
 800aedc:	4770      	bx	lr

0800aede <_Balloc>:
 800aede:	b570      	push	{r4, r5, r6, lr}
 800aee0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aee2:	4604      	mov	r4, r0
 800aee4:	460e      	mov	r6, r1
 800aee6:	b93d      	cbnz	r5, 800aef8 <_Balloc+0x1a>
 800aee8:	2010      	movs	r0, #16
 800aeea:	f7fe fc4d 	bl	8009788 <malloc>
 800aeee:	6260      	str	r0, [r4, #36]	; 0x24
 800aef0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aef4:	6005      	str	r5, [r0, #0]
 800aef6:	60c5      	str	r5, [r0, #12]
 800aef8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800aefa:	68eb      	ldr	r3, [r5, #12]
 800aefc:	b183      	cbz	r3, 800af20 <_Balloc+0x42>
 800aefe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af00:	68db      	ldr	r3, [r3, #12]
 800af02:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800af06:	b9b8      	cbnz	r0, 800af38 <_Balloc+0x5a>
 800af08:	2101      	movs	r1, #1
 800af0a:	fa01 f506 	lsl.w	r5, r1, r6
 800af0e:	1d6a      	adds	r2, r5, #5
 800af10:	0092      	lsls	r2, r2, #2
 800af12:	4620      	mov	r0, r4
 800af14:	f000 fabe 	bl	800b494 <_calloc_r>
 800af18:	b160      	cbz	r0, 800af34 <_Balloc+0x56>
 800af1a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800af1e:	e00e      	b.n	800af3e <_Balloc+0x60>
 800af20:	2221      	movs	r2, #33	; 0x21
 800af22:	2104      	movs	r1, #4
 800af24:	4620      	mov	r0, r4
 800af26:	f000 fab5 	bl	800b494 <_calloc_r>
 800af2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af2c:	60e8      	str	r0, [r5, #12]
 800af2e:	68db      	ldr	r3, [r3, #12]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d1e4      	bne.n	800aefe <_Balloc+0x20>
 800af34:	2000      	movs	r0, #0
 800af36:	bd70      	pop	{r4, r5, r6, pc}
 800af38:	6802      	ldr	r2, [r0, #0]
 800af3a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800af3e:	2300      	movs	r3, #0
 800af40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af44:	e7f7      	b.n	800af36 <_Balloc+0x58>

0800af46 <_Bfree>:
 800af46:	b570      	push	{r4, r5, r6, lr}
 800af48:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800af4a:	4606      	mov	r6, r0
 800af4c:	460d      	mov	r5, r1
 800af4e:	b93c      	cbnz	r4, 800af60 <_Bfree+0x1a>
 800af50:	2010      	movs	r0, #16
 800af52:	f7fe fc19 	bl	8009788 <malloc>
 800af56:	6270      	str	r0, [r6, #36]	; 0x24
 800af58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af5c:	6004      	str	r4, [r0, #0]
 800af5e:	60c4      	str	r4, [r0, #12]
 800af60:	b13d      	cbz	r5, 800af72 <_Bfree+0x2c>
 800af62:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800af64:	686a      	ldr	r2, [r5, #4]
 800af66:	68db      	ldr	r3, [r3, #12]
 800af68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af6c:	6029      	str	r1, [r5, #0]
 800af6e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800af72:	bd70      	pop	{r4, r5, r6, pc}

0800af74 <__multadd>:
 800af74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af78:	690d      	ldr	r5, [r1, #16]
 800af7a:	461f      	mov	r7, r3
 800af7c:	4606      	mov	r6, r0
 800af7e:	460c      	mov	r4, r1
 800af80:	f101 0c14 	add.w	ip, r1, #20
 800af84:	2300      	movs	r3, #0
 800af86:	f8dc 0000 	ldr.w	r0, [ip]
 800af8a:	b281      	uxth	r1, r0
 800af8c:	fb02 7101 	mla	r1, r2, r1, r7
 800af90:	0c0f      	lsrs	r7, r1, #16
 800af92:	0c00      	lsrs	r0, r0, #16
 800af94:	fb02 7000 	mla	r0, r2, r0, r7
 800af98:	b289      	uxth	r1, r1
 800af9a:	3301      	adds	r3, #1
 800af9c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800afa0:	429d      	cmp	r5, r3
 800afa2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800afa6:	f84c 1b04 	str.w	r1, [ip], #4
 800afaa:	dcec      	bgt.n	800af86 <__multadd+0x12>
 800afac:	b1d7      	cbz	r7, 800afe4 <__multadd+0x70>
 800afae:	68a3      	ldr	r3, [r4, #8]
 800afb0:	42ab      	cmp	r3, r5
 800afb2:	dc12      	bgt.n	800afda <__multadd+0x66>
 800afb4:	6861      	ldr	r1, [r4, #4]
 800afb6:	4630      	mov	r0, r6
 800afb8:	3101      	adds	r1, #1
 800afba:	f7ff ff90 	bl	800aede <_Balloc>
 800afbe:	6922      	ldr	r2, [r4, #16]
 800afc0:	3202      	adds	r2, #2
 800afc2:	f104 010c 	add.w	r1, r4, #12
 800afc6:	4680      	mov	r8, r0
 800afc8:	0092      	lsls	r2, r2, #2
 800afca:	300c      	adds	r0, #12
 800afcc:	f7ff ff7a 	bl	800aec4 <memcpy>
 800afd0:	4621      	mov	r1, r4
 800afd2:	4630      	mov	r0, r6
 800afd4:	f7ff ffb7 	bl	800af46 <_Bfree>
 800afd8:	4644      	mov	r4, r8
 800afda:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800afde:	3501      	adds	r5, #1
 800afe0:	615f      	str	r7, [r3, #20]
 800afe2:	6125      	str	r5, [r4, #16]
 800afe4:	4620      	mov	r0, r4
 800afe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800afea <__hi0bits>:
 800afea:	0c02      	lsrs	r2, r0, #16
 800afec:	0412      	lsls	r2, r2, #16
 800afee:	4603      	mov	r3, r0
 800aff0:	b9b2      	cbnz	r2, 800b020 <__hi0bits+0x36>
 800aff2:	0403      	lsls	r3, r0, #16
 800aff4:	2010      	movs	r0, #16
 800aff6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800affa:	bf04      	itt	eq
 800affc:	021b      	lsleq	r3, r3, #8
 800affe:	3008      	addeq	r0, #8
 800b000:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b004:	bf04      	itt	eq
 800b006:	011b      	lsleq	r3, r3, #4
 800b008:	3004      	addeq	r0, #4
 800b00a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b00e:	bf04      	itt	eq
 800b010:	009b      	lsleq	r3, r3, #2
 800b012:	3002      	addeq	r0, #2
 800b014:	2b00      	cmp	r3, #0
 800b016:	db06      	blt.n	800b026 <__hi0bits+0x3c>
 800b018:	005b      	lsls	r3, r3, #1
 800b01a:	d503      	bpl.n	800b024 <__hi0bits+0x3a>
 800b01c:	3001      	adds	r0, #1
 800b01e:	4770      	bx	lr
 800b020:	2000      	movs	r0, #0
 800b022:	e7e8      	b.n	800aff6 <__hi0bits+0xc>
 800b024:	2020      	movs	r0, #32
 800b026:	4770      	bx	lr

0800b028 <__lo0bits>:
 800b028:	6803      	ldr	r3, [r0, #0]
 800b02a:	f013 0207 	ands.w	r2, r3, #7
 800b02e:	4601      	mov	r1, r0
 800b030:	d00b      	beq.n	800b04a <__lo0bits+0x22>
 800b032:	07da      	lsls	r2, r3, #31
 800b034:	d423      	bmi.n	800b07e <__lo0bits+0x56>
 800b036:	0798      	lsls	r0, r3, #30
 800b038:	bf49      	itett	mi
 800b03a:	085b      	lsrmi	r3, r3, #1
 800b03c:	089b      	lsrpl	r3, r3, #2
 800b03e:	2001      	movmi	r0, #1
 800b040:	600b      	strmi	r3, [r1, #0]
 800b042:	bf5c      	itt	pl
 800b044:	600b      	strpl	r3, [r1, #0]
 800b046:	2002      	movpl	r0, #2
 800b048:	4770      	bx	lr
 800b04a:	b298      	uxth	r0, r3
 800b04c:	b9a8      	cbnz	r0, 800b07a <__lo0bits+0x52>
 800b04e:	0c1b      	lsrs	r3, r3, #16
 800b050:	2010      	movs	r0, #16
 800b052:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b056:	bf04      	itt	eq
 800b058:	0a1b      	lsreq	r3, r3, #8
 800b05a:	3008      	addeq	r0, #8
 800b05c:	071a      	lsls	r2, r3, #28
 800b05e:	bf04      	itt	eq
 800b060:	091b      	lsreq	r3, r3, #4
 800b062:	3004      	addeq	r0, #4
 800b064:	079a      	lsls	r2, r3, #30
 800b066:	bf04      	itt	eq
 800b068:	089b      	lsreq	r3, r3, #2
 800b06a:	3002      	addeq	r0, #2
 800b06c:	07da      	lsls	r2, r3, #31
 800b06e:	d402      	bmi.n	800b076 <__lo0bits+0x4e>
 800b070:	085b      	lsrs	r3, r3, #1
 800b072:	d006      	beq.n	800b082 <__lo0bits+0x5a>
 800b074:	3001      	adds	r0, #1
 800b076:	600b      	str	r3, [r1, #0]
 800b078:	4770      	bx	lr
 800b07a:	4610      	mov	r0, r2
 800b07c:	e7e9      	b.n	800b052 <__lo0bits+0x2a>
 800b07e:	2000      	movs	r0, #0
 800b080:	4770      	bx	lr
 800b082:	2020      	movs	r0, #32
 800b084:	4770      	bx	lr

0800b086 <__i2b>:
 800b086:	b510      	push	{r4, lr}
 800b088:	460c      	mov	r4, r1
 800b08a:	2101      	movs	r1, #1
 800b08c:	f7ff ff27 	bl	800aede <_Balloc>
 800b090:	2201      	movs	r2, #1
 800b092:	6144      	str	r4, [r0, #20]
 800b094:	6102      	str	r2, [r0, #16]
 800b096:	bd10      	pop	{r4, pc}

0800b098 <__multiply>:
 800b098:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b09c:	4614      	mov	r4, r2
 800b09e:	690a      	ldr	r2, [r1, #16]
 800b0a0:	6923      	ldr	r3, [r4, #16]
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	bfb8      	it	lt
 800b0a6:	460b      	movlt	r3, r1
 800b0a8:	4688      	mov	r8, r1
 800b0aa:	bfbc      	itt	lt
 800b0ac:	46a0      	movlt	r8, r4
 800b0ae:	461c      	movlt	r4, r3
 800b0b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b0b4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b0b8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b0bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b0c0:	eb07 0609 	add.w	r6, r7, r9
 800b0c4:	42b3      	cmp	r3, r6
 800b0c6:	bfb8      	it	lt
 800b0c8:	3101      	addlt	r1, #1
 800b0ca:	f7ff ff08 	bl	800aede <_Balloc>
 800b0ce:	f100 0514 	add.w	r5, r0, #20
 800b0d2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b0d6:	462b      	mov	r3, r5
 800b0d8:	2200      	movs	r2, #0
 800b0da:	4573      	cmp	r3, lr
 800b0dc:	d316      	bcc.n	800b10c <__multiply+0x74>
 800b0de:	f104 0214 	add.w	r2, r4, #20
 800b0e2:	f108 0114 	add.w	r1, r8, #20
 800b0e6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b0ea:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b0ee:	9300      	str	r3, [sp, #0]
 800b0f0:	9b00      	ldr	r3, [sp, #0]
 800b0f2:	9201      	str	r2, [sp, #4]
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d80c      	bhi.n	800b112 <__multiply+0x7a>
 800b0f8:	2e00      	cmp	r6, #0
 800b0fa:	dd03      	ble.n	800b104 <__multiply+0x6c>
 800b0fc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b100:	2b00      	cmp	r3, #0
 800b102:	d05d      	beq.n	800b1c0 <__multiply+0x128>
 800b104:	6106      	str	r6, [r0, #16]
 800b106:	b003      	add	sp, #12
 800b108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b10c:	f843 2b04 	str.w	r2, [r3], #4
 800b110:	e7e3      	b.n	800b0da <__multiply+0x42>
 800b112:	f8b2 b000 	ldrh.w	fp, [r2]
 800b116:	f1bb 0f00 	cmp.w	fp, #0
 800b11a:	d023      	beq.n	800b164 <__multiply+0xcc>
 800b11c:	4689      	mov	r9, r1
 800b11e:	46ac      	mov	ip, r5
 800b120:	f04f 0800 	mov.w	r8, #0
 800b124:	f859 4b04 	ldr.w	r4, [r9], #4
 800b128:	f8dc a000 	ldr.w	sl, [ip]
 800b12c:	b2a3      	uxth	r3, r4
 800b12e:	fa1f fa8a 	uxth.w	sl, sl
 800b132:	fb0b a303 	mla	r3, fp, r3, sl
 800b136:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b13a:	f8dc 4000 	ldr.w	r4, [ip]
 800b13e:	4443      	add	r3, r8
 800b140:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b144:	fb0b 840a 	mla	r4, fp, sl, r8
 800b148:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b14c:	46e2      	mov	sl, ip
 800b14e:	b29b      	uxth	r3, r3
 800b150:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b154:	454f      	cmp	r7, r9
 800b156:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b15a:	f84a 3b04 	str.w	r3, [sl], #4
 800b15e:	d82b      	bhi.n	800b1b8 <__multiply+0x120>
 800b160:	f8cc 8004 	str.w	r8, [ip, #4]
 800b164:	9b01      	ldr	r3, [sp, #4]
 800b166:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b16a:	3204      	adds	r2, #4
 800b16c:	f1ba 0f00 	cmp.w	sl, #0
 800b170:	d020      	beq.n	800b1b4 <__multiply+0x11c>
 800b172:	682b      	ldr	r3, [r5, #0]
 800b174:	4689      	mov	r9, r1
 800b176:	46a8      	mov	r8, r5
 800b178:	f04f 0b00 	mov.w	fp, #0
 800b17c:	f8b9 c000 	ldrh.w	ip, [r9]
 800b180:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b184:	fb0a 440c 	mla	r4, sl, ip, r4
 800b188:	445c      	add	r4, fp
 800b18a:	46c4      	mov	ip, r8
 800b18c:	b29b      	uxth	r3, r3
 800b18e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b192:	f84c 3b04 	str.w	r3, [ip], #4
 800b196:	f859 3b04 	ldr.w	r3, [r9], #4
 800b19a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b19e:	0c1b      	lsrs	r3, r3, #16
 800b1a0:	fb0a b303 	mla	r3, sl, r3, fp
 800b1a4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b1a8:	454f      	cmp	r7, r9
 800b1aa:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b1ae:	d805      	bhi.n	800b1bc <__multiply+0x124>
 800b1b0:	f8c8 3004 	str.w	r3, [r8, #4]
 800b1b4:	3504      	adds	r5, #4
 800b1b6:	e79b      	b.n	800b0f0 <__multiply+0x58>
 800b1b8:	46d4      	mov	ip, sl
 800b1ba:	e7b3      	b.n	800b124 <__multiply+0x8c>
 800b1bc:	46e0      	mov	r8, ip
 800b1be:	e7dd      	b.n	800b17c <__multiply+0xe4>
 800b1c0:	3e01      	subs	r6, #1
 800b1c2:	e799      	b.n	800b0f8 <__multiply+0x60>

0800b1c4 <__pow5mult>:
 800b1c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1c8:	4615      	mov	r5, r2
 800b1ca:	f012 0203 	ands.w	r2, r2, #3
 800b1ce:	4606      	mov	r6, r0
 800b1d0:	460f      	mov	r7, r1
 800b1d2:	d007      	beq.n	800b1e4 <__pow5mult+0x20>
 800b1d4:	3a01      	subs	r2, #1
 800b1d6:	4c21      	ldr	r4, [pc, #132]	; (800b25c <__pow5mult+0x98>)
 800b1d8:	2300      	movs	r3, #0
 800b1da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b1de:	f7ff fec9 	bl	800af74 <__multadd>
 800b1e2:	4607      	mov	r7, r0
 800b1e4:	10ad      	asrs	r5, r5, #2
 800b1e6:	d035      	beq.n	800b254 <__pow5mult+0x90>
 800b1e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b1ea:	b93c      	cbnz	r4, 800b1fc <__pow5mult+0x38>
 800b1ec:	2010      	movs	r0, #16
 800b1ee:	f7fe facb 	bl	8009788 <malloc>
 800b1f2:	6270      	str	r0, [r6, #36]	; 0x24
 800b1f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b1f8:	6004      	str	r4, [r0, #0]
 800b1fa:	60c4      	str	r4, [r0, #12]
 800b1fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b200:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b204:	b94c      	cbnz	r4, 800b21a <__pow5mult+0x56>
 800b206:	f240 2171 	movw	r1, #625	; 0x271
 800b20a:	4630      	mov	r0, r6
 800b20c:	f7ff ff3b 	bl	800b086 <__i2b>
 800b210:	2300      	movs	r3, #0
 800b212:	f8c8 0008 	str.w	r0, [r8, #8]
 800b216:	4604      	mov	r4, r0
 800b218:	6003      	str	r3, [r0, #0]
 800b21a:	f04f 0800 	mov.w	r8, #0
 800b21e:	07eb      	lsls	r3, r5, #31
 800b220:	d50a      	bpl.n	800b238 <__pow5mult+0x74>
 800b222:	4639      	mov	r1, r7
 800b224:	4622      	mov	r2, r4
 800b226:	4630      	mov	r0, r6
 800b228:	f7ff ff36 	bl	800b098 <__multiply>
 800b22c:	4639      	mov	r1, r7
 800b22e:	4681      	mov	r9, r0
 800b230:	4630      	mov	r0, r6
 800b232:	f7ff fe88 	bl	800af46 <_Bfree>
 800b236:	464f      	mov	r7, r9
 800b238:	106d      	asrs	r5, r5, #1
 800b23a:	d00b      	beq.n	800b254 <__pow5mult+0x90>
 800b23c:	6820      	ldr	r0, [r4, #0]
 800b23e:	b938      	cbnz	r0, 800b250 <__pow5mult+0x8c>
 800b240:	4622      	mov	r2, r4
 800b242:	4621      	mov	r1, r4
 800b244:	4630      	mov	r0, r6
 800b246:	f7ff ff27 	bl	800b098 <__multiply>
 800b24a:	6020      	str	r0, [r4, #0]
 800b24c:	f8c0 8000 	str.w	r8, [r0]
 800b250:	4604      	mov	r4, r0
 800b252:	e7e4      	b.n	800b21e <__pow5mult+0x5a>
 800b254:	4638      	mov	r0, r7
 800b256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b25a:	bf00      	nop
 800b25c:	0800b9d8 	.word	0x0800b9d8

0800b260 <__lshift>:
 800b260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b264:	460c      	mov	r4, r1
 800b266:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b26a:	6923      	ldr	r3, [r4, #16]
 800b26c:	6849      	ldr	r1, [r1, #4]
 800b26e:	eb0a 0903 	add.w	r9, sl, r3
 800b272:	68a3      	ldr	r3, [r4, #8]
 800b274:	4607      	mov	r7, r0
 800b276:	4616      	mov	r6, r2
 800b278:	f109 0501 	add.w	r5, r9, #1
 800b27c:	42ab      	cmp	r3, r5
 800b27e:	db32      	blt.n	800b2e6 <__lshift+0x86>
 800b280:	4638      	mov	r0, r7
 800b282:	f7ff fe2c 	bl	800aede <_Balloc>
 800b286:	2300      	movs	r3, #0
 800b288:	4680      	mov	r8, r0
 800b28a:	f100 0114 	add.w	r1, r0, #20
 800b28e:	461a      	mov	r2, r3
 800b290:	4553      	cmp	r3, sl
 800b292:	db2b      	blt.n	800b2ec <__lshift+0x8c>
 800b294:	6920      	ldr	r0, [r4, #16]
 800b296:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b29a:	f104 0314 	add.w	r3, r4, #20
 800b29e:	f016 021f 	ands.w	r2, r6, #31
 800b2a2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b2a6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b2aa:	d025      	beq.n	800b2f8 <__lshift+0x98>
 800b2ac:	f1c2 0e20 	rsb	lr, r2, #32
 800b2b0:	2000      	movs	r0, #0
 800b2b2:	681e      	ldr	r6, [r3, #0]
 800b2b4:	468a      	mov	sl, r1
 800b2b6:	4096      	lsls	r6, r2
 800b2b8:	4330      	orrs	r0, r6
 800b2ba:	f84a 0b04 	str.w	r0, [sl], #4
 800b2be:	f853 0b04 	ldr.w	r0, [r3], #4
 800b2c2:	459c      	cmp	ip, r3
 800b2c4:	fa20 f00e 	lsr.w	r0, r0, lr
 800b2c8:	d814      	bhi.n	800b2f4 <__lshift+0x94>
 800b2ca:	6048      	str	r0, [r1, #4]
 800b2cc:	b108      	cbz	r0, 800b2d2 <__lshift+0x72>
 800b2ce:	f109 0502 	add.w	r5, r9, #2
 800b2d2:	3d01      	subs	r5, #1
 800b2d4:	4638      	mov	r0, r7
 800b2d6:	f8c8 5010 	str.w	r5, [r8, #16]
 800b2da:	4621      	mov	r1, r4
 800b2dc:	f7ff fe33 	bl	800af46 <_Bfree>
 800b2e0:	4640      	mov	r0, r8
 800b2e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2e6:	3101      	adds	r1, #1
 800b2e8:	005b      	lsls	r3, r3, #1
 800b2ea:	e7c7      	b.n	800b27c <__lshift+0x1c>
 800b2ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	e7cd      	b.n	800b290 <__lshift+0x30>
 800b2f4:	4651      	mov	r1, sl
 800b2f6:	e7dc      	b.n	800b2b2 <__lshift+0x52>
 800b2f8:	3904      	subs	r1, #4
 800b2fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2fe:	f841 2f04 	str.w	r2, [r1, #4]!
 800b302:	459c      	cmp	ip, r3
 800b304:	d8f9      	bhi.n	800b2fa <__lshift+0x9a>
 800b306:	e7e4      	b.n	800b2d2 <__lshift+0x72>

0800b308 <__mcmp>:
 800b308:	6903      	ldr	r3, [r0, #16]
 800b30a:	690a      	ldr	r2, [r1, #16]
 800b30c:	1a9b      	subs	r3, r3, r2
 800b30e:	b530      	push	{r4, r5, lr}
 800b310:	d10c      	bne.n	800b32c <__mcmp+0x24>
 800b312:	0092      	lsls	r2, r2, #2
 800b314:	3014      	adds	r0, #20
 800b316:	3114      	adds	r1, #20
 800b318:	1884      	adds	r4, r0, r2
 800b31a:	4411      	add	r1, r2
 800b31c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b320:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b324:	4295      	cmp	r5, r2
 800b326:	d003      	beq.n	800b330 <__mcmp+0x28>
 800b328:	d305      	bcc.n	800b336 <__mcmp+0x2e>
 800b32a:	2301      	movs	r3, #1
 800b32c:	4618      	mov	r0, r3
 800b32e:	bd30      	pop	{r4, r5, pc}
 800b330:	42a0      	cmp	r0, r4
 800b332:	d3f3      	bcc.n	800b31c <__mcmp+0x14>
 800b334:	e7fa      	b.n	800b32c <__mcmp+0x24>
 800b336:	f04f 33ff 	mov.w	r3, #4294967295
 800b33a:	e7f7      	b.n	800b32c <__mcmp+0x24>

0800b33c <__mdiff>:
 800b33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b340:	460d      	mov	r5, r1
 800b342:	4607      	mov	r7, r0
 800b344:	4611      	mov	r1, r2
 800b346:	4628      	mov	r0, r5
 800b348:	4614      	mov	r4, r2
 800b34a:	f7ff ffdd 	bl	800b308 <__mcmp>
 800b34e:	1e06      	subs	r6, r0, #0
 800b350:	d108      	bne.n	800b364 <__mdiff+0x28>
 800b352:	4631      	mov	r1, r6
 800b354:	4638      	mov	r0, r7
 800b356:	f7ff fdc2 	bl	800aede <_Balloc>
 800b35a:	2301      	movs	r3, #1
 800b35c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b364:	bfa4      	itt	ge
 800b366:	4623      	movge	r3, r4
 800b368:	462c      	movge	r4, r5
 800b36a:	4638      	mov	r0, r7
 800b36c:	6861      	ldr	r1, [r4, #4]
 800b36e:	bfa6      	itte	ge
 800b370:	461d      	movge	r5, r3
 800b372:	2600      	movge	r6, #0
 800b374:	2601      	movlt	r6, #1
 800b376:	f7ff fdb2 	bl	800aede <_Balloc>
 800b37a:	692b      	ldr	r3, [r5, #16]
 800b37c:	60c6      	str	r6, [r0, #12]
 800b37e:	6926      	ldr	r6, [r4, #16]
 800b380:	f105 0914 	add.w	r9, r5, #20
 800b384:	f104 0214 	add.w	r2, r4, #20
 800b388:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b38c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b390:	f100 0514 	add.w	r5, r0, #20
 800b394:	f04f 0e00 	mov.w	lr, #0
 800b398:	f852 ab04 	ldr.w	sl, [r2], #4
 800b39c:	f859 4b04 	ldr.w	r4, [r9], #4
 800b3a0:	fa1e f18a 	uxtah	r1, lr, sl
 800b3a4:	b2a3      	uxth	r3, r4
 800b3a6:	1ac9      	subs	r1, r1, r3
 800b3a8:	0c23      	lsrs	r3, r4, #16
 800b3aa:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b3ae:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b3b2:	b289      	uxth	r1, r1
 800b3b4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b3b8:	45c8      	cmp	r8, r9
 800b3ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b3be:	4694      	mov	ip, r2
 800b3c0:	f845 3b04 	str.w	r3, [r5], #4
 800b3c4:	d8e8      	bhi.n	800b398 <__mdiff+0x5c>
 800b3c6:	45bc      	cmp	ip, r7
 800b3c8:	d304      	bcc.n	800b3d4 <__mdiff+0x98>
 800b3ca:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b3ce:	b183      	cbz	r3, 800b3f2 <__mdiff+0xb6>
 800b3d0:	6106      	str	r6, [r0, #16]
 800b3d2:	e7c5      	b.n	800b360 <__mdiff+0x24>
 800b3d4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b3d8:	fa1e f381 	uxtah	r3, lr, r1
 800b3dc:	141a      	asrs	r2, r3, #16
 800b3de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b3e2:	b29b      	uxth	r3, r3
 800b3e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b3e8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b3ec:	f845 3b04 	str.w	r3, [r5], #4
 800b3f0:	e7e9      	b.n	800b3c6 <__mdiff+0x8a>
 800b3f2:	3e01      	subs	r6, #1
 800b3f4:	e7e9      	b.n	800b3ca <__mdiff+0x8e>

0800b3f6 <__d2b>:
 800b3f6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b3fa:	460e      	mov	r6, r1
 800b3fc:	2101      	movs	r1, #1
 800b3fe:	ec59 8b10 	vmov	r8, r9, d0
 800b402:	4615      	mov	r5, r2
 800b404:	f7ff fd6b 	bl	800aede <_Balloc>
 800b408:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b40c:	4607      	mov	r7, r0
 800b40e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b412:	bb34      	cbnz	r4, 800b462 <__d2b+0x6c>
 800b414:	9301      	str	r3, [sp, #4]
 800b416:	f1b8 0300 	subs.w	r3, r8, #0
 800b41a:	d027      	beq.n	800b46c <__d2b+0x76>
 800b41c:	a802      	add	r0, sp, #8
 800b41e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b422:	f7ff fe01 	bl	800b028 <__lo0bits>
 800b426:	9900      	ldr	r1, [sp, #0]
 800b428:	b1f0      	cbz	r0, 800b468 <__d2b+0x72>
 800b42a:	9a01      	ldr	r2, [sp, #4]
 800b42c:	f1c0 0320 	rsb	r3, r0, #32
 800b430:	fa02 f303 	lsl.w	r3, r2, r3
 800b434:	430b      	orrs	r3, r1
 800b436:	40c2      	lsrs	r2, r0
 800b438:	617b      	str	r3, [r7, #20]
 800b43a:	9201      	str	r2, [sp, #4]
 800b43c:	9b01      	ldr	r3, [sp, #4]
 800b43e:	61bb      	str	r3, [r7, #24]
 800b440:	2b00      	cmp	r3, #0
 800b442:	bf14      	ite	ne
 800b444:	2102      	movne	r1, #2
 800b446:	2101      	moveq	r1, #1
 800b448:	6139      	str	r1, [r7, #16]
 800b44a:	b1c4      	cbz	r4, 800b47e <__d2b+0x88>
 800b44c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b450:	4404      	add	r4, r0
 800b452:	6034      	str	r4, [r6, #0]
 800b454:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b458:	6028      	str	r0, [r5, #0]
 800b45a:	4638      	mov	r0, r7
 800b45c:	b003      	add	sp, #12
 800b45e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b462:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b466:	e7d5      	b.n	800b414 <__d2b+0x1e>
 800b468:	6179      	str	r1, [r7, #20]
 800b46a:	e7e7      	b.n	800b43c <__d2b+0x46>
 800b46c:	a801      	add	r0, sp, #4
 800b46e:	f7ff fddb 	bl	800b028 <__lo0bits>
 800b472:	9b01      	ldr	r3, [sp, #4]
 800b474:	617b      	str	r3, [r7, #20]
 800b476:	2101      	movs	r1, #1
 800b478:	6139      	str	r1, [r7, #16]
 800b47a:	3020      	adds	r0, #32
 800b47c:	e7e5      	b.n	800b44a <__d2b+0x54>
 800b47e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b482:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b486:	6030      	str	r0, [r6, #0]
 800b488:	6918      	ldr	r0, [r3, #16]
 800b48a:	f7ff fdae 	bl	800afea <__hi0bits>
 800b48e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b492:	e7e1      	b.n	800b458 <__d2b+0x62>

0800b494 <_calloc_r>:
 800b494:	b538      	push	{r3, r4, r5, lr}
 800b496:	fb02 f401 	mul.w	r4, r2, r1
 800b49a:	4621      	mov	r1, r4
 800b49c:	f7fe f9da 	bl	8009854 <_malloc_r>
 800b4a0:	4605      	mov	r5, r0
 800b4a2:	b118      	cbz	r0, 800b4ac <_calloc_r+0x18>
 800b4a4:	4622      	mov	r2, r4
 800b4a6:	2100      	movs	r1, #0
 800b4a8:	f7fe f97e 	bl	80097a8 <memset>
 800b4ac:	4628      	mov	r0, r5
 800b4ae:	bd38      	pop	{r3, r4, r5, pc}

0800b4b0 <__ssputs_r>:
 800b4b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4b4:	688e      	ldr	r6, [r1, #8]
 800b4b6:	429e      	cmp	r6, r3
 800b4b8:	4682      	mov	sl, r0
 800b4ba:	460c      	mov	r4, r1
 800b4bc:	4690      	mov	r8, r2
 800b4be:	4699      	mov	r9, r3
 800b4c0:	d837      	bhi.n	800b532 <__ssputs_r+0x82>
 800b4c2:	898a      	ldrh	r2, [r1, #12]
 800b4c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b4c8:	d031      	beq.n	800b52e <__ssputs_r+0x7e>
 800b4ca:	6825      	ldr	r5, [r4, #0]
 800b4cc:	6909      	ldr	r1, [r1, #16]
 800b4ce:	1a6f      	subs	r7, r5, r1
 800b4d0:	6965      	ldr	r5, [r4, #20]
 800b4d2:	2302      	movs	r3, #2
 800b4d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4d8:	fb95 f5f3 	sdiv	r5, r5, r3
 800b4dc:	f109 0301 	add.w	r3, r9, #1
 800b4e0:	443b      	add	r3, r7
 800b4e2:	429d      	cmp	r5, r3
 800b4e4:	bf38      	it	cc
 800b4e6:	461d      	movcc	r5, r3
 800b4e8:	0553      	lsls	r3, r2, #21
 800b4ea:	d530      	bpl.n	800b54e <__ssputs_r+0x9e>
 800b4ec:	4629      	mov	r1, r5
 800b4ee:	f7fe f9b1 	bl	8009854 <_malloc_r>
 800b4f2:	4606      	mov	r6, r0
 800b4f4:	b950      	cbnz	r0, 800b50c <__ssputs_r+0x5c>
 800b4f6:	230c      	movs	r3, #12
 800b4f8:	f8ca 3000 	str.w	r3, [sl]
 800b4fc:	89a3      	ldrh	r3, [r4, #12]
 800b4fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b502:	81a3      	strh	r3, [r4, #12]
 800b504:	f04f 30ff 	mov.w	r0, #4294967295
 800b508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b50c:	463a      	mov	r2, r7
 800b50e:	6921      	ldr	r1, [r4, #16]
 800b510:	f7ff fcd8 	bl	800aec4 <memcpy>
 800b514:	89a3      	ldrh	r3, [r4, #12]
 800b516:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b51a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b51e:	81a3      	strh	r3, [r4, #12]
 800b520:	6126      	str	r6, [r4, #16]
 800b522:	6165      	str	r5, [r4, #20]
 800b524:	443e      	add	r6, r7
 800b526:	1bed      	subs	r5, r5, r7
 800b528:	6026      	str	r6, [r4, #0]
 800b52a:	60a5      	str	r5, [r4, #8]
 800b52c:	464e      	mov	r6, r9
 800b52e:	454e      	cmp	r6, r9
 800b530:	d900      	bls.n	800b534 <__ssputs_r+0x84>
 800b532:	464e      	mov	r6, r9
 800b534:	4632      	mov	r2, r6
 800b536:	4641      	mov	r1, r8
 800b538:	6820      	ldr	r0, [r4, #0]
 800b53a:	f000 f91d 	bl	800b778 <memmove>
 800b53e:	68a3      	ldr	r3, [r4, #8]
 800b540:	1b9b      	subs	r3, r3, r6
 800b542:	60a3      	str	r3, [r4, #8]
 800b544:	6823      	ldr	r3, [r4, #0]
 800b546:	441e      	add	r6, r3
 800b548:	6026      	str	r6, [r4, #0]
 800b54a:	2000      	movs	r0, #0
 800b54c:	e7dc      	b.n	800b508 <__ssputs_r+0x58>
 800b54e:	462a      	mov	r2, r5
 800b550:	f000 f92b 	bl	800b7aa <_realloc_r>
 800b554:	4606      	mov	r6, r0
 800b556:	2800      	cmp	r0, #0
 800b558:	d1e2      	bne.n	800b520 <__ssputs_r+0x70>
 800b55a:	6921      	ldr	r1, [r4, #16]
 800b55c:	4650      	mov	r0, sl
 800b55e:	f7fe f92b 	bl	80097b8 <_free_r>
 800b562:	e7c8      	b.n	800b4f6 <__ssputs_r+0x46>

0800b564 <_svfiprintf_r>:
 800b564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b568:	461d      	mov	r5, r3
 800b56a:	898b      	ldrh	r3, [r1, #12]
 800b56c:	061f      	lsls	r7, r3, #24
 800b56e:	b09d      	sub	sp, #116	; 0x74
 800b570:	4680      	mov	r8, r0
 800b572:	460c      	mov	r4, r1
 800b574:	4616      	mov	r6, r2
 800b576:	d50f      	bpl.n	800b598 <_svfiprintf_r+0x34>
 800b578:	690b      	ldr	r3, [r1, #16]
 800b57a:	b96b      	cbnz	r3, 800b598 <_svfiprintf_r+0x34>
 800b57c:	2140      	movs	r1, #64	; 0x40
 800b57e:	f7fe f969 	bl	8009854 <_malloc_r>
 800b582:	6020      	str	r0, [r4, #0]
 800b584:	6120      	str	r0, [r4, #16]
 800b586:	b928      	cbnz	r0, 800b594 <_svfiprintf_r+0x30>
 800b588:	230c      	movs	r3, #12
 800b58a:	f8c8 3000 	str.w	r3, [r8]
 800b58e:	f04f 30ff 	mov.w	r0, #4294967295
 800b592:	e0c8      	b.n	800b726 <_svfiprintf_r+0x1c2>
 800b594:	2340      	movs	r3, #64	; 0x40
 800b596:	6163      	str	r3, [r4, #20]
 800b598:	2300      	movs	r3, #0
 800b59a:	9309      	str	r3, [sp, #36]	; 0x24
 800b59c:	2320      	movs	r3, #32
 800b59e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5a2:	2330      	movs	r3, #48	; 0x30
 800b5a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5a8:	9503      	str	r5, [sp, #12]
 800b5aa:	f04f 0b01 	mov.w	fp, #1
 800b5ae:	4637      	mov	r7, r6
 800b5b0:	463d      	mov	r5, r7
 800b5b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b5b6:	b10b      	cbz	r3, 800b5bc <_svfiprintf_r+0x58>
 800b5b8:	2b25      	cmp	r3, #37	; 0x25
 800b5ba:	d13e      	bne.n	800b63a <_svfiprintf_r+0xd6>
 800b5bc:	ebb7 0a06 	subs.w	sl, r7, r6
 800b5c0:	d00b      	beq.n	800b5da <_svfiprintf_r+0x76>
 800b5c2:	4653      	mov	r3, sl
 800b5c4:	4632      	mov	r2, r6
 800b5c6:	4621      	mov	r1, r4
 800b5c8:	4640      	mov	r0, r8
 800b5ca:	f7ff ff71 	bl	800b4b0 <__ssputs_r>
 800b5ce:	3001      	adds	r0, #1
 800b5d0:	f000 80a4 	beq.w	800b71c <_svfiprintf_r+0x1b8>
 800b5d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5d6:	4453      	add	r3, sl
 800b5d8:	9309      	str	r3, [sp, #36]	; 0x24
 800b5da:	783b      	ldrb	r3, [r7, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	f000 809d 	beq.w	800b71c <_svfiprintf_r+0x1b8>
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	f04f 32ff 	mov.w	r2, #4294967295
 800b5e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5ec:	9304      	str	r3, [sp, #16]
 800b5ee:	9307      	str	r3, [sp, #28]
 800b5f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5f4:	931a      	str	r3, [sp, #104]	; 0x68
 800b5f6:	462f      	mov	r7, r5
 800b5f8:	2205      	movs	r2, #5
 800b5fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b5fe:	4850      	ldr	r0, [pc, #320]	; (800b740 <_svfiprintf_r+0x1dc>)
 800b600:	f7f4 fdee 	bl	80001e0 <memchr>
 800b604:	9b04      	ldr	r3, [sp, #16]
 800b606:	b9d0      	cbnz	r0, 800b63e <_svfiprintf_r+0xda>
 800b608:	06d9      	lsls	r1, r3, #27
 800b60a:	bf44      	itt	mi
 800b60c:	2220      	movmi	r2, #32
 800b60e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b612:	071a      	lsls	r2, r3, #28
 800b614:	bf44      	itt	mi
 800b616:	222b      	movmi	r2, #43	; 0x2b
 800b618:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b61c:	782a      	ldrb	r2, [r5, #0]
 800b61e:	2a2a      	cmp	r2, #42	; 0x2a
 800b620:	d015      	beq.n	800b64e <_svfiprintf_r+0xea>
 800b622:	9a07      	ldr	r2, [sp, #28]
 800b624:	462f      	mov	r7, r5
 800b626:	2000      	movs	r0, #0
 800b628:	250a      	movs	r5, #10
 800b62a:	4639      	mov	r1, r7
 800b62c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b630:	3b30      	subs	r3, #48	; 0x30
 800b632:	2b09      	cmp	r3, #9
 800b634:	d94d      	bls.n	800b6d2 <_svfiprintf_r+0x16e>
 800b636:	b1b8      	cbz	r0, 800b668 <_svfiprintf_r+0x104>
 800b638:	e00f      	b.n	800b65a <_svfiprintf_r+0xf6>
 800b63a:	462f      	mov	r7, r5
 800b63c:	e7b8      	b.n	800b5b0 <_svfiprintf_r+0x4c>
 800b63e:	4a40      	ldr	r2, [pc, #256]	; (800b740 <_svfiprintf_r+0x1dc>)
 800b640:	1a80      	subs	r0, r0, r2
 800b642:	fa0b f000 	lsl.w	r0, fp, r0
 800b646:	4318      	orrs	r0, r3
 800b648:	9004      	str	r0, [sp, #16]
 800b64a:	463d      	mov	r5, r7
 800b64c:	e7d3      	b.n	800b5f6 <_svfiprintf_r+0x92>
 800b64e:	9a03      	ldr	r2, [sp, #12]
 800b650:	1d11      	adds	r1, r2, #4
 800b652:	6812      	ldr	r2, [r2, #0]
 800b654:	9103      	str	r1, [sp, #12]
 800b656:	2a00      	cmp	r2, #0
 800b658:	db01      	blt.n	800b65e <_svfiprintf_r+0xfa>
 800b65a:	9207      	str	r2, [sp, #28]
 800b65c:	e004      	b.n	800b668 <_svfiprintf_r+0x104>
 800b65e:	4252      	negs	r2, r2
 800b660:	f043 0302 	orr.w	r3, r3, #2
 800b664:	9207      	str	r2, [sp, #28]
 800b666:	9304      	str	r3, [sp, #16]
 800b668:	783b      	ldrb	r3, [r7, #0]
 800b66a:	2b2e      	cmp	r3, #46	; 0x2e
 800b66c:	d10c      	bne.n	800b688 <_svfiprintf_r+0x124>
 800b66e:	787b      	ldrb	r3, [r7, #1]
 800b670:	2b2a      	cmp	r3, #42	; 0x2a
 800b672:	d133      	bne.n	800b6dc <_svfiprintf_r+0x178>
 800b674:	9b03      	ldr	r3, [sp, #12]
 800b676:	1d1a      	adds	r2, r3, #4
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	9203      	str	r2, [sp, #12]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	bfb8      	it	lt
 800b680:	f04f 33ff 	movlt.w	r3, #4294967295
 800b684:	3702      	adds	r7, #2
 800b686:	9305      	str	r3, [sp, #20]
 800b688:	4d2e      	ldr	r5, [pc, #184]	; (800b744 <_svfiprintf_r+0x1e0>)
 800b68a:	7839      	ldrb	r1, [r7, #0]
 800b68c:	2203      	movs	r2, #3
 800b68e:	4628      	mov	r0, r5
 800b690:	f7f4 fda6 	bl	80001e0 <memchr>
 800b694:	b138      	cbz	r0, 800b6a6 <_svfiprintf_r+0x142>
 800b696:	2340      	movs	r3, #64	; 0x40
 800b698:	1b40      	subs	r0, r0, r5
 800b69a:	fa03 f000 	lsl.w	r0, r3, r0
 800b69e:	9b04      	ldr	r3, [sp, #16]
 800b6a0:	4303      	orrs	r3, r0
 800b6a2:	3701      	adds	r7, #1
 800b6a4:	9304      	str	r3, [sp, #16]
 800b6a6:	7839      	ldrb	r1, [r7, #0]
 800b6a8:	4827      	ldr	r0, [pc, #156]	; (800b748 <_svfiprintf_r+0x1e4>)
 800b6aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6ae:	2206      	movs	r2, #6
 800b6b0:	1c7e      	adds	r6, r7, #1
 800b6b2:	f7f4 fd95 	bl	80001e0 <memchr>
 800b6b6:	2800      	cmp	r0, #0
 800b6b8:	d038      	beq.n	800b72c <_svfiprintf_r+0x1c8>
 800b6ba:	4b24      	ldr	r3, [pc, #144]	; (800b74c <_svfiprintf_r+0x1e8>)
 800b6bc:	bb13      	cbnz	r3, 800b704 <_svfiprintf_r+0x1a0>
 800b6be:	9b03      	ldr	r3, [sp, #12]
 800b6c0:	3307      	adds	r3, #7
 800b6c2:	f023 0307 	bic.w	r3, r3, #7
 800b6c6:	3308      	adds	r3, #8
 800b6c8:	9303      	str	r3, [sp, #12]
 800b6ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6cc:	444b      	add	r3, r9
 800b6ce:	9309      	str	r3, [sp, #36]	; 0x24
 800b6d0:	e76d      	b.n	800b5ae <_svfiprintf_r+0x4a>
 800b6d2:	fb05 3202 	mla	r2, r5, r2, r3
 800b6d6:	2001      	movs	r0, #1
 800b6d8:	460f      	mov	r7, r1
 800b6da:	e7a6      	b.n	800b62a <_svfiprintf_r+0xc6>
 800b6dc:	2300      	movs	r3, #0
 800b6de:	3701      	adds	r7, #1
 800b6e0:	9305      	str	r3, [sp, #20]
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	250a      	movs	r5, #10
 800b6e6:	4638      	mov	r0, r7
 800b6e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6ec:	3a30      	subs	r2, #48	; 0x30
 800b6ee:	2a09      	cmp	r2, #9
 800b6f0:	d903      	bls.n	800b6fa <_svfiprintf_r+0x196>
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d0c8      	beq.n	800b688 <_svfiprintf_r+0x124>
 800b6f6:	9105      	str	r1, [sp, #20]
 800b6f8:	e7c6      	b.n	800b688 <_svfiprintf_r+0x124>
 800b6fa:	fb05 2101 	mla	r1, r5, r1, r2
 800b6fe:	2301      	movs	r3, #1
 800b700:	4607      	mov	r7, r0
 800b702:	e7f0      	b.n	800b6e6 <_svfiprintf_r+0x182>
 800b704:	ab03      	add	r3, sp, #12
 800b706:	9300      	str	r3, [sp, #0]
 800b708:	4622      	mov	r2, r4
 800b70a:	4b11      	ldr	r3, [pc, #68]	; (800b750 <_svfiprintf_r+0x1ec>)
 800b70c:	a904      	add	r1, sp, #16
 800b70e:	4640      	mov	r0, r8
 800b710:	f7fe f98e 	bl	8009a30 <_printf_float>
 800b714:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b718:	4681      	mov	r9, r0
 800b71a:	d1d6      	bne.n	800b6ca <_svfiprintf_r+0x166>
 800b71c:	89a3      	ldrh	r3, [r4, #12]
 800b71e:	065b      	lsls	r3, r3, #25
 800b720:	f53f af35 	bmi.w	800b58e <_svfiprintf_r+0x2a>
 800b724:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b726:	b01d      	add	sp, #116	; 0x74
 800b728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b72c:	ab03      	add	r3, sp, #12
 800b72e:	9300      	str	r3, [sp, #0]
 800b730:	4622      	mov	r2, r4
 800b732:	4b07      	ldr	r3, [pc, #28]	; (800b750 <_svfiprintf_r+0x1ec>)
 800b734:	a904      	add	r1, sp, #16
 800b736:	4640      	mov	r0, r8
 800b738:	f7fe fc30 	bl	8009f9c <_printf_i>
 800b73c:	e7ea      	b.n	800b714 <_svfiprintf_r+0x1b0>
 800b73e:	bf00      	nop
 800b740:	0800b9e4 	.word	0x0800b9e4
 800b744:	0800b9ea 	.word	0x0800b9ea
 800b748:	0800b9ee 	.word	0x0800b9ee
 800b74c:	08009a31 	.word	0x08009a31
 800b750:	0800b4b1 	.word	0x0800b4b1

0800b754 <__ascii_mbtowc>:
 800b754:	b082      	sub	sp, #8
 800b756:	b901      	cbnz	r1, 800b75a <__ascii_mbtowc+0x6>
 800b758:	a901      	add	r1, sp, #4
 800b75a:	b142      	cbz	r2, 800b76e <__ascii_mbtowc+0x1a>
 800b75c:	b14b      	cbz	r3, 800b772 <__ascii_mbtowc+0x1e>
 800b75e:	7813      	ldrb	r3, [r2, #0]
 800b760:	600b      	str	r3, [r1, #0]
 800b762:	7812      	ldrb	r2, [r2, #0]
 800b764:	1c10      	adds	r0, r2, #0
 800b766:	bf18      	it	ne
 800b768:	2001      	movne	r0, #1
 800b76a:	b002      	add	sp, #8
 800b76c:	4770      	bx	lr
 800b76e:	4610      	mov	r0, r2
 800b770:	e7fb      	b.n	800b76a <__ascii_mbtowc+0x16>
 800b772:	f06f 0001 	mvn.w	r0, #1
 800b776:	e7f8      	b.n	800b76a <__ascii_mbtowc+0x16>

0800b778 <memmove>:
 800b778:	4288      	cmp	r0, r1
 800b77a:	b510      	push	{r4, lr}
 800b77c:	eb01 0302 	add.w	r3, r1, r2
 800b780:	d807      	bhi.n	800b792 <memmove+0x1a>
 800b782:	1e42      	subs	r2, r0, #1
 800b784:	4299      	cmp	r1, r3
 800b786:	d00a      	beq.n	800b79e <memmove+0x26>
 800b788:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b78c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b790:	e7f8      	b.n	800b784 <memmove+0xc>
 800b792:	4283      	cmp	r3, r0
 800b794:	d9f5      	bls.n	800b782 <memmove+0xa>
 800b796:	1881      	adds	r1, r0, r2
 800b798:	1ad2      	subs	r2, r2, r3
 800b79a:	42d3      	cmn	r3, r2
 800b79c:	d100      	bne.n	800b7a0 <memmove+0x28>
 800b79e:	bd10      	pop	{r4, pc}
 800b7a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b7a4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b7a8:	e7f7      	b.n	800b79a <memmove+0x22>

0800b7aa <_realloc_r>:
 800b7aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ac:	4607      	mov	r7, r0
 800b7ae:	4614      	mov	r4, r2
 800b7b0:	460e      	mov	r6, r1
 800b7b2:	b921      	cbnz	r1, 800b7be <_realloc_r+0x14>
 800b7b4:	4611      	mov	r1, r2
 800b7b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b7ba:	f7fe b84b 	b.w	8009854 <_malloc_r>
 800b7be:	b922      	cbnz	r2, 800b7ca <_realloc_r+0x20>
 800b7c0:	f7fd fffa 	bl	80097b8 <_free_r>
 800b7c4:	4625      	mov	r5, r4
 800b7c6:	4628      	mov	r0, r5
 800b7c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7ca:	f000 f821 	bl	800b810 <_malloc_usable_size_r>
 800b7ce:	42a0      	cmp	r0, r4
 800b7d0:	d20f      	bcs.n	800b7f2 <_realloc_r+0x48>
 800b7d2:	4621      	mov	r1, r4
 800b7d4:	4638      	mov	r0, r7
 800b7d6:	f7fe f83d 	bl	8009854 <_malloc_r>
 800b7da:	4605      	mov	r5, r0
 800b7dc:	2800      	cmp	r0, #0
 800b7de:	d0f2      	beq.n	800b7c6 <_realloc_r+0x1c>
 800b7e0:	4631      	mov	r1, r6
 800b7e2:	4622      	mov	r2, r4
 800b7e4:	f7ff fb6e 	bl	800aec4 <memcpy>
 800b7e8:	4631      	mov	r1, r6
 800b7ea:	4638      	mov	r0, r7
 800b7ec:	f7fd ffe4 	bl	80097b8 <_free_r>
 800b7f0:	e7e9      	b.n	800b7c6 <_realloc_r+0x1c>
 800b7f2:	4635      	mov	r5, r6
 800b7f4:	e7e7      	b.n	800b7c6 <_realloc_r+0x1c>

0800b7f6 <__ascii_wctomb>:
 800b7f6:	b149      	cbz	r1, 800b80c <__ascii_wctomb+0x16>
 800b7f8:	2aff      	cmp	r2, #255	; 0xff
 800b7fa:	bf85      	ittet	hi
 800b7fc:	238a      	movhi	r3, #138	; 0x8a
 800b7fe:	6003      	strhi	r3, [r0, #0]
 800b800:	700a      	strbls	r2, [r1, #0]
 800b802:	f04f 30ff 	movhi.w	r0, #4294967295
 800b806:	bf98      	it	ls
 800b808:	2001      	movls	r0, #1
 800b80a:	4770      	bx	lr
 800b80c:	4608      	mov	r0, r1
 800b80e:	4770      	bx	lr

0800b810 <_malloc_usable_size_r>:
 800b810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b814:	1f18      	subs	r0, r3, #4
 800b816:	2b00      	cmp	r3, #0
 800b818:	bfbc      	itt	lt
 800b81a:	580b      	ldrlt	r3, [r1, r0]
 800b81c:	18c0      	addlt	r0, r0, r3
 800b81e:	4770      	bx	lr

0800b820 <_init>:
 800b820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b822:	bf00      	nop
 800b824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b826:	bc08      	pop	{r3}
 800b828:	469e      	mov	lr, r3
 800b82a:	4770      	bx	lr

0800b82c <_fini>:
 800b82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b82e:	bf00      	nop
 800b830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b832:	bc08      	pop	{r3}
 800b834:	469e      	mov	lr, r3
 800b836:	4770      	bx	lr


fc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd60  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  0800cef0  0800cef0  0001cef0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1f0  0800d1f0  00020358  2**0
                  CONTENTS
  4 .ARM          00000008  0800d1f0  0800d1f0  0001d1f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1f8  0800d1f8  00020358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1f8  0800d1f8  0001d1f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d1fc  0800d1fc  0001d1fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  0800d200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c74  20000358  0800d558  00020358  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  20001fcc  0800d558  00021fcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d40d  00000000  00000000  00020388  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a55  00000000  00000000  0003d795  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014a8  00000000  00000000  000411f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001318  00000000  00000000  00042698  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023481  00000000  00000000  000439b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000131c1  00000000  00000000  00066e31  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c40b0  00000000  00000000  00079ff2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013e0a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006094  00000000  00000000  0013e120  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000358 	.word	0x20000358
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ced8 	.word	0x0800ced8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000035c 	.word	0x2000035c
 80001cc:	0800ced8 	.word	0x0800ced8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <BMI088_I2C_Read_CHIP_IDS>:

#include "BMI088.h"

/* READ ACCEL AND GYRO CHIP IDS */
HAL_StatusTypeDef BMI088_I2C_Read_CHIP_IDS(I2C_HandleTypeDef *hi2c)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af04      	add	r7, sp, #16
 8000f4e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef ret; // HAL Status Value
	uint8_t buf[4];        // Rx Buffer

	ret    = HAL_OK;
 8000f50:	2300      	movs	r3, #0
 8000f52:	73fb      	strb	r3, [r7, #15]
    ret = (ret | HAL_I2C_Mem_Read(hi2c, BMI088_ACC_ADDR << 1, ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY));
 8000f54:	f04f 33ff 	mov.w	r3, #4294967295
 8000f58:	9302      	str	r3, [sp, #8]
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	9301      	str	r3, [sp, #4]
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	2301      	movs	r3, #1
 8000f66:	2200      	movs	r2, #0
 8000f68:	2130      	movs	r1, #48	; 0x30
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f002 fde0 	bl	8003b30 <HAL_I2C_Mem_Read>
 8000f70:	4603      	mov	r3, r0
 8000f72:	461a      	mov	r2, r3
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	73fb      	strb	r3, [r7, #15]
	if ( buf[0] != BMI088_ACC_ID ){ ret = HAL_ERROR; }
 8000f7a:	7a3b      	ldrb	r3, [r7, #8]
 8000f7c:	2b1e      	cmp	r3, #30
 8000f7e:	d001      	beq.n	8000f84 <BMI088_I2C_Read_CHIP_IDS+0x3c>
 8000f80:	2301      	movs	r3, #1
 8000f82:	73fb      	strb	r3, [r7, #15]
	ret = (ret | HAL_I2C_Mem_Read(hi2c, BMI088_GYRO_ADDR << 1, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY));
 8000f84:	f04f 33ff 	mov.w	r3, #4294967295
 8000f88:	9302      	str	r3, [sp, #8]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	9301      	str	r3, [sp, #4]
 8000f8e:	f107 0308 	add.w	r3, r7, #8
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	2301      	movs	r3, #1
 8000f96:	2200      	movs	r2, #0
 8000f98:	21d0      	movs	r1, #208	; 0xd0
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f002 fdc8 	bl	8003b30 <HAL_I2C_Mem_Read>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	73fb      	strb	r3, [r7, #15]
	if ( buf[0] != BMI088_GYRO_ID ){ ret = HAL_ERROR; }
 8000faa:	7a3b      	ldrb	r3, [r7, #8]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d001      	beq.n	8000fb4 <BMI088_I2C_Read_CHIP_IDS+0x6c>
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	73fb      	strb	r3, [r7, #15]

	return ret;
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <BMI088_I2C_GYRO_INIT>:

/* CUSTOM GYROSCOPE SETTING INITIALIZATION */
HAL_StatusTypeDef BMI088_I2C_GYRO_INIT(I2C_HandleTypeDef *hi2c)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b084      	sub	sp, #16
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
	 * WRITING BACK TO THE REGISTER
	 */

	HAL_StatusTypeDef ret;
	uint8_t buf[1]; // Tx/Rx Buffer
	ret = HAL_OK;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	73fb      	strb	r3, [r7, #15]
	// ret = (ret | BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, GYRO_RANGE, buf));

	// SET GYROSCOPE DATA RATE AND BANDWIDTH
	// DATA RATE: [1000 HZ]    400 HZ
	// BANDWIDTH: [116 Hz]     47 HZ
	buf[0] = 0x82;
 8000fca:	2382      	movs	r3, #130	; 0x82
 8000fcc:	733b      	strb	r3, [r7, #12]
	ret    |= BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, GYRO_BANDWIDTH, buf);
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	2210      	movs	r2, #16
 8000fd4:	2168      	movs	r1, #104	; 0x68
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f000 f878 	bl	80010cc <BMI088_I2C_Reg_Write>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	461a      	mov	r2, r3
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	73fb      	strb	r3, [r7, #15]

	// SET GYROSCOPE INT3 MODE TO PUSH-PULL
	ret    |= BMI088_I2C_Reg_Read(hi2c, BMI088_GYRO_ADDR, INT3_INT4_IO_CONF, buf);
 8000fe6:	f107 030c 	add.w	r3, r7, #12
 8000fea:	2216      	movs	r2, #22
 8000fec:	2168      	movs	r1, #104	; 0x68
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 f88b 	bl	800110a <BMI088_I2C_Reg_Read>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	73fb      	strb	r3, [r7, #15]
	buf[0] &= 0xFD;
 8000ffe:	7b3b      	ldrb	r3, [r7, #12]
 8001000:	f023 0302 	bic.w	r3, r3, #2
 8001004:	b2db      	uxtb	r3, r3
 8001006:	733b      	strb	r3, [r7, #12]
	ret    |= BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, INT3_INT4_IO_CONF, buf);
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	2216      	movs	r2, #22
 800100e:	2168      	movs	r1, #104	; 0x68
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f000 f85b 	bl	80010cc <BMI088_I2C_Reg_Write>
 8001016:	4603      	mov	r3, r0
 8001018:	461a      	mov	r2, r3
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	4313      	orrs	r3, r2
 800101e:	73fb      	strb	r3, [r7, #15]

	// MAP GYROSCOPE DATA-READY INTERRUPT TO INT3
	ret    |= BMI088_I2C_Reg_Read(hi2c, BMI088_GYRO_ADDR, INT3_INT4_IO_MAP, buf);
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	2218      	movs	r2, #24
 8001026:	2168      	movs	r1, #104	; 0x68
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f000 f86e 	bl	800110a <BMI088_I2C_Reg_Read>
 800102e:	4603      	mov	r3, r0
 8001030:	461a      	mov	r2, r3
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	4313      	orrs	r3, r2
 8001036:	73fb      	strb	r3, [r7, #15]
	buf[0] |= 0x01;
 8001038:	7b3b      	ldrb	r3, [r7, #12]
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	b2db      	uxtb	r3, r3
 8001040:	733b      	strb	r3, [r7, #12]
	ret    |= BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, INT3_INT4_IO_MAP, buf);
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	2218      	movs	r2, #24
 8001048:	2168      	movs	r1, #104	; 0x68
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 f83e 	bl	80010cc <BMI088_I2C_Reg_Write>
 8001050:	4603      	mov	r3, r0
 8001052:	461a      	mov	r2, r3
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	4313      	orrs	r3, r2
 8001058:	73fb      	strb	r3, [r7, #15]

	// ENABLE GYROSCOPE DATA-READY INTERRUPT
	ret    |= BMI088_I2C_Reg_Read(hi2c, BMI088_GYRO_ADDR, GYRO_INT_CTRL, buf);
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	2215      	movs	r2, #21
 8001060:	2168      	movs	r1, #104	; 0x68
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 f851 	bl	800110a <BMI088_I2C_Reg_Read>
 8001068:	4603      	mov	r3, r0
 800106a:	461a      	mov	r2, r3
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	4313      	orrs	r3, r2
 8001070:	73fb      	strb	r3, [r7, #15]
	buf[0] |= 0x80;
 8001072:	7b3b      	ldrb	r3, [r7, #12]
 8001074:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001078:	b2db      	uxtb	r3, r3
 800107a:	733b      	strb	r3, [r7, #12]
	ret    |= BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, GYRO_INT_CTRL, buf);
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	2215      	movs	r2, #21
 8001082:	2168      	movs	r1, #104	; 0x68
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f821 	bl	80010cc <BMI088_I2C_Reg_Write>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	4313      	orrs	r3, r2
 8001092:	73fb      	strb	r3, [r7, #15]

	return ret;
 8001094:	7bfb      	ldrb	r3, [r7, #15]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <BMI088_I2C_Read_Gyro>:
	return HAL_I2C_Mem_Read_IT(hi2c, BMI088_ACC_ADDR << 1, ACC_DATA, I2C_MEMADD_SIZE_8BIT, pData, 6);
}

/* READ ALL GYROSCOPE DATA IN POLLING MODE */
HAL_StatusTypeDef BMI088_I2C_Read_Gyro(I2C_HandleTypeDef *hi2c, uint8_t *pData)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b086      	sub	sp, #24
 80010a2:	af04      	add	r7, sp, #16
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	6039      	str	r1, [r7, #0]
	return HAL_I2C_Mem_Read(hi2c, BMI088_GYRO_ADDR << 1, GYRO_DATA, I2C_MEMADD_SIZE_8BIT, pData, 6, HAL_MAX_DELAY);
 80010a8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ac:	9302      	str	r3, [sp, #8]
 80010ae:	2306      	movs	r3, #6
 80010b0:	9301      	str	r3, [sp, #4]
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2301      	movs	r3, #1
 80010b8:	2202      	movs	r2, #2
 80010ba:	21d0      	movs	r1, #208	; 0xd0
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f002 fd37 	bl	8003b30 <HAL_I2C_Mem_Read>
 80010c2:	4603      	mov	r3, r0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <BMI088_I2C_Reg_Write>:
	return HAL_I2C_Mem_Read_IT(hi2c, BMI088_GYRO_ADDR << 1, GYRO_DATA, I2C_MEMADD_SIZE_8BIT, pData, 6);
}

/* WRITE REGISTER */
HAL_StatusTypeDef BMI088_I2C_Reg_Write(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t mem_addr, uint8_t *pData)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af04      	add	r7, sp, #16
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	460b      	mov	r3, r1
 80010d8:	72fb      	strb	r3, [r7, #11]
 80010da:	4613      	mov	r3, r2
 80010dc:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Write(hi2c, dev_addr << 1, mem_addr, I2C_MEMADD_SIZE_8BIT, pData, 1, HAL_MAX_DELAY);
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	b299      	uxth	r1, r3
 80010e6:	7abb      	ldrb	r3, [r7, #10]
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	9302      	str	r3, [sp, #8]
 80010f0:	2301      	movs	r3, #1
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2301      	movs	r3, #1
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f002 fc1e 	bl	800393c <HAL_I2C_Mem_Write>
 8001100:	4603      	mov	r3, r0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <BMI088_I2C_Reg_Read>:

/* READ REGISTER */
HAL_StatusTypeDef BMI088_I2C_Reg_Read(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t mem_addr, uint8_t *pData)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b088      	sub	sp, #32
 800110e:	af04      	add	r7, sp, #16
 8001110:	60f8      	str	r0, [r7, #12]
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	72fb      	strb	r3, [r7, #11]
 8001118:	4613      	mov	r3, r2
 800111a:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(hi2c, dev_addr << 1, mem_addr, I2C_MEMADD_SIZE_8BIT, pData, 1, HAL_MAX_DELAY);
 800111c:	7afb      	ldrb	r3, [r7, #11]
 800111e:	b29b      	uxth	r3, r3
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	b299      	uxth	r1, r3
 8001124:	7abb      	ldrb	r3, [r7, #10]
 8001126:	b29a      	uxth	r2, r3
 8001128:	f04f 33ff 	mov.w	r3, #4294967295
 800112c:	9302      	str	r3, [sp, #8]
 800112e:	2301      	movs	r3, #1
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2301      	movs	r3, #1
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	f002 fcf9 	bl	8003b30 <HAL_I2C_Mem_Read>
 800113e:	4603      	mov	r3, r0
}
 8001140:	4618      	mov	r0, r3
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <PID3_Init>:

#include "PID3.h"

/* INITIALIZATION FUNCTION */
PID_StatusTypeDef PID3_Init(PID3 *pid, const float *p, const float *i, const float*d)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
 8001154:	603b      	str	r3, [r7, #0]
	/* SET PID GAINS */
	pid->Kp[0] = p[0]; pid->Kp[1] = p[1]; pid->Kp[2] = p[2];
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	611a      	str	r2, [r3, #16]
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	689a      	ldr	r2, [r3, #8]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	615a      	str	r2, [r3, #20]

	pid->Ki[0] = i[0]; pid->Ki[1] = i[1]; pid->Ki[2] = i[2];
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	619a      	str	r2, [r3, #24]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	61da      	str	r2, [r3, #28]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689a      	ldr	r2, [r3, #8]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	621a      	str	r2, [r3, #32]

	pid->Kd[0] = d[0]; pid->Kd[1] = d[1]; pid->Kd[2] = d[2];
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	625a      	str	r2, [r3, #36]	; 0x24
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	629a      	str	r2, [r3, #40]	; 0x28
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	689a      	ldr	r2, [r3, #8]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	62da      	str	r2, [r3, #44]	; 0x2c

	/* CLEAR IMPORTANT VARIABLES */
	pid->out[0] = 0.0; pid->out[1] = 0.0; pid->out[2] = 0.0;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f04f 0200 	mov.w	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f04f 0200 	mov.w	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]

	pid->integral[0] = 0.0; pid->integral[1] = 0.0; pid->integral[2] = 0.0;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	65da      	str	r2, [r3, #92]	; 0x5c
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f04f 0200 	mov.w	r2, #0
 80011c4:	661a      	str	r2, [r3, #96]	; 0x60
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f04f 0200 	mov.w	r2, #0
 80011cc:	665a      	str	r2, [r3, #100]	; 0x64

	pid->prevError[0] = 0.0; pid->prevError[1] = 0.0; pid->prevError[2] = 0.0;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f04f 0200 	mov.w	r2, #0
 80011d4:	669a      	str	r2, [r3, #104]	; 0x68
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f04f 0200 	mov.w	r2, #0
 80011dc:	66da      	str	r2, [r3, #108]	; 0x6c
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	671a      	str	r2, [r3, #112]	; 0x70

	pid->prevRot[0] = 0.0; pid->prevRot[1] = 0.0; pid->prevRot[2] = 0.0;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f04f 0200 	mov.w	r2, #0
 80011f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	/* SET CLAMPS */
	pid->intLimMax = PID_MAXINT;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4a09      	ldr	r2, [pc, #36]	; (800122c <PID3_Init+0xe4>)
 8001208:	631a      	str	r2, [r3, #48]	; 0x30
	pid->intLimMin = PID_MININT;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4a08      	ldr	r2, [pc, #32]	; (8001230 <PID3_Init+0xe8>)
 800120e:	635a      	str	r2, [r3, #52]	; 0x34
	pid->outLimMax = PID_MAXOUT;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4a06      	ldr	r2, [pc, #24]	; (800122c <PID3_Init+0xe4>)
 8001214:	639a      	str	r2, [r3, #56]	; 0x38
	pid->outLimMin = PID_MINOUT;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	4a05      	ldr	r2, [pc, #20]	; (8001230 <PID3_Init+0xe8>)
 800121a:	63da      	str	r2, [r3, #60]	; 0x3c

	return PID_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	447a0000 	.word	0x447a0000
 8001230:	c47a0000 	.word	0xc47a0000

08001234 <PID3_Clear>:

/* CLEAR STATE FUNCTION */
PID_StatusTypeDef PID3_Clear(PID3 *pid)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	/* CLEAR IMPORTANT VARIABLES */
	pid->out[0] = 0.0; pid->out[1] = 0.0; pid->out[2] = 0.0;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f04f 0200 	mov.w	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f04f 0200 	mov.w	r2, #0
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	609a      	str	r2, [r3, #8]

	pid->integral[0] = 0.0; pid->integral[1] = 0.0; pid->integral[2] = 0.0;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	65da      	str	r2, [r3, #92]	; 0x5c
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f04f 0200 	mov.w	r2, #0
 8001262:	661a      	str	r2, [r3, #96]	; 0x60
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f04f 0200 	mov.w	r2, #0
 800126a:	665a      	str	r2, [r3, #100]	; 0x64

	pid->prevError[0] = 0.0; pid->prevError[1] = 0.0; pid->prevError[2] = 0.0;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	669a      	str	r2, [r3, #104]	; 0x68
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f04f 0200 	mov.w	r2, #0
 800127a:	66da      	str	r2, [r3, #108]	; 0x6c
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	671a      	str	r2, [r3, #112]	; 0x70

	pid->prevRot[0] = 0.0; pid->prevRot[1] = 0.0; pid->prevRot[2] = 0.0;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f04f 0200 	mov.w	r2, #0
 800128a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f04f 0200 	mov.w	r2, #0
 8001294:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f04f 0200 	mov.w	r2, #0
 800129e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	return PID_OK;
 80012a2:	2300      	movs	r3, #0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <PID3_Set_Tau>:

/* SET FILTER TIME CONSTANT */
PID_StatusTypeDef PID3_Set_Tau(PID3 *pid, float t)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	ed87 0a00 	vstr	s0, [r7]
	if (t < 0.0) { return PID_ERROR; }
 80012bc:	edd7 7a00 	vldr	s15, [r7]
 80012c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c8:	d501      	bpl.n	80012ce <PID3_Set_Tau+0x1e>
 80012ca:	2301      	movs	r3, #1
 80012cc:	e003      	b.n	80012d6 <PID3_Set_Tau+0x26>

	pid->tau = t;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	641a      	str	r2, [r3, #64]	; 0x40

	return PID_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <PID3_Set_Integrator_Limit>:

/* SET INTEGRATOR LIMIT */
PID_StatusTypeDef PID3_Set_Integrator_Limit(PID3 *pid, float min, float max)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b085      	sub	sp, #20
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	60f8      	str	r0, [r7, #12]
 80012ea:	ed87 0a02 	vstr	s0, [r7, #8]
 80012ee:	edc7 0a01 	vstr	s1, [r7, #4]
	if ((min >= 0.0) | (max <= 0.0)) { return PID_ERROR; }
 80012f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80012f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fe:	bfac      	ite	ge
 8001300:	2301      	movge	r3, #1
 8001302:	2300      	movlt	r3, #0
 8001304:	b2da      	uxtb	r2, r3
 8001306:	edd7 7a01 	vldr	s15, [r7, #4]
 800130a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800130e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001312:	bf94      	ite	ls
 8001314:	2301      	movls	r3, #1
 8001316:	2300      	movhi	r3, #0
 8001318:	b2db      	uxtb	r3, r3
 800131a:	4313      	orrs	r3, r2
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <PID3_Set_Integrator_Limit+0x44>
 8001322:	2301      	movs	r3, #1
 8001324:	e006      	b.n	8001334 <PID3_Set_Integrator_Limit+0x52>

	pid->intLimMax = max;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	631a      	str	r2, [r3, #48]	; 0x30
	pid->intLimMin = min;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	635a      	str	r2, [r3, #52]	; 0x34

	return PID_OK;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <PID3_Set_Output_Limit>:


/* SET OUTPUT LIMIT */
PID_StatusTypeDef PID3_Set_Output_Limit(PID3 *pid, float min, float max)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	ed87 0a02 	vstr	s0, [r7, #8]
 800134c:	edc7 0a01 	vstr	s1, [r7, #4]
	if ((min >= 0.0) | (max <= 0.0)) { return PID_ERROR; }
 8001350:	edd7 7a02 	vldr	s15, [r7, #8]
 8001354:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135c:	bfac      	ite	ge
 800135e:	2301      	movge	r3, #1
 8001360:	2300      	movlt	r3, #0
 8001362:	b2da      	uxtb	r2, r3
 8001364:	edd7 7a01 	vldr	s15, [r7, #4]
 8001368:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800136c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001370:	bf94      	ite	ls
 8001372:	2301      	movls	r3, #1
 8001374:	2300      	movhi	r3, #0
 8001376:	b2db      	uxtb	r3, r3
 8001378:	4313      	orrs	r3, r2
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <PID3_Set_Output_Limit+0x44>
 8001380:	2301      	movs	r3, #1
 8001382:	e006      	b.n	8001392 <PID3_Set_Output_Limit+0x52>

	pid->outLimMax = max;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	639a      	str	r2, [r3, #56]	; 0x38
	pid->outLimMin = min;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	68ba      	ldr	r2, [r7, #8]
 800138e:	63da      	str	r2, [r3, #60]	; 0x3c

	return PID_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <PID3_Update>:

/* ADVANCE TIMESTEP FUNCTION */
PID_StatusTypeDef PID3_Update(PID3 *pid, float *set, float *rot, float T)
{
 80013a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013a4:	b086      	sub	sp, #24
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
 80013ae:	ed87 0a00 	vstr	s0, [r7]
	// FOR EACH AXIS
	for (int i = 0; i < 3; i++)
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	e1d6      	b.n	8001766 <PID3_Update+0x3c6>
	{
		// CALCULATE ERROR
		pid->error[i] = set[i] - rot[i];
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	68ba      	ldr	r2, [r7, #8]
 80013be:	4413      	add	r3, r2
 80013c0:	ed93 7a00 	vldr	s14, [r3]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	4413      	add	r3, r2
 80013cc:	edd3 7a00 	vldr	s15, [r3]
 80013d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	3310      	adds	r3, #16
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	3304      	adds	r3, #4
 80013e0:	edc3 7a00 	vstr	s15, [r3]

		// CALCULATE PROPORTIONAL TERM
		pid->proportional[i] = pid->Kp[i] * pid->error[i];
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	3302      	adds	r3, #2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	3304      	adds	r3, #4
 80013f0:	ed93 7a00 	vldr	s14, [r3]
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	3310      	adds	r3, #16
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	3304      	adds	r3, #4
 8001400:	edd3 7a00 	vldr	s15, [r3]
 8001404:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001408:	68fa      	ldr	r2, [r7, #12]
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	3314      	adds	r3, #20
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	edc3 7a00 	vstr	s15, [r3]

		// CALCULATE INTEGRAL TERM AND CLAMP
		pid->integral[i] += 0.5*(pid->Ki[i])*T*(pid->error[i] + pid->prevError[i]);
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	3316      	adds	r3, #22
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	3304      	adds	r3, #4
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff f88f 	bl	8000548 <__aeabi_f2d>
 800142a:	4680      	mov	r8, r0
 800142c:	4689      	mov	r9, r1
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	3306      	adds	r3, #6
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff f884 	bl	8000548 <__aeabi_f2d>
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	4bb4      	ldr	r3, [pc, #720]	; (8001718 <PID3_Update+0x378>)
 8001446:	f7ff f8d7 	bl	80005f8 <__aeabi_dmul>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4692      	mov	sl, r2
 8001450:	469b      	mov	fp, r3
 8001452:	6838      	ldr	r0, [r7, #0]
 8001454:	f7ff f878 	bl	8000548 <__aeabi_f2d>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4650      	mov	r0, sl
 800145e:	4659      	mov	r1, fp
 8001460:	f7ff f8ca 	bl	80005f8 <__aeabi_dmul>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4692      	mov	sl, r2
 800146a:	469b      	mov	fp, r3
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	3310      	adds	r3, #16
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	3304      	adds	r3, #4
 8001478:	ed93 7a00 	vldr	s14, [r3]
 800147c:	68fa      	ldr	r2, [r7, #12]
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	331a      	adds	r3, #26
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	edd3 7a00 	vldr	s15, [r3]
 800148a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800148e:	ee17 0a90 	vmov	r0, s15
 8001492:	f7ff f859 	bl	8000548 <__aeabi_f2d>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4650      	mov	r0, sl
 800149c:	4659      	mov	r1, fp
 800149e:	f7ff f8ab 	bl	80005f8 <__aeabi_dmul>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4640      	mov	r0, r8
 80014a8:	4649      	mov	r1, r9
 80014aa:	f7fe feef 	bl	800028c <__adddf3>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4610      	mov	r0, r2
 80014b4:	4619      	mov	r1, r3
 80014b6:	f7ff fb77 	bl	8000ba8 <__aeabi_d2f>
 80014ba:	4601      	mov	r1, r0
 80014bc:	68fa      	ldr	r2, [r7, #12]
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	3316      	adds	r3, #22
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	3304      	adds	r3, #4
 80014c8:	6019      	str	r1, [r3, #0]
		pid->integral[i] = (pid->integral[i] > pid->intLimMax) ? pid->intLimMax : pid->integral[i];
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	3316      	adds	r3, #22
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	3304      	adds	r3, #4
 80014d6:	ed93 7a00 	vldr	s14, [r3]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80014e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e8:	dd02      	ble.n	80014f0 <PID3_Update+0x150>
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	e006      	b.n	80014fe <PID3_Update+0x15e>
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	3316      	adds	r3, #22
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	3304      	adds	r3, #4
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68f9      	ldr	r1, [r7, #12]
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	3216      	adds	r2, #22
 8001504:	0092      	lsls	r2, r2, #2
 8001506:	440a      	add	r2, r1
 8001508:	3204      	adds	r2, #4
 800150a:	6013      	str	r3, [r2, #0]
		pid->integral[i] = (pid->integral[i] < pid->intLimMin) ? pid->intLimMin : pid->integral[i];
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	3316      	adds	r3, #22
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	3304      	adds	r3, #4
 8001518:	ed93 7a00 	vldr	s14, [r3]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001522:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152a:	d502      	bpl.n	8001532 <PID3_Update+0x192>
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001530:	e006      	b.n	8001540 <PID3_Update+0x1a0>
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	3316      	adds	r3, #22
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	3304      	adds	r3, #4
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68f9      	ldr	r1, [r7, #12]
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	3216      	adds	r2, #22
 8001546:	0092      	lsls	r2, r2, #2
 8001548:	440a      	add	r2, r1
 800154a:	3204      	adds	r2, #4
 800154c:	6013      	str	r3, [r2, #0]

		// CALCULATE DERIVATIVE TERM (ON MEASUREMENT)
		if (T == 0) { return PID_ERROR; }
 800154e:	edd7 7a00 	vldr	s15, [r7]
 8001552:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800155a:	d101      	bne.n	8001560 <PID3_Update+0x1c0>
 800155c:	2301      	movs	r3, #1
 800155e:	e107      	b.n	8001770 <PID3_Update+0x3d0>
		pid->derivative[i] = -(2.0*(pid->Kd[i])*(rot[i] - pid->prevRot[i]) + (2.0*pid->tau - T)*pid->derivative[i])/(2.0*pid->tau + T);
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	3308      	adds	r3, #8
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	3304      	adds	r3, #4
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe ffea 	bl	8000548 <__aeabi_f2d>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	f7fe fe88 	bl	800028c <__adddf3>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4690      	mov	r8, r2
 8001582:	4699      	mov	r9, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	4413      	add	r3, r2
 800158c:	ed93 7a00 	vldr	s14, [r3]
 8001590:	68fa      	ldr	r2, [r7, #12]
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	3320      	adds	r3, #32
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	edd3 7a00 	vldr	s15, [r3]
 800159e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015a2:	ee17 0a90 	vmov	r0, s15
 80015a6:	f7fe ffcf 	bl	8000548 <__aeabi_f2d>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4640      	mov	r0, r8
 80015b0:	4649      	mov	r1, r9
 80015b2:	f7ff f821 	bl	80005f8 <__aeabi_dmul>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4690      	mov	r8, r2
 80015bc:	4699      	mov	r9, r3
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe ffc0 	bl	8000548 <__aeabi_f2d>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	f7fe fe5e 	bl	800028c <__adddf3>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4692      	mov	sl, r2
 80015d6:	469b      	mov	fp, r3
 80015d8:	6838      	ldr	r0, [r7, #0]
 80015da:	f7fe ffb5 	bl	8000548 <__aeabi_f2d>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4650      	mov	r0, sl
 80015e4:	4659      	mov	r1, fp
 80015e6:	f7fe fe4f 	bl	8000288 <__aeabi_dsub>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4692      	mov	sl, r2
 80015f0:	469b      	mov	fp, r3
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	331c      	adds	r3, #28
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	3304      	adds	r3, #4
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f7fe ffa1 	bl	8000548 <__aeabi_f2d>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4650      	mov	r0, sl
 800160c:	4659      	mov	r1, fp
 800160e:	f7fe fff3 	bl	80005f8 <__aeabi_dmul>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4640      	mov	r0, r8
 8001618:	4649      	mov	r1, r9
 800161a:	f7fe fe37 	bl	800028c <__adddf3>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4614      	mov	r4, r2
 8001624:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe ff8b 	bl	8000548 <__aeabi_f2d>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	f7fe fe29 	bl	800028c <__adddf3>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4690      	mov	r8, r2
 8001640:	4699      	mov	r9, r3
 8001642:	6838      	ldr	r0, [r7, #0]
 8001644:	f7fe ff80 	bl	8000548 <__aeabi_f2d>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4640      	mov	r0, r8
 800164e:	4649      	mov	r1, r9
 8001650:	f7fe fe1c 	bl	800028c <__adddf3>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4620      	mov	r0, r4
 800165a:	4629      	mov	r1, r5
 800165c:	f7ff f8f6 	bl	800084c <__aeabi_ddiv>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4610      	mov	r0, r2
 8001666:	4619      	mov	r1, r3
 8001668:	f7ff fa9e 	bl	8000ba8 <__aeabi_d2f>
 800166c:	4601      	mov	r1, r0
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	331c      	adds	r3, #28
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	3304      	adds	r3, #4
 800167a:	6019      	str	r1, [r3, #0]

		// CALCULATE OUTPUT AND CLAMP
		pid->out[i] = pid->proportional[i] + pid->integral[i] + pid->derivative[i];
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	3314      	adds	r3, #20
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	ed93 7a00 	vldr	s14, [r3]
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	3316      	adds	r3, #22
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	3304      	adds	r3, #4
 8001696:	edd3 7a00 	vldr	s15, [r3]
 800169a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	331c      	adds	r3, #28
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	3304      	adds	r3, #4
 80016aa:	edd3 7a00 	vldr	s15, [r3]
 80016ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	edc3 7a00 	vstr	s15, [r3]
		pid->out[i] = (pid->out[i] > pid->outLimMax) ? pid->outLimMax : pid->out[i];
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	ed93 7a00 	vldr	s14, [r3]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80016d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d8:	dd02      	ble.n	80016e0 <PID3_Update+0x340>
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016de:	e004      	b.n	80016ea <PID3_Update+0x34a>
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68f9      	ldr	r1, [r7, #12]
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	0092      	lsls	r2, r2, #2
 80016f0:	440a      	add	r2, r1
 80016f2:	6013      	str	r3, [r2, #0]
		pid->out[i] = (pid->out[i] < pid->outLimMin) ? pid->outLimMin : pid->out[i];
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	ed93 7a00 	vldr	s14, [r3]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001706:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800170a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170e:	d505      	bpl.n	800171c <PID3_Update+0x37c>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001714:	e007      	b.n	8001726 <PID3_Update+0x386>
 8001716:	bf00      	nop
 8001718:	3fe00000 	.word	0x3fe00000
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68f9      	ldr	r1, [r7, #12]
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	0092      	lsls	r2, r2, #2
 800172c:	440a      	add	r2, r1
 800172e:	6013      	str	r3, [r2, #0]

		// UPDATE TEMPVARS
		pid->prevError[i] = pid->error[i];
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	3310      	adds	r3, #16
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	3304      	adds	r3, #4
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	68f9      	ldr	r1, [r7, #12]
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	331a      	adds	r3, #26
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	440b      	add	r3, r1
 8001748:	601a      	str	r2, [r3, #0]
		pid->prevRot[i]   = rot[i];
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	68f9      	ldr	r1, [r7, #12]
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	3320      	adds	r3, #32
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	440b      	add	r3, r1
 800175e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 3; i++)
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	3301      	adds	r3, #1
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	2b02      	cmp	r3, #2
 800176a:	f77f ae25 	ble.w	80013b8 <PID3_Update+0x18>
	}

	return PID_OK;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800177a:	bf00      	nop

0800177c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001780:	f001 fc32 	bl	8002fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001784:	f000 f84e 	bl	8001824 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001788:	f000 fa9c 	bl	8001cc4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800178c:	f000 f8b4 	bl	80018f8 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001790:	f008 fd14 	bl	800a1bc <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 8001794:	f000 fa60 	bl	8001c58 <MX_TIM7_Init>
  MX_TIM6_Init();
 8001798:	f000 fa28 	bl	8001bec <MX_TIM6_Init>
  MX_TIM2_Init();
 800179c:	f000 f8da 	bl	8001954 <MX_TIM2_Init>
  MX_TIM3_Init();
 80017a0:	f000 f952 	bl	8001a48 <MX_TIM3_Init>
  MX_TIM4_Init();
 80017a4:	f000 f9c4 	bl	8001b30 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim7);	// START 50Hz SERIAL UPDATE TIMER
 80017a8:	4817      	ldr	r0, [pc, #92]	; (8001808 <main+0x8c>)
 80017aa:	f004 fd60 	bl	800626e <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim6);    	// START TIMEKEEPING TIMER
 80017ae:	4817      	ldr	r0, [pc, #92]	; (800180c <main+0x90>)
 80017b0:	f004 fd39 	bl	8006226 <HAL_TIM_Base_Start>

  BMI088_Wrapper_Init();			// INITIALIZE GYROSCOPE
 80017b4:	f000 fd64 	bl	8002280 <BMI088_Wrapper_Init>
  OS125_Wrapper_Init();				// INITIALIZE ONESHOT125 OUTPUT DRIVER
 80017b8:	f000 fd78 	bl	80022ac <OS125_Wrapper_Init>
  PID3_Wrapper_Init();				// INITALIZE PID CONTROLLER
 80017bc:	f000 fd96 	bl	80022ec <PID3_Wrapper_Init>
  QUAD_Wrapper_Init();				// INITIALIZE QUAD STRUCTURE
 80017c0:	f000 fd40 	bl	8002244 <QUAD_Wrapper_Init>

  PWM_INPUT_START();             	// START RX INPUT CAPTURE TIMERS
 80017c4:	f000 fdd2 	bl	800236c <PWM_INPUT_START>
  PWM_OUTPUT_START();				// START PWM OUTPUT TIMERS
 80017c8:	f000 fdf0 	bl	80023ac <PWM_OUTPUT_START>

  // TURN ON STATUS LED
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80017cc:	2201      	movs	r2, #1
 80017ce:	2140      	movs	r1, #64	; 0x40
 80017d0:	480f      	ldr	r0, [pc, #60]	; (8001810 <main+0x94>)
 80017d2:	f001 ff49 	bl	8003668 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // CHECK IF DATA_READY FLAG IS SET
	  if (DATA_STATUS == DATA_READY)
 80017d6:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <main+0x98>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d106      	bne.n	80017ee <main+0x72>
	  {
		  QUAD_UPDATE(&quad, IC_Elapsed);
 80017e0:	490d      	ldr	r1, [pc, #52]	; (8001818 <main+0x9c>)
 80017e2:	480e      	ldr	r0, [pc, #56]	; (800181c <main+0xa0>)
 80017e4:	f000 ff58 	bl	8002698 <QUAD_UPDATE>

		  // RESET DATA_READY FLAG
		  DATA_STATUS = DATA_RESET;
 80017e8:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <main+0x98>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]
	  }

	  // CHECK IF UPDATE_READY FLAG IS SET
	  if (UPDATE_STATUS == UPDATE_READY)
 80017ee:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <main+0xa4>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d1ee      	bne.n	80017d6 <main+0x5a>
	  {
		  QUAD_SEND_ORIENTATION(&quad);
 80017f8:	4808      	ldr	r0, [pc, #32]	; (800181c <main+0xa0>)
 80017fa:	f001 f901 	bl	8002a00 <QUAD_SEND_ORIENTATION>
		  //sprintf(buf, "%i\t%i\t%i\t%i\t%i\t%i\t\n", IC_Elapsed[0], IC_Elapsed[1], IC_Elapsed[2], IC_Elapsed[3], IC_Elapsed[4], IC_Elapsed[5]);
		  //CDC_Transmit_FS((uint8_t*)(buf), strlen(buf));

		  // RESET UPDATE_READY FLAG
		  UPDATE_STATUS = UPDATE_RESET;
 80017fe:	4b08      	ldr	r3, [pc, #32]	; (8001820 <main+0xa4>)
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
	  if (DATA_STATUS == DATA_READY)
 8001804:	e7e7      	b.n	80017d6 <main+0x5a>
 8001806:	bf00      	nop
 8001808:	200006ac 	.word	0x200006ac
 800180c:	20000550 	.word	0x20000550
 8001810:	40020800 	.word	0x40020800
 8001814:	200003a0 	.word	0x200003a0
 8001818:	20000394 	.word	0x20000394
 800181c:	20000590 	.word	0x20000590
 8001820:	200003a1 	.word	0x200003a1

08001824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b094      	sub	sp, #80	; 0x50
 8001828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800182a:	f107 0320 	add.w	r3, r7, #32
 800182e:	2230      	movs	r2, #48	; 0x30
 8001830:	2100      	movs	r1, #0
 8001832:	4618      	mov	r0, r3
 8001834:	f009 fa10 	bl	800ac58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001848:	2300      	movs	r3, #0
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	4b28      	ldr	r3, [pc, #160]	; (80018f0 <SystemClock_Config+0xcc>)
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	4a27      	ldr	r2, [pc, #156]	; (80018f0 <SystemClock_Config+0xcc>)
 8001852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001856:	6413      	str	r3, [r2, #64]	; 0x40
 8001858:	4b25      	ldr	r3, [pc, #148]	; (80018f0 <SystemClock_Config+0xcc>)
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001864:	2300      	movs	r3, #0
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <SystemClock_Config+0xd0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a21      	ldr	r2, [pc, #132]	; (80018f4 <SystemClock_Config+0xd0>)
 800186e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <SystemClock_Config+0xd0>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001880:	2301      	movs	r3, #1
 8001882:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001884:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800188a:	2302      	movs	r3, #2
 800188c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800188e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001892:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001894:	2310      	movs	r3, #16
 8001896:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 288;
 8001898:	f44f 7390 	mov.w	r3, #288	; 0x120
 800189c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800189e:	2302      	movs	r3, #2
 80018a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80018a2:	2306      	movs	r3, #6
 80018a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018a6:	f107 0320 	add.w	r3, r7, #32
 80018aa:	4618      	mov	r0, r3
 80018ac:	f004 f844 	bl	8005938 <HAL_RCC_OscConfig>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80018b6:	f000 fd8f 	bl	80023d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ba:	230f      	movs	r3, #15
 80018bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018be:	2302      	movs	r3, #2
 80018c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80018cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80018d2:	f107 030c 	add.w	r3, r7, #12
 80018d6:	2104      	movs	r1, #4
 80018d8:	4618      	mov	r0, r3
 80018da:	f004 fa9d 	bl	8005e18 <HAL_RCC_ClockConfig>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80018e4:	f000 fd78 	bl	80023d8 <Error_Handler>
  }
}
 80018e8:	bf00      	nop
 80018ea:	3750      	adds	r7, #80	; 0x50
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40007000 	.word	0x40007000

080018f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <MX_I2C1_Init+0x50>)
 80018fe:	4a13      	ldr	r2, [pc, #76]	; (800194c <MX_I2C1_Init+0x54>)
 8001900:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <MX_I2C1_Init+0x50>)
 8001904:	4a12      	ldr	r2, [pc, #72]	; (8001950 <MX_I2C1_Init+0x58>)
 8001906:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <MX_I2C1_Init+0x50>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <MX_I2C1_Init+0x50>)
 8001910:	2200      	movs	r2, #0
 8001912:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <MX_I2C1_Init+0x50>)
 8001916:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800191a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800191c:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <MX_I2C1_Init+0x50>)
 800191e:	2200      	movs	r2, #0
 8001920:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <MX_I2C1_Init+0x50>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001928:	4b07      	ldr	r3, [pc, #28]	; (8001948 <MX_I2C1_Init+0x50>)
 800192a:	2200      	movs	r2, #0
 800192c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <MX_I2C1_Init+0x50>)
 8001930:	2200      	movs	r2, #0
 8001932:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001934:	4804      	ldr	r0, [pc, #16]	; (8001948 <MX_I2C1_Init+0x50>)
 8001936:	f001 fec9 	bl	80036cc <HAL_I2C_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001940:	f000 fd4a 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000430 	.word	0x20000430
 800194c:	40005400 	.word	0x40005400
 8001950:	00061a80 	.word	0x00061a80

08001954 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	; 0x28
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800195a:	f107 0320 	add.w	r3, r7, #32
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
 8001970:	611a      	str	r2, [r3, #16]
 8001972:	615a      	str	r2, [r3, #20]
 8001974:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001976:	4b33      	ldr	r3, [pc, #204]	; (8001a44 <MX_TIM2_Init+0xf0>)
 8001978:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800197c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1 - 1;
 800197e:	4b31      	ldr	r3, [pc, #196]	; (8001a44 <MX_TIM2_Init+0xf0>)
 8001980:	2200      	movs	r2, #0
 8001982:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001984:	4b2f      	ldr	r3, [pc, #188]	; (8001a44 <MX_TIM2_Init+0xf0>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 36000 - 1;
 800198a:	4b2e      	ldr	r3, [pc, #184]	; (8001a44 <MX_TIM2_Init+0xf0>)
 800198c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001990:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001992:	4b2c      	ldr	r3, [pc, #176]	; (8001a44 <MX_TIM2_Init+0xf0>)
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001998:	4b2a      	ldr	r3, [pc, #168]	; (8001a44 <MX_TIM2_Init+0xf0>)
 800199a:	2200      	movs	r2, #0
 800199c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800199e:	4829      	ldr	r0, [pc, #164]	; (8001a44 <MX_TIM2_Init+0xf0>)
 80019a0:	f004 fc89 	bl	80062b6 <HAL_TIM_PWM_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80019aa:	f000 fd15 	bl	80023d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ae:	2300      	movs	r3, #0
 80019b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019b6:	f107 0320 	add.w	r3, r7, #32
 80019ba:	4619      	mov	r1, r3
 80019bc:	4821      	ldr	r0, [pc, #132]	; (8001a44 <MX_TIM2_Init+0xf0>)
 80019be:	f005 fc3b 	bl	8007238 <HAL_TIMEx_MasterConfigSynchronization>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80019c8:	f000 fd06 	bl	80023d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019cc:	2360      	movs	r3, #96	; 0x60
 80019ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	2200      	movs	r2, #0
 80019e0:	4619      	mov	r1, r3
 80019e2:	4818      	ldr	r0, [pc, #96]	; (8001a44 <MX_TIM2_Init+0xf0>)
 80019e4:	f004 ff60 	bl	80068a8 <HAL_TIM_PWM_ConfigChannel>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80019ee:	f000 fcf3 	bl	80023d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	2204      	movs	r2, #4
 80019f6:	4619      	mov	r1, r3
 80019f8:	4812      	ldr	r0, [pc, #72]	; (8001a44 <MX_TIM2_Init+0xf0>)
 80019fa:	f004 ff55 	bl	80068a8 <HAL_TIM_PWM_ConfigChannel>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001a04:	f000 fce8 	bl	80023d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a08:	1d3b      	adds	r3, r7, #4
 8001a0a:	2208      	movs	r2, #8
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	480d      	ldr	r0, [pc, #52]	; (8001a44 <MX_TIM2_Init+0xf0>)
 8001a10:	f004 ff4a 	bl	80068a8 <HAL_TIM_PWM_ConfigChannel>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8001a1a:	f000 fcdd 	bl	80023d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	220c      	movs	r2, #12
 8001a22:	4619      	mov	r1, r3
 8001a24:	4807      	ldr	r0, [pc, #28]	; (8001a44 <MX_TIM2_Init+0xf0>)
 8001a26:	f004 ff3f 	bl	80068a8 <HAL_TIM_PWM_ConfigChannel>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8001a30:	f000 fcd2 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a34:	4803      	ldr	r0, [pc, #12]	; (8001a44 <MX_TIM2_Init+0xf0>)
 8001a36:	f001 f9cf 	bl	8002dd8 <HAL_TIM_MspPostInit>

}
 8001a3a:	bf00      	nop
 8001a3c:	3728      	adds	r7, #40	; 0x28
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	2000066c 	.word	0x2000066c

08001a48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a4e:	f107 0310 	add.w	r3, r7, #16
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a58:	463b      	mov	r3, r7
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a64:	4b30      	ldr	r3, [pc, #192]	; (8001b28 <MX_TIM3_Init+0xe0>)
 8001a66:	4a31      	ldr	r2, [pc, #196]	; (8001b2c <MX_TIM3_Init+0xe4>)
 8001a68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72 - 1;
 8001a6a:	4b2f      	ldr	r3, [pc, #188]	; (8001b28 <MX_TIM3_Init+0xe0>)
 8001a6c:	2247      	movs	r2, #71	; 0x47
 8001a6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a70:	4b2d      	ldr	r3, [pc, #180]	; (8001b28 <MX_TIM3_Init+0xe0>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65536 - 1;
 8001a76:	4b2c      	ldr	r3, [pc, #176]	; (8001b28 <MX_TIM3_Init+0xe0>)
 8001a78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7e:	4b2a      	ldr	r3, [pc, #168]	; (8001b28 <MX_TIM3_Init+0xe0>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a84:	4b28      	ldr	r3, [pc, #160]	; (8001b28 <MX_TIM3_Init+0xe0>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001a8a:	4827      	ldr	r0, [pc, #156]	; (8001b28 <MX_TIM3_Init+0xe0>)
 8001a8c:	f004 fcd4 	bl	8006438 <HAL_TIM_IC_Init>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001a96:	f000 fc9f 	bl	80023d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001aa2:	f107 0310 	add.w	r3, r7, #16
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	481f      	ldr	r0, [pc, #124]	; (8001b28 <MX_TIM3_Init+0xe0>)
 8001aaa:	f005 fbc5 	bl	8007238 <HAL_TIMEx_MasterConfigSynchronization>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001ab4:	f000 fc90 	bl	80023d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001abc:	2301      	movs	r3, #1
 8001abe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ac8:	463b      	mov	r3, r7
 8001aca:	2200      	movs	r2, #0
 8001acc:	4619      	mov	r1, r3
 8001ace:	4816      	ldr	r0, [pc, #88]	; (8001b28 <MX_TIM3_Init+0xe0>)
 8001ad0:	f004 fe4e 	bl	8006770 <HAL_TIM_IC_ConfigChannel>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001ada:	f000 fc7d 	bl	80023d8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001ade:	463b      	mov	r3, r7
 8001ae0:	2204      	movs	r2, #4
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4810      	ldr	r0, [pc, #64]	; (8001b28 <MX_TIM3_Init+0xe0>)
 8001ae6:	f004 fe43 	bl	8006770 <HAL_TIM_IC_ConfigChannel>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8001af0:	f000 fc72 	bl	80023d8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001af4:	463b      	mov	r3, r7
 8001af6:	2208      	movs	r2, #8
 8001af8:	4619      	mov	r1, r3
 8001afa:	480b      	ldr	r0, [pc, #44]	; (8001b28 <MX_TIM3_Init+0xe0>)
 8001afc:	f004 fe38 	bl	8006770 <HAL_TIM_IC_ConfigChannel>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 8001b06:	f000 fc67 	bl	80023d8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001b0a:	463b      	mov	r3, r7
 8001b0c:	220c      	movs	r2, #12
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4805      	ldr	r0, [pc, #20]	; (8001b28 <MX_TIM3_Init+0xe0>)
 8001b12:	f004 fe2d 	bl	8006770 <HAL_TIM_IC_ConfigChannel>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001b1c:	f000 fc5c 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b20:	bf00      	nop
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000510 	.word	0x20000510
 8001b2c:	40000400 	.word	0x40000400

08001b30 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b36:	f107 0310 	add.w	r3, r7, #16
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b40:	463b      	mov	r3, r7
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b4c:	4b25      	ldr	r3, [pc, #148]	; (8001be4 <MX_TIM4_Init+0xb4>)
 8001b4e:	4a26      	ldr	r2, [pc, #152]	; (8001be8 <MX_TIM4_Init+0xb8>)
 8001b50:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72 - 1;
 8001b52:	4b24      	ldr	r3, [pc, #144]	; (8001be4 <MX_TIM4_Init+0xb4>)
 8001b54:	2247      	movs	r2, #71	; 0x47
 8001b56:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b58:	4b22      	ldr	r3, [pc, #136]	; (8001be4 <MX_TIM4_Init+0xb4>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65536 - 1;
 8001b5e:	4b21      	ldr	r3, [pc, #132]	; (8001be4 <MX_TIM4_Init+0xb4>)
 8001b60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b64:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b66:	4b1f      	ldr	r3, [pc, #124]	; (8001be4 <MX_TIM4_Init+0xb4>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6c:	4b1d      	ldr	r3, [pc, #116]	; (8001be4 <MX_TIM4_Init+0xb4>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001b72:	481c      	ldr	r0, [pc, #112]	; (8001be4 <MX_TIM4_Init+0xb4>)
 8001b74:	f004 fc60 	bl	8006438 <HAL_TIM_IC_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001b7e:	f000 fc2b 	bl	80023d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b8a:	f107 0310 	add.w	r3, r7, #16
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4814      	ldr	r0, [pc, #80]	; (8001be4 <MX_TIM4_Init+0xb4>)
 8001b92:	f005 fb51 	bl	8007238 <HAL_TIMEx_MasterConfigSynchronization>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001b9c:	f000 fc1c 	bl	80023d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001bb0:	463b      	mov	r3, r7
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	480b      	ldr	r0, [pc, #44]	; (8001be4 <MX_TIM4_Init+0xb4>)
 8001bb8:	f004 fdda 	bl	8006770 <HAL_TIM_IC_ConfigChannel>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001bc2:	f000 fc09 	bl	80023d8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	2204      	movs	r2, #4
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4805      	ldr	r0, [pc, #20]	; (8001be4 <MX_TIM4_Init+0xb4>)
 8001bce:	f004 fdcf 	bl	8006770 <HAL_TIM_IC_ConfigChannel>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8001bd8:	f000 fbfe 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001bdc:	bf00      	nop
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	200003f0 	.word	0x200003f0
 8001be8:	40000800 	.word	0x40000800

08001bec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf2:	463b      	mov	r3, r7
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <MX_TIM6_Init+0x64>)
 8001bfc:	4a15      	ldr	r2, [pc, #84]	; (8001c54 <MX_TIM6_Init+0x68>)
 8001bfe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72 - 1;
 8001c00:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <MX_TIM6_Init+0x64>)
 8001c02:	2247      	movs	r2, #71	; 0x47
 8001c04:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c06:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <MX_TIM6_Init+0x64>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536 - 1;
 8001c0c:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <MX_TIM6_Init+0x64>)
 8001c0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c12:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c14:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <MX_TIM6_Init+0x64>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c1a:	480d      	ldr	r0, [pc, #52]	; (8001c50 <MX_TIM6_Init+0x64>)
 8001c1c:	f004 fad8 	bl	80061d0 <HAL_TIM_Base_Init>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001c26:	f000 fbd7 	bl	80023d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c32:	463b      	mov	r3, r7
 8001c34:	4619      	mov	r1, r3
 8001c36:	4806      	ldr	r0, [pc, #24]	; (8001c50 <MX_TIM6_Init+0x64>)
 8001c38:	f005 fafe 	bl	8007238 <HAL_TIMEx_MasterConfigSynchronization>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001c42:	f000 fbc9 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000550 	.word	0x20000550
 8001c54:	40001000 	.word	0x40001000

08001c58 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c5e:	463b      	mov	r3, r7
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001c66:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <MX_TIM7_Init+0x64>)
 8001c68:	4a15      	ldr	r2, [pc, #84]	; (8001cc0 <MX_TIM7_Init+0x68>)
 8001c6a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 72 - 1;
 8001c6c:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <MX_TIM7_Init+0x64>)
 8001c6e:	2247      	movs	r2, #71	; 0x47
 8001c70:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c72:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <MX_TIM7_Init+0x64>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 20000 - 1;
 8001c78:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <MX_TIM7_Init+0x64>)
 8001c7a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001c7e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c80:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <MX_TIM7_Init+0x64>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001c86:	480d      	ldr	r0, [pc, #52]	; (8001cbc <MX_TIM7_Init+0x64>)
 8001c88:	f004 faa2 	bl	80061d0 <HAL_TIM_Base_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001c92:	f000 fba1 	bl	80023d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c96:	2300      	movs	r3, #0
 8001c98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001c9e:	463b      	mov	r3, r7
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4806      	ldr	r0, [pc, #24]	; (8001cbc <MX_TIM7_Init+0x64>)
 8001ca4:	f005 fac8 	bl	8007238 <HAL_TIMEx_MasterConfigSynchronization>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001cae:	f000 fb93 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	200006ac 	.word	0x200006ac
 8001cc0:	40001400 	.word	0x40001400

08001cc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08a      	sub	sp, #40	; 0x28
 8001cc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	605a      	str	r2, [r3, #4]
 8001cd4:	609a      	str	r2, [r3, #8]
 8001cd6:	60da      	str	r2, [r3, #12]
 8001cd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	4b31      	ldr	r3, [pc, #196]	; (8001da4 <MX_GPIO_Init+0xe0>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a30      	ldr	r2, [pc, #192]	; (8001da4 <MX_GPIO_Init+0xe0>)
 8001ce4:	f043 0304 	orr.w	r3, r3, #4
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b2e      	ldr	r3, [pc, #184]	; (8001da4 <MX_GPIO_Init+0xe0>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	4b2a      	ldr	r3, [pc, #168]	; (8001da4 <MX_GPIO_Init+0xe0>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	4a29      	ldr	r2, [pc, #164]	; (8001da4 <MX_GPIO_Init+0xe0>)
 8001d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d04:	6313      	str	r3, [r2, #48]	; 0x30
 8001d06:	4b27      	ldr	r3, [pc, #156]	; (8001da4 <MX_GPIO_Init+0xe0>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	4b23      	ldr	r3, [pc, #140]	; (8001da4 <MX_GPIO_Init+0xe0>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a22      	ldr	r2, [pc, #136]	; (8001da4 <MX_GPIO_Init+0xe0>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b20      	ldr	r3, [pc, #128]	; (8001da4 <MX_GPIO_Init+0xe0>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	607b      	str	r3, [r7, #4]
 8001d32:	4b1c      	ldr	r3, [pc, #112]	; (8001da4 <MX_GPIO_Init+0xe0>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a1b      	ldr	r2, [pc, #108]	; (8001da4 <MX_GPIO_Init+0xe0>)
 8001d38:	f043 0302 	orr.w	r3, r3, #2
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <MX_GPIO_Init+0xe0>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	607b      	str	r3, [r7, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	21c0      	movs	r1, #192	; 0xc0
 8001d4e:	4816      	ldr	r0, [pc, #88]	; (8001da8 <MX_GPIO_Init+0xe4>)
 8001d50:	f001 fc8a 	bl	8003668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GYRO_INT_Pin */
  GPIO_InitStruct.Pin = GYRO_INT_Pin;
 8001d54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d5a:	4b14      	ldr	r3, [pc, #80]	; (8001dac <MX_GPIO_Init+0xe8>)
 8001d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYRO_INT_GPIO_Port, &GPIO_InitStruct);
 8001d62:	f107 0314 	add.w	r3, r7, #20
 8001d66:	4619      	mov	r1, r3
 8001d68:	480f      	ldr	r0, [pc, #60]	; (8001da8 <MX_GPIO_Init+0xe4>)
 8001d6a:	f001 fae3 	bl	8003334 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d6e:	23c0      	movs	r3, #192	; 0xc0
 8001d70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d72:	2301      	movs	r3, #1
 8001d74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	4619      	mov	r1, r3
 8001d84:	4808      	ldr	r0, [pc, #32]	; (8001da8 <MX_GPIO_Init+0xe4>)
 8001d86:	f001 fad5 	bl	8003334 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	2028      	movs	r0, #40	; 0x28
 8001d90:	f001 fa99 	bl	80032c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d94:	2028      	movs	r0, #40	; 0x28
 8001d96:	f001 fab2 	bl	80032fe <HAL_NVIC_EnableIRQ>

}
 8001d9a:	bf00      	nop
 8001d9c:	3728      	adds	r7, #40	; 0x28
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40020800 	.word	0x40020800
 8001dac:	10110000 	.word	0x10110000

08001db0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

/* GYROSCOPE DATA READY INTERRUPT CALLBACK */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_14) { DATA_STATUS = DATA_READY; }    // SET DATA_READY FLAG
 8001dba:	88fb      	ldrh	r3, [r7, #6]
 8001dbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001dc0:	d102      	bne.n	8001dc8 <HAL_GPIO_EXTI_Callback+0x18>
 8001dc2:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <HAL_GPIO_EXTI_Callback+0x24>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	701a      	strb	r2, [r3, #0]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	200003a0 	.word	0x200003a0

08001dd8 <HAL_TIM_PeriodElapsedCallback>:

/* TIMER INTERRUPT CALLBACK FOR 50Hz UPDATE OVER SERIAL */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM7) { UPDATE_STATUS = UPDATE_READY; } // SET UPDATE_READY FLAG
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a05      	ldr	r2, [pc, #20]	; (8001dfc <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d102      	bne.n	8001df0 <HAL_TIM_PeriodElapsedCallback+0x18>
 8001dea:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	701a      	strb	r2, [r3, #0]
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	40001400 	.word	0x40001400
 8001e00:	200003a1 	.word	0x200003a1

08001e04 <HAL_TIM_IC_CaptureCallback>:
 * Measures pulse widths on the following channels:
 * TIM3: CH1, CH2, CH3, CH4
 * TIM4: CH1, CH2
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
	uint8_t idx     = 0; // CHANNEL INDEX
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	73fb      	strb	r3, [r7, #15]
	uint8_t channel = 0; // TIMER CHANNEL
 8001e10:	2300      	movs	r3, #0
 8001e12:	73bb      	strb	r3, [r7, #14]

	// TIMER 3: 4 CHANNELS
	if (htim == &htim3)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a7e      	ldr	r2, [pc, #504]	; (8002010 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	f040 810d 	bne.w	8002038 <HAL_TIM_IC_CaptureCallback+0x234>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	7f1b      	ldrb	r3, [r3, #28]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d103      	bne.n	8001e2e <HAL_TIM_IC_CaptureCallback+0x2a>
		{
			idx     = 4;
 8001e26:	2304      	movs	r3, #4
 8001e28:	73fb      	strb	r3, [r7, #15]
			channel = TIM_CHANNEL_1;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	73bb      	strb	r3, [r7, #14]
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	7f1b      	ldrb	r3, [r3, #28]
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d103      	bne.n	8001e3e <HAL_TIM_IC_CaptureCallback+0x3a>
		{
			idx     = 5;
 8001e36:	2305      	movs	r3, #5
 8001e38:	73fb      	strb	r3, [r7, #15]
			channel = TIM_CHANNEL_2;
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	73bb      	strb	r3, [r7, #14]
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	7f1b      	ldrb	r3, [r3, #28]
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d103      	bne.n	8001e4e <HAL_TIM_IC_CaptureCallback+0x4a>
		{
			idx     = 3;
 8001e46:	2303      	movs	r3, #3
 8001e48:	73fb      	strb	r3, [r7, #15]
			channel = TIM_CHANNEL_3;
 8001e4a:	2308      	movs	r3, #8
 8001e4c:	73bb      	strb	r3, [r7, #14]
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	7f1b      	ldrb	r3, [r3, #28]
 8001e52:	2b08      	cmp	r3, #8
 8001e54:	d103      	bne.n	8001e5e <HAL_TIM_IC_CaptureCallback+0x5a>
		{
			idx     = 2;
 8001e56:	2302      	movs	r3, #2
 8001e58:	73fb      	strb	r3, [r7, #15]
			channel = TIM_CHANNEL_4;
 8001e5a:	230c      	movs	r3, #12
 8001e5c:	73bb      	strb	r3, [r7, #14]
		}

		//  PULSE WIDTH CAPTURE
		if (IC_Started[idx] == 0x0) {
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
 8001e60:	4a6c      	ldr	r2, [pc, #432]	; (8002014 <HAL_TIM_IC_CaptureCallback+0x210>)
 8001e62:	5cd3      	ldrb	r3, [r2, r3]
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d167      	bne.n	8001f3a <HAL_TIM_IC_CaptureCallback+0x136>
			IC_ts1[idx] = HAL_TIM_ReadCapturedValue(htim, channel);							// GET FIRST TIMESTAMP
 8001e6a:	7bbb      	ldrb	r3, [r7, #14]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f004 fde0 	bl	8006a34 <HAL_TIM_ReadCapturedValue>
 8001e74:	4602      	mov	r2, r0
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	b291      	uxth	r1, r2
 8001e7a:	4a67      	ldr	r2, [pc, #412]	; (8002018 <HAL_TIM_IC_CaptureCallback+0x214>)
 8001e7c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_FALLING);	// FLIP POLARITY
 8001e80:	7bbb      	ldrb	r3, [r7, #14]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d108      	bne.n	8001e98 <HAL_TIM_IC_CaptureCallback+0x94>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6a1a      	ldr	r2, [r3, #32]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 020a 	bic.w	r2, r2, #10
 8001e94:	621a      	str	r2, [r3, #32]
 8001e96:	e01f      	b.n	8001ed8 <HAL_TIM_IC_CaptureCallback+0xd4>
 8001e98:	7bbb      	ldrb	r3, [r7, #14]
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d108      	bne.n	8001eb0 <HAL_TIM_IC_CaptureCallback+0xac>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6a1a      	ldr	r2, [r3, #32]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001eac:	621a      	str	r2, [r3, #32]
 8001eae:	e013      	b.n	8001ed8 <HAL_TIM_IC_CaptureCallback+0xd4>
 8001eb0:	7bbb      	ldrb	r3, [r7, #14]
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d108      	bne.n	8001ec8 <HAL_TIM_IC_CaptureCallback+0xc4>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6a1a      	ldr	r2, [r3, #32]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8001ec4:	621a      	str	r2, [r3, #32]
 8001ec6:	e007      	b.n	8001ed8 <HAL_TIM_IC_CaptureCallback+0xd4>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6a1a      	ldr	r2, [r3, #32]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 8001ed6:	621a      	str	r2, [r3, #32]
 8001ed8:	7bbb      	ldrb	r3, [r7, #14]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d108      	bne.n	8001ef0 <HAL_TIM_IC_CaptureCallback+0xec>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6a1a      	ldr	r2, [r3, #32]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f042 0202 	orr.w	r2, r2, #2
 8001eec:	621a      	str	r2, [r3, #32]
 8001eee:	e01f      	b.n	8001f30 <HAL_TIM_IC_CaptureCallback+0x12c>
 8001ef0:	7bbb      	ldrb	r3, [r7, #14]
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d108      	bne.n	8001f08 <HAL_TIM_IC_CaptureCallback+0x104>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6a1a      	ldr	r2, [r3, #32]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f042 0220 	orr.w	r2, r2, #32
 8001f04:	621a      	str	r2, [r3, #32]
 8001f06:	e013      	b.n	8001f30 <HAL_TIM_IC_CaptureCallback+0x12c>
 8001f08:	7bbb      	ldrb	r3, [r7, #14]
 8001f0a:	2b08      	cmp	r3, #8
 8001f0c:	d108      	bne.n	8001f20 <HAL_TIM_IC_CaptureCallback+0x11c>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6a1a      	ldr	r2, [r3, #32]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f1c:	621a      	str	r2, [r3, #32]
 8001f1e:	e007      	b.n	8001f30 <HAL_TIM_IC_CaptureCallback+0x12c>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6a1a      	ldr	r2, [r3, #32]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f2e:	621a      	str	r2, [r3, #32]
			IC_Started[idx] = 0x1;															// UPDATE STATUS
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	4a38      	ldr	r2, [pc, #224]	; (8002014 <HAL_TIM_IC_CaptureCallback+0x210>)
 8001f34:	2101      	movs	r1, #1
 8001f36:	54d1      	strb	r1, [r2, r3]
 8001f38:	e07e      	b.n	8002038 <HAL_TIM_IC_CaptureCallback+0x234>
		} else if (IC_Started[idx] == 0x1) {
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
 8001f3c:	4a35      	ldr	r2, [pc, #212]	; (8002014 <HAL_TIM_IC_CaptureCallback+0x210>)
 8001f3e:	5cd3      	ldrb	r3, [r2, r3]
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d178      	bne.n	8002038 <HAL_TIM_IC_CaptureCallback+0x234>
			IC_ts2[idx] = HAL_TIM_ReadCapturedValue(htim, channel);							// GET SECOND TIMESTAMP
 8001f46:	7bbb      	ldrb	r3, [r7, #14]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f004 fd72 	bl	8006a34 <HAL_TIM_ReadCapturedValue>
 8001f50:	4602      	mov	r2, r0
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
 8001f54:	b291      	uxth	r1, r2
 8001f56:	4a31      	ldr	r2, [pc, #196]	; (800201c <HAL_TIM_IC_CaptureCallback+0x218>)
 8001f58:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			IC_Elapsed[idx] = IC_ts2[idx] - IC_ts1[idx];									// CALCULATE PULSE WIDTH
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
 8001f5e:	4a2f      	ldr	r2, [pc, #188]	; (800201c <HAL_TIM_IC_CaptureCallback+0x218>)
 8001f60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f64:	b299      	uxth	r1, r3
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
 8001f68:	4a2b      	ldr	r2, [pc, #172]	; (8002018 <HAL_TIM_IC_CaptureCallback+0x214>)
 8001f6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
 8001f72:	1a8a      	subs	r2, r1, r2
 8001f74:	b291      	uxth	r1, r2
 8001f76:	4a2a      	ldr	r2, [pc, #168]	; (8002020 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8001f78:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_RISING);	// FLIP POLARITY
 8001f7c:	7bbb      	ldrb	r3, [r7, #14]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d108      	bne.n	8001f94 <HAL_TIM_IC_CaptureCallback+0x190>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6a1a      	ldr	r2, [r3, #32]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 020a 	bic.w	r2, r2, #10
 8001f90:	621a      	str	r2, [r3, #32]
 8001f92:	e01f      	b.n	8001fd4 <HAL_TIM_IC_CaptureCallback+0x1d0>
 8001f94:	7bbb      	ldrb	r3, [r7, #14]
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	d108      	bne.n	8001fac <HAL_TIM_IC_CaptureCallback+0x1a8>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6a1a      	ldr	r2, [r3, #32]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fa8:	621a      	str	r2, [r3, #32]
 8001faa:	e013      	b.n	8001fd4 <HAL_TIM_IC_CaptureCallback+0x1d0>
 8001fac:	7bbb      	ldrb	r3, [r7, #14]
 8001fae:	2b08      	cmp	r3, #8
 8001fb0:	d108      	bne.n	8001fc4 <HAL_TIM_IC_CaptureCallback+0x1c0>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6a1a      	ldr	r2, [r3, #32]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8001fc0:	621a      	str	r2, [r3, #32]
 8001fc2:	e007      	b.n	8001fd4 <HAL_TIM_IC_CaptureCallback+0x1d0>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6a1a      	ldr	r2, [r3, #32]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 8001fd2:	621a      	str	r2, [r3, #32]
 8001fd4:	7bbb      	ldrb	r3, [r7, #14]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d106      	bne.n	8001fe8 <HAL_TIM_IC_CaptureCallback+0x1e4>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6a12      	ldr	r2, [r2, #32]
 8001fe4:	621a      	str	r2, [r3, #32]
 8001fe6:	e023      	b.n	8002030 <HAL_TIM_IC_CaptureCallback+0x22c>
 8001fe8:	7bbb      	ldrb	r3, [r7, #14]
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	d106      	bne.n	8001ffc <HAL_TIM_IC_CaptureCallback+0x1f8>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6a12      	ldr	r2, [r2, #32]
 8001ff8:	621a      	str	r2, [r3, #32]
 8001ffa:	e019      	b.n	8002030 <HAL_TIM_IC_CaptureCallback+0x22c>
 8001ffc:	7bbb      	ldrb	r3, [r7, #14]
 8001ffe:	2b08      	cmp	r3, #8
 8002000:	d110      	bne.n	8002024 <HAL_TIM_IC_CaptureCallback+0x220>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6a12      	ldr	r2, [r2, #32]
 800200c:	621a      	str	r2, [r3, #32]
 800200e:	e00f      	b.n	8002030 <HAL_TIM_IC_CaptureCallback+0x22c>
 8002010:	20000510 	.word	0x20000510
 8002014:	20000374 	.word	0x20000374
 8002018:	2000037c 	.word	0x2000037c
 800201c:	20000388 	.word	0x20000388
 8002020:	20000394 	.word	0x20000394
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6a12      	ldr	r2, [r2, #32]
 800202e:	621a      	str	r2, [r3, #32]
			IC_Started[idx] = 0x0;															// UPDATE STATUS
 8002030:	7bfb      	ldrb	r3, [r7, #15]
 8002032:	4a7f      	ldr	r2, [pc, #508]	; (8002230 <HAL_TIM_IC_CaptureCallback+0x42c>)
 8002034:	2100      	movs	r1, #0
 8002036:	54d1      	strb	r1, [r2, r3]
		}
	}
	// TIMER 4: 2 CHANNELS
	if (htim == &htim4)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a7e      	ldr	r2, [pc, #504]	; (8002234 <HAL_TIM_IC_CaptureCallback+0x430>)
 800203c:	4293      	cmp	r3, r2
 800203e:	f040 80f3 	bne.w	8002228 <HAL_TIM_IC_CaptureCallback+0x424>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	7f1b      	ldrb	r3, [r3, #28]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d103      	bne.n	8002052 <HAL_TIM_IC_CaptureCallback+0x24e>
		{
			idx     = 1;
 800204a:	2301      	movs	r3, #1
 800204c:	73fb      	strb	r3, [r7, #15]
			channel = TIM_CHANNEL_1;
 800204e:	2300      	movs	r3, #0
 8002050:	73bb      	strb	r3, [r7, #14]
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	7f1b      	ldrb	r3, [r3, #28]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d103      	bne.n	8002062 <HAL_TIM_IC_CaptureCallback+0x25e>
		{
			idx     = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	73fb      	strb	r3, [r7, #15]
			channel = TIM_CHANNEL_2;
 800205e:	2304      	movs	r3, #4
 8002060:	73bb      	strb	r3, [r7, #14]
		}

		//  PULSE WIDTH CAPTURE
		if (IC_Started[idx] == 0x0) {
 8002062:	7bfb      	ldrb	r3, [r7, #15]
 8002064:	4a72      	ldr	r2, [pc, #456]	; (8002230 <HAL_TIM_IC_CaptureCallback+0x42c>)
 8002066:	5cd3      	ldrb	r3, [r2, r3]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d167      	bne.n	800213e <HAL_TIM_IC_CaptureCallback+0x33a>
			IC_ts1[idx] = HAL_TIM_ReadCapturedValue(htim, channel);							// GET FIRST TIMESTAMP
 800206e:	7bbb      	ldrb	r3, [r7, #14]
 8002070:	4619      	mov	r1, r3
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f004 fcde 	bl	8006a34 <HAL_TIM_ReadCapturedValue>
 8002078:	4602      	mov	r2, r0
 800207a:	7bfb      	ldrb	r3, [r7, #15]
 800207c:	b291      	uxth	r1, r2
 800207e:	4a6e      	ldr	r2, [pc, #440]	; (8002238 <HAL_TIM_IC_CaptureCallback+0x434>)
 8002080:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_FALLING);	// FLIP POLARITY
 8002084:	7bbb      	ldrb	r3, [r7, #14]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d108      	bne.n	800209c <HAL_TIM_IC_CaptureCallback+0x298>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6a1a      	ldr	r2, [r3, #32]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 020a 	bic.w	r2, r2, #10
 8002098:	621a      	str	r2, [r3, #32]
 800209a:	e01f      	b.n	80020dc <HAL_TIM_IC_CaptureCallback+0x2d8>
 800209c:	7bbb      	ldrb	r3, [r7, #14]
 800209e:	2b04      	cmp	r3, #4
 80020a0:	d108      	bne.n	80020b4 <HAL_TIM_IC_CaptureCallback+0x2b0>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6a1a      	ldr	r2, [r3, #32]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80020b0:	621a      	str	r2, [r3, #32]
 80020b2:	e013      	b.n	80020dc <HAL_TIM_IC_CaptureCallback+0x2d8>
 80020b4:	7bbb      	ldrb	r3, [r7, #14]
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d108      	bne.n	80020cc <HAL_TIM_IC_CaptureCallback+0x2c8>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6a1a      	ldr	r2, [r3, #32]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 80020c8:	621a      	str	r2, [r3, #32]
 80020ca:	e007      	b.n	80020dc <HAL_TIM_IC_CaptureCallback+0x2d8>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6a1a      	ldr	r2, [r3, #32]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 80020da:	621a      	str	r2, [r3, #32]
 80020dc:	7bbb      	ldrb	r3, [r7, #14]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d108      	bne.n	80020f4 <HAL_TIM_IC_CaptureCallback+0x2f0>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6a1a      	ldr	r2, [r3, #32]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f042 0202 	orr.w	r2, r2, #2
 80020f0:	621a      	str	r2, [r3, #32]
 80020f2:	e01f      	b.n	8002134 <HAL_TIM_IC_CaptureCallback+0x330>
 80020f4:	7bbb      	ldrb	r3, [r7, #14]
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d108      	bne.n	800210c <HAL_TIM_IC_CaptureCallback+0x308>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6a1a      	ldr	r2, [r3, #32]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f042 0220 	orr.w	r2, r2, #32
 8002108:	621a      	str	r2, [r3, #32]
 800210a:	e013      	b.n	8002134 <HAL_TIM_IC_CaptureCallback+0x330>
 800210c:	7bbb      	ldrb	r3, [r7, #14]
 800210e:	2b08      	cmp	r3, #8
 8002110:	d108      	bne.n	8002124 <HAL_TIM_IC_CaptureCallback+0x320>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6a1a      	ldr	r2, [r3, #32]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002120:	621a      	str	r2, [r3, #32]
 8002122:	e007      	b.n	8002134 <HAL_TIM_IC_CaptureCallback+0x330>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6a1a      	ldr	r2, [r3, #32]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002132:	621a      	str	r2, [r3, #32]
			IC_Started[idx] = 0x1;															// UPDATE STATUS
 8002134:	7bfb      	ldrb	r3, [r7, #15]
 8002136:	4a3e      	ldr	r2, [pc, #248]	; (8002230 <HAL_TIM_IC_CaptureCallback+0x42c>)
 8002138:	2101      	movs	r1, #1
 800213a:	54d1      	strb	r1, [r2, r3]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_RISING);	// FLIP POLARITY
			IC_Started[idx] = 0x0;															// UPDATE STATUS
		}
	}

}
 800213c:	e074      	b.n	8002228 <HAL_TIM_IC_CaptureCallback+0x424>
		} else if (IC_Started[idx] == 0x1) {
 800213e:	7bfb      	ldrb	r3, [r7, #15]
 8002140:	4a3b      	ldr	r2, [pc, #236]	; (8002230 <HAL_TIM_IC_CaptureCallback+0x42c>)
 8002142:	5cd3      	ldrb	r3, [r2, r3]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b01      	cmp	r3, #1
 8002148:	d16e      	bne.n	8002228 <HAL_TIM_IC_CaptureCallback+0x424>
			IC_ts2[idx] = HAL_TIM_ReadCapturedValue(htim, channel);							// GET SECOND TIMESTAMP
 800214a:	7bbb      	ldrb	r3, [r7, #14]
 800214c:	4619      	mov	r1, r3
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f004 fc70 	bl	8006a34 <HAL_TIM_ReadCapturedValue>
 8002154:	4602      	mov	r2, r0
 8002156:	7bfb      	ldrb	r3, [r7, #15]
 8002158:	b291      	uxth	r1, r2
 800215a:	4a38      	ldr	r2, [pc, #224]	; (800223c <HAL_TIM_IC_CaptureCallback+0x438>)
 800215c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			IC_Elapsed[idx] = IC_ts2[idx] - IC_ts1[idx];									// CALCULATE PULSE WIDTH
 8002160:	7bfb      	ldrb	r3, [r7, #15]
 8002162:	4a36      	ldr	r2, [pc, #216]	; (800223c <HAL_TIM_IC_CaptureCallback+0x438>)
 8002164:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002168:	b299      	uxth	r1, r3
 800216a:	7bfb      	ldrb	r3, [r7, #15]
 800216c:	4a32      	ldr	r2, [pc, #200]	; (8002238 <HAL_TIM_IC_CaptureCallback+0x434>)
 800216e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002172:	b29a      	uxth	r2, r3
 8002174:	7bfb      	ldrb	r3, [r7, #15]
 8002176:	1a8a      	subs	r2, r1, r2
 8002178:	b291      	uxth	r1, r2
 800217a:	4a31      	ldr	r2, [pc, #196]	; (8002240 <HAL_TIM_IC_CaptureCallback+0x43c>)
 800217c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_RISING);	// FLIP POLARITY
 8002180:	7bbb      	ldrb	r3, [r7, #14]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d108      	bne.n	8002198 <HAL_TIM_IC_CaptureCallback+0x394>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6a1a      	ldr	r2, [r3, #32]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 020a 	bic.w	r2, r2, #10
 8002194:	621a      	str	r2, [r3, #32]
 8002196:	e01f      	b.n	80021d8 <HAL_TIM_IC_CaptureCallback+0x3d4>
 8002198:	7bbb      	ldrb	r3, [r7, #14]
 800219a:	2b04      	cmp	r3, #4
 800219c:	d108      	bne.n	80021b0 <HAL_TIM_IC_CaptureCallback+0x3ac>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6a1a      	ldr	r2, [r3, #32]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80021ac:	621a      	str	r2, [r3, #32]
 80021ae:	e013      	b.n	80021d8 <HAL_TIM_IC_CaptureCallback+0x3d4>
 80021b0:	7bbb      	ldrb	r3, [r7, #14]
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d108      	bne.n	80021c8 <HAL_TIM_IC_CaptureCallback+0x3c4>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6a1a      	ldr	r2, [r3, #32]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 80021c4:	621a      	str	r2, [r3, #32]
 80021c6:	e007      	b.n	80021d8 <HAL_TIM_IC_CaptureCallback+0x3d4>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6a1a      	ldr	r2, [r3, #32]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 80021d6:	621a      	str	r2, [r3, #32]
 80021d8:	7bbb      	ldrb	r3, [r7, #14]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d106      	bne.n	80021ec <HAL_TIM_IC_CaptureCallback+0x3e8>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6a12      	ldr	r2, [r2, #32]
 80021e8:	621a      	str	r2, [r3, #32]
 80021ea:	e019      	b.n	8002220 <HAL_TIM_IC_CaptureCallback+0x41c>
 80021ec:	7bbb      	ldrb	r3, [r7, #14]
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d106      	bne.n	8002200 <HAL_TIM_IC_CaptureCallback+0x3fc>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6a12      	ldr	r2, [r2, #32]
 80021fc:	621a      	str	r2, [r3, #32]
 80021fe:	e00f      	b.n	8002220 <HAL_TIM_IC_CaptureCallback+0x41c>
 8002200:	7bbb      	ldrb	r3, [r7, #14]
 8002202:	2b08      	cmp	r3, #8
 8002204:	d106      	bne.n	8002214 <HAL_TIM_IC_CaptureCallback+0x410>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6a12      	ldr	r2, [r2, #32]
 8002210:	621a      	str	r2, [r3, #32]
 8002212:	e005      	b.n	8002220 <HAL_TIM_IC_CaptureCallback+0x41c>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6a12      	ldr	r2, [r2, #32]
 800221e:	621a      	str	r2, [r3, #32]
			IC_Started[idx] = 0x0;															// UPDATE STATUS
 8002220:	7bfb      	ldrb	r3, [r7, #15]
 8002222:	4a03      	ldr	r2, [pc, #12]	; (8002230 <HAL_TIM_IC_CaptureCallback+0x42c>)
 8002224:	2100      	movs	r1, #0
 8002226:	54d1      	strb	r1, [r2, r3]
}
 8002228:	bf00      	nop
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	20000374 	.word	0x20000374
 8002234:	200003f0 	.word	0x200003f0
 8002238:	2000037c 	.word	0x2000037c
 800223c:	20000388 	.word	0x20000388
 8002240:	20000394 	.word	0x20000394

08002244 <QUAD_Wrapper_Init>:

static void QUAD_Wrapper_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
	quad.hi2c = &hi2c1;
 8002248:	4b08      	ldr	r3, [pc, #32]	; (800226c <QUAD_Wrapper_Init+0x28>)
 800224a:	4a09      	ldr	r2, [pc, #36]	; (8002270 <QUAD_Wrapper_Init+0x2c>)
 800224c:	601a      	str	r2, [r3, #0]
	quad.htim = &htim6;
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <QUAD_Wrapper_Init+0x28>)
 8002250:	4a08      	ldr	r2, [pc, #32]	; (8002274 <QUAD_Wrapper_Init+0x30>)
 8002252:	605a      	str	r2, [r3, #4]
	quad.OS   = &OSHOT;
 8002254:	4b05      	ldr	r3, [pc, #20]	; (800226c <QUAD_Wrapper_Init+0x28>)
 8002256:	4a08      	ldr	r2, [pc, #32]	; (8002278 <QUAD_Wrapper_Init+0x34>)
 8002258:	609a      	str	r2, [r3, #8]
	quad.PID  = &PID;
 800225a:	4b04      	ldr	r3, [pc, #16]	; (800226c <QUAD_Wrapper_Init+0x28>)
 800225c:	4a07      	ldr	r2, [pc, #28]	; (800227c <QUAD_Wrapper_Init+0x38>)
 800225e:	60da      	str	r2, [r3, #12]

	QUAD_Init(&quad);
 8002260:	4802      	ldr	r0, [pc, #8]	; (800226c <QUAD_Wrapper_Init+0x28>)
 8002262:	f000 f9bf 	bl	80025e4 <QUAD_Init>
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000590 	.word	0x20000590
 8002270:	20000430 	.word	0x20000430
 8002274:	20000550 	.word	0x20000550
 8002278:	200003b4 	.word	0x200003b4
 800227c:	20000484 	.word	0x20000484

08002280 <BMI088_Wrapper_Init>:

static void BMI088_Wrapper_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
	// CHECK DEVICE IDENTIFIERS
	if ( BMI088_I2C_Read_CHIP_IDS(&hi2c1) != HAL_OK ) { Error_Handler(); }
 8002284:	4808      	ldr	r0, [pc, #32]	; (80022a8 <BMI088_Wrapper_Init+0x28>)
 8002286:	f7fe fe5f 	bl	8000f48 <BMI088_I2C_Read_CHIP_IDS>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <BMI088_Wrapper_Init+0x14>
 8002290:	f000 f8a2 	bl	80023d8 <Error_Handler>
	// RUN BMI088 GYROSCOPE INITIALIZATION
	if ( BMI088_I2C_GYRO_INIT(&hi2c1) != HAL_OK )     { Error_Handler(); };
 8002294:	4804      	ldr	r0, [pc, #16]	; (80022a8 <BMI088_Wrapper_Init+0x28>)
 8002296:	f7fe fe92 	bl	8000fbe <BMI088_I2C_GYRO_INIT>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <BMI088_Wrapper_Init+0x24>
 80022a0:	f000 f89a 	bl	80023d8 <Error_Handler>
}
 80022a4:	bf00      	nop
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20000430 	.word	0x20000430

080022ac <OS125_Wrapper_Init>:

/* ONESHOT125 INTIALIZATION FUNCTION */
static void OS125_Wrapper_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
	OSHOT.htim     = &htim2;
 80022b0:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <OS125_Wrapper_Init+0x30>)
 80022b2:	4a0b      	ldr	r2, [pc, #44]	; (80022e0 <OS125_Wrapper_Init+0x34>)
 80022b4:	601a      	str	r2, [r3, #0]
	OSHOT.command  = PID.out;
 80022b6:	4b09      	ldr	r3, [pc, #36]	; (80022dc <OS125_Wrapper_Init+0x30>)
 80022b8:	4a0a      	ldr	r2, [pc, #40]	; (80022e4 <OS125_Wrapper_Init+0x38>)
 80022ba:	609a      	str	r2, [r3, #8]
	OSHOT.fclk     = 72000000;
 80022bc:	4b07      	ldr	r3, [pc, #28]	; (80022dc <OS125_Wrapper_Init+0x30>)
 80022be:	4a0a      	ldr	r2, [pc, #40]	; (80022e8 <OS125_Wrapper_Init+0x3c>)
 80022c0:	61da      	str	r2, [r3, #28]
	OSHOT.fclk_psc = 1 - 1;
 80022c2:	4b06      	ldr	r3, [pc, #24]	; (80022dc <OS125_Wrapper_Init+0x30>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	621a      	str	r2, [r3, #32]

	if (OS125_Init(&OSHOT) != OS125_OK) { Error_Handler(); };
 80022c8:	4804      	ldr	r0, [pc, #16]	; (80022dc <OS125_Wrapper_Init+0x30>)
 80022ca:	f000 f8ad 	bl	8002428 <OS125_Init>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <OS125_Wrapper_Init+0x2c>
 80022d4:	f000 f880 	bl	80023d8 <Error_Handler>
}
 80022d8:	bf00      	nop
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	200003b4 	.word	0x200003b4
 80022e0:	2000066c 	.word	0x2000066c
 80022e4:	20000484 	.word	0x20000484
 80022e8:	044aa200 	.word	0x044aa200

080022ec <PID3_Wrapper_Init>:

/* PID INITIALIZATION FUNCTION */
static void PID3_Wrapper_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
	if ( PID3_Init(&PID, Kp, Ki, Kd) != PID_OK )                   { Error_Handler(); }
 80022f0:	4b17      	ldr	r3, [pc, #92]	; (8002350 <PID3_Wrapper_Init+0x64>)
 80022f2:	4a18      	ldr	r2, [pc, #96]	; (8002354 <PID3_Wrapper_Init+0x68>)
 80022f4:	4918      	ldr	r1, [pc, #96]	; (8002358 <PID3_Wrapper_Init+0x6c>)
 80022f6:	4819      	ldr	r0, [pc, #100]	; (800235c <PID3_Wrapper_Init+0x70>)
 80022f8:	f7fe ff26 	bl	8001148 <PID3_Init>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <PID3_Wrapper_Init+0x1a>
 8002302:	f000 f869 	bl	80023d8 <Error_Handler>
	if ( PID3_Set_Tau(&PID, 0.02) != PID_OK)                       { Error_Handler(); }
 8002306:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8002360 <PID3_Wrapper_Init+0x74>
 800230a:	4814      	ldr	r0, [pc, #80]	; (800235c <PID3_Wrapper_Init+0x70>)
 800230c:	f7fe ffd0 	bl	80012b0 <PID3_Set_Tau>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <PID3_Wrapper_Init+0x2e>
 8002316:	f000 f85f 	bl	80023d8 <Error_Handler>
	if ( PID3_Set_Integrator_Limit(&PID, -100.0, 100.0) != PID_OK) { Error_Handler(); }
 800231a:	eddf 0a12 	vldr	s1, [pc, #72]	; 8002364 <PID3_Wrapper_Init+0x78>
 800231e:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8002368 <PID3_Wrapper_Init+0x7c>
 8002322:	480e      	ldr	r0, [pc, #56]	; (800235c <PID3_Wrapper_Init+0x70>)
 8002324:	f7fe ffdd 	bl	80012e2 <PID3_Set_Integrator_Limit>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <PID3_Wrapper_Init+0x46>
 800232e:	f000 f853 	bl	80023d8 <Error_Handler>
	if ( PID3_Set_Output_Limit(&PID, -100.0, 100.0) != PID_OK)     { Error_Handler(); }
 8002332:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8002364 <PID3_Wrapper_Init+0x78>
 8002336:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8002368 <PID3_Wrapper_Init+0x7c>
 800233a:	4808      	ldr	r0, [pc, #32]	; (800235c <PID3_Wrapper_Init+0x70>)
 800233c:	f7ff f800 	bl	8001340 <PID3_Set_Output_Limit>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <PID3_Wrapper_Init+0x5e>
 8002346:	f000 f847 	bl	80023d8 <Error_Handler>
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	0800cf70 	.word	0x0800cf70
 8002354:	0800cf64 	.word	0x0800cf64
 8002358:	0800cf58 	.word	0x0800cf58
 800235c:	20000484 	.word	0x20000484
 8002360:	3ca3d70a 	.word	0x3ca3d70a
 8002364:	42c80000 	.word	0x42c80000
 8002368:	c2c80000 	.word	0xc2c80000

0800236c <PWM_INPUT_START>:

/* START INPUT CAPTURE */
static void PWM_INPUT_START(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8002370:	2100      	movs	r1, #0
 8002372:	480c      	ldr	r0, [pc, #48]	; (80023a4 <PWM_INPUT_START+0x38>)
 8002374:	f004 f88c 	bl	8006490 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8002378:	2104      	movs	r1, #4
 800237a:	480a      	ldr	r0, [pc, #40]	; (80023a4 <PWM_INPUT_START+0x38>)
 800237c:	f004 f888 	bl	8006490 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8002380:	2108      	movs	r1, #8
 8002382:	4808      	ldr	r0, [pc, #32]	; (80023a4 <PWM_INPUT_START+0x38>)
 8002384:	f004 f884 	bl	8006490 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 8002388:	210c      	movs	r1, #12
 800238a:	4806      	ldr	r0, [pc, #24]	; (80023a4 <PWM_INPUT_START+0x38>)
 800238c:	f004 f880 	bl	8006490 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8002390:	2100      	movs	r1, #0
 8002392:	4805      	ldr	r0, [pc, #20]	; (80023a8 <PWM_INPUT_START+0x3c>)
 8002394:	f004 f87c 	bl	8006490 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8002398:	2104      	movs	r1, #4
 800239a:	4803      	ldr	r0, [pc, #12]	; (80023a8 <PWM_INPUT_START+0x3c>)
 800239c:	f004 f878 	bl	8006490 <HAL_TIM_IC_Start_IT>
}
 80023a0:	bf00      	nop
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20000510 	.word	0x20000510
 80023a8:	200003f0 	.word	0x200003f0

080023ac <PWM_OUTPUT_START>:

/* START PWM OUTPUT */
static void PWM_OUTPUT_START(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80023b0:	2100      	movs	r1, #0
 80023b2:	4808      	ldr	r0, [pc, #32]	; (80023d4 <PWM_OUTPUT_START+0x28>)
 80023b4:	f003 ffaa 	bl	800630c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80023b8:	2104      	movs	r1, #4
 80023ba:	4806      	ldr	r0, [pc, #24]	; (80023d4 <PWM_OUTPUT_START+0x28>)
 80023bc:	f003 ffa6 	bl	800630c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80023c0:	2108      	movs	r1, #8
 80023c2:	4804      	ldr	r0, [pc, #16]	; (80023d4 <PWM_OUTPUT_START+0x28>)
 80023c4:	f003 ffa2 	bl	800630c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80023c8:	210c      	movs	r1, #12
 80023ca:	4802      	ldr	r0, [pc, #8]	; (80023d4 <PWM_OUTPUT_START+0x28>)
 80023cc:	f003 ff9e 	bl	800630c <HAL_TIM_PWM_Start>
}
 80023d0:	bf00      	nop
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	2000066c 	.word	0x2000066c

080023d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023dc:	b672      	cpsid	i
  /* User can add his own implementation to report the HAL error return state */

  __disable_irq();

  // DISABLE PWM OUTPUT
  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80023de:	2100      	movs	r1, #0
 80023e0:	480e      	ldr	r0, [pc, #56]	; (800241c <Error_Handler+0x44>)
 80023e2:	f003 ffd1 	bl	8006388 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80023e6:	2104      	movs	r1, #4
 80023e8:	480c      	ldr	r0, [pc, #48]	; (800241c <Error_Handler+0x44>)
 80023ea:	f003 ffcd 	bl	8006388 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80023ee:	2108      	movs	r1, #8
 80023f0:	480a      	ldr	r0, [pc, #40]	; (800241c <Error_Handler+0x44>)
 80023f2:	f003 ffc9 	bl	8006388 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 80023f6:	210c      	movs	r1, #12
 80023f8:	4808      	ldr	r0, [pc, #32]	; (800241c <Error_Handler+0x44>)
 80023fa:	f003 ffc5 	bl	8006388 <HAL_TIM_PWM_Stop>

  // SET STATUS LEDS
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80023fe:	2200      	movs	r2, #0
 8002400:	2140      	movs	r1, #64	; 0x40
 8002402:	4807      	ldr	r0, [pc, #28]	; (8002420 <Error_Handler+0x48>)
 8002404:	f001 f930 	bl	8003668 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8002408:	2201      	movs	r2, #1
 800240a:	2180      	movs	r1, #128	; 0x80
 800240c:	4804      	ldr	r0, [pc, #16]	; (8002420 <Error_Handler+0x48>)
 800240e:	f001 f92b 	bl	8003668 <HAL_GPIO_WritePin>

  CDC_Transmit_FS((uint8_t*)"ERROR\n", 6);
 8002412:	2106      	movs	r1, #6
 8002414:	4803      	ldr	r0, [pc, #12]	; (8002424 <Error_Handler+0x4c>)
 8002416:	f007 ffa3 	bl	800a360 <CDC_Transmit_FS>

  while (1)
 800241a:	e7fe      	b.n	800241a <Error_Handler+0x42>
 800241c:	2000066c 	.word	0x2000066c
 8002420:	40020800 	.word	0x40020800
 8002424:	0800cef0 	.word	0x0800cef0

08002428 <OS125_Init>:
 * 2) Set OS.command
 * 3) Set OS.fclk
 * 4) Set OS.fclk_psc
 */
OS125_StatusTypeDef OS125_Init(ONESHOT125 *OS)
{
 8002428:	b590      	push	{r4, r7, lr}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	// GET TIMER INSTANCE
	OS->TIM = OS->htim->Instance;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	605a      	str	r2, [r3, #4]
	// CALCULATE TIMER CLOCK FREQUENCY
	OS->tim_clk = (float)OS->fclk / ((float)OS->fclk_psc + 1);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	ee07 3a90 	vmov	s15, r3
 8002442:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	ee07 3a90 	vmov	s15, r3
 800244e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002452:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002456:	ee37 7a87 	vadd.f32	s14, s15, s14
 800245a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	// CALCULATE TIMER CLOCK PERIOD
	OS->dt = 1.0/OS->tim_clk;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800246a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800246e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	// CALCULATE MAXIMUM CCR VALUE (100% Power)
	OS->CCR_MAX = (int)ceil(0.000250 / OS->dt);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247c:	4618      	mov	r0, r3
 800247e:	f7fe f863 	bl	8000548 <__aeabi_f2d>
 8002482:	4603      	mov	r3, r0
 8002484:	460c      	mov	r4, r1
 8002486:	461a      	mov	r2, r3
 8002488:	4623      	mov	r3, r4
 800248a:	a12d      	add	r1, pc, #180	; (adr r1, 8002540 <OS125_Init+0x118>)
 800248c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002490:	f7fe f9dc 	bl	800084c <__aeabi_ddiv>
 8002494:	4603      	mov	r3, r0
 8002496:	460c      	mov	r4, r1
 8002498:	ec44 3b17 	vmov	d7, r3, r4
 800249c:	eeb0 0a47 	vmov.f32	s0, s14
 80024a0:	eef0 0a67 	vmov.f32	s1, s15
 80024a4:	f00a fc14 	bl	800ccd0 <ceil>
 80024a8:	ec54 3b10 	vmov	r3, r4, d0
 80024ac:	4618      	mov	r0, r3
 80024ae:	4621      	mov	r1, r4
 80024b0:	f7fe fb52 	bl	8000b58 <__aeabi_d2iz>
 80024b4:	4602      	mov	r2, r0
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	62da      	str	r2, [r3, #44]	; 0x2c
	// CALCULATE MINIMUM CCR VALUE (0% Power)
	OS->CCR_MIN = (int)floor(0.000125 / OS->dt);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe f842 	bl	8000548 <__aeabi_f2d>
 80024c4:	4603      	mov	r3, r0
 80024c6:	460c      	mov	r4, r1
 80024c8:	461a      	mov	r2, r3
 80024ca:	4623      	mov	r3, r4
 80024cc:	a11e      	add	r1, pc, #120	; (adr r1, 8002548 <OS125_Init+0x120>)
 80024ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024d2:	f7fe f9bb 	bl	800084c <__aeabi_ddiv>
 80024d6:	4603      	mov	r3, r0
 80024d8:	460c      	mov	r4, r1
 80024da:	ec44 3b17 	vmov	d7, r3, r4
 80024de:	eeb0 0a47 	vmov.f32	s0, s14
 80024e2:	eef0 0a67 	vmov.f32	s1, s15
 80024e6:	f00a fc73 	bl	800cdd0 <floor>
 80024ea:	ec54 3b10 	vmov	r3, r4, d0
 80024ee:	4618      	mov	r0, r3
 80024f0:	4621      	mov	r1, r4
 80024f2:	f7fe fb31 	bl	8000b58 <__aeabi_d2iz>
 80024f6:	4602      	mov	r2, r0
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	631a      	str	r2, [r3, #48]	; 0x30
	// CALCULATE NUMBER OF CCR STEPS
	OS->CCR_STEPS = OS->CCR_MAX - OS->CCR_MIN;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002504:	1ad2      	subs	r2, r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	639a      	str	r2, [r3, #56]	; 0x38

	// SET ALL OUTPUTS TO 0
	for (int i = 0; i < 4; i++) { OS->CCR[i] = OS->CCR_MIN; }
 800250a:	2300      	movs	r3, #0
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	e00a      	b.n	8002526 <OS125_Init+0xfe>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	3302      	adds	r3, #2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	605a      	str	r2, [r3, #4]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	3301      	adds	r3, #1
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2b03      	cmp	r3, #3
 800252a:	ddf1      	ble.n	8002510 <OS125_Init+0xe8>
	OS125_UpdateCCR(OS);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f81a 	bl	8002566 <OS125_UpdateCCR>

	return OS125_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	bd90      	pop	{r4, r7, pc}
 800253c:	f3af 8000 	nop.w
 8002540:	d2f1a9fc 	.word	0xd2f1a9fc
 8002544:	3f30624d 	.word	0x3f30624d
 8002548:	d2f1a9fc 	.word	0xd2f1a9fc
 800254c:	3f20624d 	.word	0x3f20624d

08002550 <OS125_CommandFromSetpoint>:
/*
 * ONESHOT125 OUTPUT UPDATE FUNCTION
 * Converts PID controller output to PWM motor commands
 */
OS125_StatusTypeDef OS125_CommandFromSetpoint(ONESHOT125 *OS)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]

	// ADJUST ACCORDING TO PITCH PID OUTPUT

	// ADJUST ACCORDING TO YAW PID OUTPUT

	return OS125_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <OS125_UpdateCCR>:
/*
 * ONESHOT125 SET OUTPUT DIRECT FUNCTION
 * Updates timer CCR registers according to internal CCR array
 */
OS125_StatusTypeDef OS125_UpdateCCR(ONESHOT125 *OS)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
	OS->TIM->CCR1 = OS->CCR[0];
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	635a      	str	r2, [r3, #52]	; 0x34
	OS->TIM->CCR2 = OS->CCR[1];
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691a      	ldr	r2, [r3, #16]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	639a      	str	r2, [r3, #56]	; 0x38
	OS->TIM->CCR3 = OS->CCR[2];
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	695a      	ldr	r2, [r3, #20]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	63da      	str	r2, [r3, #60]	; 0x3c
	OS->TIM->CCR4 = OS->CCR[3];
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	699a      	ldr	r2, [r3, #24]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	641a      	str	r2, [r3, #64]	; 0x40

	return OS125_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <OS125_Disarm>:
/*
 * ONESHOT125 ALL OUTPUTS OFF FUNCTION
 * ENSURES THAT ALL MOTORS ARE OFF
 */
OS125_StatusTypeDef OS125_Disarm(ONESHOT125 *OS)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
	OS->TIM->CCR1 = OS->CCR_MIN;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	635a      	str	r2, [r3, #52]	; 0x34
	OS->TIM->CCR2 = OS->CCR_MIN;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	639a      	str	r2, [r3, #56]	; 0x38
	OS->TIM->CCR3 = OS->CCR_MIN;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	63da      	str	r2, [r3, #60]	; 0x3c
	OS->TIM->CCR4 = OS->CCR_MIN;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	641a      	str	r2, [r3, #64]	; 0x40

	return OS125_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
	...

080025e4 <QUAD_Init>:

#include "quad.h"

/* INITIALIZE QUAD ROTOR STRUCT */
void QUAD_Init(QUAD *quad)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
	// SET DEFAULT RATES
	quad->RATES[0] = X_DEFAULT_RATE; quad->RATES[1] = Y_DEFAULT_RATE; quad->RATES[2] = Z_DEFAULT_RATE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a16      	ldr	r2, [pc, #88]	; (8002648 <QUAD_Init+0x64>)
 80025f0:	615a      	str	r2, [r3, #20]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a14      	ldr	r2, [pc, #80]	; (8002648 <QUAD_Init+0x64>)
 80025f6:	619a      	str	r2, [r3, #24]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a14      	ldr	r2, [pc, #80]	; (800264c <QUAD_Init+0x68>)
 80025fc:	61da      	str	r2, [r3, #28]

	// CLEAR MEASURED ROTATION
	quad->rot[0] = 0.0; quad->rot[1] = 0.0; quad->rot[2] = 0.0;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	621a      	str	r2, [r3, #32]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f04f 0200 	mov.w	r2, #0
 800260c:	625a      	str	r2, [r3, #36]	; 0x24
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	629a      	str	r2, [r3, #40]	; 0x28

	// CLEAR SETPOINT
	quad->set[0] = 0.0; quad->set[1] = 0.0; quad->set[2] = 0.0;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f04f 0200 	mov.w	r2, #0
 800261c:	62da      	str	r2, [r3, #44]	; 0x2c
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	631a      	str	r2, [r3, #48]	; 0x30
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	635a      	str	r2, [r3, #52]	; 0x34

	// GET FIRST TIME MEASUREMENT
	quad->tprev = __HAL_TIM_GET_COUNTER(quad->htim);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	b29a      	uxth	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	821a      	strh	r2, [r3, #16]
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	40a00000 	.word	0x40a00000
 800264c:	40400000 	.word	0x40400000

08002650 <QUAD_Clear>:

/* CLEAR STATE FUNCTION */
void QUAD_Clear(QUAD *quad)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
	// CLEAR MEASURED ROTATION
	quad->rot[0] = 0.0; quad->rot[1] = 0.0; quad->rot[2] = 0.0;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	621a      	str	r2, [r3, #32]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	625a      	str	r2, [r3, #36]	; 0x24
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f04f 0200 	mov.w	r2, #0
 800266e:	629a      	str	r2, [r3, #40]	; 0x28

	// CLEAR SETPOINT
	quad->set[0] = 0.0; quad->set[1] = 0.0; quad->set[2] = 0.0;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f04f 0200 	mov.w	r2, #0
 8002676:	62da      	str	r2, [r3, #44]	; 0x2c
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f04f 0200 	mov.w	r2, #0
 800267e:	631a      	str	r2, [r3, #48]	; 0x30
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	0000      	movs	r0, r0
	...

08002698 <QUAD_UPDATE>:

/* UPDATE PROCEDURE */
void QUAD_UPDATE(QUAD *quad, volatile uint16_t *IC)
{
 8002698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800269c:	b085      	sub	sp, #20
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
 80026a2:	6039      	str	r1, [r7, #0]
	// UPDATE TIMER
	quad->telapsed = __HAL_TIM_GET_COUNTER(quad->htim) - quad->tprev;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	8a1b      	ldrh	r3, [r3, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	825a      	strh	r2, [r3, #18]
	quad->tprev    = quad->tprev + quad->telapsed;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	8a1a      	ldrh	r2, [r3, #16]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	8a5b      	ldrh	r3, [r3, #18]
 80026c2:	4413      	add	r3, r2
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	821a      	strh	r2, [r3, #16]

	// CHECK IF ARMED
	if (IC[ARM_CHANNEL] > 1500)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	3308      	adds	r3, #8
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80026d6:	4293      	cmp	r3, r2
 80026d8:	f240 8168 	bls.w	80029ac <QUAD_UPDATE+0x314>
	{
		// SET ARM_STATUS FLAG
		quad->ARM_STATUS = 0x1;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

		// READ GYROSCOPE
		if ( BMI088_I2C_Read_Gyro(quad->hi2c, quad->gyro_buf) != HAL_OK ) { Error_Handler(); }
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3339      	adds	r3, #57	; 0x39
 80026ec:	4619      	mov	r1, r3
 80026ee:	4610      	mov	r0, r2
 80026f0:	f7fe fcd5 	bl	800109e <BMI088_I2C_Read_Gyro>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <QUAD_UPDATE+0x66>
 80026fa:	f7ff fe6d 	bl	80023d8 <Error_Handler>

		// CONVERT TO SIGNED INTEGER, SCALE, AND INTEGRATE
		for (int i = 0; i < 3; i++)
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	e086      	b.n	8002812 <QUAD_UPDATE+0x17a>
		{
			quad->temp_i       = quad->gyro_buf[2*i + 1] << 8 | quad->gyro_buf[2*i];
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	3301      	adds	r3, #1
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	4413      	add	r3, r2
 800270e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002712:	021b      	lsls	r3, r3, #8
 8002714:	b21a      	sxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	440b      	add	r3, r1
 800271e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002722:	b21b      	sxth	r3, r3
 8002724:	4313      	orrs	r3, r2
 8002726:	b21a      	sxth	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
			quad->gyro_rate[i] = ((float)quad->temp_i*GYRO_RATE*M_PI)/(32767.0*180.0);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
 8002734:	ee07 3a90 	vmov	s15, r3
 8002738:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800273c:	ee17 0a90 	vmov	r0, s15
 8002740:	f7fd ff02 	bl	8000548 <__aeabi_f2d>
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	4bab      	ldr	r3, [pc, #684]	; (80029f8 <QUAD_UPDATE+0x360>)
 800274a:	f7fd ff55 	bl	80005f8 <__aeabi_dmul>
 800274e:	4603      	mov	r3, r0
 8002750:	460c      	mov	r4, r1
 8002752:	4618      	mov	r0, r3
 8002754:	4621      	mov	r1, r4
 8002756:	a3a0      	add	r3, pc, #640	; (adr r3, 80029d8 <QUAD_UPDATE+0x340>)
 8002758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275c:	f7fd ff4c 	bl	80005f8 <__aeabi_dmul>
 8002760:	4603      	mov	r3, r0
 8002762:	460c      	mov	r4, r1
 8002764:	4618      	mov	r0, r3
 8002766:	4621      	mov	r1, r4
 8002768:	a39d      	add	r3, pc, #628	; (adr r3, 80029e0 <QUAD_UPDATE+0x348>)
 800276a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276e:	f7fe f86d 	bl	800084c <__aeabi_ddiv>
 8002772:	4603      	mov	r3, r0
 8002774:	460c      	mov	r4, r1
 8002776:	4618      	mov	r0, r3
 8002778:	4621      	mov	r1, r4
 800277a:	f7fe fa15 	bl	8000ba8 <__aeabi_d2f>
 800277e:	4601      	mov	r1, r0
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	3320      	adds	r3, #32
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	6019      	str	r1, [r3, #0]
			quad->rot[i]       = quad->rot[i] + 0.000001*(float)quad->telapsed*quad->gyro_rate[i];
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	3308      	adds	r3, #8
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f7fd fed5 	bl	8000548 <__aeabi_f2d>
 800279e:	4604      	mov	r4, r0
 80027a0:	460d      	mov	r5, r1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	8a5b      	ldrh	r3, [r3, #18]
 80027a6:	ee07 3a90 	vmov	s15, r3
 80027aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ae:	ee17 0a90 	vmov	r0, s15
 80027b2:	f7fd fec9 	bl	8000548 <__aeabi_f2d>
 80027b6:	a38c      	add	r3, pc, #560	; (adr r3, 80029e8 <QUAD_UPDATE+0x350>)
 80027b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027bc:	f7fd ff1c 	bl	80005f8 <__aeabi_dmul>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4690      	mov	r8, r2
 80027c6:	4699      	mov	r9, r3
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	3320      	adds	r3, #32
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fd feb7 	bl	8000548 <__aeabi_f2d>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	4640      	mov	r0, r8
 80027e0:	4649      	mov	r1, r9
 80027e2:	f7fd ff09 	bl	80005f8 <__aeabi_dmul>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	4620      	mov	r0, r4
 80027ec:	4629      	mov	r1, r5
 80027ee:	f7fd fd4d 	bl	800028c <__adddf3>
 80027f2:	4603      	mov	r3, r0
 80027f4:	460c      	mov	r4, r1
 80027f6:	4618      	mov	r0, r3
 80027f8:	4621      	mov	r1, r4
 80027fa:	f7fe f9d5 	bl	8000ba8 <__aeabi_d2f>
 80027fe:	4601      	mov	r1, r0
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	3308      	adds	r3, #8
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	6019      	str	r1, [r3, #0]
		for (int i = 0; i < 3; i++)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	3301      	adds	r3, #1
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2b02      	cmp	r3, #2
 8002816:	f77f af75 	ble.w	8002704 <QUAD_UPDATE+0x6c>
		}

		// UPDATE ROTATION SETPOINT
		for (int i = 0; i < 3; i++)
 800281a:	2300      	movs	r3, #0
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	e082      	b.n	8002926 <QUAD_UPDATE+0x28e>
		{
			quad->stick_rate[i] = quad->RATES[i]*((float)IC[i+1] - 1500.0)/500.0;
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	3304      	adds	r3, #4
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	3304      	adds	r3, #4
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f7fd fe8a 	bl	8000548 <__aeabi_f2d>
 8002834:	4604      	mov	r4, r0
 8002836:	460d      	mov	r5, r1
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	3301      	adds	r3, #1
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	4413      	add	r3, r2
 8002842:	881b      	ldrh	r3, [r3, #0]
 8002844:	b29b      	uxth	r3, r3
 8002846:	ee07 3a90 	vmov	s15, r3
 800284a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800284e:	ee17 0a90 	vmov	r0, s15
 8002852:	f7fd fe79 	bl	8000548 <__aeabi_f2d>
 8002856:	a366      	add	r3, pc, #408	; (adr r3, 80029f0 <QUAD_UPDATE+0x358>)
 8002858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285c:	f7fd fd14 	bl	8000288 <__aeabi_dsub>
 8002860:	4602      	mov	r2, r0
 8002862:	460b      	mov	r3, r1
 8002864:	4620      	mov	r0, r4
 8002866:	4629      	mov	r1, r5
 8002868:	f7fd fec6 	bl	80005f8 <__aeabi_dmul>
 800286c:	4603      	mov	r3, r0
 800286e:	460c      	mov	r4, r1
 8002870:	4618      	mov	r0, r3
 8002872:	4621      	mov	r1, r4
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	4b60      	ldr	r3, [pc, #384]	; (80029fc <QUAD_UPDATE+0x364>)
 800287a:	f7fd ffe7 	bl	800084c <__aeabi_ddiv>
 800287e:	4603      	mov	r3, r0
 8002880:	460c      	mov	r4, r1
 8002882:	4618      	mov	r0, r3
 8002884:	4621      	mov	r1, r4
 8002886:	f7fe f98f 	bl	8000ba8 <__aeabi_d2f>
 800288a:	4601      	mov	r1, r0
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	3322      	adds	r3, #34	; 0x22
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	3304      	adds	r3, #4
 8002898:	6019      	str	r1, [r3, #0]
			quad->set[i]        = quad->set[i] + 0.000001*(float)quad->telapsed*quad->stick_rate[i];
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	330a      	adds	r3, #10
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	3304      	adds	r3, #4
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fd fe4d 	bl	8000548 <__aeabi_f2d>
 80028ae:	4604      	mov	r4, r0
 80028b0:	460d      	mov	r5, r1
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	8a5b      	ldrh	r3, [r3, #18]
 80028b6:	ee07 3a90 	vmov	s15, r3
 80028ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028be:	ee17 0a90 	vmov	r0, s15
 80028c2:	f7fd fe41 	bl	8000548 <__aeabi_f2d>
 80028c6:	a348      	add	r3, pc, #288	; (adr r3, 80029e8 <QUAD_UPDATE+0x350>)
 80028c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028cc:	f7fd fe94 	bl	80005f8 <__aeabi_dmul>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	4690      	mov	r8, r2
 80028d6:	4699      	mov	r9, r3
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	3322      	adds	r3, #34	; 0x22
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	3304      	adds	r3, #4
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fd fe2e 	bl	8000548 <__aeabi_f2d>
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	4640      	mov	r0, r8
 80028f2:	4649      	mov	r1, r9
 80028f4:	f7fd fe80 	bl	80005f8 <__aeabi_dmul>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	4620      	mov	r0, r4
 80028fe:	4629      	mov	r1, r5
 8002900:	f7fd fcc4 	bl	800028c <__adddf3>
 8002904:	4603      	mov	r3, r0
 8002906:	460c      	mov	r4, r1
 8002908:	4618      	mov	r0, r3
 800290a:	4621      	mov	r1, r4
 800290c:	f7fe f94c 	bl	8000ba8 <__aeabi_d2f>
 8002910:	4601      	mov	r1, r0
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	330a      	adds	r3, #10
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	3304      	adds	r3, #4
 800291e:	6019      	str	r1, [r3, #0]
		for (int i = 0; i < 3; i++)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	3301      	adds	r3, #1
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b02      	cmp	r3, #2
 800292a:	f77f af79 	ble.w	8002820 <QUAD_UPDATE+0x188>
		}

		// ITERATE PID ALGORITHM
		if (PID3_Update(quad->PID, quad->set, quad->rot, 0.000001*(float)quad->telapsed) != PID_OK) { Error_Handler(); }
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68dc      	ldr	r4, [r3, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f103 0620 	add.w	r6, r3, #32
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	8a5b      	ldrh	r3, [r3, #18]
 8002942:	ee07 3a90 	vmov	s15, r3
 8002946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800294a:	ee17 0a90 	vmov	r0, s15
 800294e:	f7fd fdfb 	bl	8000548 <__aeabi_f2d>
 8002952:	a325      	add	r3, pc, #148	; (adr r3, 80029e8 <QUAD_UPDATE+0x350>)
 8002954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002958:	f7fd fe4e 	bl	80005f8 <__aeabi_dmul>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	4610      	mov	r0, r2
 8002962:	4619      	mov	r1, r3
 8002964:	f7fe f920 	bl	8000ba8 <__aeabi_d2f>
 8002968:	4603      	mov	r3, r0
 800296a:	ee00 3a10 	vmov	s0, r3
 800296e:	4632      	mov	r2, r6
 8002970:	4629      	mov	r1, r5
 8002972:	4620      	mov	r0, r4
 8002974:	f7fe fd14 	bl	80013a0 <PID3_Update>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <QUAD_UPDATE+0x2ea>
 800297e:	f7ff fd2b 	bl	80023d8 <Error_Handler>

		// UPDATE MOTOR SETTINGS
		if (OS125_CommandFromSetpoint(quad->OS) != OS125_OK) { Error_Handler(); }
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff fde2 	bl	8002550 <OS125_CommandFromSetpoint>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <QUAD_UPDATE+0x2fe>
 8002992:	f7ff fd21 	bl	80023d8 <Error_Handler>
		if (OS125_UpdateCCR(quad->OS) != OS125_OK) { Error_Handler(); }
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff fde3 	bl	8002566 <OS125_UpdateCCR>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d013      	beq.n	80029ce <QUAD_UPDATE+0x336>
 80029a6:	f7ff fd17 	bl	80023d8 <Error_Handler>
		QUAD_Clear(quad);
		PID3_Clear(quad->PID);
		OS125_Disarm(quad->OS);
	}

}
 80029aa:	e010      	b.n	80029ce <QUAD_UPDATE+0x336>
		quad->ARM_STATUS = 0x0;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		QUAD_Clear(quad);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7ff fe4b 	bl	8002650 <QUAD_Clear>
		PID3_Clear(quad->PID);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fe fc38 	bl	8001234 <PID3_Clear>
		OS125_Disarm(quad->OS);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff fdeb 	bl	80025a4 <OS125_Disarm>
}
 80029ce:	bf00      	nop
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80029d8:	54442d18 	.word	0x54442d18
 80029dc:	400921fb 	.word	0x400921fb
 80029e0:	00000000 	.word	0x00000000
 80029e4:	41567fd3 	.word	0x41567fd3
 80029e8:	a0b5ed8d 	.word	0xa0b5ed8d
 80029ec:	3eb0c6f7 	.word	0x3eb0c6f7
 80029f0:	00000000 	.word	0x00000000
 80029f4:	40977000 	.word	0x40977000
 80029f8:	409f4000 	.word	0x409f4000
 80029fc:	407f4000 	.word	0x407f4000

08002a00 <QUAD_SEND_ORIENTATION>:

/* SEND ORIENTATION OVER SERIAL */
void QUAD_SEND_ORIENTATION(QUAD *quad)
{
 8002a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a04:	b093      	sub	sp, #76	; 0x4c
 8002a06:	af0c      	add	r7, sp, #48	; 0x30
 8002a08:	6178      	str	r0, [r7, #20]
	// SEND ORIENTATION DATA OVER VIRTUAL COM PORT
	// DATA FORMAT: [X ANGLE]    [Y ANGLE]    [Z ANGLE]    [OTHER]
	sprintf(quad->tx_buf, "%f\t%f\t%f\t%f\t%f\t%f\t%i\n", quad->set[0], quad->set[1], quad->set[2], quad->PID->out[0], quad->PID->out[1], quad->PID->out[2], quad->OS->CCR_MIN);
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f103 063f 	add.w	r6, r3, #63	; 0x3f
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7fd fd97 	bl	8000548 <__aeabi_f2d>
 8002a1a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fd fd90 	bl	8000548 <__aeabi_f2d>
 8002a28:	4604      	mov	r4, r0
 8002a2a:	460d      	mov	r5, r1
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fd fd89 	bl	8000548 <__aeabi_f2d>
 8002a36:	4680      	mov	r8, r0
 8002a38:	4689      	mov	r9, r1
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fd fd81 	bl	8000548 <__aeabi_f2d>
 8002a46:	4682      	mov	sl, r0
 8002a48:	468b      	mov	fp, r1
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7fd fd79 	bl	8000548 <__aeabi_f2d>
 8002a56:	e9c7 0100 	strd	r0, r1, [r7]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fd fd71 	bl	8000548 <__aeabi_f2d>
 8002a66:	460a      	mov	r2, r1
 8002a68:	4601      	mov	r1, r0
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a70:	930a      	str	r3, [sp, #40]	; 0x28
 8002a72:	e9cd 1208 	strd	r1, r2, [sp, #32]
 8002a76:	ed97 7b00 	vldr	d7, [r7]
 8002a7a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002a7e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002a82:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002a86:	e9cd 4500 	strd	r4, r5, [sp]
 8002a8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a8e:	4913      	ldr	r1, [pc, #76]	; (8002adc <QUAD_SEND_ORIENTATION+0xdc>)
 8002a90:	4630      	mov	r0, r6
 8002a92:	f008 fdfd 	bl	800b690 <siprintf>
	CDC_Transmit_FS((uint8_t*)(quad->tx_buf), strlen(quad->tx_buf));
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f103 043f 	add.w	r4, r3, #63	; 0x3f
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	333f      	adds	r3, #63	; 0x3f
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fd fb95 	bl	80001d0 <strlen>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4620      	mov	r0, r4
 8002aae:	f007 fc57 	bl	800a360 <CDC_Transmit_FS>

	// ALSO CHECK IF WE NEED TO UPDATE ARM_STATUS LED
	if (quad->ARM_STATUS == 1) { HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET); }
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d105      	bne.n	8002ac8 <QUAD_SEND_ORIENTATION+0xc8>
 8002abc:	2201      	movs	r2, #1
 8002abe:	2180      	movs	r1, #128	; 0x80
 8002ac0:	4807      	ldr	r0, [pc, #28]	; (8002ae0 <QUAD_SEND_ORIENTATION+0xe0>)
 8002ac2:	f000 fdd1 	bl	8003668 <HAL_GPIO_WritePin>
	else { HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET); }
}
 8002ac6:	e004      	b.n	8002ad2 <QUAD_SEND_ORIENTATION+0xd2>
	else { HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET); }
 8002ac8:	2200      	movs	r2, #0
 8002aca:	2180      	movs	r1, #128	; 0x80
 8002acc:	4804      	ldr	r0, [pc, #16]	; (8002ae0 <QUAD_SEND_ORIENTATION+0xe0>)
 8002ace:	f000 fdcb 	bl	8003668 <HAL_GPIO_WritePin>
}
 8002ad2:	bf00      	nop
 8002ad4:	371c      	adds	r7, #28
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002adc:	0800cef8 	.word	0x0800cef8
 8002ae0:	40020800 	.word	0x40020800

08002ae4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	607b      	str	r3, [r7, #4]
 8002aee:	4b10      	ldr	r3, [pc, #64]	; (8002b30 <HAL_MspInit+0x4c>)
 8002af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af2:	4a0f      	ldr	r2, [pc, #60]	; (8002b30 <HAL_MspInit+0x4c>)
 8002af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002af8:	6453      	str	r3, [r2, #68]	; 0x44
 8002afa:	4b0d      	ldr	r3, [pc, #52]	; (8002b30 <HAL_MspInit+0x4c>)
 8002afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b02:	607b      	str	r3, [r7, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b06:	2300      	movs	r3, #0
 8002b08:	603b      	str	r3, [r7, #0]
 8002b0a:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <HAL_MspInit+0x4c>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	4a08      	ldr	r2, [pc, #32]	; (8002b30 <HAL_MspInit+0x4c>)
 8002b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b14:	6413      	str	r3, [r2, #64]	; 0x40
 8002b16:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <HAL_MspInit+0x4c>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1e:	603b      	str	r3, [r7, #0]
 8002b20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40023800 	.word	0x40023800

08002b34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b08a      	sub	sp, #40	; 0x28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b3c:	f107 0314 	add.w	r3, r7, #20
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	609a      	str	r2, [r3, #8]
 8002b48:	60da      	str	r2, [r3, #12]
 8002b4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a19      	ldr	r2, [pc, #100]	; (8002bb8 <HAL_I2C_MspInit+0x84>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d12c      	bne.n	8002bb0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	4b18      	ldr	r3, [pc, #96]	; (8002bbc <HAL_I2C_MspInit+0x88>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	4a17      	ldr	r2, [pc, #92]	; (8002bbc <HAL_I2C_MspInit+0x88>)
 8002b60:	f043 0302 	orr.w	r3, r3, #2
 8002b64:	6313      	str	r3, [r2, #48]	; 0x30
 8002b66:	4b15      	ldr	r3, [pc, #84]	; (8002bbc <HAL_I2C_MspInit+0x88>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	613b      	str	r3, [r7, #16]
 8002b70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b78:	2312      	movs	r3, #18
 8002b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b80:	2303      	movs	r3, #3
 8002b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b84:	2304      	movs	r3, #4
 8002b86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b88:	f107 0314 	add.w	r3, r7, #20
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	480c      	ldr	r0, [pc, #48]	; (8002bc0 <HAL_I2C_MspInit+0x8c>)
 8002b90:	f000 fbd0 	bl	8003334 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b94:	2300      	movs	r3, #0
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <HAL_I2C_MspInit+0x88>)
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	4a07      	ldr	r2, [pc, #28]	; (8002bbc <HAL_I2C_MspInit+0x88>)
 8002b9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ba2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ba4:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <HAL_I2C_MspInit+0x88>)
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bac:	60fb      	str	r3, [r7, #12]
 8002bae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002bb0:	bf00      	nop
 8002bb2:	3728      	adds	r7, #40	; 0x28
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40005400 	.word	0x40005400
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	40020400 	.word	0x40020400

08002bc4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd4:	d10d      	bne.n	8002bf2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <HAL_TIM_PWM_MspInit+0x3c>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	4a08      	ldr	r2, [pc, #32]	; (8002c00 <HAL_TIM_PWM_MspInit+0x3c>)
 8002be0:	f043 0301 	orr.w	r3, r3, #1
 8002be4:	6413      	str	r3, [r2, #64]	; 0x40
 8002be6:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <HAL_TIM_PWM_MspInit+0x3c>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002bf2:	bf00      	nop
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	40023800 	.word	0x40023800

08002c04 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08c      	sub	sp, #48	; 0x30
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c0c:	f107 031c 	add.w	r3, r7, #28
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	605a      	str	r2, [r3, #4]
 8002c16:	609a      	str	r2, [r3, #8]
 8002c18:	60da      	str	r2, [r3, #12]
 8002c1a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a49      	ldr	r2, [pc, #292]	; (8002d48 <HAL_TIM_IC_MspInit+0x144>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d152      	bne.n	8002ccc <HAL_TIM_IC_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c26:	2300      	movs	r3, #0
 8002c28:	61bb      	str	r3, [r7, #24]
 8002c2a:	4b48      	ldr	r3, [pc, #288]	; (8002d4c <HAL_TIM_IC_MspInit+0x148>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	4a47      	ldr	r2, [pc, #284]	; (8002d4c <HAL_TIM_IC_MspInit+0x148>)
 8002c30:	f043 0302 	orr.w	r3, r3, #2
 8002c34:	6413      	str	r3, [r2, #64]	; 0x40
 8002c36:	4b45      	ldr	r3, [pc, #276]	; (8002d4c <HAL_TIM_IC_MspInit+0x148>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	61bb      	str	r3, [r7, #24]
 8002c40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	617b      	str	r3, [r7, #20]
 8002c46:	4b41      	ldr	r3, [pc, #260]	; (8002d4c <HAL_TIM_IC_MspInit+0x148>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	4a40      	ldr	r2, [pc, #256]	; (8002d4c <HAL_TIM_IC_MspInit+0x148>)
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	6313      	str	r3, [r2, #48]	; 0x30
 8002c52:	4b3e      	ldr	r3, [pc, #248]	; (8002d4c <HAL_TIM_IC_MspInit+0x148>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	4b3a      	ldr	r3, [pc, #232]	; (8002d4c <HAL_TIM_IC_MspInit+0x148>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	4a39      	ldr	r2, [pc, #228]	; (8002d4c <HAL_TIM_IC_MspInit+0x148>)
 8002c68:	f043 0302 	orr.w	r3, r3, #2
 8002c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6e:	4b37      	ldr	r3, [pc, #220]	; (8002d4c <HAL_TIM_IC_MspInit+0x148>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	693b      	ldr	r3, [r7, #16]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c7a:	23c0      	movs	r3, #192	; 0xc0
 8002c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7e:	2302      	movs	r3, #2
 8002c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c86:	2300      	movs	r3, #0
 8002c88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c8e:	f107 031c 	add.w	r3, r7, #28
 8002c92:	4619      	mov	r1, r3
 8002c94:	482e      	ldr	r0, [pc, #184]	; (8002d50 <HAL_TIM_IC_MspInit+0x14c>)
 8002c96:	f000 fb4d 	bl	8003334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002caa:	2302      	movs	r3, #2
 8002cac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cae:	f107 031c 	add.w	r3, r7, #28
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4827      	ldr	r0, [pc, #156]	; (8002d54 <HAL_TIM_IC_MspInit+0x150>)
 8002cb6:	f000 fb3d 	bl	8003334 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	201d      	movs	r0, #29
 8002cc0:	f000 fb01 	bl	80032c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002cc4:	201d      	movs	r0, #29
 8002cc6:	f000 fb1a 	bl	80032fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002cca:	e038      	b.n	8002d3e <HAL_TIM_IC_MspInit+0x13a>
  else if(htim_ic->Instance==TIM4)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a21      	ldr	r2, [pc, #132]	; (8002d58 <HAL_TIM_IC_MspInit+0x154>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d133      	bne.n	8002d3e <HAL_TIM_IC_MspInit+0x13a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	4b1c      	ldr	r3, [pc, #112]	; (8002d4c <HAL_TIM_IC_MspInit+0x148>)
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	4a1b      	ldr	r2, [pc, #108]	; (8002d4c <HAL_TIM_IC_MspInit+0x148>)
 8002ce0:	f043 0304 	orr.w	r3, r3, #4
 8002ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce6:	4b19      	ldr	r3, [pc, #100]	; (8002d4c <HAL_TIM_IC_MspInit+0x148>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	f003 0304 	and.w	r3, r3, #4
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60bb      	str	r3, [r7, #8]
 8002cf6:	4b15      	ldr	r3, [pc, #84]	; (8002d4c <HAL_TIM_IC_MspInit+0x148>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	4a14      	ldr	r2, [pc, #80]	; (8002d4c <HAL_TIM_IC_MspInit+0x148>)
 8002cfc:	f043 0302 	orr.w	r3, r3, #2
 8002d00:	6313      	str	r3, [r2, #48]	; 0x30
 8002d02:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <HAL_TIM_IC_MspInit+0x148>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	60bb      	str	r3, [r7, #8]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d0e:	23c0      	movs	r3, #192	; 0xc0
 8002d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d12:	2302      	movs	r3, #2
 8002d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d16:	2300      	movs	r3, #0
 8002d18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d1e:	2302      	movs	r3, #2
 8002d20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d22:	f107 031c 	add.w	r3, r7, #28
 8002d26:	4619      	mov	r1, r3
 8002d28:	480a      	ldr	r0, [pc, #40]	; (8002d54 <HAL_TIM_IC_MspInit+0x150>)
 8002d2a:	f000 fb03 	bl	8003334 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2100      	movs	r1, #0
 8002d32:	201e      	movs	r0, #30
 8002d34:	f000 fac7 	bl	80032c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002d38:	201e      	movs	r0, #30
 8002d3a:	f000 fae0 	bl	80032fe <HAL_NVIC_EnableIRQ>
}
 8002d3e:	bf00      	nop
 8002d40:	3730      	adds	r7, #48	; 0x30
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40000400 	.word	0x40000400
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	40020000 	.word	0x40020000
 8002d54:	40020400 	.word	0x40020400
 8002d58:	40000800 	.word	0x40000800

08002d5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a18      	ldr	r2, [pc, #96]	; (8002dcc <HAL_TIM_Base_MspInit+0x70>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d10e      	bne.n	8002d8c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	4b17      	ldr	r3, [pc, #92]	; (8002dd0 <HAL_TIM_Base_MspInit+0x74>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	4a16      	ldr	r2, [pc, #88]	; (8002dd0 <HAL_TIM_Base_MspInit+0x74>)
 8002d78:	f043 0310 	orr.w	r3, r3, #16
 8002d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d7e:	4b14      	ldr	r3, [pc, #80]	; (8002dd0 <HAL_TIM_Base_MspInit+0x74>)
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	f003 0310 	and.w	r3, r3, #16
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002d8a:	e01a      	b.n	8002dc2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a10      	ldr	r2, [pc, #64]	; (8002dd4 <HAL_TIM_Base_MspInit+0x78>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d115      	bne.n	8002dc2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002d96:	2300      	movs	r3, #0
 8002d98:	60bb      	str	r3, [r7, #8]
 8002d9a:	4b0d      	ldr	r3, [pc, #52]	; (8002dd0 <HAL_TIM_Base_MspInit+0x74>)
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	4a0c      	ldr	r2, [pc, #48]	; (8002dd0 <HAL_TIM_Base_MspInit+0x74>)
 8002da0:	f043 0320 	orr.w	r3, r3, #32
 8002da4:	6413      	str	r3, [r2, #64]	; 0x40
 8002da6:	4b0a      	ldr	r3, [pc, #40]	; (8002dd0 <HAL_TIM_Base_MspInit+0x74>)
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	f003 0320 	and.w	r3, r3, #32
 8002dae:	60bb      	str	r3, [r7, #8]
 8002db0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 8002db2:	2200      	movs	r2, #0
 8002db4:	2102      	movs	r1, #2
 8002db6:	2037      	movs	r0, #55	; 0x37
 8002db8:	f000 fa85 	bl	80032c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002dbc:	2037      	movs	r0, #55	; 0x37
 8002dbe:	f000 fa9e 	bl	80032fe <HAL_NVIC_EnableIRQ>
}
 8002dc2:	bf00      	nop
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40001000 	.word	0x40001000
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	40001400 	.word	0x40001400

08002dd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b088      	sub	sp, #32
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de0:	f107 030c 	add.w	r3, r7, #12
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	605a      	str	r2, [r3, #4]
 8002dea:	609a      	str	r2, [r3, #8]
 8002dec:	60da      	str	r2, [r3, #12]
 8002dee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df8:	d11d      	bne.n	8002e36 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60bb      	str	r3, [r7, #8]
 8002dfe:	4b10      	ldr	r3, [pc, #64]	; (8002e40 <HAL_TIM_MspPostInit+0x68>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	4a0f      	ldr	r2, [pc, #60]	; (8002e40 <HAL_TIM_MspPostInit+0x68>)
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	6313      	str	r3, [r2, #48]	; 0x30
 8002e0a:	4b0d      	ldr	r3, [pc, #52]	; (8002e40 <HAL_TIM_MspPostInit+0x68>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	60bb      	str	r3, [r7, #8]
 8002e14:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002e16:	230f      	movs	r3, #15
 8002e18:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e22:	2300      	movs	r3, #0
 8002e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e26:	2301      	movs	r3, #1
 8002e28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e2a:	f107 030c 	add.w	r3, r7, #12
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4804      	ldr	r0, [pc, #16]	; (8002e44 <HAL_TIM_MspPostInit+0x6c>)
 8002e32:	f000 fa7f 	bl	8003334 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002e36:	bf00      	nop
 8002e38:	3720      	adds	r7, #32
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40023800 	.word	0x40023800
 8002e44:	40020000 	.word	0x40020000

08002e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e4c:	e7fe      	b.n	8002e4c <NMI_Handler+0x4>

08002e4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e52:	e7fe      	b.n	8002e52 <HardFault_Handler+0x4>

08002e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e58:	e7fe      	b.n	8002e58 <MemManage_Handler+0x4>

08002e5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e5e:	e7fe      	b.n	8002e5e <BusFault_Handler+0x4>

08002e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e64:	e7fe      	b.n	8002e64 <UsageFault_Handler+0x4>

08002e66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e66:	b480      	push	{r7}
 8002e68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e6a:	bf00      	nop
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e78:	bf00      	nop
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e82:	b480      	push	{r7}
 8002e84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e86:	bf00      	nop
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e94:	f000 f8fa 	bl	800308c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e98:	bf00      	nop
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002ea0:	4802      	ldr	r0, [pc, #8]	; (8002eac <TIM3_IRQHandler+0x10>)
 8002ea2:	f003 fb5d 	bl	8006560 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002ea6:	bf00      	nop
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	20000510 	.word	0x20000510

08002eb0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002eb4:	4802      	ldr	r0, [pc, #8]	; (8002ec0 <TIM4_IRQHandler+0x10>)
 8002eb6:	f003 fb53 	bl	8006560 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002eba:	bf00      	nop
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	200003f0 	.word	0x200003f0

08002ec4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002ec8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002ecc:	f000 fbe6 	bl	800369c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ed0:	bf00      	nop
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002ed8:	4802      	ldr	r0, [pc, #8]	; (8002ee4 <TIM7_IRQHandler+0x10>)
 8002eda:	f003 fb41 	bl	8006560 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	200006ac 	.word	0x200006ac

08002ee8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002eec:	4802      	ldr	r0, [pc, #8]	; (8002ef8 <OTG_FS_IRQHandler+0x10>)
 8002eee:	f001 fcf0 	bl	80048d2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20001bc0 	.word	0x20001bc0

08002efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f04:	4a14      	ldr	r2, [pc, #80]	; (8002f58 <_sbrk+0x5c>)
 8002f06:	4b15      	ldr	r3, [pc, #84]	; (8002f5c <_sbrk+0x60>)
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f10:	4b13      	ldr	r3, [pc, #76]	; (8002f60 <_sbrk+0x64>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d102      	bne.n	8002f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f18:	4b11      	ldr	r3, [pc, #68]	; (8002f60 <_sbrk+0x64>)
 8002f1a:	4a12      	ldr	r2, [pc, #72]	; (8002f64 <_sbrk+0x68>)
 8002f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f1e:	4b10      	ldr	r3, [pc, #64]	; (8002f60 <_sbrk+0x64>)
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4413      	add	r3, r2
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d207      	bcs.n	8002f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f2c:	f007 fe5a 	bl	800abe4 <__errno>
 8002f30:	4602      	mov	r2, r0
 8002f32:	230c      	movs	r3, #12
 8002f34:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002f36:	f04f 33ff 	mov.w	r3, #4294967295
 8002f3a:	e009      	b.n	8002f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f3c:	4b08      	ldr	r3, [pc, #32]	; (8002f60 <_sbrk+0x64>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f42:	4b07      	ldr	r3, [pc, #28]	; (8002f60 <_sbrk+0x64>)
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4413      	add	r3, r2
 8002f4a:	4a05      	ldr	r2, [pc, #20]	; (8002f60 <_sbrk+0x64>)
 8002f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	20020000 	.word	0x20020000
 8002f5c:	00000400 	.word	0x00000400
 8002f60:	200003a4 	.word	0x200003a4
 8002f64:	20001fd0 	.word	0x20001fd0

08002f68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f6c:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <SystemInit+0x28>)
 8002f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f72:	4a07      	ldr	r2, [pc, #28]	; (8002f90 <SystemInit+0x28>)
 8002f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f7c:	4b04      	ldr	r3, [pc, #16]	; (8002f90 <SystemInit+0x28>)
 8002f7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f82:	609a      	str	r2, [r3, #8]
#endif
}
 8002f84:	bf00      	nop
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	e000ed00 	.word	0xe000ed00

08002f94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fcc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f9a:	e003      	b.n	8002fa4 <LoopCopyDataInit>

08002f9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002fa0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002fa2:	3104      	adds	r1, #4

08002fa4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002fa4:	480b      	ldr	r0, [pc, #44]	; (8002fd4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002fa6:	4b0c      	ldr	r3, [pc, #48]	; (8002fd8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002fa8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002faa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002fac:	d3f6      	bcc.n	8002f9c <CopyDataInit>
  ldr  r2, =_sbss
 8002fae:	4a0b      	ldr	r2, [pc, #44]	; (8002fdc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002fb0:	e002      	b.n	8002fb8 <LoopFillZerobss>

08002fb2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002fb2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002fb4:	f842 3b04 	str.w	r3, [r2], #4

08002fb8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002fb8:	4b09      	ldr	r3, [pc, #36]	; (8002fe0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002fba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002fbc:	d3f9      	bcc.n	8002fb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002fbe:	f7ff ffd3 	bl	8002f68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fc2:	f007 fe15 	bl	800abf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fc6:	f7fe fbd9 	bl	800177c <main>
  bx  lr    
 8002fca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002fcc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002fd0:	0800d200 	.word	0x0800d200
  ldr  r0, =_sdata
 8002fd4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002fd8:	20000358 	.word	0x20000358
  ldr  r2, =_sbss
 8002fdc:	20000358 	.word	0x20000358
  ldr  r3, = _ebss
 8002fe0:	20001fcc 	.word	0x20001fcc

08002fe4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fe4:	e7fe      	b.n	8002fe4 <ADC_IRQHandler>
	...

08002fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fec:	4b0e      	ldr	r3, [pc, #56]	; (8003028 <HAL_Init+0x40>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a0d      	ldr	r2, [pc, #52]	; (8003028 <HAL_Init+0x40>)
 8002ff2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ff6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <HAL_Init+0x40>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a0a      	ldr	r2, [pc, #40]	; (8003028 <HAL_Init+0x40>)
 8002ffe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003002:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003004:	4b08      	ldr	r3, [pc, #32]	; (8003028 <HAL_Init+0x40>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a07      	ldr	r2, [pc, #28]	; (8003028 <HAL_Init+0x40>)
 800300a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800300e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003010:	2003      	movs	r0, #3
 8003012:	f000 f94d 	bl	80032b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003016:	2000      	movs	r0, #0
 8003018:	f000 f808 	bl	800302c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800301c:	f7ff fd62 	bl	8002ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40023c00 	.word	0x40023c00

0800302c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003034:	4b12      	ldr	r3, [pc, #72]	; (8003080 <HAL_InitTick+0x54>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	4b12      	ldr	r3, [pc, #72]	; (8003084 <HAL_InitTick+0x58>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	4619      	mov	r1, r3
 800303e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003042:	fbb3 f3f1 	udiv	r3, r3, r1
 8003046:	fbb2 f3f3 	udiv	r3, r2, r3
 800304a:	4618      	mov	r0, r3
 800304c:	f000 f965 	bl	800331a <HAL_SYSTICK_Config>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e00e      	b.n	8003078 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b0f      	cmp	r3, #15
 800305e:	d80a      	bhi.n	8003076 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003060:	2200      	movs	r2, #0
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	f04f 30ff 	mov.w	r0, #4294967295
 8003068:	f000 f92d 	bl	80032c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800306c:	4a06      	ldr	r2, [pc, #24]	; (8003088 <HAL_InitTick+0x5c>)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	e000      	b.n	8003078 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
}
 8003078:	4618      	mov	r0, r3
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	20000000 	.word	0x20000000
 8003084:	20000008 	.word	0x20000008
 8003088:	20000004 	.word	0x20000004

0800308c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003090:	4b06      	ldr	r3, [pc, #24]	; (80030ac <HAL_IncTick+0x20>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	461a      	mov	r2, r3
 8003096:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <HAL_IncTick+0x24>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4413      	add	r3, r2
 800309c:	4a04      	ldr	r2, [pc, #16]	; (80030b0 <HAL_IncTick+0x24>)
 800309e:	6013      	str	r3, [r2, #0]
}
 80030a0:	bf00      	nop
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	20000008 	.word	0x20000008
 80030b0:	200006ec 	.word	0x200006ec

080030b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  return uwTick;
 80030b8:	4b03      	ldr	r3, [pc, #12]	; (80030c8 <HAL_GetTick+0x14>)
 80030ba:	681b      	ldr	r3, [r3, #0]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	200006ec 	.word	0x200006ec

080030cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030d4:	f7ff ffee 	bl	80030b4 <HAL_GetTick>
 80030d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e4:	d005      	beq.n	80030f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030e6:	4b09      	ldr	r3, [pc, #36]	; (800310c <HAL_Delay+0x40>)
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	461a      	mov	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4413      	add	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030f2:	bf00      	nop
 80030f4:	f7ff ffde 	bl	80030b4 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	429a      	cmp	r2, r3
 8003102:	d8f7      	bhi.n	80030f4 <HAL_Delay+0x28>
  {
  }
}
 8003104:	bf00      	nop
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	20000008 	.word	0x20000008

08003110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003120:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <__NVIC_SetPriorityGrouping+0x44>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800312c:	4013      	ands	r3, r2
 800312e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003138:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800313c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003142:	4a04      	ldr	r2, [pc, #16]	; (8003154 <__NVIC_SetPriorityGrouping+0x44>)
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	60d3      	str	r3, [r2, #12]
}
 8003148:	bf00      	nop
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	e000ed00 	.word	0xe000ed00

08003158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800315c:	4b04      	ldr	r3, [pc, #16]	; (8003170 <__NVIC_GetPriorityGrouping+0x18>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	0a1b      	lsrs	r3, r3, #8
 8003162:	f003 0307 	and.w	r3, r3, #7
}
 8003166:	4618      	mov	r0, r3
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	e000ed00 	.word	0xe000ed00

08003174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	4603      	mov	r3, r0
 800317c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800317e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003182:	2b00      	cmp	r3, #0
 8003184:	db0b      	blt.n	800319e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003186:	79fb      	ldrb	r3, [r7, #7]
 8003188:	f003 021f 	and.w	r2, r3, #31
 800318c:	4907      	ldr	r1, [pc, #28]	; (80031ac <__NVIC_EnableIRQ+0x38>)
 800318e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	2001      	movs	r0, #1
 8003196:	fa00 f202 	lsl.w	r2, r0, r2
 800319a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	e000e100 	.word	0xe000e100

080031b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	6039      	str	r1, [r7, #0]
 80031ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	db0a      	blt.n	80031da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	b2da      	uxtb	r2, r3
 80031c8:	490c      	ldr	r1, [pc, #48]	; (80031fc <__NVIC_SetPriority+0x4c>)
 80031ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ce:	0112      	lsls	r2, r2, #4
 80031d0:	b2d2      	uxtb	r2, r2
 80031d2:	440b      	add	r3, r1
 80031d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031d8:	e00a      	b.n	80031f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	4908      	ldr	r1, [pc, #32]	; (8003200 <__NVIC_SetPriority+0x50>)
 80031e0:	79fb      	ldrb	r3, [r7, #7]
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	3b04      	subs	r3, #4
 80031e8:	0112      	lsls	r2, r2, #4
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	440b      	add	r3, r1
 80031ee:	761a      	strb	r2, [r3, #24]
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	e000e100 	.word	0xe000e100
 8003200:	e000ed00 	.word	0xe000ed00

08003204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003204:	b480      	push	{r7}
 8003206:	b089      	sub	sp, #36	; 0x24
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	f1c3 0307 	rsb	r3, r3, #7
 800321e:	2b04      	cmp	r3, #4
 8003220:	bf28      	it	cs
 8003222:	2304      	movcs	r3, #4
 8003224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	3304      	adds	r3, #4
 800322a:	2b06      	cmp	r3, #6
 800322c:	d902      	bls.n	8003234 <NVIC_EncodePriority+0x30>
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	3b03      	subs	r3, #3
 8003232:	e000      	b.n	8003236 <NVIC_EncodePriority+0x32>
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003238:	f04f 32ff 	mov.w	r2, #4294967295
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	43da      	mvns	r2, r3
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	401a      	ands	r2, r3
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800324c:	f04f 31ff 	mov.w	r1, #4294967295
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	fa01 f303 	lsl.w	r3, r1, r3
 8003256:	43d9      	mvns	r1, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800325c:	4313      	orrs	r3, r2
         );
}
 800325e:	4618      	mov	r0, r3
 8003260:	3724      	adds	r7, #36	; 0x24
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
	...

0800326c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3b01      	subs	r3, #1
 8003278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800327c:	d301      	bcc.n	8003282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800327e:	2301      	movs	r3, #1
 8003280:	e00f      	b.n	80032a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003282:	4a0a      	ldr	r2, [pc, #40]	; (80032ac <SysTick_Config+0x40>)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3b01      	subs	r3, #1
 8003288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800328a:	210f      	movs	r1, #15
 800328c:	f04f 30ff 	mov.w	r0, #4294967295
 8003290:	f7ff ff8e 	bl	80031b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <SysTick_Config+0x40>)
 8003296:	2200      	movs	r2, #0
 8003298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800329a:	4b04      	ldr	r3, [pc, #16]	; (80032ac <SysTick_Config+0x40>)
 800329c:	2207      	movs	r2, #7
 800329e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	e000e010 	.word	0xe000e010

080032b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff ff29 	bl	8003110 <__NVIC_SetPriorityGrouping>
}
 80032be:	bf00      	nop
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b086      	sub	sp, #24
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	4603      	mov	r3, r0
 80032ce:	60b9      	str	r1, [r7, #8]
 80032d0:	607a      	str	r2, [r7, #4]
 80032d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032d8:	f7ff ff3e 	bl	8003158 <__NVIC_GetPriorityGrouping>
 80032dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	68b9      	ldr	r1, [r7, #8]
 80032e2:	6978      	ldr	r0, [r7, #20]
 80032e4:	f7ff ff8e 	bl	8003204 <NVIC_EncodePriority>
 80032e8:	4602      	mov	r2, r0
 80032ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ee:	4611      	mov	r1, r2
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff ff5d 	bl	80031b0 <__NVIC_SetPriority>
}
 80032f6:	bf00      	nop
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b082      	sub	sp, #8
 8003302:	af00      	add	r7, sp, #0
 8003304:	4603      	mov	r3, r0
 8003306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff ff31 	bl	8003174 <__NVIC_EnableIRQ>
}
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b082      	sub	sp, #8
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7ff ffa2 	bl	800326c <SysTick_Config>
 8003328:	4603      	mov	r3, r0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
	...

08003334 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003334:	b480      	push	{r7}
 8003336:	b089      	sub	sp, #36	; 0x24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800333e:	2300      	movs	r3, #0
 8003340:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003342:	2300      	movs	r3, #0
 8003344:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003346:	2300      	movs	r3, #0
 8003348:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800334a:	2300      	movs	r3, #0
 800334c:	61fb      	str	r3, [r7, #28]
 800334e:	e16b      	b.n	8003628 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003350:	2201      	movs	r2, #1
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	4013      	ands	r3, r2
 8003362:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	429a      	cmp	r2, r3
 800336a:	f040 815a 	bne.w	8003622 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d00b      	beq.n	800338e <HAL_GPIO_Init+0x5a>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d007      	beq.n	800338e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003382:	2b11      	cmp	r3, #17
 8003384:	d003      	beq.n	800338e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2b12      	cmp	r3, #18
 800338c:	d130      	bne.n	80033f0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	2203      	movs	r2, #3
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	43db      	mvns	r3, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4013      	ands	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033c4:	2201      	movs	r2, #1
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	43db      	mvns	r3, r3
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4013      	ands	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	091b      	lsrs	r3, r3, #4
 80033da:	f003 0201 	and.w	r2, r3, #1
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	2203      	movs	r2, #3
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	43db      	mvns	r3, r3
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	4013      	ands	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4313      	orrs	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2b02      	cmp	r3, #2
 8003426:	d003      	beq.n	8003430 <HAL_GPIO_Init+0xfc>
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b12      	cmp	r3, #18
 800342e:	d123      	bne.n	8003478 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	08da      	lsrs	r2, r3, #3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3208      	adds	r2, #8
 8003438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800343c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	220f      	movs	r2, #15
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4313      	orrs	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	08da      	lsrs	r2, r3, #3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3208      	adds	r2, #8
 8003472:	69b9      	ldr	r1, [r7, #24]
 8003474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	2203      	movs	r2, #3
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4013      	ands	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f003 0203 	and.w	r2, r3, #3
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 80b4 	beq.w	8003622 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ba:	2300      	movs	r3, #0
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	4b5f      	ldr	r3, [pc, #380]	; (800363c <HAL_GPIO_Init+0x308>)
 80034c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c2:	4a5e      	ldr	r2, [pc, #376]	; (800363c <HAL_GPIO_Init+0x308>)
 80034c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034c8:	6453      	str	r3, [r2, #68]	; 0x44
 80034ca:	4b5c      	ldr	r3, [pc, #368]	; (800363c <HAL_GPIO_Init+0x308>)
 80034cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034d6:	4a5a      	ldr	r2, [pc, #360]	; (8003640 <HAL_GPIO_Init+0x30c>)
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	089b      	lsrs	r3, r3, #2
 80034dc:	3302      	adds	r3, #2
 80034de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	220f      	movs	r2, #15
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	43db      	mvns	r3, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4013      	ands	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a51      	ldr	r2, [pc, #324]	; (8003644 <HAL_GPIO_Init+0x310>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d02b      	beq.n	800355a <HAL_GPIO_Init+0x226>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a50      	ldr	r2, [pc, #320]	; (8003648 <HAL_GPIO_Init+0x314>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d025      	beq.n	8003556 <HAL_GPIO_Init+0x222>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a4f      	ldr	r2, [pc, #316]	; (800364c <HAL_GPIO_Init+0x318>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d01f      	beq.n	8003552 <HAL_GPIO_Init+0x21e>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a4e      	ldr	r2, [pc, #312]	; (8003650 <HAL_GPIO_Init+0x31c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d019      	beq.n	800354e <HAL_GPIO_Init+0x21a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a4d      	ldr	r2, [pc, #308]	; (8003654 <HAL_GPIO_Init+0x320>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d013      	beq.n	800354a <HAL_GPIO_Init+0x216>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a4c      	ldr	r2, [pc, #304]	; (8003658 <HAL_GPIO_Init+0x324>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d00d      	beq.n	8003546 <HAL_GPIO_Init+0x212>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a4b      	ldr	r2, [pc, #300]	; (800365c <HAL_GPIO_Init+0x328>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d007      	beq.n	8003542 <HAL_GPIO_Init+0x20e>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a4a      	ldr	r2, [pc, #296]	; (8003660 <HAL_GPIO_Init+0x32c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d101      	bne.n	800353e <HAL_GPIO_Init+0x20a>
 800353a:	2307      	movs	r3, #7
 800353c:	e00e      	b.n	800355c <HAL_GPIO_Init+0x228>
 800353e:	2308      	movs	r3, #8
 8003540:	e00c      	b.n	800355c <HAL_GPIO_Init+0x228>
 8003542:	2306      	movs	r3, #6
 8003544:	e00a      	b.n	800355c <HAL_GPIO_Init+0x228>
 8003546:	2305      	movs	r3, #5
 8003548:	e008      	b.n	800355c <HAL_GPIO_Init+0x228>
 800354a:	2304      	movs	r3, #4
 800354c:	e006      	b.n	800355c <HAL_GPIO_Init+0x228>
 800354e:	2303      	movs	r3, #3
 8003550:	e004      	b.n	800355c <HAL_GPIO_Init+0x228>
 8003552:	2302      	movs	r3, #2
 8003554:	e002      	b.n	800355c <HAL_GPIO_Init+0x228>
 8003556:	2301      	movs	r3, #1
 8003558:	e000      	b.n	800355c <HAL_GPIO_Init+0x228>
 800355a:	2300      	movs	r3, #0
 800355c:	69fa      	ldr	r2, [r7, #28]
 800355e:	f002 0203 	and.w	r2, r2, #3
 8003562:	0092      	lsls	r2, r2, #2
 8003564:	4093      	lsls	r3, r2
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4313      	orrs	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800356c:	4934      	ldr	r1, [pc, #208]	; (8003640 <HAL_GPIO_Init+0x30c>)
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	089b      	lsrs	r3, r3, #2
 8003572:	3302      	adds	r3, #2
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800357a:	4b3a      	ldr	r3, [pc, #232]	; (8003664 <HAL_GPIO_Init+0x330>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	43db      	mvns	r3, r3
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4013      	ands	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	4313      	orrs	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800359e:	4a31      	ldr	r2, [pc, #196]	; (8003664 <HAL_GPIO_Init+0x330>)
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035a4:	4b2f      	ldr	r3, [pc, #188]	; (8003664 <HAL_GPIO_Init+0x330>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	43db      	mvns	r3, r3
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4013      	ands	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035c8:	4a26      	ldr	r2, [pc, #152]	; (8003664 <HAL_GPIO_Init+0x330>)
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035ce:	4b25      	ldr	r3, [pc, #148]	; (8003664 <HAL_GPIO_Init+0x330>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	43db      	mvns	r3, r3
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4013      	ands	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035f2:	4a1c      	ldr	r2, [pc, #112]	; (8003664 <HAL_GPIO_Init+0x330>)
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035f8:	4b1a      	ldr	r3, [pc, #104]	; (8003664 <HAL_GPIO_Init+0x330>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	43db      	mvns	r3, r3
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	4013      	ands	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800361c:	4a11      	ldr	r2, [pc, #68]	; (8003664 <HAL_GPIO_Init+0x330>)
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	3301      	adds	r3, #1
 8003626:	61fb      	str	r3, [r7, #28]
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	2b0f      	cmp	r3, #15
 800362c:	f67f ae90 	bls.w	8003350 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003630:	bf00      	nop
 8003632:	3724      	adds	r7, #36	; 0x24
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	40023800 	.word	0x40023800
 8003640:	40013800 	.word	0x40013800
 8003644:	40020000 	.word	0x40020000
 8003648:	40020400 	.word	0x40020400
 800364c:	40020800 	.word	0x40020800
 8003650:	40020c00 	.word	0x40020c00
 8003654:	40021000 	.word	0x40021000
 8003658:	40021400 	.word	0x40021400
 800365c:	40021800 	.word	0x40021800
 8003660:	40021c00 	.word	0x40021c00
 8003664:	40013c00 	.word	0x40013c00

08003668 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	460b      	mov	r3, r1
 8003672:	807b      	strh	r3, [r7, #2]
 8003674:	4613      	mov	r3, r2
 8003676:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003678:	787b      	ldrb	r3, [r7, #1]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800367e:	887a      	ldrh	r2, [r7, #2]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003684:	e003      	b.n	800368e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003686:	887b      	ldrh	r3, [r7, #2]
 8003688:	041a      	lsls	r2, r3, #16
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	619a      	str	r2, [r3, #24]
}
 800368e:	bf00      	nop
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
	...

0800369c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80036a6:	4b08      	ldr	r3, [pc, #32]	; (80036c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036a8:	695a      	ldr	r2, [r3, #20]
 80036aa:	88fb      	ldrh	r3, [r7, #6]
 80036ac:	4013      	ands	r3, r2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d006      	beq.n	80036c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036b2:	4a05      	ldr	r2, [pc, #20]	; (80036c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036b4:	88fb      	ldrh	r3, [r7, #6]
 80036b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036b8:	88fb      	ldrh	r3, [r7, #6]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fe fb78 	bl	8001db0 <HAL_GPIO_EXTI_Callback>
  }
}
 80036c0:	bf00      	nop
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40013c00 	.word	0x40013c00

080036cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e11f      	b.n	800391e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d106      	bne.n	80036f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7ff fa1e 	bl	8002b34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2224      	movs	r2, #36	; 0x24
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0201 	bic.w	r2, r2, #1
 800370e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800371e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800372e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003730:	f002 fd3a 	bl	80061a8 <HAL_RCC_GetPCLK1Freq>
 8003734:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	4a7b      	ldr	r2, [pc, #492]	; (8003928 <HAL_I2C_Init+0x25c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d807      	bhi.n	8003750 <HAL_I2C_Init+0x84>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4a7a      	ldr	r2, [pc, #488]	; (800392c <HAL_I2C_Init+0x260>)
 8003744:	4293      	cmp	r3, r2
 8003746:	bf94      	ite	ls
 8003748:	2301      	movls	r3, #1
 800374a:	2300      	movhi	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	e006      	b.n	800375e <HAL_I2C_Init+0x92>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4a77      	ldr	r2, [pc, #476]	; (8003930 <HAL_I2C_Init+0x264>)
 8003754:	4293      	cmp	r3, r2
 8003756:	bf94      	ite	ls
 8003758:	2301      	movls	r3, #1
 800375a:	2300      	movhi	r3, #0
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e0db      	b.n	800391e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	4a72      	ldr	r2, [pc, #456]	; (8003934 <HAL_I2C_Init+0x268>)
 800376a:	fba2 2303 	umull	r2, r3, r2, r3
 800376e:	0c9b      	lsrs	r3, r3, #18
 8003770:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	430a      	orrs	r2, r1
 8003784:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	4a64      	ldr	r2, [pc, #400]	; (8003928 <HAL_I2C_Init+0x25c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d802      	bhi.n	80037a0 <HAL_I2C_Init+0xd4>
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	3301      	adds	r3, #1
 800379e:	e009      	b.n	80037b4 <HAL_I2C_Init+0xe8>
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037a6:	fb02 f303 	mul.w	r3, r2, r3
 80037aa:	4a63      	ldr	r2, [pc, #396]	; (8003938 <HAL_I2C_Init+0x26c>)
 80037ac:	fba2 2303 	umull	r2, r3, r2, r3
 80037b0:	099b      	lsrs	r3, r3, #6
 80037b2:	3301      	adds	r3, #1
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6812      	ldr	r2, [r2, #0]
 80037b8:	430b      	orrs	r3, r1
 80037ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	4956      	ldr	r1, [pc, #344]	; (8003928 <HAL_I2C_Init+0x25c>)
 80037d0:	428b      	cmp	r3, r1
 80037d2:	d80d      	bhi.n	80037f0 <HAL_I2C_Init+0x124>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	1e59      	subs	r1, r3, #1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	fbb1 f3f3 	udiv	r3, r1, r3
 80037e2:	3301      	adds	r3, #1
 80037e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	bf38      	it	cc
 80037ec:	2304      	movcc	r3, #4
 80037ee:	e04f      	b.n	8003890 <HAL_I2C_Init+0x1c4>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d111      	bne.n	800381c <HAL_I2C_Init+0x150>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	1e58      	subs	r0, r3, #1
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6859      	ldr	r1, [r3, #4]
 8003800:	460b      	mov	r3, r1
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	440b      	add	r3, r1
 8003806:	fbb0 f3f3 	udiv	r3, r0, r3
 800380a:	3301      	adds	r3, #1
 800380c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003810:	2b00      	cmp	r3, #0
 8003812:	bf0c      	ite	eq
 8003814:	2301      	moveq	r3, #1
 8003816:	2300      	movne	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	e012      	b.n	8003842 <HAL_I2C_Init+0x176>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	1e58      	subs	r0, r3, #1
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6859      	ldr	r1, [r3, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	0099      	lsls	r1, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003832:	3301      	adds	r3, #1
 8003834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003838:	2b00      	cmp	r3, #0
 800383a:	bf0c      	ite	eq
 800383c:	2301      	moveq	r3, #1
 800383e:	2300      	movne	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <HAL_I2C_Init+0x17e>
 8003846:	2301      	movs	r3, #1
 8003848:	e022      	b.n	8003890 <HAL_I2C_Init+0x1c4>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10e      	bne.n	8003870 <HAL_I2C_Init+0x1a4>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	1e58      	subs	r0, r3, #1
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6859      	ldr	r1, [r3, #4]
 800385a:	460b      	mov	r3, r1
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	440b      	add	r3, r1
 8003860:	fbb0 f3f3 	udiv	r3, r0, r3
 8003864:	3301      	adds	r3, #1
 8003866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800386a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800386e:	e00f      	b.n	8003890 <HAL_I2C_Init+0x1c4>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	1e58      	subs	r0, r3, #1
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6859      	ldr	r1, [r3, #4]
 8003878:	460b      	mov	r3, r1
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	440b      	add	r3, r1
 800387e:	0099      	lsls	r1, r3, #2
 8003880:	440b      	add	r3, r1
 8003882:	fbb0 f3f3 	udiv	r3, r0, r3
 8003886:	3301      	adds	r3, #1
 8003888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800388c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	6809      	ldr	r1, [r1, #0]
 8003894:	4313      	orrs	r3, r2
 8003896:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69da      	ldr	r2, [r3, #28]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	431a      	orrs	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6911      	ldr	r1, [r2, #16]
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	68d2      	ldr	r2, [r2, #12]
 80038ca:	4311      	orrs	r1, r2
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6812      	ldr	r2, [r2, #0]
 80038d0:	430b      	orrs	r3, r1
 80038d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	695a      	ldr	r2, [r3, #20]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 0201 	orr.w	r2, r2, #1
 80038fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2220      	movs	r2, #32
 800390a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	000186a0 	.word	0x000186a0
 800392c:	001e847f 	.word	0x001e847f
 8003930:	003d08ff 	.word	0x003d08ff
 8003934:	431bde83 	.word	0x431bde83
 8003938:	10624dd3 	.word	0x10624dd3

0800393c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b088      	sub	sp, #32
 8003940:	af02      	add	r7, sp, #8
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	4608      	mov	r0, r1
 8003946:	4611      	mov	r1, r2
 8003948:	461a      	mov	r2, r3
 800394a:	4603      	mov	r3, r0
 800394c:	817b      	strh	r3, [r7, #10]
 800394e:	460b      	mov	r3, r1
 8003950:	813b      	strh	r3, [r7, #8]
 8003952:	4613      	mov	r3, r2
 8003954:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003956:	f7ff fbad 	bl	80030b4 <HAL_GetTick>
 800395a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b20      	cmp	r3, #32
 8003966:	f040 80d9 	bne.w	8003b1c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	2319      	movs	r3, #25
 8003970:	2201      	movs	r2, #1
 8003972:	496d      	ldr	r1, [pc, #436]	; (8003b28 <HAL_I2C_Mem_Write+0x1ec>)
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 fc7f 	bl	8004278 <I2C_WaitOnFlagUntilTimeout>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003980:	2302      	movs	r3, #2
 8003982:	e0cc      	b.n	8003b1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800398a:	2b01      	cmp	r3, #1
 800398c:	d101      	bne.n	8003992 <HAL_I2C_Mem_Write+0x56>
 800398e:	2302      	movs	r3, #2
 8003990:	e0c5      	b.n	8003b1e <HAL_I2C_Mem_Write+0x1e2>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d007      	beq.n	80039b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0201 	orr.w	r2, r2, #1
 80039b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2221      	movs	r2, #33	; 0x21
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2240      	movs	r2, #64	; 0x40
 80039d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6a3a      	ldr	r2, [r7, #32]
 80039e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80039e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4a4d      	ldr	r2, [pc, #308]	; (8003b2c <HAL_I2C_Mem_Write+0x1f0>)
 80039f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039fa:	88f8      	ldrh	r0, [r7, #6]
 80039fc:	893a      	ldrh	r2, [r7, #8]
 80039fe:	8979      	ldrh	r1, [r7, #10]
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	9301      	str	r3, [sp, #4]
 8003a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a06:	9300      	str	r3, [sp, #0]
 8003a08:	4603      	mov	r3, r0
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 fab6 	bl	8003f7c <I2C_RequestMemoryWrite>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d052      	beq.n	8003abc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e081      	b.n	8003b1e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 fd00 	bl	8004424 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00d      	beq.n	8003a46 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d107      	bne.n	8003a42 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e06b      	b.n	8003b1e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	781a      	ldrb	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b04      	cmp	r3, #4
 8003a82:	d11b      	bne.n	8003abc <HAL_I2C_Mem_Write+0x180>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d017      	beq.n	8003abc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	781a      	ldrb	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	1c5a      	adds	r2, r3, #1
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1aa      	bne.n	8003a1a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 fcec 	bl	80044a6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00d      	beq.n	8003af0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	2b04      	cmp	r3, #4
 8003ada:	d107      	bne.n	8003aec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e016      	b.n	8003b1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003afe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	e000      	b.n	8003b1e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b1c:	2302      	movs	r3, #2
  }
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	00100002 	.word	0x00100002
 8003b2c:	ffff0000 	.word	0xffff0000

08003b30 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b08c      	sub	sp, #48	; 0x30
 8003b34:	af02      	add	r7, sp, #8
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	4608      	mov	r0, r1
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	4603      	mov	r3, r0
 8003b40:	817b      	strh	r3, [r7, #10]
 8003b42:	460b      	mov	r3, r1
 8003b44:	813b      	strh	r3, [r7, #8]
 8003b46:	4613      	mov	r3, r2
 8003b48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b4a:	f7ff fab3 	bl	80030b4 <HAL_GetTick>
 8003b4e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b20      	cmp	r3, #32
 8003b5a:	f040 8208 	bne.w	8003f6e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	2319      	movs	r3, #25
 8003b64:	2201      	movs	r2, #1
 8003b66:	497b      	ldr	r1, [pc, #492]	; (8003d54 <HAL_I2C_Mem_Read+0x224>)
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f000 fb85 	bl	8004278 <I2C_WaitOnFlagUntilTimeout>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003b74:	2302      	movs	r3, #2
 8003b76:	e1fb      	b.n	8003f70 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d101      	bne.n	8003b86 <HAL_I2C_Mem_Read+0x56>
 8003b82:	2302      	movs	r3, #2
 8003b84:	e1f4      	b.n	8003f70 <HAL_I2C_Mem_Read+0x440>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d007      	beq.n	8003bac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 0201 	orr.w	r2, r2, #1
 8003baa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2222      	movs	r2, #34	; 0x22
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2240      	movs	r2, #64	; 0x40
 8003bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4a5b      	ldr	r2, [pc, #364]	; (8003d58 <HAL_I2C_Mem_Read+0x228>)
 8003bec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bee:	88f8      	ldrh	r0, [r7, #6]
 8003bf0:	893a      	ldrh	r2, [r7, #8]
 8003bf2:	8979      	ldrh	r1, [r7, #10]
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	9301      	str	r3, [sp, #4]
 8003bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f000 fa52 	bl	80040a8 <I2C_RequestMemoryRead>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e1b0      	b.n	8003f70 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d113      	bne.n	8003c3e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c16:	2300      	movs	r3, #0
 8003c18:	623b      	str	r3, [r7, #32]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	623b      	str	r3, [r7, #32]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	623b      	str	r3, [r7, #32]
 8003c2a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c3a:	601a      	str	r2, [r3, #0]
 8003c3c:	e184      	b.n	8003f48 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d11b      	bne.n	8003c7e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c56:	2300      	movs	r3, #0
 8003c58:	61fb      	str	r3, [r7, #28]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	61fb      	str	r3, [r7, #28]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	61fb      	str	r3, [r7, #28]
 8003c6a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	e164      	b.n	8003f48 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d11b      	bne.n	8003cbe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c94:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ca4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61bb      	str	r3, [r7, #24]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	61bb      	str	r3, [r7, #24]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	61bb      	str	r3, [r7, #24]
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	e144      	b.n	8003f48 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	617b      	str	r3, [r7, #20]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	617b      	str	r3, [r7, #20]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	617b      	str	r3, [r7, #20]
 8003cd2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003cd4:	e138      	b.n	8003f48 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cda:	2b03      	cmp	r3, #3
 8003cdc:	f200 80f1 	bhi.w	8003ec2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d123      	bne.n	8003d30 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 fc1b 	bl	8004528 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e139      	b.n	8003f70 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	691a      	ldr	r2, [r3, #16]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	1c5a      	adds	r2, r3, #1
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	3b01      	subs	r3, #1
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d2e:	e10b      	b.n	8003f48 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d14e      	bne.n	8003dd6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3e:	2200      	movs	r2, #0
 8003d40:	4906      	ldr	r1, [pc, #24]	; (8003d5c <HAL_I2C_Mem_Read+0x22c>)
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 fa98 	bl	8004278 <I2C_WaitOnFlagUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d008      	beq.n	8003d60 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e10e      	b.n	8003f70 <HAL_I2C_Mem_Read+0x440>
 8003d52:	bf00      	nop
 8003d54:	00100002 	.word	0x00100002
 8003d58:	ffff0000 	.word	0xffff0000
 8003d5c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	691a      	ldr	r2, [r3, #16]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	b2d2      	uxtb	r2, r2
 8003d7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	1c5a      	adds	r2, r3, #1
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	b2d2      	uxtb	r2, r2
 8003dae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	1c5a      	adds	r2, r3, #1
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dd4:	e0b8      	b.n	8003f48 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ddc:	2200      	movs	r2, #0
 8003dde:	4966      	ldr	r1, [pc, #408]	; (8003f78 <HAL_I2C_Mem_Read+0x448>)
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 fa49 	bl	8004278 <I2C_WaitOnFlagUntilTimeout>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e0bf      	b.n	8003f70 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	691a      	ldr	r2, [r3, #16]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	b2d2      	uxtb	r2, r2
 8003e0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	1c5a      	adds	r2, r3, #1
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e38:	2200      	movs	r2, #0
 8003e3a:	494f      	ldr	r1, [pc, #316]	; (8003f78 <HAL_I2C_Mem_Read+0x448>)
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 fa1b 	bl	8004278 <I2C_WaitOnFlagUntilTimeout>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e091      	b.n	8003f70 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	691a      	ldr	r2, [r3, #16]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	1c5a      	adds	r2, r3, #1
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	3b01      	subs	r3, #1
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	691a      	ldr	r2, [r3, #16]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	b2d2      	uxtb	r2, r2
 8003e9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ec0:	e042      	b.n	8003f48 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 fb2e 	bl	8004528 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e04c      	b.n	8003f70 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	691a      	ldr	r2, [r3, #16]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	b2d2      	uxtb	r2, r2
 8003ee2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	1c5a      	adds	r2, r3, #1
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	f003 0304 	and.w	r3, r3, #4
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d118      	bne.n	8003f48 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	b2d2      	uxtb	r2, r2
 8003f22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f47f aec2 	bne.w	8003cd6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2220      	movs	r2, #32
 8003f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	e000      	b.n	8003f70 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003f6e:	2302      	movs	r3, #2
  }
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3728      	adds	r7, #40	; 0x28
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	00010004 	.word	0x00010004

08003f7c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b088      	sub	sp, #32
 8003f80:	af02      	add	r7, sp, #8
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	4608      	mov	r0, r1
 8003f86:	4611      	mov	r1, r2
 8003f88:	461a      	mov	r2, r3
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	817b      	strh	r3, [r7, #10]
 8003f8e:	460b      	mov	r3, r1
 8003f90:	813b      	strh	r3, [r7, #8]
 8003f92:	4613      	mov	r3, r2
 8003f94:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fa4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 f960 	bl	8004278 <I2C_WaitOnFlagUntilTimeout>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00d      	beq.n	8003fda <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fcc:	d103      	bne.n	8003fd6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fd4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e05f      	b.n	800409a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fda:	897b      	ldrh	r3, [r7, #10]
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	461a      	mov	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003fe8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	6a3a      	ldr	r2, [r7, #32]
 8003fee:	492d      	ldr	r1, [pc, #180]	; (80040a4 <I2C_RequestMemoryWrite+0x128>)
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 f998 	bl	8004326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e04c      	b.n	800409a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004000:	2300      	movs	r3, #0
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	617b      	str	r3, [r7, #20]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004018:	6a39      	ldr	r1, [r7, #32]
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 fa02 	bl	8004424 <I2C_WaitOnTXEFlagUntilTimeout>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00d      	beq.n	8004042 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	2b04      	cmp	r3, #4
 800402c:	d107      	bne.n	800403e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800403c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e02b      	b.n	800409a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004042:	88fb      	ldrh	r3, [r7, #6]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d105      	bne.n	8004054 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004048:	893b      	ldrh	r3, [r7, #8]
 800404a:	b2da      	uxtb	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	611a      	str	r2, [r3, #16]
 8004052:	e021      	b.n	8004098 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004054:	893b      	ldrh	r3, [r7, #8]
 8004056:	0a1b      	lsrs	r3, r3, #8
 8004058:	b29b      	uxth	r3, r3
 800405a:	b2da      	uxtb	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004064:	6a39      	ldr	r1, [r7, #32]
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 f9dc 	bl	8004424 <I2C_WaitOnTXEFlagUntilTimeout>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00d      	beq.n	800408e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	2b04      	cmp	r3, #4
 8004078:	d107      	bne.n	800408a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004088:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e005      	b.n	800409a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800408e:	893b      	ldrh	r3, [r7, #8]
 8004090:	b2da      	uxtb	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	00010002 	.word	0x00010002

080040a8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b088      	sub	sp, #32
 80040ac:	af02      	add	r7, sp, #8
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	4608      	mov	r0, r1
 80040b2:	4611      	mov	r1, r2
 80040b4:	461a      	mov	r2, r3
 80040b6:	4603      	mov	r3, r0
 80040b8:	817b      	strh	r3, [r7, #10]
 80040ba:	460b      	mov	r3, r1
 80040bc:	813b      	strh	r3, [r7, #8]
 80040be:	4613      	mov	r3, r2
 80040c0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040d0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 f8c2 	bl	8004278 <I2C_WaitOnFlagUntilTimeout>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00d      	beq.n	8004116 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004108:	d103      	bne.n	8004112 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004110:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e0aa      	b.n	800426c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004116:	897b      	ldrh	r3, [r7, #10]
 8004118:	b2db      	uxtb	r3, r3
 800411a:	461a      	mov	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004124:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	6a3a      	ldr	r2, [r7, #32]
 800412a:	4952      	ldr	r1, [pc, #328]	; (8004274 <I2C_RequestMemoryRead+0x1cc>)
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 f8fa 	bl	8004326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d001      	beq.n	800413c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e097      	b.n	800426c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800413c:	2300      	movs	r3, #0
 800413e:	617b      	str	r3, [r7, #20]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	617b      	str	r3, [r7, #20]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	617b      	str	r3, [r7, #20]
 8004150:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004154:	6a39      	ldr	r1, [r7, #32]
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 f964 	bl	8004424 <I2C_WaitOnTXEFlagUntilTimeout>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00d      	beq.n	800417e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	2b04      	cmp	r3, #4
 8004168:	d107      	bne.n	800417a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004178:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e076      	b.n	800426c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800417e:	88fb      	ldrh	r3, [r7, #6]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d105      	bne.n	8004190 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004184:	893b      	ldrh	r3, [r7, #8]
 8004186:	b2da      	uxtb	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	611a      	str	r2, [r3, #16]
 800418e:	e021      	b.n	80041d4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004190:	893b      	ldrh	r3, [r7, #8]
 8004192:	0a1b      	lsrs	r3, r3, #8
 8004194:	b29b      	uxth	r3, r3
 8004196:	b2da      	uxtb	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800419e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a0:	6a39      	ldr	r1, [r7, #32]
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 f93e 	bl	8004424 <I2C_WaitOnTXEFlagUntilTimeout>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00d      	beq.n	80041ca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d107      	bne.n	80041c6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e050      	b.n	800426c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041ca:	893b      	ldrh	r3, [r7, #8]
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d6:	6a39      	ldr	r1, [r7, #32]
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 f923 	bl	8004424 <I2C_WaitOnTXEFlagUntilTimeout>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00d      	beq.n	8004200 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d107      	bne.n	80041fc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041fa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e035      	b.n	800426c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800420e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	6a3b      	ldr	r3, [r7, #32]
 8004216:	2200      	movs	r2, #0
 8004218:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f82b 	bl	8004278 <I2C_WaitOnFlagUntilTimeout>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00d      	beq.n	8004244 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004236:	d103      	bne.n	8004240 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800423e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e013      	b.n	800426c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004244:	897b      	ldrh	r3, [r7, #10]
 8004246:	b2db      	uxtb	r3, r3
 8004248:	f043 0301 	orr.w	r3, r3, #1
 800424c:	b2da      	uxtb	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	6a3a      	ldr	r2, [r7, #32]
 8004258:	4906      	ldr	r1, [pc, #24]	; (8004274 <I2C_RequestMemoryRead+0x1cc>)
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 f863 	bl	8004326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e000      	b.n	800426c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3718      	adds	r7, #24
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	00010002 	.word	0x00010002

08004278 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	603b      	str	r3, [r7, #0]
 8004284:	4613      	mov	r3, r2
 8004286:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004288:	e025      	b.n	80042d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004290:	d021      	beq.n	80042d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004292:	f7fe ff0f 	bl	80030b4 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d302      	bcc.n	80042a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d116      	bne.n	80042d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2220      	movs	r2, #32
 80042b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	f043 0220 	orr.w	r2, r3, #32
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e023      	b.n	800431e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	0c1b      	lsrs	r3, r3, #16
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d10d      	bne.n	80042fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	43da      	mvns	r2, r3
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	4013      	ands	r3, r2
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	bf0c      	ite	eq
 80042f2:	2301      	moveq	r3, #1
 80042f4:	2300      	movne	r3, #0
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	461a      	mov	r2, r3
 80042fa:	e00c      	b.n	8004316 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	43da      	mvns	r2, r3
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	4013      	ands	r3, r2
 8004308:	b29b      	uxth	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	bf0c      	ite	eq
 800430e:	2301      	moveq	r3, #1
 8004310:	2300      	movne	r3, #0
 8004312:	b2db      	uxtb	r3, r3
 8004314:	461a      	mov	r2, r3
 8004316:	79fb      	ldrb	r3, [r7, #7]
 8004318:	429a      	cmp	r2, r3
 800431a:	d0b6      	beq.n	800428a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b084      	sub	sp, #16
 800432a:	af00      	add	r7, sp, #0
 800432c:	60f8      	str	r0, [r7, #12]
 800432e:	60b9      	str	r1, [r7, #8]
 8004330:	607a      	str	r2, [r7, #4]
 8004332:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004334:	e051      	b.n	80043da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004344:	d123      	bne.n	800438e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004354:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800435e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2220      	movs	r2, #32
 800436a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	f043 0204 	orr.w	r2, r3, #4
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e046      	b.n	800441c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004394:	d021      	beq.n	80043da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004396:	f7fe fe8d 	bl	80030b4 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d302      	bcc.n	80043ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d116      	bne.n	80043da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2220      	movs	r2, #32
 80043b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	f043 0220 	orr.w	r2, r3, #32
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e020      	b.n	800441c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	0c1b      	lsrs	r3, r3, #16
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d10c      	bne.n	80043fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	43da      	mvns	r2, r3
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	4013      	ands	r3, r2
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	bf14      	ite	ne
 80043f6:	2301      	movne	r3, #1
 80043f8:	2300      	moveq	r3, #0
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	e00b      	b.n	8004416 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	43da      	mvns	r2, r3
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	4013      	ands	r3, r2
 800440a:	b29b      	uxth	r3, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	bf14      	ite	ne
 8004410:	2301      	movne	r3, #1
 8004412:	2300      	moveq	r3, #0
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d18d      	bne.n	8004336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004430:	e02d      	b.n	800448e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f000 f8ce 	bl	80045d4 <I2C_IsAcknowledgeFailed>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e02d      	b.n	800449e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004448:	d021      	beq.n	800448e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800444a:	f7fe fe33 	bl	80030b4 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	429a      	cmp	r2, r3
 8004458:	d302      	bcc.n	8004460 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d116      	bne.n	800448e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2220      	movs	r2, #32
 800446a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	f043 0220 	orr.w	r2, r3, #32
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e007      	b.n	800449e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004498:	2b80      	cmp	r3, #128	; 0x80
 800449a:	d1ca      	bne.n	8004432 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b084      	sub	sp, #16
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	60f8      	str	r0, [r7, #12]
 80044ae:	60b9      	str	r1, [r7, #8]
 80044b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044b2:	e02d      	b.n	8004510 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 f88d 	bl	80045d4 <I2C_IsAcknowledgeFailed>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e02d      	b.n	8004520 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ca:	d021      	beq.n	8004510 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044cc:	f7fe fdf2 	bl	80030b4 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d302      	bcc.n	80044e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d116      	bne.n	8004510 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2220      	movs	r2, #32
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fc:	f043 0220 	orr.w	r2, r3, #32
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e007      	b.n	8004520 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	f003 0304 	and.w	r3, r3, #4
 800451a:	2b04      	cmp	r3, #4
 800451c:	d1ca      	bne.n	80044b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004534:	e042      	b.n	80045bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	f003 0310 	and.w	r3, r3, #16
 8004540:	2b10      	cmp	r3, #16
 8004542:	d119      	bne.n	8004578 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f06f 0210 	mvn.w	r2, #16
 800454c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2220      	movs	r2, #32
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e029      	b.n	80045cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004578:	f7fe fd9c 	bl	80030b4 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	429a      	cmp	r2, r3
 8004586:	d302      	bcc.n	800458e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d116      	bne.n	80045bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2220      	movs	r2, #32
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a8:	f043 0220 	orr.w	r2, r3, #32
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e007      	b.n	80045cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c6:	2b40      	cmp	r3, #64	; 0x40
 80045c8:	d1b5      	bne.n	8004536 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ea:	d11b      	bne.n	8004624 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2220      	movs	r2, #32
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004610:	f043 0204 	orr.w	r2, r3, #4
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e000      	b.n	8004626 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004632:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004634:	b08f      	sub	sp, #60	; 0x3c
 8004636:	af0a      	add	r7, sp, #40	; 0x28
 8004638:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e10f      	b.n	8004864 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d106      	bne.n	8004664 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f005 ffc4 	bl	800a5ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2203      	movs	r2, #3
 8004668:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004674:	2b00      	cmp	r3, #0
 8004676:	d102      	bne.n	800467e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4618      	mov	r0, r3
 8004684:	f002 ff7d 	bl	8007582 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	603b      	str	r3, [r7, #0]
 800468e:	687e      	ldr	r6, [r7, #4]
 8004690:	466d      	mov	r5, sp
 8004692:	f106 0410 	add.w	r4, r6, #16
 8004696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800469a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800469c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800469e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80046a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80046a6:	1d33      	adds	r3, r6, #4
 80046a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046aa:	6838      	ldr	r0, [r7, #0]
 80046ac:	f002 fe54 	bl	8007358 <USB_CoreInit>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d005      	beq.n	80046c2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2202      	movs	r2, #2
 80046ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e0d0      	b.n	8004864 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2100      	movs	r1, #0
 80046c8:	4618      	mov	r0, r3
 80046ca:	f002 ff6b 	bl	80075a4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046ce:	2300      	movs	r3, #0
 80046d0:	73fb      	strb	r3, [r7, #15]
 80046d2:	e04a      	b.n	800476a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80046d4:	7bfa      	ldrb	r2, [r7, #15]
 80046d6:	6879      	ldr	r1, [r7, #4]
 80046d8:	4613      	mov	r3, r2
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	1a9b      	subs	r3, r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	440b      	add	r3, r1
 80046e2:	333d      	adds	r3, #61	; 0x3d
 80046e4:	2201      	movs	r2, #1
 80046e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80046e8:	7bfa      	ldrb	r2, [r7, #15]
 80046ea:	6879      	ldr	r1, [r7, #4]
 80046ec:	4613      	mov	r3, r2
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	1a9b      	subs	r3, r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	440b      	add	r3, r1
 80046f6:	333c      	adds	r3, #60	; 0x3c
 80046f8:	7bfa      	ldrb	r2, [r7, #15]
 80046fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80046fc:	7bfa      	ldrb	r2, [r7, #15]
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
 8004700:	b298      	uxth	r0, r3
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	4613      	mov	r3, r2
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	3342      	adds	r3, #66	; 0x42
 8004710:	4602      	mov	r2, r0
 8004712:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004714:	7bfa      	ldrb	r2, [r7, #15]
 8004716:	6879      	ldr	r1, [r7, #4]
 8004718:	4613      	mov	r3, r2
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	1a9b      	subs	r3, r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	440b      	add	r3, r1
 8004722:	333f      	adds	r3, #63	; 0x3f
 8004724:	2200      	movs	r2, #0
 8004726:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004728:	7bfa      	ldrb	r2, [r7, #15]
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	4613      	mov	r3, r2
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	1a9b      	subs	r3, r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	3344      	adds	r3, #68	; 0x44
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800473c:	7bfa      	ldrb	r2, [r7, #15]
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	4613      	mov	r3, r2
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	1a9b      	subs	r3, r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	440b      	add	r3, r1
 800474a:	3348      	adds	r3, #72	; 0x48
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004750:	7bfa      	ldrb	r2, [r7, #15]
 8004752:	6879      	ldr	r1, [r7, #4]
 8004754:	4613      	mov	r3, r2
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	1a9b      	subs	r3, r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	440b      	add	r3, r1
 800475e:	3350      	adds	r3, #80	; 0x50
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004764:	7bfb      	ldrb	r3, [r7, #15]
 8004766:	3301      	adds	r3, #1
 8004768:	73fb      	strb	r3, [r7, #15]
 800476a:	7bfa      	ldrb	r2, [r7, #15]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	429a      	cmp	r2, r3
 8004772:	d3af      	bcc.n	80046d4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004774:	2300      	movs	r3, #0
 8004776:	73fb      	strb	r3, [r7, #15]
 8004778:	e044      	b.n	8004804 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800477a:	7bfa      	ldrb	r2, [r7, #15]
 800477c:	6879      	ldr	r1, [r7, #4]
 800477e:	4613      	mov	r3, r2
 8004780:	00db      	lsls	r3, r3, #3
 8004782:	1a9b      	subs	r3, r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	440b      	add	r3, r1
 8004788:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800478c:	2200      	movs	r2, #0
 800478e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004790:	7bfa      	ldrb	r2, [r7, #15]
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	4613      	mov	r3, r2
 8004796:	00db      	lsls	r3, r3, #3
 8004798:	1a9b      	subs	r3, r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	440b      	add	r3, r1
 800479e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80047a2:	7bfa      	ldrb	r2, [r7, #15]
 80047a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80047a6:	7bfa      	ldrb	r2, [r7, #15]
 80047a8:	6879      	ldr	r1, [r7, #4]
 80047aa:	4613      	mov	r3, r2
 80047ac:	00db      	lsls	r3, r3, #3
 80047ae:	1a9b      	subs	r3, r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	440b      	add	r3, r1
 80047b4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80047b8:	2200      	movs	r2, #0
 80047ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80047bc:	7bfa      	ldrb	r2, [r7, #15]
 80047be:	6879      	ldr	r1, [r7, #4]
 80047c0:	4613      	mov	r3, r2
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	1a9b      	subs	r3, r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	440b      	add	r3, r1
 80047ca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80047ce:	2200      	movs	r2, #0
 80047d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80047d2:	7bfa      	ldrb	r2, [r7, #15]
 80047d4:	6879      	ldr	r1, [r7, #4]
 80047d6:	4613      	mov	r3, r2
 80047d8:	00db      	lsls	r3, r3, #3
 80047da:	1a9b      	subs	r3, r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	440b      	add	r3, r1
 80047e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80047e4:	2200      	movs	r2, #0
 80047e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80047e8:	7bfa      	ldrb	r2, [r7, #15]
 80047ea:	6879      	ldr	r1, [r7, #4]
 80047ec:	4613      	mov	r3, r2
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	1a9b      	subs	r3, r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	440b      	add	r3, r1
 80047f6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80047fa:	2200      	movs	r2, #0
 80047fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047fe:	7bfb      	ldrb	r3, [r7, #15]
 8004800:	3301      	adds	r3, #1
 8004802:	73fb      	strb	r3, [r7, #15]
 8004804:	7bfa      	ldrb	r2, [r7, #15]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	429a      	cmp	r2, r3
 800480c:	d3b5      	bcc.n	800477a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	603b      	str	r3, [r7, #0]
 8004814:	687e      	ldr	r6, [r7, #4]
 8004816:	466d      	mov	r5, sp
 8004818:	f106 0410 	add.w	r4, r6, #16
 800481c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800481e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004820:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004822:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004824:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004828:	e885 0003 	stmia.w	r5, {r0, r1}
 800482c:	1d33      	adds	r3, r6, #4
 800482e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004830:	6838      	ldr	r0, [r7, #0]
 8004832:	f002 fee1 	bl	80075f8 <USB_DevInit>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d005      	beq.n	8004848 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2202      	movs	r2, #2
 8004840:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e00d      	b.n	8004864 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4618      	mov	r0, r3
 800485e:	f003 ff29 	bl	80086b4 <USB_DevDisconnect>

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800486c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004880:	2b01      	cmp	r3, #1
 8004882:	d101      	bne.n	8004888 <HAL_PCD_Start+0x1c>
 8004884:	2302      	movs	r3, #2
 8004886:	e020      	b.n	80048ca <HAL_PCD_Start+0x5e>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004894:	2b01      	cmp	r3, #1
 8004896:	d109      	bne.n	80048ac <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800489c:	2b01      	cmp	r3, #1
 800489e:	d005      	beq.n	80048ac <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f002 fe55 	bl	8007560 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f003 fed9 	bl	8008672 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80048d2:	b590      	push	{r4, r7, lr}
 80048d4:	b08d      	sub	sp, #52	; 0x34
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4618      	mov	r0, r3
 80048ea:	f003 ff97 	bl	800881c <USB_GetMode>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f040 839d 	bne.w	8005030 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f003 fefb 	bl	80086f6 <USB_ReadInterrupts>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	f000 8393 	beq.w	800502e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4618      	mov	r0, r3
 800490e:	f003 fef2 	bl	80086f6 <USB_ReadInterrupts>
 8004912:	4603      	mov	r3, r0
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b02      	cmp	r3, #2
 800491a:	d107      	bne.n	800492c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	695a      	ldr	r2, [r3, #20]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f002 0202 	and.w	r2, r2, #2
 800492a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4618      	mov	r0, r3
 8004932:	f003 fee0 	bl	80086f6 <USB_ReadInterrupts>
 8004936:	4603      	mov	r3, r0
 8004938:	f003 0310 	and.w	r3, r3, #16
 800493c:	2b10      	cmp	r3, #16
 800493e:	d161      	bne.n	8004a04 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699a      	ldr	r2, [r3, #24]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 0210 	bic.w	r2, r2, #16
 800494e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	f003 020f 	and.w	r2, r3, #15
 800495c:	4613      	mov	r3, r2
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	1a9b      	subs	r3, r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	4413      	add	r3, r2
 800496c:	3304      	adds	r3, #4
 800496e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	0c5b      	lsrs	r3, r3, #17
 8004974:	f003 030f 	and.w	r3, r3, #15
 8004978:	2b02      	cmp	r3, #2
 800497a:	d124      	bne.n	80049c6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004982:	4013      	ands	r3, r2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d035      	beq.n	80049f4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	091b      	lsrs	r3, r3, #4
 8004990:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004992:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004996:	b29b      	uxth	r3, r3
 8004998:	461a      	mov	r2, r3
 800499a:	6a38      	ldr	r0, [r7, #32]
 800499c:	f003 fd46 	bl	800842c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	68da      	ldr	r2, [r3, #12]
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	091b      	lsrs	r3, r3, #4
 80049a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049ac:	441a      	add	r2, r3
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	699a      	ldr	r2, [r3, #24]
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	091b      	lsrs	r3, r3, #4
 80049ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049be:	441a      	add	r2, r3
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	619a      	str	r2, [r3, #24]
 80049c4:	e016      	b.n	80049f4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	0c5b      	lsrs	r3, r3, #17
 80049ca:	f003 030f 	and.w	r3, r3, #15
 80049ce:	2b06      	cmp	r3, #6
 80049d0:	d110      	bne.n	80049f4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80049d8:	2208      	movs	r2, #8
 80049da:	4619      	mov	r1, r3
 80049dc:	6a38      	ldr	r0, [r7, #32]
 80049de:	f003 fd25 	bl	800842c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	699a      	ldr	r2, [r3, #24]
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	091b      	lsrs	r3, r3, #4
 80049ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049ee:	441a      	add	r2, r3
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	699a      	ldr	r2, [r3, #24]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0210 	orr.w	r2, r2, #16
 8004a02:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f003 fe74 	bl	80086f6 <USB_ReadInterrupts>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004a18:	d16e      	bne.n	8004af8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f003 fe7a 	bl	800871c <USB_ReadDevAllOutEpInterrupt>
 8004a28:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004a2a:	e062      	b.n	8004af2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d057      	beq.n	8004ae6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a3c:	b2d2      	uxtb	r2, r2
 8004a3e:	4611      	mov	r1, r2
 8004a40:	4618      	mov	r0, r3
 8004a42:	f003 fe9f 	bl	8008784 <USB_ReadDevOutEPInterrupt>
 8004a46:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00c      	beq.n	8004a6c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	015a      	lsls	r2, r3, #5
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	4413      	add	r3, r2
 8004a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a5e:	461a      	mov	r2, r3
 8004a60:	2301      	movs	r3, #1
 8004a62:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004a64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fdb0 	bl	80055cc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	f003 0308 	and.w	r3, r3, #8
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00c      	beq.n	8004a90 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	015a      	lsls	r2, r3, #5
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a82:	461a      	mov	r2, r3
 8004a84:	2308      	movs	r3, #8
 8004a86:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004a88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 feaa 	bl	80057e4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	f003 0310 	and.w	r3, r3, #16
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d008      	beq.n	8004aac <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	015a      	lsls	r2, r3, #5
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	2310      	movs	r3, #16
 8004aaa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	f003 0320 	and.w	r3, r3, #32
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d008      	beq.n	8004ac8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	2320      	movs	r3, #32
 8004ac6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d009      	beq.n	8004ae6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	015a      	lsls	r2, r3, #5
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ae4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	3301      	adds	r3, #1
 8004aea:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aee:	085b      	lsrs	r3, r3, #1
 8004af0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d199      	bne.n	8004a2c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f003 fdfa 	bl	80086f6 <USB_ReadInterrupts>
 8004b02:	4603      	mov	r3, r0
 8004b04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b0c:	f040 80c0 	bne.w	8004c90 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f003 fe1b 	bl	8008750 <USB_ReadDevAllInEpInterrupt>
 8004b1a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004b20:	e0b2      	b.n	8004c88 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 80a7 	beq.w	8004c7c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b34:	b2d2      	uxtb	r2, r2
 8004b36:	4611      	mov	r1, r2
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f003 fe41 	bl	80087c0 <USB_ReadDevInEPInterrupt>
 8004b3e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d057      	beq.n	8004bfa <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	f003 030f 	and.w	r3, r3, #15
 8004b50:	2201      	movs	r2, #1
 8004b52:	fa02 f303 	lsl.w	r3, r2, r3
 8004b56:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	43db      	mvns	r3, r3
 8004b64:	69f9      	ldr	r1, [r7, #28]
 8004b66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	015a      	lsls	r2, r3, #5
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	4413      	add	r3, r2
 8004b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d132      	bne.n	8004bee <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004b88:	6879      	ldr	r1, [r7, #4]
 8004b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	1a9b      	subs	r3, r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	440b      	add	r3, r1
 8004b96:	3348      	adds	r3, #72	; 0x48
 8004b98:	6819      	ldr	r1, [r3, #0]
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	00db      	lsls	r3, r3, #3
 8004ba2:	1a9b      	subs	r3, r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4403      	add	r3, r0
 8004ba8:	3344      	adds	r3, #68	; 0x44
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4419      	add	r1, r3
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	00db      	lsls	r3, r3, #3
 8004bb6:	1a9b      	subs	r3, r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4403      	add	r3, r0
 8004bbc:	3348      	adds	r3, #72	; 0x48
 8004bbe:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d113      	bne.n	8004bee <HAL_PCD_IRQHandler+0x31c>
 8004bc6:	6879      	ldr	r1, [r7, #4]
 8004bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bca:	4613      	mov	r3, r2
 8004bcc:	00db      	lsls	r3, r3, #3
 8004bce:	1a9b      	subs	r3, r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	440b      	add	r3, r1
 8004bd4:	3350      	adds	r3, #80	; 0x50
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d108      	bne.n	8004bee <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6818      	ldr	r0, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004be6:	461a      	mov	r2, r3
 8004be8:	2101      	movs	r1, #1
 8004bea:	f003 fe49 	bl	8008880 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f005 fd7a 	bl	800a6ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f003 0308 	and.w	r3, r3, #8
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d008      	beq.n	8004c16 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c10:	461a      	mov	r2, r3
 8004c12:	2308      	movs	r3, #8
 8004c14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	f003 0310 	and.w	r3, r3, #16
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d008      	beq.n	8004c32 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	2310      	movs	r3, #16
 8004c30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d008      	beq.n	8004c4e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c48:	461a      	mov	r2, r3
 8004c4a:	2340      	movs	r3, #64	; 0x40
 8004c4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d008      	beq.n	8004c6a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c64:	461a      	mov	r2, r3
 8004c66:	2302      	movs	r3, #2
 8004c68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d003      	beq.n	8004c7c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004c74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 fc1b 	bl	80054b2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	3301      	adds	r3, #1
 8004c80:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c84:	085b      	lsrs	r3, r3, #1
 8004c86:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f47f af49 	bne.w	8004b22 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4618      	mov	r0, r3
 8004c96:	f003 fd2e 	bl	80086f6 <USB_ReadInterrupts>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ca0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ca4:	d122      	bne.n	8004cec <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	69fa      	ldr	r2, [r7, #28]
 8004cb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cb4:	f023 0301 	bic.w	r3, r3, #1
 8004cb8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d108      	bne.n	8004cd6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004ccc:	2100      	movs	r1, #0
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 fe26 	bl	8005920 <HAL_PCDEx_LPM_Callback>
 8004cd4:	e002      	b.n	8004cdc <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f005 fd80 	bl	800a7dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	695a      	ldr	r2, [r3, #20]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004cea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f003 fd00 	bl	80086f6 <USB_ReadInterrupts>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d00:	d112      	bne.n	8004d28 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d102      	bne.n	8004d18 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f005 fd3c 	bl	800a790 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	695a      	ldr	r2, [r3, #20]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004d26:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f003 fce2 	bl	80086f6 <USB_ReadInterrupts>
 8004d32:	4603      	mov	r3, r0
 8004d34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d3c:	f040 80c7 	bne.w	8004ece <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	69fa      	ldr	r2, [r7, #28]
 8004d4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d4e:	f023 0301 	bic.w	r3, r3, #1
 8004d52:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2110      	movs	r1, #16
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f002 fdb0 	bl	80078c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d60:	2300      	movs	r3, #0
 8004d62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d64:	e056      	b.n	8004e14 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d72:	461a      	mov	r2, r3
 8004d74:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d78:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	4413      	add	r3, r2
 8004d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d8a:	0151      	lsls	r1, r2, #5
 8004d8c:	69fa      	ldr	r2, [r7, #28]
 8004d8e:	440a      	add	r2, r1
 8004d90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d98:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9c:	015a      	lsls	r2, r3, #5
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	4413      	add	r3, r2
 8004da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004daa:	0151      	lsls	r1, r2, #5
 8004dac:	69fa      	ldr	r2, [r7, #28]
 8004dae:	440a      	add	r2, r1
 8004db0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004db4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004db8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbc:	015a      	lsls	r2, r3, #5
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004dcc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd0:	015a      	lsls	r2, r3, #5
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dde:	0151      	lsls	r1, r2, #5
 8004de0:	69fa      	ldr	r2, [r7, #28]
 8004de2:	440a      	add	r2, r1
 8004de4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004de8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004dec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df0:	015a      	lsls	r2, r3, #5
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	4413      	add	r3, r2
 8004df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dfe:	0151      	lsls	r1, r2, #5
 8004e00:	69fa      	ldr	r2, [r7, #28]
 8004e02:	440a      	add	r2, r1
 8004e04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e0c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e10:	3301      	adds	r3, #1
 8004e12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d3a3      	bcc.n	8004d66 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	69fa      	ldr	r2, [r7, #28]
 8004e28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e2c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004e30:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d016      	beq.n	8004e68 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e44:	69fa      	ldr	r2, [r7, #28]
 8004e46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e4a:	f043 030b 	orr.w	r3, r3, #11
 8004e4e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5a:	69fa      	ldr	r2, [r7, #28]
 8004e5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e60:	f043 030b 	orr.w	r3, r3, #11
 8004e64:	6453      	str	r3, [r2, #68]	; 0x44
 8004e66:	e015      	b.n	8004e94 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	69fa      	ldr	r2, [r7, #28]
 8004e72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004e7a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004e7e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	69fa      	ldr	r2, [r7, #28]
 8004e8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e8e:	f043 030b 	orr.w	r3, r3, #11
 8004e92:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	69fa      	ldr	r2, [r7, #28]
 8004e9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ea2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004ea6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6818      	ldr	r0, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004eb8:	461a      	mov	r2, r3
 8004eba:	f003 fce1 	bl	8008880 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	695a      	ldr	r2, [r3, #20]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004ecc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f003 fc0f 	bl	80086f6 <USB_ReadInterrupts>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ee2:	d124      	bne.n	8004f2e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f003 fca5 	bl	8008838 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f002 fd45 	bl	8007982 <USB_GetDevSpeed>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	461a      	mov	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681c      	ldr	r4, [r3, #0]
 8004f04:	f001 f944 	bl	8006190 <HAL_RCC_GetHCLKFreq>
 8004f08:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	461a      	mov	r2, r3
 8004f12:	4620      	mov	r0, r4
 8004f14:	f002 fa82 	bl	800741c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f005 fc10 	bl	800a73e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	695a      	ldr	r2, [r3, #20]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004f2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f003 fbdf 	bl	80086f6 <USB_ReadInterrupts>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	f003 0308 	and.w	r3, r3, #8
 8004f3e:	2b08      	cmp	r3, #8
 8004f40:	d10a      	bne.n	8004f58 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f005 fbed 	bl	800a722 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	695a      	ldr	r2, [r3, #20]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f002 0208 	and.w	r2, r2, #8
 8004f56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f003 fbca 	bl	80086f6 <USB_ReadInterrupts>
 8004f62:	4603      	mov	r3, r0
 8004f64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f6c:	d10f      	bne.n	8004f8e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	4619      	mov	r1, r3
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f005 fc4f 	bl	800a81c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	695a      	ldr	r2, [r3, #20]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004f8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f003 fbaf 	bl	80086f6 <USB_ReadInterrupts>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fa2:	d10f      	bne.n	8004fc4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	4619      	mov	r1, r3
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f005 fc22 	bl	800a7f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	695a      	ldr	r2, [r3, #20]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004fc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f003 fb94 	bl	80086f6 <USB_ReadInterrupts>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd8:	d10a      	bne.n	8004ff0 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f005 fc30 	bl	800a840 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	695a      	ldr	r2, [r3, #20]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004fee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f003 fb7e 	bl	80086f6 <USB_ReadInterrupts>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	f003 0304 	and.w	r3, r3, #4
 8005000:	2b04      	cmp	r3, #4
 8005002:	d115      	bne.n	8005030 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	f003 0304 	and.w	r3, r3, #4
 8005012:	2b00      	cmp	r3, #0
 8005014:	d002      	beq.n	800501c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f005 fc20 	bl	800a85c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6859      	ldr	r1, [r3, #4]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	430a      	orrs	r2, r1
 800502a:	605a      	str	r2, [r3, #4]
 800502c:	e000      	b.n	8005030 <HAL_PCD_IRQHandler+0x75e>
      return;
 800502e:	bf00      	nop
    }
  }
}
 8005030:	3734      	adds	r7, #52	; 0x34
 8005032:	46bd      	mov	sp, r7
 8005034:	bd90      	pop	{r4, r7, pc}

08005036 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b082      	sub	sp, #8
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
 800503e:	460b      	mov	r3, r1
 8005040:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005048:	2b01      	cmp	r3, #1
 800504a:	d101      	bne.n	8005050 <HAL_PCD_SetAddress+0x1a>
 800504c:	2302      	movs	r3, #2
 800504e:	e013      	b.n	8005078 <HAL_PCD_SetAddress+0x42>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	78fa      	ldrb	r2, [r7, #3]
 800505c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	78fa      	ldrb	r2, [r7, #3]
 8005066:	4611      	mov	r1, r2
 8005068:	4618      	mov	r0, r3
 800506a:	f003 fadc 	bl	8008626 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	4608      	mov	r0, r1
 800508a:	4611      	mov	r1, r2
 800508c:	461a      	mov	r2, r3
 800508e:	4603      	mov	r3, r0
 8005090:	70fb      	strb	r3, [r7, #3]
 8005092:	460b      	mov	r3, r1
 8005094:	803b      	strh	r3, [r7, #0]
 8005096:	4613      	mov	r3, r2
 8005098:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800509a:	2300      	movs	r3, #0
 800509c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800509e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	da0f      	bge.n	80050c6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050a6:	78fb      	ldrb	r3, [r7, #3]
 80050a8:	f003 020f 	and.w	r2, r3, #15
 80050ac:	4613      	mov	r3, r2
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	1a9b      	subs	r3, r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	3338      	adds	r3, #56	; 0x38
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	4413      	add	r3, r2
 80050ba:	3304      	adds	r3, #4
 80050bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2201      	movs	r2, #1
 80050c2:	705a      	strb	r2, [r3, #1]
 80050c4:	e00f      	b.n	80050e6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050c6:	78fb      	ldrb	r3, [r7, #3]
 80050c8:	f003 020f 	and.w	r2, r3, #15
 80050cc:	4613      	mov	r3, r2
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	1a9b      	subs	r3, r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	4413      	add	r3, r2
 80050dc:	3304      	adds	r3, #4
 80050de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80050e6:	78fb      	ldrb	r3, [r7, #3]
 80050e8:	f003 030f 	and.w	r3, r3, #15
 80050ec:	b2da      	uxtb	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80050f2:	883a      	ldrh	r2, [r7, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	78ba      	ldrb	r2, [r7, #2]
 80050fc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	785b      	ldrb	r3, [r3, #1]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d004      	beq.n	8005110 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	b29a      	uxth	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005110:	78bb      	ldrb	r3, [r7, #2]
 8005112:	2b02      	cmp	r3, #2
 8005114:	d102      	bne.n	800511c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005122:	2b01      	cmp	r3, #1
 8005124:	d101      	bne.n	800512a <HAL_PCD_EP_Open+0xaa>
 8005126:	2302      	movs	r3, #2
 8005128:	e00e      	b.n	8005148 <HAL_PCD_EP_Open+0xc8>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68f9      	ldr	r1, [r7, #12]
 8005138:	4618      	mov	r0, r3
 800513a:	f002 fc47 	bl	80079cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005146:	7afb      	ldrb	r3, [r7, #11]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	460b      	mov	r3, r1
 800515a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800515c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005160:	2b00      	cmp	r3, #0
 8005162:	da0f      	bge.n	8005184 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005164:	78fb      	ldrb	r3, [r7, #3]
 8005166:	f003 020f 	and.w	r2, r3, #15
 800516a:	4613      	mov	r3, r2
 800516c:	00db      	lsls	r3, r3, #3
 800516e:	1a9b      	subs	r3, r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	3338      	adds	r3, #56	; 0x38
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	4413      	add	r3, r2
 8005178:	3304      	adds	r3, #4
 800517a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2201      	movs	r2, #1
 8005180:	705a      	strb	r2, [r3, #1]
 8005182:	e00f      	b.n	80051a4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005184:	78fb      	ldrb	r3, [r7, #3]
 8005186:	f003 020f 	and.w	r2, r3, #15
 800518a:	4613      	mov	r3, r2
 800518c:	00db      	lsls	r3, r3, #3
 800518e:	1a9b      	subs	r3, r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	4413      	add	r3, r2
 800519a:	3304      	adds	r3, #4
 800519c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80051a4:	78fb      	ldrb	r3, [r7, #3]
 80051a6:	f003 030f 	and.w	r3, r3, #15
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d101      	bne.n	80051be <HAL_PCD_EP_Close+0x6e>
 80051ba:	2302      	movs	r3, #2
 80051bc:	e00e      	b.n	80051dc <HAL_PCD_EP_Close+0x8c>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68f9      	ldr	r1, [r7, #12]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f002 fc85 	bl	8007adc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	607a      	str	r2, [r7, #4]
 80051ee:	603b      	str	r3, [r7, #0]
 80051f0:	460b      	mov	r3, r1
 80051f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051f4:	7afb      	ldrb	r3, [r7, #11]
 80051f6:	f003 020f 	and.w	r2, r3, #15
 80051fa:	4613      	mov	r3, r2
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	1a9b      	subs	r3, r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	4413      	add	r3, r2
 800520a:	3304      	adds	r3, #4
 800520c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	2200      	movs	r2, #0
 800521e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	2200      	movs	r2, #0
 8005224:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005226:	7afb      	ldrb	r3, [r7, #11]
 8005228:	f003 030f 	and.w	r3, r3, #15
 800522c:	b2da      	uxtb	r2, r3
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d102      	bne.n	8005240 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005240:	7afb      	ldrb	r3, [r7, #11]
 8005242:	f003 030f 	and.w	r3, r3, #15
 8005246:	2b00      	cmp	r3, #0
 8005248:	d109      	bne.n	800525e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6818      	ldr	r0, [r3, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	b2db      	uxtb	r3, r3
 8005254:	461a      	mov	r2, r3
 8005256:	6979      	ldr	r1, [r7, #20]
 8005258:	f002 ff60 	bl	800811c <USB_EP0StartXfer>
 800525c:	e008      	b.n	8005270 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6818      	ldr	r0, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	b2db      	uxtb	r3, r3
 8005268:	461a      	mov	r2, r3
 800526a:	6979      	ldr	r1, [r7, #20]
 800526c:	f002 fd12 	bl	8007c94 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3718      	adds	r7, #24
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800527a:	b480      	push	{r7}
 800527c:	b083      	sub	sp, #12
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	460b      	mov	r3, r1
 8005284:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005286:	78fb      	ldrb	r3, [r7, #3]
 8005288:	f003 020f 	and.w	r2, r3, #15
 800528c:	6879      	ldr	r1, [r7, #4]
 800528e:	4613      	mov	r3, r2
 8005290:	00db      	lsls	r3, r3, #3
 8005292:	1a9b      	subs	r3, r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	440b      	add	r3, r1
 8005298:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800529c:	681b      	ldr	r3, [r3, #0]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b086      	sub	sp, #24
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	60f8      	str	r0, [r7, #12]
 80052b2:	607a      	str	r2, [r7, #4]
 80052b4:	603b      	str	r3, [r7, #0]
 80052b6:	460b      	mov	r3, r1
 80052b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052ba:	7afb      	ldrb	r3, [r7, #11]
 80052bc:	f003 020f 	and.w	r2, r3, #15
 80052c0:	4613      	mov	r3, r2
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	1a9b      	subs	r3, r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	3338      	adds	r3, #56	; 0x38
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	4413      	add	r3, r2
 80052ce:	3304      	adds	r3, #4
 80052d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	2200      	movs	r2, #0
 80052e2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	2201      	movs	r2, #1
 80052e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052ea:	7afb      	ldrb	r3, [r7, #11]
 80052ec:	f003 030f 	and.w	r3, r3, #15
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d102      	bne.n	8005304 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005304:	7afb      	ldrb	r3, [r7, #11]
 8005306:	f003 030f 	and.w	r3, r3, #15
 800530a:	2b00      	cmp	r3, #0
 800530c:	d109      	bne.n	8005322 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6818      	ldr	r0, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	b2db      	uxtb	r3, r3
 8005318:	461a      	mov	r2, r3
 800531a:	6979      	ldr	r1, [r7, #20]
 800531c:	f002 fefe 	bl	800811c <USB_EP0StartXfer>
 8005320:	e008      	b.n	8005334 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6818      	ldr	r0, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	b2db      	uxtb	r3, r3
 800532c:	461a      	mov	r2, r3
 800532e:	6979      	ldr	r1, [r7, #20]
 8005330:	f002 fcb0 	bl	8007c94 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3718      	adds	r7, #24
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b084      	sub	sp, #16
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
 8005346:	460b      	mov	r3, r1
 8005348:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800534a:	78fb      	ldrb	r3, [r7, #3]
 800534c:	f003 020f 	and.w	r2, r3, #15
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	429a      	cmp	r2, r3
 8005356:	d901      	bls.n	800535c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e050      	b.n	80053fe <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800535c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005360:	2b00      	cmp	r3, #0
 8005362:	da0f      	bge.n	8005384 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005364:	78fb      	ldrb	r3, [r7, #3]
 8005366:	f003 020f 	and.w	r2, r3, #15
 800536a:	4613      	mov	r3, r2
 800536c:	00db      	lsls	r3, r3, #3
 800536e:	1a9b      	subs	r3, r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	3338      	adds	r3, #56	; 0x38
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	4413      	add	r3, r2
 8005378:	3304      	adds	r3, #4
 800537a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2201      	movs	r2, #1
 8005380:	705a      	strb	r2, [r3, #1]
 8005382:	e00d      	b.n	80053a0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005384:	78fa      	ldrb	r2, [r7, #3]
 8005386:	4613      	mov	r3, r2
 8005388:	00db      	lsls	r3, r3, #3
 800538a:	1a9b      	subs	r3, r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	4413      	add	r3, r2
 8005396:	3304      	adds	r3, #4
 8005398:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2201      	movs	r2, #1
 80053a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053a6:	78fb      	ldrb	r3, [r7, #3]
 80053a8:	f003 030f 	and.w	r3, r3, #15
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d101      	bne.n	80053c0 <HAL_PCD_EP_SetStall+0x82>
 80053bc:	2302      	movs	r3, #2
 80053be:	e01e      	b.n	80053fe <HAL_PCD_EP_SetStall+0xc0>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68f9      	ldr	r1, [r7, #12]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f003 f855 	bl	800847e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80053d4:	78fb      	ldrb	r3, [r7, #3]
 80053d6:	f003 030f 	and.w	r3, r3, #15
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10a      	bne.n	80053f4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6818      	ldr	r0, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	b2d9      	uxtb	r1, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80053ee:	461a      	mov	r2, r3
 80053f0:	f003 fa46 	bl	8008880 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b084      	sub	sp, #16
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
 800540e:	460b      	mov	r3, r1
 8005410:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005412:	78fb      	ldrb	r3, [r7, #3]
 8005414:	f003 020f 	and.w	r2, r3, #15
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	429a      	cmp	r2, r3
 800541e:	d901      	bls.n	8005424 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e042      	b.n	80054aa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005424:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005428:	2b00      	cmp	r3, #0
 800542a:	da0f      	bge.n	800544c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800542c:	78fb      	ldrb	r3, [r7, #3]
 800542e:	f003 020f 	and.w	r2, r3, #15
 8005432:	4613      	mov	r3, r2
 8005434:	00db      	lsls	r3, r3, #3
 8005436:	1a9b      	subs	r3, r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	3338      	adds	r3, #56	; 0x38
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	4413      	add	r3, r2
 8005440:	3304      	adds	r3, #4
 8005442:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2201      	movs	r2, #1
 8005448:	705a      	strb	r2, [r3, #1]
 800544a:	e00f      	b.n	800546c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800544c:	78fb      	ldrb	r3, [r7, #3]
 800544e:	f003 020f 	and.w	r2, r3, #15
 8005452:	4613      	mov	r3, r2
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	1a9b      	subs	r3, r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	4413      	add	r3, r2
 8005462:	3304      	adds	r3, #4
 8005464:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005472:	78fb      	ldrb	r3, [r7, #3]
 8005474:	f003 030f 	and.w	r3, r3, #15
 8005478:	b2da      	uxtb	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005484:	2b01      	cmp	r3, #1
 8005486:	d101      	bne.n	800548c <HAL_PCD_EP_ClrStall+0x86>
 8005488:	2302      	movs	r3, #2
 800548a:	e00e      	b.n	80054aa <HAL_PCD_EP_ClrStall+0xa4>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68f9      	ldr	r1, [r7, #12]
 800549a:	4618      	mov	r0, r3
 800549c:	f003 f85d 	bl	800855a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b08a      	sub	sp, #40	; 0x28
 80054b6:	af02      	add	r7, sp, #8
 80054b8:	6078      	str	r0, [r7, #4]
 80054ba:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	4613      	mov	r3, r2
 80054ca:	00db      	lsls	r3, r3, #3
 80054cc:	1a9b      	subs	r3, r3, r2
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	3338      	adds	r3, #56	; 0x38
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	4413      	add	r3, r2
 80054d6:	3304      	adds	r3, #4
 80054d8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	699a      	ldr	r2, [r3, #24]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d901      	bls.n	80054ea <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e06c      	b.n	80055c4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	695a      	ldr	r2, [r3, #20]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	69fa      	ldr	r2, [r7, #28]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d902      	bls.n	8005506 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	3303      	adds	r3, #3
 800550a:	089b      	lsrs	r3, r3, #2
 800550c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800550e:	e02b      	b.n	8005568 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	695a      	ldr	r2, [r3, #20]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	69fa      	ldr	r2, [r7, #28]
 8005522:	429a      	cmp	r2, r3
 8005524:	d902      	bls.n	800552c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	3303      	adds	r3, #3
 8005530:	089b      	lsrs	r3, r3, #2
 8005532:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	68d9      	ldr	r1, [r3, #12]
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	b2da      	uxtb	r2, r3
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005544:	b2db      	uxtb	r3, r3
 8005546:	9300      	str	r3, [sp, #0]
 8005548:	4603      	mov	r3, r0
 800554a:	6978      	ldr	r0, [r7, #20]
 800554c:	f002 ff39 	bl	80083c2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	68da      	ldr	r2, [r3, #12]
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	441a      	add	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	699a      	ldr	r2, [r3, #24]
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	441a      	add	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	b29b      	uxth	r3, r3
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	429a      	cmp	r2, r3
 800557c:	d809      	bhi.n	8005592 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	699a      	ldr	r2, [r3, #24]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005586:	429a      	cmp	r2, r3
 8005588:	d203      	bcs.n	8005592 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1be      	bne.n	8005510 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	695a      	ldr	r2, [r3, #20]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	429a      	cmp	r2, r3
 800559c:	d811      	bhi.n	80055c2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	f003 030f 	and.w	r3, r3, #15
 80055a4:	2201      	movs	r2, #1
 80055a6:	fa02 f303 	lsl.w	r3, r2, r3
 80055aa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	43db      	mvns	r3, r3
 80055b8:	6939      	ldr	r1, [r7, #16]
 80055ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055be:	4013      	ands	r3, r2
 80055c0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3720      	adds	r7, #32
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	333c      	adds	r3, #60	; 0x3c
 80055e4:	3304      	adds	r3, #4
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	015a      	lsls	r2, r3, #5
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	f040 80a0 	bne.w	8005744 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b00      	cmp	r3, #0
 800560c:	d015      	beq.n	800563a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	4a72      	ldr	r2, [pc, #456]	; (80057dc <PCD_EP_OutXfrComplete_int+0x210>)
 8005612:	4293      	cmp	r3, r2
 8005614:	f240 80dd 	bls.w	80057d2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 80d7 	beq.w	80057d2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	015a      	lsls	r2, r3, #5
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	4413      	add	r3, r2
 800562c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005630:	461a      	mov	r2, r3
 8005632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005636:	6093      	str	r3, [r2, #8]
 8005638:	e0cb      	b.n	80057d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	f003 0320 	and.w	r3, r3, #32
 8005640:	2b00      	cmp	r3, #0
 8005642:	d009      	beq.n	8005658 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	4413      	add	r3, r2
 800564c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005650:	461a      	mov	r2, r3
 8005652:	2320      	movs	r3, #32
 8005654:	6093      	str	r3, [r2, #8]
 8005656:	e0bc      	b.n	80057d2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800565e:	2b00      	cmp	r3, #0
 8005660:	f040 80b7 	bne.w	80057d2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	4a5d      	ldr	r2, [pc, #372]	; (80057dc <PCD_EP_OutXfrComplete_int+0x210>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d90f      	bls.n	800568c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00a      	beq.n	800568c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	4413      	add	r3, r2
 800567e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005682:	461a      	mov	r2, r3
 8005684:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005688:	6093      	str	r3, [r2, #8]
 800568a:	e0a2      	b.n	80057d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800568c:	6879      	ldr	r1, [r7, #4]
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	4613      	mov	r3, r2
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	1a9b      	subs	r3, r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	440b      	add	r3, r1
 800569a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800569e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	0159      	lsls	r1, r3, #5
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	440b      	add	r3, r1
 80056a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80056b2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	4613      	mov	r3, r2
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	1a9b      	subs	r3, r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4403      	add	r3, r0
 80056c2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80056c6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80056c8:	6879      	ldr	r1, [r7, #4]
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	4613      	mov	r3, r2
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	1a9b      	subs	r3, r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	440b      	add	r3, r1
 80056d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80056da:	6819      	ldr	r1, [r3, #0]
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	4613      	mov	r3, r2
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	1a9b      	subs	r3, r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4403      	add	r3, r0
 80056ea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4419      	add	r1, r3
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	683a      	ldr	r2, [r7, #0]
 80056f6:	4613      	mov	r3, r2
 80056f8:	00db      	lsls	r3, r3, #3
 80056fa:	1a9b      	subs	r3, r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4403      	add	r3, r0
 8005700:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005704:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d114      	bne.n	8005736 <PCD_EP_OutXfrComplete_int+0x16a>
 800570c:	6879      	ldr	r1, [r7, #4]
 800570e:	683a      	ldr	r2, [r7, #0]
 8005710:	4613      	mov	r3, r2
 8005712:	00db      	lsls	r3, r3, #3
 8005714:	1a9b      	subs	r3, r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	440b      	add	r3, r1
 800571a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d108      	bne.n	8005736 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6818      	ldr	r0, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800572e:	461a      	mov	r2, r3
 8005730:	2101      	movs	r1, #1
 8005732:	f003 f8a5 	bl	8008880 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	b2db      	uxtb	r3, r3
 800573a:	4619      	mov	r1, r3
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f004 ffbb 	bl	800a6b8 <HAL_PCD_DataOutStageCallback>
 8005742:	e046      	b.n	80057d2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	4a26      	ldr	r2, [pc, #152]	; (80057e0 <PCD_EP_OutXfrComplete_int+0x214>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d124      	bne.n	8005796 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00a      	beq.n	800576c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	4413      	add	r3, r2
 800575e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005762:	461a      	mov	r2, r3
 8005764:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005768:	6093      	str	r3, [r2, #8]
 800576a:	e032      	b.n	80057d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	f003 0320 	and.w	r3, r3, #32
 8005772:	2b00      	cmp	r3, #0
 8005774:	d008      	beq.n	8005788 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	015a      	lsls	r2, r3, #5
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	4413      	add	r3, r2
 800577e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005782:	461a      	mov	r2, r3
 8005784:	2320      	movs	r3, #32
 8005786:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	b2db      	uxtb	r3, r3
 800578c:	4619      	mov	r1, r3
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f004 ff92 	bl	800a6b8 <HAL_PCD_DataOutStageCallback>
 8005794:	e01d      	b.n	80057d2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d114      	bne.n	80057c6 <PCD_EP_OutXfrComplete_int+0x1fa>
 800579c:	6879      	ldr	r1, [r7, #4]
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	4613      	mov	r3, r2
 80057a2:	00db      	lsls	r3, r3, #3
 80057a4:	1a9b      	subs	r3, r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	440b      	add	r3, r1
 80057aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d108      	bne.n	80057c6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6818      	ldr	r0, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80057be:	461a      	mov	r2, r3
 80057c0:	2100      	movs	r1, #0
 80057c2:	f003 f85d 	bl	8008880 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	4619      	mov	r1, r3
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f004 ff73 	bl	800a6b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3718      	adds	r7, #24
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	4f54300a 	.word	0x4f54300a
 80057e0:	4f54310a 	.word	0x4f54310a

080057e4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	333c      	adds	r3, #60	; 0x3c
 80057fc:	3304      	adds	r3, #4
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	015a      	lsls	r2, r3, #5
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	4413      	add	r3, r2
 800580a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	4a15      	ldr	r2, [pc, #84]	; (800586c <PCD_EP_OutSetupPacket_int+0x88>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d90e      	bls.n	8005838 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005820:	2b00      	cmp	r3, #0
 8005822:	d009      	beq.n	8005838 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	4413      	add	r3, r2
 800582c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005830:	461a      	mov	r2, r3
 8005832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005836:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f004 ff2b 	bl	800a694 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	4a0a      	ldr	r2, [pc, #40]	; (800586c <PCD_EP_OutSetupPacket_int+0x88>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d90c      	bls.n	8005860 <PCD_EP_OutSetupPacket_int+0x7c>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d108      	bne.n	8005860 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6818      	ldr	r0, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005858:	461a      	mov	r2, r3
 800585a:	2101      	movs	r1, #1
 800585c:	f003 f810 	bl	8008880 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3718      	adds	r7, #24
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	4f54300a 	.word	0x4f54300a

08005870 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	460b      	mov	r3, r1
 800587a:	70fb      	strb	r3, [r7, #3]
 800587c:	4613      	mov	r3, r2
 800587e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005886:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005888:	78fb      	ldrb	r3, [r7, #3]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d107      	bne.n	800589e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800588e:	883b      	ldrh	r3, [r7, #0]
 8005890:	0419      	lsls	r1, r3, #16
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	430a      	orrs	r2, r1
 800589a:	629a      	str	r2, [r3, #40]	; 0x28
 800589c:	e028      	b.n	80058f0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a4:	0c1b      	lsrs	r3, r3, #16
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	4413      	add	r3, r2
 80058aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80058ac:	2300      	movs	r3, #0
 80058ae:	73fb      	strb	r3, [r7, #15]
 80058b0:	e00d      	b.n	80058ce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	7bfb      	ldrb	r3, [r7, #15]
 80058b8:	3340      	adds	r3, #64	; 0x40
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4413      	add	r3, r2
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	0c1b      	lsrs	r3, r3, #16
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	4413      	add	r3, r2
 80058c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80058c8:	7bfb      	ldrb	r3, [r7, #15]
 80058ca:	3301      	adds	r3, #1
 80058cc:	73fb      	strb	r3, [r7, #15]
 80058ce:	7bfa      	ldrb	r2, [r7, #15]
 80058d0:	78fb      	ldrb	r3, [r7, #3]
 80058d2:	3b01      	subs	r3, #1
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d3ec      	bcc.n	80058b2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80058d8:	883b      	ldrh	r3, [r7, #0]
 80058da:	0418      	lsls	r0, r3, #16
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6819      	ldr	r1, [r3, #0]
 80058e0:	78fb      	ldrb	r3, [r7, #3]
 80058e2:	3b01      	subs	r3, #1
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	4302      	orrs	r2, r0
 80058e8:	3340      	adds	r3, #64	; 0x40
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	440b      	add	r3, r1
 80058ee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3714      	adds	r7, #20
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80058fe:	b480      	push	{r7}
 8005900:	b083      	sub	sp, #12
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
 8005906:	460b      	mov	r3, r1
 8005908:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	887a      	ldrh	r2, [r7, #2]
 8005910:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	460b      	mov	r3, r1
 800592a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e25b      	b.n	8005e02 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	2b00      	cmp	r3, #0
 8005954:	d075      	beq.n	8005a42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005956:	4ba3      	ldr	r3, [pc, #652]	; (8005be4 <HAL_RCC_OscConfig+0x2ac>)
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f003 030c 	and.w	r3, r3, #12
 800595e:	2b04      	cmp	r3, #4
 8005960:	d00c      	beq.n	800597c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005962:	4ba0      	ldr	r3, [pc, #640]	; (8005be4 <HAL_RCC_OscConfig+0x2ac>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800596a:	2b08      	cmp	r3, #8
 800596c:	d112      	bne.n	8005994 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800596e:	4b9d      	ldr	r3, [pc, #628]	; (8005be4 <HAL_RCC_OscConfig+0x2ac>)
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005976:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800597a:	d10b      	bne.n	8005994 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800597c:	4b99      	ldr	r3, [pc, #612]	; (8005be4 <HAL_RCC_OscConfig+0x2ac>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d05b      	beq.n	8005a40 <HAL_RCC_OscConfig+0x108>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d157      	bne.n	8005a40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e236      	b.n	8005e02 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800599c:	d106      	bne.n	80059ac <HAL_RCC_OscConfig+0x74>
 800599e:	4b91      	ldr	r3, [pc, #580]	; (8005be4 <HAL_RCC_OscConfig+0x2ac>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a90      	ldr	r2, [pc, #576]	; (8005be4 <HAL_RCC_OscConfig+0x2ac>)
 80059a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059a8:	6013      	str	r3, [r2, #0]
 80059aa:	e01d      	b.n	80059e8 <HAL_RCC_OscConfig+0xb0>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059b4:	d10c      	bne.n	80059d0 <HAL_RCC_OscConfig+0x98>
 80059b6:	4b8b      	ldr	r3, [pc, #556]	; (8005be4 <HAL_RCC_OscConfig+0x2ac>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a8a      	ldr	r2, [pc, #552]	; (8005be4 <HAL_RCC_OscConfig+0x2ac>)
 80059bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059c0:	6013      	str	r3, [r2, #0]
 80059c2:	4b88      	ldr	r3, [pc, #544]	; (8005be4 <HAL_RCC_OscConfig+0x2ac>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a87      	ldr	r2, [pc, #540]	; (8005be4 <HAL_RCC_OscConfig+0x2ac>)
 80059c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059cc:	6013      	str	r3, [r2, #0]
 80059ce:	e00b      	b.n	80059e8 <HAL_RCC_OscConfig+0xb0>
 80059d0:	4b84      	ldr	r3, [pc, #528]	; (8005be4 <HAL_RCC_OscConfig+0x2ac>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a83      	ldr	r2, [pc, #524]	; (8005be4 <HAL_RCC_OscConfig+0x2ac>)
 80059d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059da:	6013      	str	r3, [r2, #0]
 80059dc:	4b81      	ldr	r3, [pc, #516]	; (8005be4 <HAL_RCC_OscConfig+0x2ac>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a80      	ldr	r2, [pc, #512]	; (8005be4 <HAL_RCC_OscConfig+0x2ac>)
 80059e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d013      	beq.n	8005a18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059f0:	f7fd fb60 	bl	80030b4 <HAL_GetTick>
 80059f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059f6:	e008      	b.n	8005a0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059f8:	f7fd fb5c 	bl	80030b4 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	2b64      	cmp	r3, #100	; 0x64
 8005a04:	d901      	bls.n	8005a0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e1fb      	b.n	8005e02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a0a:	4b76      	ldr	r3, [pc, #472]	; (8005be4 <HAL_RCC_OscConfig+0x2ac>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d0f0      	beq.n	80059f8 <HAL_RCC_OscConfig+0xc0>
 8005a16:	e014      	b.n	8005a42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a18:	f7fd fb4c 	bl	80030b4 <HAL_GetTick>
 8005a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a1e:	e008      	b.n	8005a32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a20:	f7fd fb48 	bl	80030b4 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b64      	cmp	r3, #100	; 0x64
 8005a2c:	d901      	bls.n	8005a32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e1e7      	b.n	8005e02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a32:	4b6c      	ldr	r3, [pc, #432]	; (8005be4 <HAL_RCC_OscConfig+0x2ac>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1f0      	bne.n	8005a20 <HAL_RCC_OscConfig+0xe8>
 8005a3e:	e000      	b.n	8005a42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0302 	and.w	r3, r3, #2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d063      	beq.n	8005b16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a4e:	4b65      	ldr	r3, [pc, #404]	; (8005be4 <HAL_RCC_OscConfig+0x2ac>)
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f003 030c 	and.w	r3, r3, #12
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00b      	beq.n	8005a72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a5a:	4b62      	ldr	r3, [pc, #392]	; (8005be4 <HAL_RCC_OscConfig+0x2ac>)
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a62:	2b08      	cmp	r3, #8
 8005a64:	d11c      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a66:	4b5f      	ldr	r3, [pc, #380]	; (8005be4 <HAL_RCC_OscConfig+0x2ac>)
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d116      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a72:	4b5c      	ldr	r3, [pc, #368]	; (8005be4 <HAL_RCC_OscConfig+0x2ac>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d005      	beq.n	8005a8a <HAL_RCC_OscConfig+0x152>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d001      	beq.n	8005a8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e1bb      	b.n	8005e02 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a8a:	4b56      	ldr	r3, [pc, #344]	; (8005be4 <HAL_RCC_OscConfig+0x2ac>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	4952      	ldr	r1, [pc, #328]	; (8005be4 <HAL_RCC_OscConfig+0x2ac>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a9e:	e03a      	b.n	8005b16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d020      	beq.n	8005aea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005aa8:	4b4f      	ldr	r3, [pc, #316]	; (8005be8 <HAL_RCC_OscConfig+0x2b0>)
 8005aaa:	2201      	movs	r2, #1
 8005aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aae:	f7fd fb01 	bl	80030b4 <HAL_GetTick>
 8005ab2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ab4:	e008      	b.n	8005ac8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ab6:	f7fd fafd 	bl	80030b4 <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e19c      	b.n	8005e02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ac8:	4b46      	ldr	r3, [pc, #280]	; (8005be4 <HAL_RCC_OscConfig+0x2ac>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0302 	and.w	r3, r3, #2
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d0f0      	beq.n	8005ab6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ad4:	4b43      	ldr	r3, [pc, #268]	; (8005be4 <HAL_RCC_OscConfig+0x2ac>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	00db      	lsls	r3, r3, #3
 8005ae2:	4940      	ldr	r1, [pc, #256]	; (8005be4 <HAL_RCC_OscConfig+0x2ac>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	600b      	str	r3, [r1, #0]
 8005ae8:	e015      	b.n	8005b16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005aea:	4b3f      	ldr	r3, [pc, #252]	; (8005be8 <HAL_RCC_OscConfig+0x2b0>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af0:	f7fd fae0 	bl	80030b4 <HAL_GetTick>
 8005af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005af6:	e008      	b.n	8005b0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005af8:	f7fd fadc 	bl	80030b4 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e17b      	b.n	8005e02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b0a:	4b36      	ldr	r3, [pc, #216]	; (8005be4 <HAL_RCC_OscConfig+0x2ac>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0302 	and.w	r3, r3, #2
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1f0      	bne.n	8005af8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0308 	and.w	r3, r3, #8
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d030      	beq.n	8005b84 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d016      	beq.n	8005b58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b2a:	4b30      	ldr	r3, [pc, #192]	; (8005bec <HAL_RCC_OscConfig+0x2b4>)
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b30:	f7fd fac0 	bl	80030b4 <HAL_GetTick>
 8005b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b36:	e008      	b.n	8005b4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b38:	f7fd fabc 	bl	80030b4 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d901      	bls.n	8005b4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e15b      	b.n	8005e02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b4a:	4b26      	ldr	r3, [pc, #152]	; (8005be4 <HAL_RCC_OscConfig+0x2ac>)
 8005b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d0f0      	beq.n	8005b38 <HAL_RCC_OscConfig+0x200>
 8005b56:	e015      	b.n	8005b84 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b58:	4b24      	ldr	r3, [pc, #144]	; (8005bec <HAL_RCC_OscConfig+0x2b4>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b5e:	f7fd faa9 	bl	80030b4 <HAL_GetTick>
 8005b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b64:	e008      	b.n	8005b78 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b66:	f7fd faa5 	bl	80030b4 <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d901      	bls.n	8005b78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e144      	b.n	8005e02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b78:	4b1a      	ldr	r3, [pc, #104]	; (8005be4 <HAL_RCC_OscConfig+0x2ac>)
 8005b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b7c:	f003 0302 	and.w	r3, r3, #2
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1f0      	bne.n	8005b66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0304 	and.w	r3, r3, #4
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f000 80a0 	beq.w	8005cd2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b92:	2300      	movs	r3, #0
 8005b94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b96:	4b13      	ldr	r3, [pc, #76]	; (8005be4 <HAL_RCC_OscConfig+0x2ac>)
 8005b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10f      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	60bb      	str	r3, [r7, #8]
 8005ba6:	4b0f      	ldr	r3, [pc, #60]	; (8005be4 <HAL_RCC_OscConfig+0x2ac>)
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	4a0e      	ldr	r2, [pc, #56]	; (8005be4 <HAL_RCC_OscConfig+0x2ac>)
 8005bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8005bb2:	4b0c      	ldr	r3, [pc, #48]	; (8005be4 <HAL_RCC_OscConfig+0x2ac>)
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bba:	60bb      	str	r3, [r7, #8]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bc2:	4b0b      	ldr	r3, [pc, #44]	; (8005bf0 <HAL_RCC_OscConfig+0x2b8>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d121      	bne.n	8005c12 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bce:	4b08      	ldr	r3, [pc, #32]	; (8005bf0 <HAL_RCC_OscConfig+0x2b8>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a07      	ldr	r2, [pc, #28]	; (8005bf0 <HAL_RCC_OscConfig+0x2b8>)
 8005bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bda:	f7fd fa6b 	bl	80030b4 <HAL_GetTick>
 8005bde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005be0:	e011      	b.n	8005c06 <HAL_RCC_OscConfig+0x2ce>
 8005be2:	bf00      	nop
 8005be4:	40023800 	.word	0x40023800
 8005be8:	42470000 	.word	0x42470000
 8005bec:	42470e80 	.word	0x42470e80
 8005bf0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bf4:	f7fd fa5e 	bl	80030b4 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e0fd      	b.n	8005e02 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c06:	4b81      	ldr	r3, [pc, #516]	; (8005e0c <HAL_RCC_OscConfig+0x4d4>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d0f0      	beq.n	8005bf4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d106      	bne.n	8005c28 <HAL_RCC_OscConfig+0x2f0>
 8005c1a:	4b7d      	ldr	r3, [pc, #500]	; (8005e10 <HAL_RCC_OscConfig+0x4d8>)
 8005c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c1e:	4a7c      	ldr	r2, [pc, #496]	; (8005e10 <HAL_RCC_OscConfig+0x4d8>)
 8005c20:	f043 0301 	orr.w	r3, r3, #1
 8005c24:	6713      	str	r3, [r2, #112]	; 0x70
 8005c26:	e01c      	b.n	8005c62 <HAL_RCC_OscConfig+0x32a>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	2b05      	cmp	r3, #5
 8005c2e:	d10c      	bne.n	8005c4a <HAL_RCC_OscConfig+0x312>
 8005c30:	4b77      	ldr	r3, [pc, #476]	; (8005e10 <HAL_RCC_OscConfig+0x4d8>)
 8005c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c34:	4a76      	ldr	r2, [pc, #472]	; (8005e10 <HAL_RCC_OscConfig+0x4d8>)
 8005c36:	f043 0304 	orr.w	r3, r3, #4
 8005c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c3c:	4b74      	ldr	r3, [pc, #464]	; (8005e10 <HAL_RCC_OscConfig+0x4d8>)
 8005c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c40:	4a73      	ldr	r2, [pc, #460]	; (8005e10 <HAL_RCC_OscConfig+0x4d8>)
 8005c42:	f043 0301 	orr.w	r3, r3, #1
 8005c46:	6713      	str	r3, [r2, #112]	; 0x70
 8005c48:	e00b      	b.n	8005c62 <HAL_RCC_OscConfig+0x32a>
 8005c4a:	4b71      	ldr	r3, [pc, #452]	; (8005e10 <HAL_RCC_OscConfig+0x4d8>)
 8005c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c4e:	4a70      	ldr	r2, [pc, #448]	; (8005e10 <HAL_RCC_OscConfig+0x4d8>)
 8005c50:	f023 0301 	bic.w	r3, r3, #1
 8005c54:	6713      	str	r3, [r2, #112]	; 0x70
 8005c56:	4b6e      	ldr	r3, [pc, #440]	; (8005e10 <HAL_RCC_OscConfig+0x4d8>)
 8005c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c5a:	4a6d      	ldr	r2, [pc, #436]	; (8005e10 <HAL_RCC_OscConfig+0x4d8>)
 8005c5c:	f023 0304 	bic.w	r3, r3, #4
 8005c60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d015      	beq.n	8005c96 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c6a:	f7fd fa23 	bl	80030b4 <HAL_GetTick>
 8005c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c70:	e00a      	b.n	8005c88 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c72:	f7fd fa1f 	bl	80030b4 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d901      	bls.n	8005c88 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e0bc      	b.n	8005e02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c88:	4b61      	ldr	r3, [pc, #388]	; (8005e10 <HAL_RCC_OscConfig+0x4d8>)
 8005c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c8c:	f003 0302 	and.w	r3, r3, #2
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d0ee      	beq.n	8005c72 <HAL_RCC_OscConfig+0x33a>
 8005c94:	e014      	b.n	8005cc0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c96:	f7fd fa0d 	bl	80030b4 <HAL_GetTick>
 8005c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c9c:	e00a      	b.n	8005cb4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c9e:	f7fd fa09 	bl	80030b4 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d901      	bls.n	8005cb4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e0a6      	b.n	8005e02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cb4:	4b56      	ldr	r3, [pc, #344]	; (8005e10 <HAL_RCC_OscConfig+0x4d8>)
 8005cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1ee      	bne.n	8005c9e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cc0:	7dfb      	ldrb	r3, [r7, #23]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d105      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cc6:	4b52      	ldr	r3, [pc, #328]	; (8005e10 <HAL_RCC_OscConfig+0x4d8>)
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cca:	4a51      	ldr	r2, [pc, #324]	; (8005e10 <HAL_RCC_OscConfig+0x4d8>)
 8005ccc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cd0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	f000 8092 	beq.w	8005e00 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cdc:	4b4c      	ldr	r3, [pc, #304]	; (8005e10 <HAL_RCC_OscConfig+0x4d8>)
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f003 030c 	and.w	r3, r3, #12
 8005ce4:	2b08      	cmp	r3, #8
 8005ce6:	d05c      	beq.n	8005da2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d141      	bne.n	8005d74 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cf0:	4b48      	ldr	r3, [pc, #288]	; (8005e14 <HAL_RCC_OscConfig+0x4dc>)
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cf6:	f7fd f9dd 	bl	80030b4 <HAL_GetTick>
 8005cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cfc:	e008      	b.n	8005d10 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cfe:	f7fd f9d9 	bl	80030b4 <HAL_GetTick>
 8005d02:	4602      	mov	r2, r0
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d901      	bls.n	8005d10 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e078      	b.n	8005e02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d10:	4b3f      	ldr	r3, [pc, #252]	; (8005e10 <HAL_RCC_OscConfig+0x4d8>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1f0      	bne.n	8005cfe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	69da      	ldr	r2, [r3, #28]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a1b      	ldr	r3, [r3, #32]
 8005d24:	431a      	orrs	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2a:	019b      	lsls	r3, r3, #6
 8005d2c:	431a      	orrs	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d32:	085b      	lsrs	r3, r3, #1
 8005d34:	3b01      	subs	r3, #1
 8005d36:	041b      	lsls	r3, r3, #16
 8005d38:	431a      	orrs	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3e:	061b      	lsls	r3, r3, #24
 8005d40:	4933      	ldr	r1, [pc, #204]	; (8005e10 <HAL_RCC_OscConfig+0x4d8>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d46:	4b33      	ldr	r3, [pc, #204]	; (8005e14 <HAL_RCC_OscConfig+0x4dc>)
 8005d48:	2201      	movs	r2, #1
 8005d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d4c:	f7fd f9b2 	bl	80030b4 <HAL_GetTick>
 8005d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d52:	e008      	b.n	8005d66 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d54:	f7fd f9ae 	bl	80030b4 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d901      	bls.n	8005d66 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e04d      	b.n	8005e02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d66:	4b2a      	ldr	r3, [pc, #168]	; (8005e10 <HAL_RCC_OscConfig+0x4d8>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d0f0      	beq.n	8005d54 <HAL_RCC_OscConfig+0x41c>
 8005d72:	e045      	b.n	8005e00 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d74:	4b27      	ldr	r3, [pc, #156]	; (8005e14 <HAL_RCC_OscConfig+0x4dc>)
 8005d76:	2200      	movs	r2, #0
 8005d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d7a:	f7fd f99b 	bl	80030b4 <HAL_GetTick>
 8005d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d80:	e008      	b.n	8005d94 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d82:	f7fd f997 	bl	80030b4 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d901      	bls.n	8005d94 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e036      	b.n	8005e02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d94:	4b1e      	ldr	r3, [pc, #120]	; (8005e10 <HAL_RCC_OscConfig+0x4d8>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1f0      	bne.n	8005d82 <HAL_RCC_OscConfig+0x44a>
 8005da0:	e02e      	b.n	8005e00 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d101      	bne.n	8005dae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e029      	b.n	8005e02 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005dae:	4b18      	ldr	r3, [pc, #96]	; (8005e10 <HAL_RCC_OscConfig+0x4d8>)
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d11c      	bne.n	8005dfc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d115      	bne.n	8005dfc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d10d      	bne.n	8005dfc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d106      	bne.n	8005dfc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d001      	beq.n	8005e00 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e000      	b.n	8005e02 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3718      	adds	r7, #24
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	40007000 	.word	0x40007000
 8005e10:	40023800 	.word	0x40023800
 8005e14:	42470060 	.word	0x42470060

08005e18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d101      	bne.n	8005e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e0cc      	b.n	8005fc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e2c:	4b68      	ldr	r3, [pc, #416]	; (8005fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 030f 	and.w	r3, r3, #15
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d90c      	bls.n	8005e54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e3a:	4b65      	ldr	r3, [pc, #404]	; (8005fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	b2d2      	uxtb	r2, r2
 8005e40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e42:	4b63      	ldr	r3, [pc, #396]	; (8005fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 030f 	and.w	r3, r3, #15
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d001      	beq.n	8005e54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e0b8      	b.n	8005fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d020      	beq.n	8005ea2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0304 	and.w	r3, r3, #4
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d005      	beq.n	8005e78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e6c:	4b59      	ldr	r3, [pc, #356]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	4a58      	ldr	r2, [pc, #352]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0308 	and.w	r3, r3, #8
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d005      	beq.n	8005e90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e84:	4b53      	ldr	r3, [pc, #332]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	4a52      	ldr	r2, [pc, #328]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e90:	4b50      	ldr	r3, [pc, #320]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	494d      	ldr	r1, [pc, #308]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d044      	beq.n	8005f38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d107      	bne.n	8005ec6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eb6:	4b47      	ldr	r3, [pc, #284]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d119      	bne.n	8005ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e07f      	b.n	8005fc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d003      	beq.n	8005ed6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ed2:	2b03      	cmp	r3, #3
 8005ed4:	d107      	bne.n	8005ee6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ed6:	4b3f      	ldr	r3, [pc, #252]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d109      	bne.n	8005ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e06f      	b.n	8005fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ee6:	4b3b      	ldr	r3, [pc, #236]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e067      	b.n	8005fc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ef6:	4b37      	ldr	r3, [pc, #220]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f023 0203 	bic.w	r2, r3, #3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	4934      	ldr	r1, [pc, #208]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f04:	4313      	orrs	r3, r2
 8005f06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f08:	f7fd f8d4 	bl	80030b4 <HAL_GetTick>
 8005f0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f0e:	e00a      	b.n	8005f26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f10:	f7fd f8d0 	bl	80030b4 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e04f      	b.n	8005fc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f26:	4b2b      	ldr	r3, [pc, #172]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f003 020c 	and.w	r2, r3, #12
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d1eb      	bne.n	8005f10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f38:	4b25      	ldr	r3, [pc, #148]	; (8005fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 030f 	and.w	r3, r3, #15
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d20c      	bcs.n	8005f60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f46:	4b22      	ldr	r3, [pc, #136]	; (8005fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f48:	683a      	ldr	r2, [r7, #0]
 8005f4a:	b2d2      	uxtb	r2, r2
 8005f4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f4e:	4b20      	ldr	r3, [pc, #128]	; (8005fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 030f 	and.w	r3, r3, #15
 8005f56:	683a      	ldr	r2, [r7, #0]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d001      	beq.n	8005f60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e032      	b.n	8005fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d008      	beq.n	8005f7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f6c:	4b19      	ldr	r3, [pc, #100]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	4916      	ldr	r1, [pc, #88]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0308 	and.w	r3, r3, #8
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d009      	beq.n	8005f9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f8a:	4b12      	ldr	r3, [pc, #72]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	00db      	lsls	r3, r3, #3
 8005f98:	490e      	ldr	r1, [pc, #56]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f9e:	f000 f821 	bl	8005fe4 <HAL_RCC_GetSysClockFreq>
 8005fa2:	4601      	mov	r1, r0
 8005fa4:	4b0b      	ldr	r3, [pc, #44]	; (8005fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	091b      	lsrs	r3, r3, #4
 8005faa:	f003 030f 	and.w	r3, r3, #15
 8005fae:	4a0a      	ldr	r2, [pc, #40]	; (8005fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8005fb0:	5cd3      	ldrb	r3, [r2, r3]
 8005fb2:	fa21 f303 	lsr.w	r3, r1, r3
 8005fb6:	4a09      	ldr	r2, [pc, #36]	; (8005fdc <HAL_RCC_ClockConfig+0x1c4>)
 8005fb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005fba:	4b09      	ldr	r3, [pc, #36]	; (8005fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7fd f834 	bl	800302c <HAL_InitTick>

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	40023c00 	.word	0x40023c00
 8005fd4:	40023800 	.word	0x40023800
 8005fd8:	0800cf7c 	.word	0x0800cf7c
 8005fdc:	20000000 	.word	0x20000000
 8005fe0:	20000004 	.word	0x20000004

08005fe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	607b      	str	r3, [r7, #4]
 8005fee:	2300      	movs	r3, #0
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ffa:	4b63      	ldr	r3, [pc, #396]	; (8006188 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f003 030c 	and.w	r3, r3, #12
 8006002:	2b04      	cmp	r3, #4
 8006004:	d007      	beq.n	8006016 <HAL_RCC_GetSysClockFreq+0x32>
 8006006:	2b08      	cmp	r3, #8
 8006008:	d008      	beq.n	800601c <HAL_RCC_GetSysClockFreq+0x38>
 800600a:	2b00      	cmp	r3, #0
 800600c:	f040 80b4 	bne.w	8006178 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006010:	4b5e      	ldr	r3, [pc, #376]	; (800618c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006012:	60bb      	str	r3, [r7, #8]
       break;
 8006014:	e0b3      	b.n	800617e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006016:	4b5d      	ldr	r3, [pc, #372]	; (800618c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006018:	60bb      	str	r3, [r7, #8]
      break;
 800601a:	e0b0      	b.n	800617e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800601c:	4b5a      	ldr	r3, [pc, #360]	; (8006188 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006024:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006026:	4b58      	ldr	r3, [pc, #352]	; (8006188 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d04a      	beq.n	80060c8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006032:	4b55      	ldr	r3, [pc, #340]	; (8006188 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	099b      	lsrs	r3, r3, #6
 8006038:	f04f 0400 	mov.w	r4, #0
 800603c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006040:	f04f 0200 	mov.w	r2, #0
 8006044:	ea03 0501 	and.w	r5, r3, r1
 8006048:	ea04 0602 	and.w	r6, r4, r2
 800604c:	4629      	mov	r1, r5
 800604e:	4632      	mov	r2, r6
 8006050:	f04f 0300 	mov.w	r3, #0
 8006054:	f04f 0400 	mov.w	r4, #0
 8006058:	0154      	lsls	r4, r2, #5
 800605a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800605e:	014b      	lsls	r3, r1, #5
 8006060:	4619      	mov	r1, r3
 8006062:	4622      	mov	r2, r4
 8006064:	1b49      	subs	r1, r1, r5
 8006066:	eb62 0206 	sbc.w	r2, r2, r6
 800606a:	f04f 0300 	mov.w	r3, #0
 800606e:	f04f 0400 	mov.w	r4, #0
 8006072:	0194      	lsls	r4, r2, #6
 8006074:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006078:	018b      	lsls	r3, r1, #6
 800607a:	1a5b      	subs	r3, r3, r1
 800607c:	eb64 0402 	sbc.w	r4, r4, r2
 8006080:	f04f 0100 	mov.w	r1, #0
 8006084:	f04f 0200 	mov.w	r2, #0
 8006088:	00e2      	lsls	r2, r4, #3
 800608a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800608e:	00d9      	lsls	r1, r3, #3
 8006090:	460b      	mov	r3, r1
 8006092:	4614      	mov	r4, r2
 8006094:	195b      	adds	r3, r3, r5
 8006096:	eb44 0406 	adc.w	r4, r4, r6
 800609a:	f04f 0100 	mov.w	r1, #0
 800609e:	f04f 0200 	mov.w	r2, #0
 80060a2:	02a2      	lsls	r2, r4, #10
 80060a4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80060a8:	0299      	lsls	r1, r3, #10
 80060aa:	460b      	mov	r3, r1
 80060ac:	4614      	mov	r4, r2
 80060ae:	4618      	mov	r0, r3
 80060b0:	4621      	mov	r1, r4
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f04f 0400 	mov.w	r4, #0
 80060b8:	461a      	mov	r2, r3
 80060ba:	4623      	mov	r3, r4
 80060bc:	f7fa fdc4 	bl	8000c48 <__aeabi_uldivmod>
 80060c0:	4603      	mov	r3, r0
 80060c2:	460c      	mov	r4, r1
 80060c4:	60fb      	str	r3, [r7, #12]
 80060c6:	e049      	b.n	800615c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060c8:	4b2f      	ldr	r3, [pc, #188]	; (8006188 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	099b      	lsrs	r3, r3, #6
 80060ce:	f04f 0400 	mov.w	r4, #0
 80060d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80060d6:	f04f 0200 	mov.w	r2, #0
 80060da:	ea03 0501 	and.w	r5, r3, r1
 80060de:	ea04 0602 	and.w	r6, r4, r2
 80060e2:	4629      	mov	r1, r5
 80060e4:	4632      	mov	r2, r6
 80060e6:	f04f 0300 	mov.w	r3, #0
 80060ea:	f04f 0400 	mov.w	r4, #0
 80060ee:	0154      	lsls	r4, r2, #5
 80060f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80060f4:	014b      	lsls	r3, r1, #5
 80060f6:	4619      	mov	r1, r3
 80060f8:	4622      	mov	r2, r4
 80060fa:	1b49      	subs	r1, r1, r5
 80060fc:	eb62 0206 	sbc.w	r2, r2, r6
 8006100:	f04f 0300 	mov.w	r3, #0
 8006104:	f04f 0400 	mov.w	r4, #0
 8006108:	0194      	lsls	r4, r2, #6
 800610a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800610e:	018b      	lsls	r3, r1, #6
 8006110:	1a5b      	subs	r3, r3, r1
 8006112:	eb64 0402 	sbc.w	r4, r4, r2
 8006116:	f04f 0100 	mov.w	r1, #0
 800611a:	f04f 0200 	mov.w	r2, #0
 800611e:	00e2      	lsls	r2, r4, #3
 8006120:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006124:	00d9      	lsls	r1, r3, #3
 8006126:	460b      	mov	r3, r1
 8006128:	4614      	mov	r4, r2
 800612a:	195b      	adds	r3, r3, r5
 800612c:	eb44 0406 	adc.w	r4, r4, r6
 8006130:	f04f 0100 	mov.w	r1, #0
 8006134:	f04f 0200 	mov.w	r2, #0
 8006138:	02a2      	lsls	r2, r4, #10
 800613a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800613e:	0299      	lsls	r1, r3, #10
 8006140:	460b      	mov	r3, r1
 8006142:	4614      	mov	r4, r2
 8006144:	4618      	mov	r0, r3
 8006146:	4621      	mov	r1, r4
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f04f 0400 	mov.w	r4, #0
 800614e:	461a      	mov	r2, r3
 8006150:	4623      	mov	r3, r4
 8006152:	f7fa fd79 	bl	8000c48 <__aeabi_uldivmod>
 8006156:	4603      	mov	r3, r0
 8006158:	460c      	mov	r4, r1
 800615a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800615c:	4b0a      	ldr	r3, [pc, #40]	; (8006188 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	0c1b      	lsrs	r3, r3, #16
 8006162:	f003 0303 	and.w	r3, r3, #3
 8006166:	3301      	adds	r3, #1
 8006168:	005b      	lsls	r3, r3, #1
 800616a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	fbb2 f3f3 	udiv	r3, r2, r3
 8006174:	60bb      	str	r3, [r7, #8]
      break;
 8006176:	e002      	b.n	800617e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006178:	4b04      	ldr	r3, [pc, #16]	; (800618c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800617a:	60bb      	str	r3, [r7, #8]
      break;
 800617c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800617e:	68bb      	ldr	r3, [r7, #8]
}
 8006180:	4618      	mov	r0, r3
 8006182:	3714      	adds	r7, #20
 8006184:	46bd      	mov	sp, r7
 8006186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006188:	40023800 	.word	0x40023800
 800618c:	00f42400 	.word	0x00f42400

08006190 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006190:	b480      	push	{r7}
 8006192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006194:	4b03      	ldr	r3, [pc, #12]	; (80061a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006196:	681b      	ldr	r3, [r3, #0]
}
 8006198:	4618      	mov	r0, r3
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	20000000 	.word	0x20000000

080061a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80061ac:	f7ff fff0 	bl	8006190 <HAL_RCC_GetHCLKFreq>
 80061b0:	4601      	mov	r1, r0
 80061b2:	4b05      	ldr	r3, [pc, #20]	; (80061c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	0a9b      	lsrs	r3, r3, #10
 80061b8:	f003 0307 	and.w	r3, r3, #7
 80061bc:	4a03      	ldr	r2, [pc, #12]	; (80061cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80061be:	5cd3      	ldrb	r3, [r2, r3]
 80061c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	40023800 	.word	0x40023800
 80061cc:	0800cf8c 	.word	0x0800cf8c

080061d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e01d      	b.n	800621e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d106      	bne.n	80061fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f7fc fdb0 	bl	8002d5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	3304      	adds	r3, #4
 800620c:	4619      	mov	r1, r3
 800620e:	4610      	mov	r0, r2
 8006210:	f000 fc72 	bl	8006af8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006226:	b480      	push	{r7}
 8006228:	b085      	sub	sp, #20
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2202      	movs	r2, #2
 8006232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f003 0307 	and.w	r3, r3, #7
 8006240:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2b06      	cmp	r3, #6
 8006246:	d007      	beq.n	8006258 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f042 0201 	orr.w	r2, r2, #1
 8006256:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800626e:	b480      	push	{r7}
 8006270:	b085      	sub	sp, #20
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68da      	ldr	r2, [r3, #12]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f042 0201 	orr.w	r2, r2, #1
 8006284:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f003 0307 	and.w	r3, r3, #7
 8006290:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2b06      	cmp	r3, #6
 8006296:	d007      	beq.n	80062a8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f042 0201 	orr.w	r2, r2, #1
 80062a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3714      	adds	r7, #20
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b082      	sub	sp, #8
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e01d      	b.n	8006304 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d106      	bne.n	80062e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f7fc fc71 	bl	8002bc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2202      	movs	r2, #2
 80062e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	3304      	adds	r3, #4
 80062f2:	4619      	mov	r1, r3
 80062f4:	4610      	mov	r0, r2
 80062f6:	f000 fbff 	bl	8006af8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3708      	adds	r7, #8
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2201      	movs	r2, #1
 800631c:	6839      	ldr	r1, [r7, #0]
 800631e:	4618      	mov	r0, r3
 8006320:	f000 ff64 	bl	80071ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a15      	ldr	r2, [pc, #84]	; (8006380 <HAL_TIM_PWM_Start+0x74>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d004      	beq.n	8006338 <HAL_TIM_PWM_Start+0x2c>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a14      	ldr	r2, [pc, #80]	; (8006384 <HAL_TIM_PWM_Start+0x78>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d101      	bne.n	800633c <HAL_TIM_PWM_Start+0x30>
 8006338:	2301      	movs	r3, #1
 800633a:	e000      	b.n	800633e <HAL_TIM_PWM_Start+0x32>
 800633c:	2300      	movs	r3, #0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d007      	beq.n	8006352 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006350:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f003 0307 	and.w	r3, r3, #7
 800635c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2b06      	cmp	r3, #6
 8006362:	d007      	beq.n	8006374 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f042 0201 	orr.w	r2, r2, #1
 8006372:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	40010000 	.word	0x40010000
 8006384:	40010400 	.word	0x40010400

08006388 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2200      	movs	r2, #0
 8006398:	6839      	ldr	r1, [r7, #0]
 800639a:	4618      	mov	r0, r3
 800639c:	f000 ff26 	bl	80071ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a22      	ldr	r2, [pc, #136]	; (8006430 <HAL_TIM_PWM_Stop+0xa8>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d004      	beq.n	80063b4 <HAL_TIM_PWM_Stop+0x2c>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a21      	ldr	r2, [pc, #132]	; (8006434 <HAL_TIM_PWM_Stop+0xac>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d101      	bne.n	80063b8 <HAL_TIM_PWM_Stop+0x30>
 80063b4:	2301      	movs	r3, #1
 80063b6:	e000      	b.n	80063ba <HAL_TIM_PWM_Stop+0x32>
 80063b8:	2300      	movs	r3, #0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d017      	beq.n	80063ee <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6a1a      	ldr	r2, [r3, #32]
 80063c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80063c8:	4013      	ands	r3, r2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10f      	bne.n	80063ee <HAL_TIM_PWM_Stop+0x66>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	6a1a      	ldr	r2, [r3, #32]
 80063d4:	f240 4344 	movw	r3, #1092	; 0x444
 80063d8:	4013      	ands	r3, r2
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d107      	bne.n	80063ee <HAL_TIM_PWM_Stop+0x66>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6a1a      	ldr	r2, [r3, #32]
 80063f4:	f241 1311 	movw	r3, #4369	; 0x1111
 80063f8:	4013      	ands	r3, r2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10f      	bne.n	800641e <HAL_TIM_PWM_Stop+0x96>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6a1a      	ldr	r2, [r3, #32]
 8006404:	f240 4344 	movw	r3, #1092	; 0x444
 8006408:	4013      	ands	r3, r2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d107      	bne.n	800641e <HAL_TIM_PWM_Stop+0x96>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f022 0201 	bic.w	r2, r2, #1
 800641c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3708      	adds	r7, #8
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	40010000 	.word	0x40010000
 8006434:	40010400 	.word	0x40010400

08006438 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e01d      	b.n	8006486 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d106      	bne.n	8006464 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7fc fbd0 	bl	8002c04 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2202      	movs	r2, #2
 8006468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	3304      	adds	r3, #4
 8006474:	4619      	mov	r1, r3
 8006476:	4610      	mov	r0, r2
 8006478:	f000 fb3e 	bl	8006af8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
	...

08006490 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2b0c      	cmp	r3, #12
 800649e:	d841      	bhi.n	8006524 <HAL_TIM_IC_Start_IT+0x94>
 80064a0:	a201      	add	r2, pc, #4	; (adr r2, 80064a8 <HAL_TIM_IC_Start_IT+0x18>)
 80064a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a6:	bf00      	nop
 80064a8:	080064dd 	.word	0x080064dd
 80064ac:	08006525 	.word	0x08006525
 80064b0:	08006525 	.word	0x08006525
 80064b4:	08006525 	.word	0x08006525
 80064b8:	080064ef 	.word	0x080064ef
 80064bc:	08006525 	.word	0x08006525
 80064c0:	08006525 	.word	0x08006525
 80064c4:	08006525 	.word	0x08006525
 80064c8:	08006501 	.word	0x08006501
 80064cc:	08006525 	.word	0x08006525
 80064d0:	08006525 	.word	0x08006525
 80064d4:	08006525 	.word	0x08006525
 80064d8:	08006513 	.word	0x08006513
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68da      	ldr	r2, [r3, #12]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f042 0202 	orr.w	r2, r2, #2
 80064ea:	60da      	str	r2, [r3, #12]
      break;
 80064ec:	e01b      	b.n	8006526 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68da      	ldr	r2, [r3, #12]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f042 0204 	orr.w	r2, r2, #4
 80064fc:	60da      	str	r2, [r3, #12]
      break;
 80064fe:	e012      	b.n	8006526 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68da      	ldr	r2, [r3, #12]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f042 0208 	orr.w	r2, r2, #8
 800650e:	60da      	str	r2, [r3, #12]
      break;
 8006510:	e009      	b.n	8006526 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68da      	ldr	r2, [r3, #12]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f042 0210 	orr.w	r2, r2, #16
 8006520:	60da      	str	r2, [r3, #12]
      break;
 8006522:	e000      	b.n	8006526 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8006524:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2201      	movs	r2, #1
 800652c:	6839      	ldr	r1, [r7, #0]
 800652e:	4618      	mov	r0, r3
 8006530:	f000 fe5c 	bl	80071ec <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f003 0307 	and.w	r3, r3, #7
 800653e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2b06      	cmp	r3, #6
 8006544:	d007      	beq.n	8006556 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f042 0201 	orr.w	r2, r2, #1
 8006554:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	f003 0302 	and.w	r3, r3, #2
 8006572:	2b02      	cmp	r3, #2
 8006574:	d122      	bne.n	80065bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f003 0302 	and.w	r3, r3, #2
 8006580:	2b02      	cmp	r3, #2
 8006582:	d11b      	bne.n	80065bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f06f 0202 	mvn.w	r2, #2
 800658c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2201      	movs	r2, #1
 8006592:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	f003 0303 	and.w	r3, r3, #3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f7fb fc2e 	bl	8001e04 <HAL_TIM_IC_CaptureCallback>
 80065a8:	e005      	b.n	80065b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 fa86 	bl	8006abc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fa8d 	bl	8006ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	f003 0304 	and.w	r3, r3, #4
 80065c6:	2b04      	cmp	r3, #4
 80065c8:	d122      	bne.n	8006610 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	f003 0304 	and.w	r3, r3, #4
 80065d4:	2b04      	cmp	r3, #4
 80065d6:	d11b      	bne.n	8006610 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f06f 0204 	mvn.w	r2, #4
 80065e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2202      	movs	r2, #2
 80065e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f7fb fc04 	bl	8001e04 <HAL_TIM_IC_CaptureCallback>
 80065fc:	e005      	b.n	800660a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 fa5c 	bl	8006abc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 fa63 	bl	8006ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	f003 0308 	and.w	r3, r3, #8
 800661a:	2b08      	cmp	r3, #8
 800661c:	d122      	bne.n	8006664 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	f003 0308 	and.w	r3, r3, #8
 8006628:	2b08      	cmp	r3, #8
 800662a:	d11b      	bne.n	8006664 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f06f 0208 	mvn.w	r2, #8
 8006634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2204      	movs	r2, #4
 800663a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	f003 0303 	and.w	r3, r3, #3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f7fb fbda 	bl	8001e04 <HAL_TIM_IC_CaptureCallback>
 8006650:	e005      	b.n	800665e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 fa32 	bl	8006abc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 fa39 	bl	8006ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	f003 0310 	and.w	r3, r3, #16
 800666e:	2b10      	cmp	r3, #16
 8006670:	d122      	bne.n	80066b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	f003 0310 	and.w	r3, r3, #16
 800667c:	2b10      	cmp	r3, #16
 800667e:	d11b      	bne.n	80066b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f06f 0210 	mvn.w	r2, #16
 8006688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2208      	movs	r2, #8
 800668e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7fb fbb0 	bl	8001e04 <HAL_TIM_IC_CaptureCallback>
 80066a4:	e005      	b.n	80066b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 fa08 	bl	8006abc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 fa0f 	bl	8006ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d10e      	bne.n	80066e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d107      	bne.n	80066e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f06f 0201 	mvn.w	r2, #1
 80066dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7fb fb7a 	bl	8001dd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ee:	2b80      	cmp	r3, #128	; 0x80
 80066f0:	d10e      	bne.n	8006710 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066fc:	2b80      	cmp	r3, #128	; 0x80
 80066fe:	d107      	bne.n	8006710 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fe1a 	bl	8007344 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671a:	2b40      	cmp	r3, #64	; 0x40
 800671c:	d10e      	bne.n	800673c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006728:	2b40      	cmp	r3, #64	; 0x40
 800672a:	d107      	bne.n	800673c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 f9d4 	bl	8006ae4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	f003 0320 	and.w	r3, r3, #32
 8006746:	2b20      	cmp	r3, #32
 8006748:	d10e      	bne.n	8006768 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	f003 0320 	and.w	r3, r3, #32
 8006754:	2b20      	cmp	r3, #32
 8006756:	d107      	bne.n	8006768 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f06f 0220 	mvn.w	r2, #32
 8006760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fde4 	bl	8007330 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006768:	bf00      	nop
 800676a:	3708      	adds	r7, #8
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006782:	2b01      	cmp	r3, #1
 8006784:	d101      	bne.n	800678a <HAL_TIM_IC_ConfigChannel+0x1a>
 8006786:	2302      	movs	r3, #2
 8006788:	e08a      	b.n	80068a0 <HAL_TIM_IC_ConfigChannel+0x130>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2202      	movs	r2, #2
 8006796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d11b      	bne.n	80067d8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6818      	ldr	r0, [r3, #0]
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	6819      	ldr	r1, [r3, #0]
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	f000 fbf2 	bl	8006f98 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	699a      	ldr	r2, [r3, #24]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f022 020c 	bic.w	r2, r2, #12
 80067c2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6999      	ldr	r1, [r3, #24]
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	689a      	ldr	r2, [r3, #8]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	430a      	orrs	r2, r1
 80067d4:	619a      	str	r2, [r3, #24]
 80067d6:	e05a      	b.n	800688e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b04      	cmp	r3, #4
 80067dc:	d11c      	bne.n	8006818 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6818      	ldr	r0, [r3, #0]
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	6819      	ldr	r1, [r3, #0]
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	f000 fc47 	bl	8007080 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	699a      	ldr	r2, [r3, #24]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006800:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	6999      	ldr	r1, [r3, #24]
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	021a      	lsls	r2, r3, #8
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	430a      	orrs	r2, r1
 8006814:	619a      	str	r2, [r3, #24]
 8006816:	e03a      	b.n	800688e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2b08      	cmp	r3, #8
 800681c:	d11b      	bne.n	8006856 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6818      	ldr	r0, [r3, #0]
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	6819      	ldr	r1, [r3, #0]
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	685a      	ldr	r2, [r3, #4]
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	f000 fc64 	bl	80070fa <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	69da      	ldr	r2, [r3, #28]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f022 020c 	bic.w	r2, r2, #12
 8006840:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	69d9      	ldr	r1, [r3, #28]
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	689a      	ldr	r2, [r3, #8]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	430a      	orrs	r2, r1
 8006852:	61da      	str	r2, [r3, #28]
 8006854:	e01b      	b.n	800688e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6818      	ldr	r0, [r3, #0]
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	6819      	ldr	r1, [r3, #0]
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	685a      	ldr	r2, [r3, #4]
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	f000 fc84 	bl	8007172 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	69da      	ldr	r2, [r3, #28]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006878:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	69d9      	ldr	r1, [r3, #28]
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	021a      	lsls	r2, r3, #8
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	430a      	orrs	r2, r1
 800688c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d101      	bne.n	80068c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80068be:	2302      	movs	r3, #2
 80068c0:	e0b4      	b.n	8006a2c <HAL_TIM_PWM_ConfigChannel+0x184>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2202      	movs	r2, #2
 80068ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2b0c      	cmp	r3, #12
 80068d6:	f200 809f 	bhi.w	8006a18 <HAL_TIM_PWM_ConfigChannel+0x170>
 80068da:	a201      	add	r2, pc, #4	; (adr r2, 80068e0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80068dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e0:	08006915 	.word	0x08006915
 80068e4:	08006a19 	.word	0x08006a19
 80068e8:	08006a19 	.word	0x08006a19
 80068ec:	08006a19 	.word	0x08006a19
 80068f0:	08006955 	.word	0x08006955
 80068f4:	08006a19 	.word	0x08006a19
 80068f8:	08006a19 	.word	0x08006a19
 80068fc:	08006a19 	.word	0x08006a19
 8006900:	08006997 	.word	0x08006997
 8006904:	08006a19 	.word	0x08006a19
 8006908:	08006a19 	.word	0x08006a19
 800690c:	08006a19 	.word	0x08006a19
 8006910:	080069d7 	.word	0x080069d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68b9      	ldr	r1, [r7, #8]
 800691a:	4618      	mov	r0, r3
 800691c:	f000 f98c 	bl	8006c38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	699a      	ldr	r2, [r3, #24]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f042 0208 	orr.w	r2, r2, #8
 800692e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	699a      	ldr	r2, [r3, #24]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f022 0204 	bic.w	r2, r2, #4
 800693e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6999      	ldr	r1, [r3, #24]
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	691a      	ldr	r2, [r3, #16]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	430a      	orrs	r2, r1
 8006950:	619a      	str	r2, [r3, #24]
      break;
 8006952:	e062      	b.n	8006a1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68b9      	ldr	r1, [r7, #8]
 800695a:	4618      	mov	r0, r3
 800695c:	f000 f9dc 	bl	8006d18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	699a      	ldr	r2, [r3, #24]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800696e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	699a      	ldr	r2, [r3, #24]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800697e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6999      	ldr	r1, [r3, #24]
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	021a      	lsls	r2, r3, #8
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	430a      	orrs	r2, r1
 8006992:	619a      	str	r2, [r3, #24]
      break;
 8006994:	e041      	b.n	8006a1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68b9      	ldr	r1, [r7, #8]
 800699c:	4618      	mov	r0, r3
 800699e:	f000 fa31 	bl	8006e04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	69da      	ldr	r2, [r3, #28]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f042 0208 	orr.w	r2, r2, #8
 80069b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	69da      	ldr	r2, [r3, #28]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f022 0204 	bic.w	r2, r2, #4
 80069c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	69d9      	ldr	r1, [r3, #28]
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	691a      	ldr	r2, [r3, #16]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	430a      	orrs	r2, r1
 80069d2:	61da      	str	r2, [r3, #28]
      break;
 80069d4:	e021      	b.n	8006a1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68b9      	ldr	r1, [r7, #8]
 80069dc:	4618      	mov	r0, r3
 80069de:	f000 fa85 	bl	8006eec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	69da      	ldr	r2, [r3, #28]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	69da      	ldr	r2, [r3, #28]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	69d9      	ldr	r1, [r3, #28]
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	021a      	lsls	r2, r3, #8
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	61da      	str	r2, [r3, #28]
      break;
 8006a16:	e000      	b.n	8006a1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006a18:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	2b0c      	cmp	r3, #12
 8006a46:	d831      	bhi.n	8006aac <HAL_TIM_ReadCapturedValue+0x78>
 8006a48:	a201      	add	r2, pc, #4	; (adr r2, 8006a50 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4e:	bf00      	nop
 8006a50:	08006a85 	.word	0x08006a85
 8006a54:	08006aad 	.word	0x08006aad
 8006a58:	08006aad 	.word	0x08006aad
 8006a5c:	08006aad 	.word	0x08006aad
 8006a60:	08006a8f 	.word	0x08006a8f
 8006a64:	08006aad 	.word	0x08006aad
 8006a68:	08006aad 	.word	0x08006aad
 8006a6c:	08006aad 	.word	0x08006aad
 8006a70:	08006a99 	.word	0x08006a99
 8006a74:	08006aad 	.word	0x08006aad
 8006a78:	08006aad 	.word	0x08006aad
 8006a7c:	08006aad 	.word	0x08006aad
 8006a80:	08006aa3 	.word	0x08006aa3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a8a:	60fb      	str	r3, [r7, #12]

      break;
 8006a8c:	e00f      	b.n	8006aae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a94:	60fb      	str	r3, [r7, #12]

      break;
 8006a96:	e00a      	b.n	8006aae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a9e:	60fb      	str	r3, [r7, #12]

      break;
 8006aa0:	e005      	b.n	8006aae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa8:	60fb      	str	r3, [r7, #12]

      break;
 8006aaa:	e000      	b.n	8006aae <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006aac:	bf00      	nop
  }

  return tmpreg;
 8006aae:	68fb      	ldr	r3, [r7, #12]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006aec:	bf00      	nop
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a40      	ldr	r2, [pc, #256]	; (8006c0c <TIM_Base_SetConfig+0x114>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d013      	beq.n	8006b38 <TIM_Base_SetConfig+0x40>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b16:	d00f      	beq.n	8006b38 <TIM_Base_SetConfig+0x40>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a3d      	ldr	r2, [pc, #244]	; (8006c10 <TIM_Base_SetConfig+0x118>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d00b      	beq.n	8006b38 <TIM_Base_SetConfig+0x40>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a3c      	ldr	r2, [pc, #240]	; (8006c14 <TIM_Base_SetConfig+0x11c>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d007      	beq.n	8006b38 <TIM_Base_SetConfig+0x40>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a3b      	ldr	r2, [pc, #236]	; (8006c18 <TIM_Base_SetConfig+0x120>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d003      	beq.n	8006b38 <TIM_Base_SetConfig+0x40>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a3a      	ldr	r2, [pc, #232]	; (8006c1c <TIM_Base_SetConfig+0x124>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d108      	bne.n	8006b4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a2f      	ldr	r2, [pc, #188]	; (8006c0c <TIM_Base_SetConfig+0x114>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d02b      	beq.n	8006baa <TIM_Base_SetConfig+0xb2>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b58:	d027      	beq.n	8006baa <TIM_Base_SetConfig+0xb2>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a2c      	ldr	r2, [pc, #176]	; (8006c10 <TIM_Base_SetConfig+0x118>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d023      	beq.n	8006baa <TIM_Base_SetConfig+0xb2>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a2b      	ldr	r2, [pc, #172]	; (8006c14 <TIM_Base_SetConfig+0x11c>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d01f      	beq.n	8006baa <TIM_Base_SetConfig+0xb2>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a2a      	ldr	r2, [pc, #168]	; (8006c18 <TIM_Base_SetConfig+0x120>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d01b      	beq.n	8006baa <TIM_Base_SetConfig+0xb2>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a29      	ldr	r2, [pc, #164]	; (8006c1c <TIM_Base_SetConfig+0x124>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d017      	beq.n	8006baa <TIM_Base_SetConfig+0xb2>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a28      	ldr	r2, [pc, #160]	; (8006c20 <TIM_Base_SetConfig+0x128>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d013      	beq.n	8006baa <TIM_Base_SetConfig+0xb2>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a27      	ldr	r2, [pc, #156]	; (8006c24 <TIM_Base_SetConfig+0x12c>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d00f      	beq.n	8006baa <TIM_Base_SetConfig+0xb2>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a26      	ldr	r2, [pc, #152]	; (8006c28 <TIM_Base_SetConfig+0x130>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d00b      	beq.n	8006baa <TIM_Base_SetConfig+0xb2>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a25      	ldr	r2, [pc, #148]	; (8006c2c <TIM_Base_SetConfig+0x134>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d007      	beq.n	8006baa <TIM_Base_SetConfig+0xb2>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a24      	ldr	r2, [pc, #144]	; (8006c30 <TIM_Base_SetConfig+0x138>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d003      	beq.n	8006baa <TIM_Base_SetConfig+0xb2>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a23      	ldr	r2, [pc, #140]	; (8006c34 <TIM_Base_SetConfig+0x13c>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d108      	bne.n	8006bbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	689a      	ldr	r2, [r3, #8]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a0a      	ldr	r2, [pc, #40]	; (8006c0c <TIM_Base_SetConfig+0x114>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d003      	beq.n	8006bf0 <TIM_Base_SetConfig+0xf8>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a0c      	ldr	r2, [pc, #48]	; (8006c1c <TIM_Base_SetConfig+0x124>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d103      	bne.n	8006bf8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	691a      	ldr	r2, [r3, #16]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	615a      	str	r2, [r3, #20]
}
 8006bfe:	bf00      	nop
 8006c00:	3714      	adds	r7, #20
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	40010000 	.word	0x40010000
 8006c10:	40000400 	.word	0x40000400
 8006c14:	40000800 	.word	0x40000800
 8006c18:	40000c00 	.word	0x40000c00
 8006c1c:	40010400 	.word	0x40010400
 8006c20:	40014000 	.word	0x40014000
 8006c24:	40014400 	.word	0x40014400
 8006c28:	40014800 	.word	0x40014800
 8006c2c:	40001800 	.word	0x40001800
 8006c30:	40001c00 	.word	0x40001c00
 8006c34:	40002000 	.word	0x40002000

08006c38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b087      	sub	sp, #28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	f023 0201 	bic.w	r2, r3, #1
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f023 0303 	bic.w	r3, r3, #3
 8006c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	f023 0302 	bic.w	r3, r3, #2
 8006c80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a20      	ldr	r2, [pc, #128]	; (8006d10 <TIM_OC1_SetConfig+0xd8>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d003      	beq.n	8006c9c <TIM_OC1_SetConfig+0x64>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a1f      	ldr	r2, [pc, #124]	; (8006d14 <TIM_OC1_SetConfig+0xdc>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d10c      	bne.n	8006cb6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	f023 0308 	bic.w	r3, r3, #8
 8006ca2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	697a      	ldr	r2, [r7, #20]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	f023 0304 	bic.w	r3, r3, #4
 8006cb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a15      	ldr	r2, [pc, #84]	; (8006d10 <TIM_OC1_SetConfig+0xd8>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d003      	beq.n	8006cc6 <TIM_OC1_SetConfig+0x8e>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a14      	ldr	r2, [pc, #80]	; (8006d14 <TIM_OC1_SetConfig+0xdc>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d111      	bne.n	8006cea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ccc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	685a      	ldr	r2, [r3, #4]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	621a      	str	r2, [r3, #32]
}
 8006d04:	bf00      	nop
 8006d06:	371c      	adds	r7, #28
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr
 8006d10:	40010000 	.word	0x40010000
 8006d14:	40010400 	.word	0x40010400

08006d18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b087      	sub	sp, #28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	f023 0210 	bic.w	r2, r3, #16
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	021b      	lsls	r3, r3, #8
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	f023 0320 	bic.w	r3, r3, #32
 8006d62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	011b      	lsls	r3, r3, #4
 8006d6a:	697a      	ldr	r2, [r7, #20]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a22      	ldr	r2, [pc, #136]	; (8006dfc <TIM_OC2_SetConfig+0xe4>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d003      	beq.n	8006d80 <TIM_OC2_SetConfig+0x68>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a21      	ldr	r2, [pc, #132]	; (8006e00 <TIM_OC2_SetConfig+0xe8>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d10d      	bne.n	8006d9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	011b      	lsls	r3, r3, #4
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a17      	ldr	r2, [pc, #92]	; (8006dfc <TIM_OC2_SetConfig+0xe4>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d003      	beq.n	8006dac <TIM_OC2_SetConfig+0x94>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a16      	ldr	r2, [pc, #88]	; (8006e00 <TIM_OC2_SetConfig+0xe8>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d113      	bne.n	8006dd4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006db2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006dba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	695b      	ldr	r3, [r3, #20]
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	693a      	ldr	r2, [r7, #16]
 8006dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	685a      	ldr	r2, [r3, #4]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	697a      	ldr	r2, [r7, #20]
 8006dec:	621a      	str	r2, [r3, #32]
}
 8006dee:	bf00      	nop
 8006df0:	371c      	adds	r7, #28
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	40010000 	.word	0x40010000
 8006e00:	40010400 	.word	0x40010400

08006e04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b087      	sub	sp, #28
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	69db      	ldr	r3, [r3, #28]
 8006e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f023 0303 	bic.w	r3, r3, #3
 8006e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	021b      	lsls	r3, r3, #8
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a21      	ldr	r2, [pc, #132]	; (8006ee4 <TIM_OC3_SetConfig+0xe0>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d003      	beq.n	8006e6a <TIM_OC3_SetConfig+0x66>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a20      	ldr	r2, [pc, #128]	; (8006ee8 <TIM_OC3_SetConfig+0xe4>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d10d      	bne.n	8006e86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	021b      	lsls	r3, r3, #8
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a16      	ldr	r2, [pc, #88]	; (8006ee4 <TIM_OC3_SetConfig+0xe0>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d003      	beq.n	8006e96 <TIM_OC3_SetConfig+0x92>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a15      	ldr	r2, [pc, #84]	; (8006ee8 <TIM_OC3_SetConfig+0xe4>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d113      	bne.n	8006ebe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	011b      	lsls	r3, r3, #4
 8006eac:	693a      	ldr	r2, [r7, #16]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	011b      	lsls	r3, r3, #4
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	685a      	ldr	r2, [r3, #4]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	697a      	ldr	r2, [r7, #20]
 8006ed6:	621a      	str	r2, [r3, #32]
}
 8006ed8:	bf00      	nop
 8006eda:	371c      	adds	r7, #28
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr
 8006ee4:	40010000 	.word	0x40010000
 8006ee8:	40010400 	.word	0x40010400

08006eec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b087      	sub	sp, #28
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	021b      	lsls	r3, r3, #8
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	031b      	lsls	r3, r3, #12
 8006f3e:	693a      	ldr	r2, [r7, #16]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a12      	ldr	r2, [pc, #72]	; (8006f90 <TIM_OC4_SetConfig+0xa4>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d003      	beq.n	8006f54 <TIM_OC4_SetConfig+0x68>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a11      	ldr	r2, [pc, #68]	; (8006f94 <TIM_OC4_SetConfig+0xa8>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d109      	bne.n	8006f68 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	695b      	ldr	r3, [r3, #20]
 8006f60:	019b      	lsls	r3, r3, #6
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	685a      	ldr	r2, [r3, #4]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	693a      	ldr	r2, [r7, #16]
 8006f80:	621a      	str	r2, [r3, #32]
}
 8006f82:	bf00      	nop
 8006f84:	371c      	adds	r7, #28
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	40010000 	.word	0x40010000
 8006f94:	40010400 	.word	0x40010400

08006f98 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b087      	sub	sp, #28
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
 8006fa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	f023 0201 	bic.w	r2, r3, #1
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6a1b      	ldr	r3, [r3, #32]
 8006fbc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	4a28      	ldr	r2, [pc, #160]	; (8007064 <TIM_TI1_SetConfig+0xcc>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d01b      	beq.n	8006ffe <TIM_TI1_SetConfig+0x66>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fcc:	d017      	beq.n	8006ffe <TIM_TI1_SetConfig+0x66>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	4a25      	ldr	r2, [pc, #148]	; (8007068 <TIM_TI1_SetConfig+0xd0>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d013      	beq.n	8006ffe <TIM_TI1_SetConfig+0x66>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	4a24      	ldr	r2, [pc, #144]	; (800706c <TIM_TI1_SetConfig+0xd4>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d00f      	beq.n	8006ffe <TIM_TI1_SetConfig+0x66>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	4a23      	ldr	r2, [pc, #140]	; (8007070 <TIM_TI1_SetConfig+0xd8>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d00b      	beq.n	8006ffe <TIM_TI1_SetConfig+0x66>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	4a22      	ldr	r2, [pc, #136]	; (8007074 <TIM_TI1_SetConfig+0xdc>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d007      	beq.n	8006ffe <TIM_TI1_SetConfig+0x66>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	4a21      	ldr	r2, [pc, #132]	; (8007078 <TIM_TI1_SetConfig+0xe0>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d003      	beq.n	8006ffe <TIM_TI1_SetConfig+0x66>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	4a20      	ldr	r2, [pc, #128]	; (800707c <TIM_TI1_SetConfig+0xe4>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d101      	bne.n	8007002 <TIM_TI1_SetConfig+0x6a>
 8006ffe:	2301      	movs	r3, #1
 8007000:	e000      	b.n	8007004 <TIM_TI1_SetConfig+0x6c>
 8007002:	2300      	movs	r3, #0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d008      	beq.n	800701a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	f023 0303 	bic.w	r3, r3, #3
 800700e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007010:	697a      	ldr	r2, [r7, #20]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4313      	orrs	r3, r2
 8007016:	617b      	str	r3, [r7, #20]
 8007018:	e003      	b.n	8007022 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	f043 0301 	orr.w	r3, r3, #1
 8007020:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007028:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	011b      	lsls	r3, r3, #4
 800702e:	b2db      	uxtb	r3, r3
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	4313      	orrs	r3, r2
 8007034:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	f023 030a 	bic.w	r3, r3, #10
 800703c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	f003 030a 	and.w	r3, r3, #10
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	4313      	orrs	r3, r2
 8007048:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	697a      	ldr	r2, [r7, #20]
 800704e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	621a      	str	r2, [r3, #32]
}
 8007056:	bf00      	nop
 8007058:	371c      	adds	r7, #28
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	40010000 	.word	0x40010000
 8007068:	40000400 	.word	0x40000400
 800706c:	40000800 	.word	0x40000800
 8007070:	40000c00 	.word	0x40000c00
 8007074:	40010400 	.word	0x40010400
 8007078:	40014000 	.word	0x40014000
 800707c:	40001800 	.word	0x40001800

08007080 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007080:	b480      	push	{r7}
 8007082:	b087      	sub	sp, #28
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
 800708c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	f023 0210 	bic.w	r2, r3, #16
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6a1b      	ldr	r3, [r3, #32]
 80070a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	021b      	lsls	r3, r3, #8
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	031b      	lsls	r3, r3, #12
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80070d2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	011b      	lsls	r3, r3, #4
 80070d8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80070dc:	693a      	ldr	r2, [r7, #16]
 80070de:	4313      	orrs	r3, r2
 80070e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	697a      	ldr	r2, [r7, #20]
 80070e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	693a      	ldr	r2, [r7, #16]
 80070ec:	621a      	str	r2, [r3, #32]
}
 80070ee:	bf00      	nop
 80070f0:	371c      	adds	r7, #28
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80070fa:	b480      	push	{r7}
 80070fc:	b087      	sub	sp, #28
 80070fe:	af00      	add	r7, sp, #0
 8007100:	60f8      	str	r0, [r7, #12]
 8007102:	60b9      	str	r1, [r7, #8]
 8007104:	607a      	str	r2, [r7, #4]
 8007106:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6a1b      	ldr	r3, [r3, #32]
 800710c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	69db      	ldr	r3, [r3, #28]
 8007118:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6a1b      	ldr	r3, [r3, #32]
 800711e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	f023 0303 	bic.w	r3, r3, #3
 8007126:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4313      	orrs	r3, r2
 800712e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007136:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	011b      	lsls	r3, r3, #4
 800713c:	b2db      	uxtb	r3, r3
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	4313      	orrs	r3, r2
 8007142:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800714a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	021b      	lsls	r3, r3, #8
 8007150:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007154:	693a      	ldr	r2, [r7, #16]
 8007156:	4313      	orrs	r3, r2
 8007158:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	697a      	ldr	r2, [r7, #20]
 800715e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	693a      	ldr	r2, [r7, #16]
 8007164:	621a      	str	r2, [r3, #32]
}
 8007166:	bf00      	nop
 8007168:	371c      	adds	r7, #28
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr

08007172 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007172:	b480      	push	{r7}
 8007174:	b087      	sub	sp, #28
 8007176:	af00      	add	r7, sp, #0
 8007178:	60f8      	str	r0, [r7, #12]
 800717a:	60b9      	str	r1, [r7, #8]
 800717c:	607a      	str	r2, [r7, #4]
 800717e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6a1b      	ldr	r3, [r3, #32]
 8007184:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	69db      	ldr	r3, [r3, #28]
 8007190:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800719e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	021b      	lsls	r3, r3, #8
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	031b      	lsls	r3, r3, #12
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	697a      	ldr	r2, [r7, #20]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80071c4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	031b      	lsls	r3, r3, #12
 80071ca:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	621a      	str	r2, [r3, #32]
}
 80071e0:	bf00      	nop
 80071e2:	371c      	adds	r7, #28
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b087      	sub	sp, #28
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	f003 031f 	and.w	r3, r3, #31
 80071fe:	2201      	movs	r2, #1
 8007200:	fa02 f303 	lsl.w	r3, r2, r3
 8007204:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6a1a      	ldr	r2, [r3, #32]
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	43db      	mvns	r3, r3
 800720e:	401a      	ands	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6a1a      	ldr	r2, [r3, #32]
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	f003 031f 	and.w	r3, r3, #31
 800721e:	6879      	ldr	r1, [r7, #4]
 8007220:	fa01 f303 	lsl.w	r3, r1, r3
 8007224:	431a      	orrs	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	621a      	str	r2, [r3, #32]
}
 800722a:	bf00      	nop
 800722c:	371c      	adds	r7, #28
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr
	...

08007238 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007238:	b480      	push	{r7}
 800723a:	b085      	sub	sp, #20
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007248:	2b01      	cmp	r3, #1
 800724a:	d101      	bne.n	8007250 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800724c:	2302      	movs	r3, #2
 800724e:	e05a      	b.n	8007306 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2202      	movs	r2, #2
 800725c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007276:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	4313      	orrs	r3, r2
 8007280:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a21      	ldr	r2, [pc, #132]	; (8007314 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d022      	beq.n	80072da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800729c:	d01d      	beq.n	80072da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a1d      	ldr	r2, [pc, #116]	; (8007318 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d018      	beq.n	80072da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a1b      	ldr	r2, [pc, #108]	; (800731c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d013      	beq.n	80072da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a1a      	ldr	r2, [pc, #104]	; (8007320 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d00e      	beq.n	80072da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a18      	ldr	r2, [pc, #96]	; (8007324 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d009      	beq.n	80072da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a17      	ldr	r2, [pc, #92]	; (8007328 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d004      	beq.n	80072da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a15      	ldr	r2, [pc, #84]	; (800732c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d10c      	bne.n	80072f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	68ba      	ldr	r2, [r7, #8]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	40010000 	.word	0x40010000
 8007318:	40000400 	.word	0x40000400
 800731c:	40000800 	.word	0x40000800
 8007320:	40000c00 	.word	0x40000c00
 8007324:	40010400 	.word	0x40010400
 8007328:	40014000 	.word	0x40014000
 800732c:	40001800 	.word	0x40001800

08007330 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007358:	b084      	sub	sp, #16
 800735a:	b580      	push	{r7, lr}
 800735c:	b084      	sub	sp, #16
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
 8007362:	f107 001c 	add.w	r0, r7, #28
 8007366:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800736a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736c:	2b01      	cmp	r3, #1
 800736e:	d122      	bne.n	80073b6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007374:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007384:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800739a:	2b01      	cmp	r3, #1
 800739c:	d105      	bne.n	80073aa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f001 fac6 	bl	800893c <USB_CoreReset>
 80073b0:	4603      	mov	r3, r0
 80073b2:	73fb      	strb	r3, [r7, #15]
 80073b4:	e01a      	b.n	80073ec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f001 faba 	bl	800893c <USB_CoreReset>
 80073c8:	4603      	mov	r3, r0
 80073ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80073cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d106      	bne.n	80073e0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	639a      	str	r2, [r3, #56]	; 0x38
 80073de:	e005      	b.n	80073ec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80073ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d10b      	bne.n	800740a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	f043 0206 	orr.w	r2, r3, #6
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	f043 0220 	orr.w	r2, r3, #32
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800740a:	7bfb      	ldrb	r3, [r7, #15]
}
 800740c:	4618      	mov	r0, r3
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007416:	b004      	add	sp, #16
 8007418:	4770      	bx	lr
	...

0800741c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800741c:	b480      	push	{r7}
 800741e:	b087      	sub	sp, #28
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	4613      	mov	r3, r2
 8007428:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800742a:	79fb      	ldrb	r3, [r7, #7]
 800742c:	2b02      	cmp	r3, #2
 800742e:	d165      	bne.n	80074fc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	4a41      	ldr	r2, [pc, #260]	; (8007538 <USB_SetTurnaroundTime+0x11c>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d906      	bls.n	8007446 <USB_SetTurnaroundTime+0x2a>
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	4a40      	ldr	r2, [pc, #256]	; (800753c <USB_SetTurnaroundTime+0x120>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d802      	bhi.n	8007446 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007440:	230f      	movs	r3, #15
 8007442:	617b      	str	r3, [r7, #20]
 8007444:	e062      	b.n	800750c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	4a3c      	ldr	r2, [pc, #240]	; (800753c <USB_SetTurnaroundTime+0x120>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d906      	bls.n	800745c <USB_SetTurnaroundTime+0x40>
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	4a3b      	ldr	r2, [pc, #236]	; (8007540 <USB_SetTurnaroundTime+0x124>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d802      	bhi.n	800745c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007456:	230e      	movs	r3, #14
 8007458:	617b      	str	r3, [r7, #20]
 800745a:	e057      	b.n	800750c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	4a38      	ldr	r2, [pc, #224]	; (8007540 <USB_SetTurnaroundTime+0x124>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d906      	bls.n	8007472 <USB_SetTurnaroundTime+0x56>
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	4a37      	ldr	r2, [pc, #220]	; (8007544 <USB_SetTurnaroundTime+0x128>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d802      	bhi.n	8007472 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800746c:	230d      	movs	r3, #13
 800746e:	617b      	str	r3, [r7, #20]
 8007470:	e04c      	b.n	800750c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	4a33      	ldr	r2, [pc, #204]	; (8007544 <USB_SetTurnaroundTime+0x128>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d906      	bls.n	8007488 <USB_SetTurnaroundTime+0x6c>
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	4a32      	ldr	r2, [pc, #200]	; (8007548 <USB_SetTurnaroundTime+0x12c>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d802      	bhi.n	8007488 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007482:	230c      	movs	r3, #12
 8007484:	617b      	str	r3, [r7, #20]
 8007486:	e041      	b.n	800750c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	4a2f      	ldr	r2, [pc, #188]	; (8007548 <USB_SetTurnaroundTime+0x12c>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d906      	bls.n	800749e <USB_SetTurnaroundTime+0x82>
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	4a2e      	ldr	r2, [pc, #184]	; (800754c <USB_SetTurnaroundTime+0x130>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d802      	bhi.n	800749e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007498:	230b      	movs	r3, #11
 800749a:	617b      	str	r3, [r7, #20]
 800749c:	e036      	b.n	800750c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	4a2a      	ldr	r2, [pc, #168]	; (800754c <USB_SetTurnaroundTime+0x130>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d906      	bls.n	80074b4 <USB_SetTurnaroundTime+0x98>
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	4a29      	ldr	r2, [pc, #164]	; (8007550 <USB_SetTurnaroundTime+0x134>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d802      	bhi.n	80074b4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80074ae:	230a      	movs	r3, #10
 80074b0:	617b      	str	r3, [r7, #20]
 80074b2:	e02b      	b.n	800750c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	4a26      	ldr	r2, [pc, #152]	; (8007550 <USB_SetTurnaroundTime+0x134>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d906      	bls.n	80074ca <USB_SetTurnaroundTime+0xae>
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	4a25      	ldr	r2, [pc, #148]	; (8007554 <USB_SetTurnaroundTime+0x138>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d802      	bhi.n	80074ca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80074c4:	2309      	movs	r3, #9
 80074c6:	617b      	str	r3, [r7, #20]
 80074c8:	e020      	b.n	800750c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	4a21      	ldr	r2, [pc, #132]	; (8007554 <USB_SetTurnaroundTime+0x138>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d906      	bls.n	80074e0 <USB_SetTurnaroundTime+0xc4>
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	4a20      	ldr	r2, [pc, #128]	; (8007558 <USB_SetTurnaroundTime+0x13c>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d802      	bhi.n	80074e0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80074da:	2308      	movs	r3, #8
 80074dc:	617b      	str	r3, [r7, #20]
 80074de:	e015      	b.n	800750c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	4a1d      	ldr	r2, [pc, #116]	; (8007558 <USB_SetTurnaroundTime+0x13c>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d906      	bls.n	80074f6 <USB_SetTurnaroundTime+0xda>
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	4a1c      	ldr	r2, [pc, #112]	; (800755c <USB_SetTurnaroundTime+0x140>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d802      	bhi.n	80074f6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80074f0:	2307      	movs	r3, #7
 80074f2:	617b      	str	r3, [r7, #20]
 80074f4:	e00a      	b.n	800750c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80074f6:	2306      	movs	r3, #6
 80074f8:	617b      	str	r3, [r7, #20]
 80074fa:	e007      	b.n	800750c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80074fc:	79fb      	ldrb	r3, [r7, #7]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d102      	bne.n	8007508 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007502:	2309      	movs	r3, #9
 8007504:	617b      	str	r3, [r7, #20]
 8007506:	e001      	b.n	800750c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007508:	2309      	movs	r3, #9
 800750a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	68da      	ldr	r2, [r3, #12]
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	029b      	lsls	r3, r3, #10
 8007520:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007524:	431a      	orrs	r2, r3
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	371c      	adds	r7, #28
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr
 8007538:	00d8acbf 	.word	0x00d8acbf
 800753c:	00e4e1bf 	.word	0x00e4e1bf
 8007540:	00f423ff 	.word	0x00f423ff
 8007544:	0106737f 	.word	0x0106737f
 8007548:	011a499f 	.word	0x011a499f
 800754c:	01312cff 	.word	0x01312cff
 8007550:	014ca43f 	.word	0x014ca43f
 8007554:	016e35ff 	.word	0x016e35ff
 8007558:	01a6ab1f 	.word	0x01a6ab1f
 800755c:	01e847ff 	.word	0x01e847ff

08007560 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	f043 0201 	orr.w	r2, r3, #1
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	370c      	adds	r7, #12
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007582:	b480      	push	{r7}
 8007584:	b083      	sub	sp, #12
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	f023 0201 	bic.w	r2, r3, #1
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	460b      	mov	r3, r1
 80075ae:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80075bc:	78fb      	ldrb	r3, [r7, #3]
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d106      	bne.n	80075d0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	60da      	str	r2, [r3, #12]
 80075ce:	e00b      	b.n	80075e8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80075d0:	78fb      	ldrb	r3, [r7, #3]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d106      	bne.n	80075e4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	60da      	str	r2, [r3, #12]
 80075e2:	e001      	b.n	80075e8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e003      	b.n	80075f0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80075e8:	2032      	movs	r0, #50	; 0x32
 80075ea:	f7fb fd6f 	bl	80030cc <HAL_Delay>

  return HAL_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80075f8:	b084      	sub	sp, #16
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b086      	sub	sp, #24
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
 8007602:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007606:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800760a:	2300      	movs	r3, #0
 800760c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007612:	2300      	movs	r3, #0
 8007614:	613b      	str	r3, [r7, #16]
 8007616:	e009      	b.n	800762c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	3340      	adds	r3, #64	; 0x40
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	4413      	add	r3, r2
 8007622:	2200      	movs	r2, #0
 8007624:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	3301      	adds	r3, #1
 800762a:	613b      	str	r3, [r7, #16]
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	2b0e      	cmp	r3, #14
 8007630:	d9f2      	bls.n	8007618 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007634:	2b00      	cmp	r3, #0
 8007636:	d11c      	bne.n	8007672 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007646:	f043 0302 	orr.w	r3, r3, #2
 800764a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007650:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007668:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	639a      	str	r2, [r3, #56]	; 0x38
 8007670:	e00b      	b.n	800768a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007676:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007682:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007690:	461a      	mov	r2, r3
 8007692:	2300      	movs	r3, #0
 8007694:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800769c:	4619      	mov	r1, r3
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076a4:	461a      	mov	r2, r3
 80076a6:	680b      	ldr	r3, [r1, #0]
 80076a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80076aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d10c      	bne.n	80076ca <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80076b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d104      	bne.n	80076c0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80076b6:	2100      	movs	r1, #0
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f949 	bl	8007950 <USB_SetDevSpeed>
 80076be:	e008      	b.n	80076d2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80076c0:	2101      	movs	r1, #1
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f944 	bl	8007950 <USB_SetDevSpeed>
 80076c8:	e003      	b.n	80076d2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80076ca:	2103      	movs	r1, #3
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 f93f 	bl	8007950 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80076d2:	2110      	movs	r1, #16
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 f8f3 	bl	80078c0 <USB_FlushTxFifo>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d001      	beq.n	80076e4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 f911 	bl	800790c <USB_FlushRxFifo>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d001      	beq.n	80076f4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076fa:	461a      	mov	r2, r3
 80076fc:	2300      	movs	r3, #0
 80076fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007706:	461a      	mov	r2, r3
 8007708:	2300      	movs	r3, #0
 800770a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007712:	461a      	mov	r2, r3
 8007714:	2300      	movs	r3, #0
 8007716:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007718:	2300      	movs	r3, #0
 800771a:	613b      	str	r3, [r7, #16]
 800771c:	e043      	b.n	80077a6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	015a      	lsls	r2, r3, #5
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	4413      	add	r3, r2
 8007726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007730:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007734:	d118      	bne.n	8007768 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d10a      	bne.n	8007752 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	015a      	lsls	r2, r3, #5
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	4413      	add	r3, r2
 8007744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007748:	461a      	mov	r2, r3
 800774a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800774e:	6013      	str	r3, [r2, #0]
 8007750:	e013      	b.n	800777a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	015a      	lsls	r2, r3, #5
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	4413      	add	r3, r2
 800775a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800775e:	461a      	mov	r2, r3
 8007760:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007764:	6013      	str	r3, [r2, #0]
 8007766:	e008      	b.n	800777a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	015a      	lsls	r2, r3, #5
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	4413      	add	r3, r2
 8007770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007774:	461a      	mov	r2, r3
 8007776:	2300      	movs	r3, #0
 8007778:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	015a      	lsls	r2, r3, #5
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	4413      	add	r3, r2
 8007782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007786:	461a      	mov	r2, r3
 8007788:	2300      	movs	r3, #0
 800778a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	015a      	lsls	r2, r3, #5
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	4413      	add	r3, r2
 8007794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007798:	461a      	mov	r2, r3
 800779a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800779e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	3301      	adds	r3, #1
 80077a4:	613b      	str	r3, [r7, #16]
 80077a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a8:	693a      	ldr	r2, [r7, #16]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d3b7      	bcc.n	800771e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077ae:	2300      	movs	r3, #0
 80077b0:	613b      	str	r3, [r7, #16]
 80077b2:	e043      	b.n	800783c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	015a      	lsls	r2, r3, #5
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4413      	add	r3, r2
 80077bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077ca:	d118      	bne.n	80077fe <USB_DevInit+0x206>
    {
      if (i == 0U)
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10a      	bne.n	80077e8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	015a      	lsls	r2, r3, #5
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	4413      	add	r3, r2
 80077da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077de:	461a      	mov	r2, r3
 80077e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80077e4:	6013      	str	r3, [r2, #0]
 80077e6:	e013      	b.n	8007810 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	015a      	lsls	r2, r3, #5
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	4413      	add	r3, r2
 80077f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f4:	461a      	mov	r2, r3
 80077f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80077fa:	6013      	str	r3, [r2, #0]
 80077fc:	e008      	b.n	8007810 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	015a      	lsls	r2, r3, #5
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	4413      	add	r3, r2
 8007806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800780a:	461a      	mov	r2, r3
 800780c:	2300      	movs	r3, #0
 800780e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	4413      	add	r3, r2
 8007818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800781c:	461a      	mov	r2, r3
 800781e:	2300      	movs	r3, #0
 8007820:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	015a      	lsls	r2, r3, #5
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	4413      	add	r3, r2
 800782a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800782e:	461a      	mov	r2, r3
 8007830:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007834:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	3301      	adds	r3, #1
 800783a:	613b      	str	r3, [r7, #16]
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	693a      	ldr	r2, [r7, #16]
 8007840:	429a      	cmp	r2, r3
 8007842:	d3b7      	bcc.n	80077b4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007852:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007856:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007864:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007868:	2b00      	cmp	r3, #0
 800786a:	d105      	bne.n	8007878 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	f043 0210 	orr.w	r2, r3, #16
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	699a      	ldr	r2, [r3, #24]
 800787c:	4b0f      	ldr	r3, [pc, #60]	; (80078bc <USB_DevInit+0x2c4>)
 800787e:	4313      	orrs	r3, r2
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007886:	2b00      	cmp	r3, #0
 8007888:	d005      	beq.n	8007896 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	f043 0208 	orr.w	r2, r3, #8
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007898:	2b01      	cmp	r3, #1
 800789a:	d107      	bne.n	80078ac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	699b      	ldr	r3, [r3, #24]
 80078a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078a4:	f043 0304 	orr.w	r3, r3, #4
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80078ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3718      	adds	r7, #24
 80078b2:	46bd      	mov	sp, r7
 80078b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078b8:	b004      	add	sp, #16
 80078ba:	4770      	bx	lr
 80078bc:	803c3800 	.word	0x803c3800

080078c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80078ca:	2300      	movs	r3, #0
 80078cc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	019b      	lsls	r3, r3, #6
 80078d2:	f043 0220 	orr.w	r2, r3, #32
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	3301      	adds	r3, #1
 80078de:	60fb      	str	r3, [r7, #12]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	4a09      	ldr	r2, [pc, #36]	; (8007908 <USB_FlushTxFifo+0x48>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d901      	bls.n	80078ec <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e006      	b.n	80078fa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	f003 0320 	and.w	r3, r3, #32
 80078f4:	2b20      	cmp	r3, #32
 80078f6:	d0f0      	beq.n	80078da <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3714      	adds	r7, #20
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	00030d40 	.word	0x00030d40

0800790c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007914:	2300      	movs	r3, #0
 8007916:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2210      	movs	r2, #16
 800791c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	3301      	adds	r3, #1
 8007922:	60fb      	str	r3, [r7, #12]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	4a09      	ldr	r2, [pc, #36]	; (800794c <USB_FlushRxFifo+0x40>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d901      	bls.n	8007930 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800792c:	2303      	movs	r3, #3
 800792e:	e006      	b.n	800793e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	f003 0310 	and.w	r3, r3, #16
 8007938:	2b10      	cmp	r3, #16
 800793a:	d0f0      	beq.n	800791e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	3714      	adds	r7, #20
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	00030d40 	.word	0x00030d40

08007950 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007950:	b480      	push	{r7}
 8007952:	b085      	sub	sp, #20
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	460b      	mov	r3, r1
 800795a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	78fb      	ldrb	r3, [r7, #3]
 800796a:	68f9      	ldr	r1, [r7, #12]
 800796c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007970:	4313      	orrs	r3, r2
 8007972:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3714      	adds	r7, #20
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007982:	b480      	push	{r7}
 8007984:	b087      	sub	sp, #28
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	f003 0306 	and.w	r3, r3, #6
 800799a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d102      	bne.n	80079a8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80079a2:	2300      	movs	r3, #0
 80079a4:	75fb      	strb	r3, [r7, #23]
 80079a6:	e00a      	b.n	80079be <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2b02      	cmp	r3, #2
 80079ac:	d002      	beq.n	80079b4 <USB_GetDevSpeed+0x32>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2b06      	cmp	r3, #6
 80079b2:	d102      	bne.n	80079ba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80079b4:	2302      	movs	r3, #2
 80079b6:	75fb      	strb	r3, [r7, #23]
 80079b8:	e001      	b.n	80079be <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80079ba:	230f      	movs	r3, #15
 80079bc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80079be:	7dfb      	ldrb	r3, [r7, #23]
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	371c      	adds	r7, #28
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	785b      	ldrb	r3, [r3, #1]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d13a      	bne.n	8007a5e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ee:	69da      	ldr	r2, [r3, #28]
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	f003 030f 	and.w	r3, r3, #15
 80079f8:	2101      	movs	r1, #1
 80079fa:	fa01 f303 	lsl.w	r3, r1, r3
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	68f9      	ldr	r1, [r7, #12]
 8007a02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a06:	4313      	orrs	r3, r2
 8007a08:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	015a      	lsls	r2, r3, #5
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	4413      	add	r3, r2
 8007a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d155      	bne.n	8007acc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	015a      	lsls	r2, r3, #5
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	4413      	add	r3, r2
 8007a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	78db      	ldrb	r3, [r3, #3]
 8007a3a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007a3c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	059b      	lsls	r3, r3, #22
 8007a42:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007a44:	4313      	orrs	r3, r2
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	0151      	lsls	r1, r2, #5
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	440a      	add	r2, r1
 8007a4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a5a:	6013      	str	r3, [r2, #0]
 8007a5c:	e036      	b.n	8007acc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a64:	69da      	ldr	r2, [r3, #28]
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	f003 030f 	and.w	r3, r3, #15
 8007a6e:	2101      	movs	r1, #1
 8007a70:	fa01 f303 	lsl.w	r3, r1, r3
 8007a74:	041b      	lsls	r3, r3, #16
 8007a76:	68f9      	ldr	r1, [r7, #12]
 8007a78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	015a      	lsls	r2, r3, #5
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	4413      	add	r3, r2
 8007a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d11a      	bne.n	8007acc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	015a      	lsls	r2, r3, #5
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	78db      	ldrb	r3, [r3, #3]
 8007ab0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007ab2:	430b      	orrs	r3, r1
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	68ba      	ldr	r2, [r7, #8]
 8007ab8:	0151      	lsls	r1, r2, #5
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	440a      	add	r2, r1
 8007abe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3714      	adds	r7, #20
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr
	...

08007adc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	785b      	ldrb	r3, [r3, #1]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d161      	bne.n	8007bbc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	015a      	lsls	r2, r3, #5
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	4413      	add	r3, r2
 8007b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b0e:	d11f      	bne.n	8007b50 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	015a      	lsls	r2, r3, #5
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	4413      	add	r3, r2
 8007b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	0151      	lsls	r1, r2, #5
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	440a      	add	r2, r1
 8007b26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007b2e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	015a      	lsls	r2, r3, #5
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	4413      	add	r3, r2
 8007b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	0151      	lsls	r1, r2, #5
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	440a      	add	r2, r1
 8007b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	f003 030f 	and.w	r3, r3, #15
 8007b60:	2101      	movs	r1, #1
 8007b62:	fa01 f303 	lsl.w	r3, r1, r3
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	43db      	mvns	r3, r3
 8007b6a:	68f9      	ldr	r1, [r7, #12]
 8007b6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b70:	4013      	ands	r3, r2
 8007b72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b7a:	69da      	ldr	r2, [r3, #28]
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	f003 030f 	and.w	r3, r3, #15
 8007b84:	2101      	movs	r1, #1
 8007b86:	fa01 f303 	lsl.w	r3, r1, r3
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	43db      	mvns	r3, r3
 8007b8e:	68f9      	ldr	r1, [r7, #12]
 8007b90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b94:	4013      	ands	r3, r2
 8007b96:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	015a      	lsls	r2, r3, #5
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	0159      	lsls	r1, r3, #5
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	440b      	add	r3, r1
 8007bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	4b35      	ldr	r3, [pc, #212]	; (8007c8c <USB_DeactivateEndpoint+0x1b0>)
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	600b      	str	r3, [r1, #0]
 8007bba:	e060      	b.n	8007c7e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	015a      	lsls	r2, r3, #5
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bd2:	d11f      	bne.n	8007c14 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	015a      	lsls	r2, r3, #5
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	4413      	add	r3, r2
 8007bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	68ba      	ldr	r2, [r7, #8]
 8007be4:	0151      	lsls	r1, r2, #5
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	440a      	add	r2, r1
 8007bea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007bf2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	015a      	lsls	r2, r3, #5
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	0151      	lsls	r1, r2, #5
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	440a      	add	r2, r1
 8007c0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	f003 030f 	and.w	r3, r3, #15
 8007c24:	2101      	movs	r1, #1
 8007c26:	fa01 f303 	lsl.w	r3, r1, r3
 8007c2a:	041b      	lsls	r3, r3, #16
 8007c2c:	43db      	mvns	r3, r3
 8007c2e:	68f9      	ldr	r1, [r7, #12]
 8007c30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c34:	4013      	ands	r3, r2
 8007c36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c3e:	69da      	ldr	r2, [r3, #28]
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	f003 030f 	and.w	r3, r3, #15
 8007c48:	2101      	movs	r1, #1
 8007c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c4e:	041b      	lsls	r3, r3, #16
 8007c50:	43db      	mvns	r3, r3
 8007c52:	68f9      	ldr	r1, [r7, #12]
 8007c54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c58:	4013      	ands	r3, r2
 8007c5a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	015a      	lsls	r2, r3, #5
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	4413      	add	r3, r2
 8007c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	0159      	lsls	r1, r3, #5
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	440b      	add	r3, r1
 8007c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c76:	4619      	mov	r1, r3
 8007c78:	4b05      	ldr	r3, [pc, #20]	; (8007c90 <USB_DeactivateEndpoint+0x1b4>)
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3714      	adds	r7, #20
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr
 8007c8c:	ec337800 	.word	0xec337800
 8007c90:	eff37800 	.word	0xeff37800

08007c94 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b08a      	sub	sp, #40	; 0x28
 8007c98:	af02      	add	r7, sp, #8
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	785b      	ldrb	r3, [r3, #1]
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	f040 815c 	bne.w	8007f6e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	695b      	ldr	r3, [r3, #20]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d132      	bne.n	8007d24 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	015a      	lsls	r2, r3, #5
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	69ba      	ldr	r2, [r7, #24]
 8007cce:	0151      	lsls	r1, r2, #5
 8007cd0:	69fa      	ldr	r2, [r7, #28]
 8007cd2:	440a      	add	r2, r1
 8007cd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cd8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007cdc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007ce0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	015a      	lsls	r2, r3, #5
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	4413      	add	r3, r2
 8007cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	69ba      	ldr	r2, [r7, #24]
 8007cf2:	0151      	lsls	r1, r2, #5
 8007cf4:	69fa      	ldr	r2, [r7, #28]
 8007cf6:	440a      	add	r2, r1
 8007cf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	015a      	lsls	r2, r3, #5
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	4413      	add	r3, r2
 8007d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	69ba      	ldr	r2, [r7, #24]
 8007d12:	0151      	lsls	r1, r2, #5
 8007d14:	69fa      	ldr	r2, [r7, #28]
 8007d16:	440a      	add	r2, r1
 8007d18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d1c:	0cdb      	lsrs	r3, r3, #19
 8007d1e:	04db      	lsls	r3, r3, #19
 8007d20:	6113      	str	r3, [r2, #16]
 8007d22:	e074      	b.n	8007e0e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	015a      	lsls	r2, r3, #5
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	69ba      	ldr	r2, [r7, #24]
 8007d34:	0151      	lsls	r1, r2, #5
 8007d36:	69fa      	ldr	r2, [r7, #28]
 8007d38:	440a      	add	r2, r1
 8007d3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d3e:	0cdb      	lsrs	r3, r3, #19
 8007d40:	04db      	lsls	r3, r3, #19
 8007d42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	015a      	lsls	r2, r3, #5
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	69ba      	ldr	r2, [r7, #24]
 8007d54:	0151      	lsls	r1, r2, #5
 8007d56:	69fa      	ldr	r2, [r7, #28]
 8007d58:	440a      	add	r2, r1
 8007d5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d5e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007d62:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007d66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	015a      	lsls	r2, r3, #5
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	4413      	add	r3, r2
 8007d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d74:	691a      	ldr	r2, [r3, #16]
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	6959      	ldr	r1, [r3, #20]
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	440b      	add	r3, r1
 8007d80:	1e59      	subs	r1, r3, #1
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d8a:	04d9      	lsls	r1, r3, #19
 8007d8c:	4b9d      	ldr	r3, [pc, #628]	; (8008004 <USB_EPStartXfer+0x370>)
 8007d8e:	400b      	ands	r3, r1
 8007d90:	69b9      	ldr	r1, [r7, #24]
 8007d92:	0148      	lsls	r0, r1, #5
 8007d94:	69f9      	ldr	r1, [r7, #28]
 8007d96:	4401      	add	r1, r0
 8007d98:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007da0:	69bb      	ldr	r3, [r7, #24]
 8007da2:	015a      	lsls	r2, r3, #5
 8007da4:	69fb      	ldr	r3, [r7, #28]
 8007da6:	4413      	add	r3, r2
 8007da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dac:	691a      	ldr	r2, [r3, #16]
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	695b      	ldr	r3, [r3, #20]
 8007db2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007db6:	69b9      	ldr	r1, [r7, #24]
 8007db8:	0148      	lsls	r0, r1, #5
 8007dba:	69f9      	ldr	r1, [r7, #28]
 8007dbc:	4401      	add	r1, r0
 8007dbe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	78db      	ldrb	r3, [r3, #3]
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d11f      	bne.n	8007e0e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	015a      	lsls	r2, r3, #5
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	69ba      	ldr	r2, [r7, #24]
 8007dde:	0151      	lsls	r1, r2, #5
 8007de0:	69fa      	ldr	r2, [r7, #28]
 8007de2:	440a      	add	r2, r1
 8007de4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007de8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007dec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	015a      	lsls	r2, r3, #5
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	4413      	add	r3, r2
 8007df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	69ba      	ldr	r2, [r7, #24]
 8007dfe:	0151      	lsls	r1, r2, #5
 8007e00:	69fa      	ldr	r2, [r7, #28]
 8007e02:	440a      	add	r2, r1
 8007e04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e0c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007e0e:	79fb      	ldrb	r3, [r7, #7]
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d14b      	bne.n	8007eac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d009      	beq.n	8007e30 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	015a      	lsls	r2, r3, #5
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	4413      	add	r3, r2
 8007e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e28:	461a      	mov	r2, r3
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	78db      	ldrb	r3, [r3, #3]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d128      	bne.n	8007e8a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d110      	bne.n	8007e6a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	015a      	lsls	r2, r3, #5
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	4413      	add	r3, r2
 8007e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	69ba      	ldr	r2, [r7, #24]
 8007e58:	0151      	lsls	r1, r2, #5
 8007e5a:	69fa      	ldr	r2, [r7, #28]
 8007e5c:	440a      	add	r2, r1
 8007e5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e66:	6013      	str	r3, [r2, #0]
 8007e68:	e00f      	b.n	8007e8a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	015a      	lsls	r2, r3, #5
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	4413      	add	r3, r2
 8007e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	69ba      	ldr	r2, [r7, #24]
 8007e7a:	0151      	lsls	r1, r2, #5
 8007e7c:	69fa      	ldr	r2, [r7, #28]
 8007e7e:	440a      	add	r2, r1
 8007e80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e88:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	015a      	lsls	r2, r3, #5
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	4413      	add	r3, r2
 8007e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	69ba      	ldr	r2, [r7, #24]
 8007e9a:	0151      	lsls	r1, r2, #5
 8007e9c:	69fa      	ldr	r2, [r7, #28]
 8007e9e:	440a      	add	r2, r1
 8007ea0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ea4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ea8:	6013      	str	r3, [r2, #0]
 8007eaa:	e12f      	b.n	800810c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	015a      	lsls	r2, r3, #5
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	69ba      	ldr	r2, [r7, #24]
 8007ebc:	0151      	lsls	r1, r2, #5
 8007ebe:	69fa      	ldr	r2, [r7, #28]
 8007ec0:	440a      	add	r2, r1
 8007ec2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ec6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007eca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	78db      	ldrb	r3, [r3, #3]
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d015      	beq.n	8007f00 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	695b      	ldr	r3, [r3, #20]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f000 8117 	beq.w	800810c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ee4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	f003 030f 	and.w	r3, r3, #15
 8007eee:	2101      	movs	r1, #1
 8007ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ef4:	69f9      	ldr	r1, [r7, #28]
 8007ef6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007efa:	4313      	orrs	r3, r2
 8007efc:	634b      	str	r3, [r1, #52]	; 0x34
 8007efe:	e105      	b.n	800810c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d110      	bne.n	8007f32 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	015a      	lsls	r2, r3, #5
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	4413      	add	r3, r2
 8007f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	69ba      	ldr	r2, [r7, #24]
 8007f20:	0151      	lsls	r1, r2, #5
 8007f22:	69fa      	ldr	r2, [r7, #28]
 8007f24:	440a      	add	r2, r1
 8007f26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f2e:	6013      	str	r3, [r2, #0]
 8007f30:	e00f      	b.n	8007f52 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	015a      	lsls	r2, r3, #5
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	4413      	add	r3, r2
 8007f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	69ba      	ldr	r2, [r7, #24]
 8007f42:	0151      	lsls	r1, r2, #5
 8007f44:	69fa      	ldr	r2, [r7, #28]
 8007f46:	440a      	add	r2, r1
 8007f48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f50:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	68d9      	ldr	r1, [r3, #12]
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	781a      	ldrb	r2, [r3, #0]
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	695b      	ldr	r3, [r3, #20]
 8007f5e:	b298      	uxth	r0, r3
 8007f60:	79fb      	ldrb	r3, [r7, #7]
 8007f62:	9300      	str	r3, [sp, #0]
 8007f64:	4603      	mov	r3, r0
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	f000 fa2b 	bl	80083c2 <USB_WritePacket>
 8007f6c:	e0ce      	b.n	800810c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	015a      	lsls	r2, r3, #5
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	4413      	add	r3, r2
 8007f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f7a:	691b      	ldr	r3, [r3, #16]
 8007f7c:	69ba      	ldr	r2, [r7, #24]
 8007f7e:	0151      	lsls	r1, r2, #5
 8007f80:	69fa      	ldr	r2, [r7, #28]
 8007f82:	440a      	add	r2, r1
 8007f84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f88:	0cdb      	lsrs	r3, r3, #19
 8007f8a:	04db      	lsls	r3, r3, #19
 8007f8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	015a      	lsls	r2, r3, #5
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	4413      	add	r3, r2
 8007f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	69ba      	ldr	r2, [r7, #24]
 8007f9e:	0151      	lsls	r1, r2, #5
 8007fa0:	69fa      	ldr	r2, [r7, #28]
 8007fa2:	440a      	add	r2, r1
 8007fa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fa8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007fac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007fb0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	695b      	ldr	r3, [r3, #20]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d126      	bne.n	8008008 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	015a      	lsls	r2, r3, #5
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc6:	691a      	ldr	r2, [r3, #16]
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fd0:	69b9      	ldr	r1, [r7, #24]
 8007fd2:	0148      	lsls	r0, r1, #5
 8007fd4:	69f9      	ldr	r1, [r7, #28]
 8007fd6:	4401      	add	r1, r0
 8007fd8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	015a      	lsls	r2, r3, #5
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	69ba      	ldr	r2, [r7, #24]
 8007ff0:	0151      	lsls	r1, r2, #5
 8007ff2:	69fa      	ldr	r2, [r7, #28]
 8007ff4:	440a      	add	r2, r1
 8007ff6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ffa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ffe:	6113      	str	r3, [r2, #16]
 8008000:	e036      	b.n	8008070 <USB_EPStartXfer+0x3dc>
 8008002:	bf00      	nop
 8008004:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	695a      	ldr	r2, [r3, #20]
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	4413      	add	r3, r2
 8008012:	1e5a      	subs	r2, r3, #1
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	fbb2 f3f3 	udiv	r3, r2, r3
 800801c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	015a      	lsls	r2, r3, #5
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	4413      	add	r3, r2
 8008026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800802a:	691a      	ldr	r2, [r3, #16]
 800802c:	8afb      	ldrh	r3, [r7, #22]
 800802e:	04d9      	lsls	r1, r3, #19
 8008030:	4b39      	ldr	r3, [pc, #228]	; (8008118 <USB_EPStartXfer+0x484>)
 8008032:	400b      	ands	r3, r1
 8008034:	69b9      	ldr	r1, [r7, #24]
 8008036:	0148      	lsls	r0, r1, #5
 8008038:	69f9      	ldr	r1, [r7, #28]
 800803a:	4401      	add	r1, r0
 800803c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008040:	4313      	orrs	r3, r2
 8008042:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	015a      	lsls	r2, r3, #5
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	4413      	add	r3, r2
 800804c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008050:	691a      	ldr	r2, [r3, #16]
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	8af9      	ldrh	r1, [r7, #22]
 8008058:	fb01 f303 	mul.w	r3, r1, r3
 800805c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008060:	69b9      	ldr	r1, [r7, #24]
 8008062:	0148      	lsls	r0, r1, #5
 8008064:	69f9      	ldr	r1, [r7, #28]
 8008066:	4401      	add	r1, r0
 8008068:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800806c:	4313      	orrs	r3, r2
 800806e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008070:	79fb      	ldrb	r3, [r7, #7]
 8008072:	2b01      	cmp	r3, #1
 8008074:	d10d      	bne.n	8008092 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d009      	beq.n	8008092 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	68d9      	ldr	r1, [r3, #12]
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	015a      	lsls	r2, r3, #5
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	4413      	add	r3, r2
 800808a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800808e:	460a      	mov	r2, r1
 8008090:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	78db      	ldrb	r3, [r3, #3]
 8008096:	2b01      	cmp	r3, #1
 8008098:	d128      	bne.n	80080ec <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d110      	bne.n	80080cc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	015a      	lsls	r2, r3, #5
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	4413      	add	r3, r2
 80080b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	69ba      	ldr	r2, [r7, #24]
 80080ba:	0151      	lsls	r1, r2, #5
 80080bc:	69fa      	ldr	r2, [r7, #28]
 80080be:	440a      	add	r2, r1
 80080c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80080c8:	6013      	str	r3, [r2, #0]
 80080ca:	e00f      	b.n	80080ec <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	015a      	lsls	r2, r3, #5
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	4413      	add	r3, r2
 80080d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	69ba      	ldr	r2, [r7, #24]
 80080dc:	0151      	lsls	r1, r2, #5
 80080de:	69fa      	ldr	r2, [r7, #28]
 80080e0:	440a      	add	r2, r1
 80080e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	015a      	lsls	r2, r3, #5
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	4413      	add	r3, r2
 80080f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	69ba      	ldr	r2, [r7, #24]
 80080fc:	0151      	lsls	r1, r2, #5
 80080fe:	69fa      	ldr	r2, [r7, #28]
 8008100:	440a      	add	r2, r1
 8008102:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008106:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800810a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3720      	adds	r7, #32
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	1ff80000 	.word	0x1ff80000

0800811c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800811c:	b480      	push	{r7}
 800811e:	b087      	sub	sp, #28
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	4613      	mov	r3, r2
 8008128:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	785b      	ldrb	r3, [r3, #1]
 8008138:	2b01      	cmp	r3, #1
 800813a:	f040 80cd 	bne.w	80082d8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	695b      	ldr	r3, [r3, #20]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d132      	bne.n	80081ac <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	015a      	lsls	r2, r3, #5
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	4413      	add	r3, r2
 800814e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	693a      	ldr	r2, [r7, #16]
 8008156:	0151      	lsls	r1, r2, #5
 8008158:	697a      	ldr	r2, [r7, #20]
 800815a:	440a      	add	r2, r1
 800815c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008160:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008164:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008168:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	015a      	lsls	r2, r3, #5
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	4413      	add	r3, r2
 8008172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	693a      	ldr	r2, [r7, #16]
 800817a:	0151      	lsls	r1, r2, #5
 800817c:	697a      	ldr	r2, [r7, #20]
 800817e:	440a      	add	r2, r1
 8008180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008184:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008188:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	015a      	lsls	r2, r3, #5
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	4413      	add	r3, r2
 8008192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	693a      	ldr	r2, [r7, #16]
 800819a:	0151      	lsls	r1, r2, #5
 800819c:	697a      	ldr	r2, [r7, #20]
 800819e:	440a      	add	r2, r1
 80081a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081a4:	0cdb      	lsrs	r3, r3, #19
 80081a6:	04db      	lsls	r3, r3, #19
 80081a8:	6113      	str	r3, [r2, #16]
 80081aa:	e04e      	b.n	800824a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	015a      	lsls	r2, r3, #5
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	4413      	add	r3, r2
 80081b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	693a      	ldr	r2, [r7, #16]
 80081bc:	0151      	lsls	r1, r2, #5
 80081be:	697a      	ldr	r2, [r7, #20]
 80081c0:	440a      	add	r2, r1
 80081c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081c6:	0cdb      	lsrs	r3, r3, #19
 80081c8:	04db      	lsls	r3, r3, #19
 80081ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	015a      	lsls	r2, r3, #5
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	4413      	add	r3, r2
 80081d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	693a      	ldr	r2, [r7, #16]
 80081dc:	0151      	lsls	r1, r2, #5
 80081de:	697a      	ldr	r2, [r7, #20]
 80081e0:	440a      	add	r2, r1
 80081e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80081ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80081ee:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	695a      	ldr	r2, [r3, #20]
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d903      	bls.n	8008204 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	689a      	ldr	r2, [r3, #8]
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	015a      	lsls	r2, r3, #5
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	4413      	add	r3, r2
 800820c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	693a      	ldr	r2, [r7, #16]
 8008214:	0151      	lsls	r1, r2, #5
 8008216:	697a      	ldr	r2, [r7, #20]
 8008218:	440a      	add	r2, r1
 800821a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800821e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008222:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	015a      	lsls	r2, r3, #5
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	4413      	add	r3, r2
 800822c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008230:	691a      	ldr	r2, [r3, #16]
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	695b      	ldr	r3, [r3, #20]
 8008236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800823a:	6939      	ldr	r1, [r7, #16]
 800823c:	0148      	lsls	r0, r1, #5
 800823e:	6979      	ldr	r1, [r7, #20]
 8008240:	4401      	add	r1, r0
 8008242:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008246:	4313      	orrs	r3, r2
 8008248:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800824a:	79fb      	ldrb	r3, [r7, #7]
 800824c:	2b01      	cmp	r3, #1
 800824e:	d11e      	bne.n	800828e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d009      	beq.n	800826c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	015a      	lsls	r2, r3, #5
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	4413      	add	r3, r2
 8008260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008264:	461a      	mov	r2, r3
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	691b      	ldr	r3, [r3, #16]
 800826a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	015a      	lsls	r2, r3, #5
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	4413      	add	r3, r2
 8008274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	693a      	ldr	r2, [r7, #16]
 800827c:	0151      	lsls	r1, r2, #5
 800827e:	697a      	ldr	r2, [r7, #20]
 8008280:	440a      	add	r2, r1
 8008282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008286:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800828a:	6013      	str	r3, [r2, #0]
 800828c:	e092      	b.n	80083b4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	015a      	lsls	r2, r3, #5
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	4413      	add	r3, r2
 8008296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	693a      	ldr	r2, [r7, #16]
 800829e:	0151      	lsls	r1, r2, #5
 80082a0:	697a      	ldr	r2, [r7, #20]
 80082a2:	440a      	add	r2, r1
 80082a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80082ac:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	695b      	ldr	r3, [r3, #20]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d07e      	beq.n	80083b4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	f003 030f 	and.w	r3, r3, #15
 80082c6:	2101      	movs	r1, #1
 80082c8:	fa01 f303 	lsl.w	r3, r1, r3
 80082cc:	6979      	ldr	r1, [r7, #20]
 80082ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082d2:	4313      	orrs	r3, r2
 80082d4:	634b      	str	r3, [r1, #52]	; 0x34
 80082d6:	e06d      	b.n	80083b4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	015a      	lsls	r2, r3, #5
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	4413      	add	r3, r2
 80082e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	693a      	ldr	r2, [r7, #16]
 80082e8:	0151      	lsls	r1, r2, #5
 80082ea:	697a      	ldr	r2, [r7, #20]
 80082ec:	440a      	add	r2, r1
 80082ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082f2:	0cdb      	lsrs	r3, r3, #19
 80082f4:	04db      	lsls	r3, r3, #19
 80082f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	015a      	lsls	r2, r3, #5
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	4413      	add	r3, r2
 8008300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	693a      	ldr	r2, [r7, #16]
 8008308:	0151      	lsls	r1, r2, #5
 800830a:	697a      	ldr	r2, [r7, #20]
 800830c:	440a      	add	r2, r1
 800830e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008312:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008316:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800831a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	695b      	ldr	r3, [r3, #20]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d003      	beq.n	800832c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	689a      	ldr	r2, [r3, #8]
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	015a      	lsls	r2, r3, #5
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	4413      	add	r3, r2
 8008334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	0151      	lsls	r1, r2, #5
 800833e:	697a      	ldr	r2, [r7, #20]
 8008340:	440a      	add	r2, r1
 8008342:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008346:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800834a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	015a      	lsls	r2, r3, #5
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	4413      	add	r3, r2
 8008354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008358:	691a      	ldr	r2, [r3, #16]
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008362:	6939      	ldr	r1, [r7, #16]
 8008364:	0148      	lsls	r0, r1, #5
 8008366:	6979      	ldr	r1, [r7, #20]
 8008368:	4401      	add	r1, r0
 800836a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800836e:	4313      	orrs	r3, r2
 8008370:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008372:	79fb      	ldrb	r3, [r7, #7]
 8008374:	2b01      	cmp	r3, #1
 8008376:	d10d      	bne.n	8008394 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d009      	beq.n	8008394 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	68d9      	ldr	r1, [r3, #12]
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	015a      	lsls	r2, r3, #5
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	4413      	add	r3, r2
 800838c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008390:	460a      	mov	r2, r1
 8008392:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	015a      	lsls	r2, r3, #5
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	4413      	add	r3, r2
 800839c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	693a      	ldr	r2, [r7, #16]
 80083a4:	0151      	lsls	r1, r2, #5
 80083a6:	697a      	ldr	r2, [r7, #20]
 80083a8:	440a      	add	r2, r1
 80083aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80083b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	371c      	adds	r7, #28
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr

080083c2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80083c2:	b480      	push	{r7}
 80083c4:	b089      	sub	sp, #36	; 0x24
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	60f8      	str	r0, [r7, #12]
 80083ca:	60b9      	str	r1, [r7, #8]
 80083cc:	4611      	mov	r1, r2
 80083ce:	461a      	mov	r2, r3
 80083d0:	460b      	mov	r3, r1
 80083d2:	71fb      	strb	r3, [r7, #7]
 80083d4:	4613      	mov	r3, r2
 80083d6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80083e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d11a      	bne.n	800841e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80083e8:	88bb      	ldrh	r3, [r7, #4]
 80083ea:	3303      	adds	r3, #3
 80083ec:	089b      	lsrs	r3, r3, #2
 80083ee:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80083f0:	2300      	movs	r3, #0
 80083f2:	61bb      	str	r3, [r7, #24]
 80083f4:	e00f      	b.n	8008416 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80083f6:	79fb      	ldrb	r3, [r7, #7]
 80083f8:	031a      	lsls	r2, r3, #12
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	4413      	add	r3, r2
 80083fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008402:	461a      	mov	r2, r3
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	6013      	str	r3, [r2, #0]
      pSrc++;
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	3304      	adds	r3, #4
 800840e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	3301      	adds	r3, #1
 8008414:	61bb      	str	r3, [r7, #24]
 8008416:	69ba      	ldr	r2, [r7, #24]
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	429a      	cmp	r2, r3
 800841c:	d3eb      	bcc.n	80083f6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800841e:	2300      	movs	r3, #0
}
 8008420:	4618      	mov	r0, r3
 8008422:	3724      	adds	r7, #36	; 0x24
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800842c:	b480      	push	{r7}
 800842e:	b089      	sub	sp, #36	; 0x24
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	4613      	mov	r3, r2
 8008438:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008442:	88fb      	ldrh	r3, [r7, #6]
 8008444:	3303      	adds	r3, #3
 8008446:	089b      	lsrs	r3, r3, #2
 8008448:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800844a:	2300      	movs	r3, #0
 800844c:	61bb      	str	r3, [r7, #24]
 800844e:	e00b      	b.n	8008468 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	601a      	str	r2, [r3, #0]
    pDest++;
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	3304      	adds	r3, #4
 8008460:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	3301      	adds	r3, #1
 8008466:	61bb      	str	r3, [r7, #24]
 8008468:	69ba      	ldr	r2, [r7, #24]
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	429a      	cmp	r2, r3
 800846e:	d3ef      	bcc.n	8008450 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008470:	69fb      	ldr	r3, [r7, #28]
}
 8008472:	4618      	mov	r0, r3
 8008474:	3724      	adds	r7, #36	; 0x24
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr

0800847e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800847e:	b480      	push	{r7}
 8008480:	b085      	sub	sp, #20
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
 8008486:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	785b      	ldrb	r3, [r3, #1]
 8008496:	2b01      	cmp	r3, #1
 8008498:	d12c      	bne.n	80084f4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	015a      	lsls	r2, r3, #5
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	4413      	add	r3, r2
 80084a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	db12      	blt.n	80084d2 <USB_EPSetStall+0x54>
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00f      	beq.n	80084d2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	015a      	lsls	r2, r3, #5
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	4413      	add	r3, r2
 80084ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	0151      	lsls	r1, r2, #5
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	440a      	add	r2, r1
 80084c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80084d0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	015a      	lsls	r2, r3, #5
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	4413      	add	r3, r2
 80084da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68ba      	ldr	r2, [r7, #8]
 80084e2:	0151      	lsls	r1, r2, #5
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	440a      	add	r2, r1
 80084e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80084f0:	6013      	str	r3, [r2, #0]
 80084f2:	e02b      	b.n	800854c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	015a      	lsls	r2, r3, #5
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	4413      	add	r3, r2
 80084fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	db12      	blt.n	800852c <USB_EPSetStall+0xae>
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00f      	beq.n	800852c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	015a      	lsls	r2, r3, #5
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	4413      	add	r3, r2
 8008514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68ba      	ldr	r2, [r7, #8]
 800851c:	0151      	lsls	r1, r2, #5
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	440a      	add	r2, r1
 8008522:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008526:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800852a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	015a      	lsls	r2, r3, #5
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	4413      	add	r3, r2
 8008534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68ba      	ldr	r2, [r7, #8]
 800853c:	0151      	lsls	r1, r2, #5
 800853e:	68fa      	ldr	r2, [r7, #12]
 8008540:	440a      	add	r2, r1
 8008542:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008546:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800854a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3714      	adds	r7, #20
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr

0800855a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800855a:	b480      	push	{r7}
 800855c:	b085      	sub	sp, #20
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
 8008562:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	785b      	ldrb	r3, [r3, #1]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d128      	bne.n	80085c8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	015a      	lsls	r2, r3, #5
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	4413      	add	r3, r2
 800857e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68ba      	ldr	r2, [r7, #8]
 8008586:	0151      	lsls	r1, r2, #5
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	440a      	add	r2, r1
 800858c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008590:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008594:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	78db      	ldrb	r3, [r3, #3]
 800859a:	2b03      	cmp	r3, #3
 800859c:	d003      	beq.n	80085a6 <USB_EPClearStall+0x4c>
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	78db      	ldrb	r3, [r3, #3]
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d138      	bne.n	8008618 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	015a      	lsls	r2, r3, #5
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	4413      	add	r3, r2
 80085ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68ba      	ldr	r2, [r7, #8]
 80085b6:	0151      	lsls	r1, r2, #5
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	440a      	add	r2, r1
 80085bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085c4:	6013      	str	r3, [r2, #0]
 80085c6:	e027      	b.n	8008618 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	015a      	lsls	r2, r3, #5
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	4413      	add	r3, r2
 80085d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	68ba      	ldr	r2, [r7, #8]
 80085d8:	0151      	lsls	r1, r2, #5
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	440a      	add	r2, r1
 80085de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80085e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	78db      	ldrb	r3, [r3, #3]
 80085ec:	2b03      	cmp	r3, #3
 80085ee:	d003      	beq.n	80085f8 <USB_EPClearStall+0x9e>
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	78db      	ldrb	r3, [r3, #3]
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d10f      	bne.n	8008618 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	015a      	lsls	r2, r3, #5
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	4413      	add	r3, r2
 8008600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68ba      	ldr	r2, [r7, #8]
 8008608:	0151      	lsls	r1, r2, #5
 800860a:	68fa      	ldr	r2, [r7, #12]
 800860c:	440a      	add	r2, r1
 800860e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008616:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	3714      	adds	r7, #20
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr

08008626 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008626:	b480      	push	{r7}
 8008628:	b085      	sub	sp, #20
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
 800862e:	460b      	mov	r3, r1
 8008630:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008644:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008648:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	78fb      	ldrb	r3, [r7, #3]
 8008654:	011b      	lsls	r3, r3, #4
 8008656:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800865a:	68f9      	ldr	r1, [r7, #12]
 800865c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008660:	4313      	orrs	r3, r2
 8008662:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3714      	adds	r7, #20
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr

08008672 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008672:	b480      	push	{r7}
 8008674:	b085      	sub	sp, #20
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800868c:	f023 0303 	bic.w	r3, r3, #3
 8008690:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086a0:	f023 0302 	bic.w	r3, r3, #2
 80086a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3714      	adds	r7, #20
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80086ce:	f023 0303 	bic.w	r3, r3, #3
 80086d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086e2:	f043 0302 	orr.w	r3, r3, #2
 80086e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3714      	adds	r7, #20
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr

080086f6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80086f6:	b480      	push	{r7}
 80086f8:	b085      	sub	sp, #20
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	695b      	ldr	r3, [r3, #20]
 8008702:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	699b      	ldr	r3, [r3, #24]
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	4013      	ands	r3, r2
 800870c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800870e:	68fb      	ldr	r3, [r7, #12]
}
 8008710:	4618      	mov	r0, r3
 8008712:	3714      	adds	r7, #20
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800872e:	699b      	ldr	r3, [r3, #24]
 8008730:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008738:	69db      	ldr	r3, [r3, #28]
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	4013      	ands	r3, r2
 800873e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	0c1b      	lsrs	r3, r3, #16
}
 8008744:	4618      	mov	r0, r3
 8008746:	3714      	adds	r7, #20
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008750:	b480      	push	{r7}
 8008752:	b085      	sub	sp, #20
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008762:	699b      	ldr	r3, [r3, #24]
 8008764:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800876c:	69db      	ldr	r3, [r3, #28]
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	4013      	ands	r3, r2
 8008772:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	b29b      	uxth	r3, r3
}
 8008778:	4618      	mov	r0, r3
 800877a:	3714      	adds	r7, #20
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008784:	b480      	push	{r7}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	460b      	mov	r3, r1
 800878e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008794:	78fb      	ldrb	r3, [r7, #3]
 8008796:	015a      	lsls	r2, r3, #5
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	4413      	add	r3, r2
 800879c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087aa:	695b      	ldr	r3, [r3, #20]
 80087ac:	68ba      	ldr	r2, [r7, #8]
 80087ae:	4013      	ands	r3, r2
 80087b0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80087b2:	68bb      	ldr	r3, [r7, #8]
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3714      	adds	r7, #20
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b087      	sub	sp, #28
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	460b      	mov	r3, r1
 80087ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087e2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80087e4:	78fb      	ldrb	r3, [r7, #3]
 80087e6:	f003 030f 	and.w	r3, r3, #15
 80087ea:	68fa      	ldr	r2, [r7, #12]
 80087ec:	fa22 f303 	lsr.w	r3, r2, r3
 80087f0:	01db      	lsls	r3, r3, #7
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	693a      	ldr	r2, [r7, #16]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80087fa:	78fb      	ldrb	r3, [r7, #3]
 80087fc:	015a      	lsls	r2, r3, #5
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	4413      	add	r3, r2
 8008802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	693a      	ldr	r2, [r7, #16]
 800880a:	4013      	ands	r3, r2
 800880c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800880e:	68bb      	ldr	r3, [r7, #8]
}
 8008810:	4618      	mov	r0, r3
 8008812:	371c      	adds	r7, #28
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	695b      	ldr	r3, [r3, #20]
 8008828:	f003 0301 	and.w	r3, r3, #1
}
 800882c:	4618      	mov	r0, r3
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008838:	b480      	push	{r7}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008852:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008856:	f023 0307 	bic.w	r3, r3, #7
 800885a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800886a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800886e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3714      	adds	r7, #20
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
	...

08008880 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008880:	b480      	push	{r7}
 8008882:	b087      	sub	sp, #28
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	460b      	mov	r3, r1
 800888a:	607a      	str	r2, [r7, #4]
 800888c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	333c      	adds	r3, #60	; 0x3c
 8008896:	3304      	adds	r3, #4
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	4a26      	ldr	r2, [pc, #152]	; (8008938 <USB_EP0_OutStart+0xb8>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d90a      	bls.n	80088ba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088b4:	d101      	bne.n	80088ba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80088b6:	2300      	movs	r3, #0
 80088b8:	e037      	b.n	800892a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088c0:	461a      	mov	r2, r3
 80088c2:	2300      	movs	r3, #0
 80088c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088cc:	691b      	ldr	r3, [r3, #16]
 80088ce:	697a      	ldr	r2, [r7, #20]
 80088d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	697a      	ldr	r2, [r7, #20]
 80088e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088e8:	f043 0318 	orr.w	r3, r3, #24
 80088ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	697a      	ldr	r2, [r7, #20]
 80088f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088fc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008900:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008902:	7afb      	ldrb	r3, [r7, #11]
 8008904:	2b01      	cmp	r3, #1
 8008906:	d10f      	bne.n	8008928 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800890e:	461a      	mov	r2, r3
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	697a      	ldr	r2, [r7, #20]
 800891e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008922:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008926:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	371c      	adds	r7, #28
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop
 8008938:	4f54300a 	.word	0x4f54300a

0800893c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008944:	2300      	movs	r3, #0
 8008946:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	3301      	adds	r3, #1
 800894c:	60fb      	str	r3, [r7, #12]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	4a13      	ldr	r2, [pc, #76]	; (80089a0 <USB_CoreReset+0x64>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d901      	bls.n	800895a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008956:	2303      	movs	r3, #3
 8008958:	e01b      	b.n	8008992 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	2b00      	cmp	r3, #0
 8008960:	daf2      	bge.n	8008948 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008962:	2300      	movs	r3, #0
 8008964:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	691b      	ldr	r3, [r3, #16]
 800896a:	f043 0201 	orr.w	r2, r3, #1
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	3301      	adds	r3, #1
 8008976:	60fb      	str	r3, [r7, #12]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	4a09      	ldr	r2, [pc, #36]	; (80089a0 <USB_CoreReset+0x64>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d901      	bls.n	8008984 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008980:	2303      	movs	r3, #3
 8008982:	e006      	b.n	8008992 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	691b      	ldr	r3, [r3, #16]
 8008988:	f003 0301 	and.w	r3, r3, #1
 800898c:	2b01      	cmp	r3, #1
 800898e:	d0f0      	beq.n	8008972 <USB_CoreReset+0x36>

  return HAL_OK;
 8008990:	2300      	movs	r3, #0
}
 8008992:	4618      	mov	r0, r3
 8008994:	3714      	adds	r7, #20
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop
 80089a0:	00030d40 	.word	0x00030d40

080089a4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	460b      	mov	r3, r1
 80089ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80089b0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80089b4:	f002 f940 	bl	800ac38 <malloc>
 80089b8:	4603      	mov	r3, r0
 80089ba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d105      	bne.n	80089ce <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80089ca:	2302      	movs	r3, #2
 80089cc:	e066      	b.n	8008a9c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	7c1b      	ldrb	r3, [r3, #16]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d119      	bne.n	8008a12 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80089de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089e2:	2202      	movs	r2, #2
 80089e4:	2181      	movs	r1, #129	; 0x81
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f001 ffad 	bl	800a946 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80089f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089f6:	2202      	movs	r2, #2
 80089f8:	2101      	movs	r1, #1
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f001 ffa3 	bl	800a946 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2210      	movs	r2, #16
 8008a0c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008a10:	e016      	b.n	8008a40 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008a12:	2340      	movs	r3, #64	; 0x40
 8008a14:	2202      	movs	r2, #2
 8008a16:	2181      	movs	r1, #129	; 0x81
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f001 ff94 	bl	800a946 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2201      	movs	r2, #1
 8008a22:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008a24:	2340      	movs	r3, #64	; 0x40
 8008a26:	2202      	movs	r2, #2
 8008a28:	2101      	movs	r1, #1
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f001 ff8b 	bl	800a946 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2201      	movs	r2, #1
 8008a34:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2210      	movs	r2, #16
 8008a3c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008a40:	2308      	movs	r3, #8
 8008a42:	2203      	movs	r2, #3
 8008a44:	2182      	movs	r1, #130	; 0x82
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f001 ff7d 	bl	800a946 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2200      	movs	r2, #0
 8008a62:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	7c1b      	ldrb	r3, [r3, #16]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d109      	bne.n	8008a8a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a80:	2101      	movs	r1, #1
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f002 f84e 	bl	800ab24 <USBD_LL_PrepareReceive>
 8008a88:	e007      	b.n	8008a9a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a90:	2340      	movs	r3, #64	; 0x40
 8008a92:	2101      	movs	r1, #1
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f002 f845 	bl	800ab24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3710      	adds	r7, #16
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	460b      	mov	r3, r1
 8008aae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008ab4:	2181      	movs	r1, #129	; 0x81
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f001 ff6b 	bl	800a992 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008ac2:	2101      	movs	r1, #1
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f001 ff64 	bl	800a992 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008ad2:	2182      	movs	r1, #130	; 0x82
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f001 ff5c 	bl	800a992 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d00e      	beq.n	8008b12 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b04:	4618      	mov	r0, r3
 8008b06:	f002 f89f 	bl	800ac48 <free>
    pdev->pClassData = NULL;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8008b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3710      	adds	r7, #16
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b086      	sub	sp, #24
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b2c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008b32:	2300      	movs	r3, #0
 8008b34:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b36:	2300      	movs	r3, #0
 8008b38:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d03a      	beq.n	8008bbc <USBD_CDC_Setup+0xa0>
 8008b46:	2b20      	cmp	r3, #32
 8008b48:	f040 8097 	bne.w	8008c7a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	88db      	ldrh	r3, [r3, #6]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d029      	beq.n	8008ba8 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	b25b      	sxtb	r3, r3
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	da11      	bge.n	8008b82 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	683a      	ldr	r2, [r7, #0]
 8008b68:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8008b6a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b6c:	683a      	ldr	r2, [r7, #0]
 8008b6e:	88d2      	ldrh	r2, [r2, #6]
 8008b70:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008b72:	6939      	ldr	r1, [r7, #16]
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	88db      	ldrh	r3, [r3, #6]
 8008b78:	461a      	mov	r2, r3
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f001 fa9d 	bl	800a0ba <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8008b80:	e082      	b.n	8008c88 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	785a      	ldrb	r2, [r3, #1]
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	88db      	ldrh	r3, [r3, #6]
 8008b90:	b2da      	uxtb	r2, r3
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008b98:	6939      	ldr	r1, [r7, #16]
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	88db      	ldrh	r3, [r3, #6]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f001 fab6 	bl	800a112 <USBD_CtlPrepareRx>
    break;
 8008ba6:	e06f      	b.n	8008c88 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	683a      	ldr	r2, [r7, #0]
 8008bb2:	7850      	ldrb	r0, [r2, #1]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	6839      	ldr	r1, [r7, #0]
 8008bb8:	4798      	blx	r3
    break;
 8008bba:	e065      	b.n	8008c88 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	785b      	ldrb	r3, [r3, #1]
 8008bc0:	2b0b      	cmp	r3, #11
 8008bc2:	d84f      	bhi.n	8008c64 <USBD_CDC_Setup+0x148>
 8008bc4:	a201      	add	r2, pc, #4	; (adr r2, 8008bcc <USBD_CDC_Setup+0xb0>)
 8008bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bca:	bf00      	nop
 8008bcc:	08008bfd 	.word	0x08008bfd
 8008bd0:	08008c73 	.word	0x08008c73
 8008bd4:	08008c65 	.word	0x08008c65
 8008bd8:	08008c65 	.word	0x08008c65
 8008bdc:	08008c65 	.word	0x08008c65
 8008be0:	08008c65 	.word	0x08008c65
 8008be4:	08008c65 	.word	0x08008c65
 8008be8:	08008c65 	.word	0x08008c65
 8008bec:	08008c65 	.word	0x08008c65
 8008bf0:	08008c65 	.word	0x08008c65
 8008bf4:	08008c25 	.word	0x08008c25
 8008bf8:	08008c4d 	.word	0x08008c4d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c02:	2b03      	cmp	r3, #3
 8008c04:	d107      	bne.n	8008c16 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008c06:	f107 030c 	add.w	r3, r7, #12
 8008c0a:	2202      	movs	r2, #2
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f001 fa53 	bl	800a0ba <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008c14:	e030      	b.n	8008c78 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8008c16:	6839      	ldr	r1, [r7, #0]
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f001 f9dd 	bl	8009fd8 <USBD_CtlError>
        ret = USBD_FAIL;
 8008c1e:	2303      	movs	r3, #3
 8008c20:	75fb      	strb	r3, [r7, #23]
      break;
 8008c22:	e029      	b.n	8008c78 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c2a:	2b03      	cmp	r3, #3
 8008c2c:	d107      	bne.n	8008c3e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008c2e:	f107 030f 	add.w	r3, r7, #15
 8008c32:	2201      	movs	r2, #1
 8008c34:	4619      	mov	r1, r3
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f001 fa3f 	bl	800a0ba <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008c3c:	e01c      	b.n	8008c78 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8008c3e:	6839      	ldr	r1, [r7, #0]
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f001 f9c9 	bl	8009fd8 <USBD_CtlError>
        ret = USBD_FAIL;
 8008c46:	2303      	movs	r3, #3
 8008c48:	75fb      	strb	r3, [r7, #23]
      break;
 8008c4a:	e015      	b.n	8008c78 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c52:	2b03      	cmp	r3, #3
 8008c54:	d00f      	beq.n	8008c76 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8008c56:	6839      	ldr	r1, [r7, #0]
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f001 f9bd 	bl	8009fd8 <USBD_CtlError>
        ret = USBD_FAIL;
 8008c5e:	2303      	movs	r3, #3
 8008c60:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008c62:	e008      	b.n	8008c76 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8008c64:	6839      	ldr	r1, [r7, #0]
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f001 f9b6 	bl	8009fd8 <USBD_CtlError>
      ret = USBD_FAIL;
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	75fb      	strb	r3, [r7, #23]
      break;
 8008c70:	e002      	b.n	8008c78 <USBD_CDC_Setup+0x15c>
      break;
 8008c72:	bf00      	nop
 8008c74:	e008      	b.n	8008c88 <USBD_CDC_Setup+0x16c>
      break;
 8008c76:	bf00      	nop
    }
    break;
 8008c78:	e006      	b.n	8008c88 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8008c7a:	6839      	ldr	r1, [r7, #0]
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f001 f9ab 	bl	8009fd8 <USBD_CtlError>
    ret = USBD_FAIL;
 8008c82:	2303      	movs	r3, #3
 8008c84:	75fb      	strb	r3, [r7, #23]
    break;
 8008c86:	bf00      	nop
  }

  return (uint8_t)ret;
 8008c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3718      	adds	r7, #24
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop

08008c94 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ca6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d101      	bne.n	8008cb6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	e049      	b.n	8008d4a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008cbc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008cbe:	78fa      	ldrb	r2, [r7, #3]
 8008cc0:	6879      	ldr	r1, [r7, #4]
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	4413      	add	r3, r2
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	440b      	add	r3, r1
 8008ccc:	3318      	adds	r3, #24
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d029      	beq.n	8008d28 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008cd4:	78fa      	ldrb	r2, [r7, #3]
 8008cd6:	6879      	ldr	r1, [r7, #4]
 8008cd8:	4613      	mov	r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	4413      	add	r3, r2
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	440b      	add	r3, r1
 8008ce2:	3318      	adds	r3, #24
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	78f9      	ldrb	r1, [r7, #3]
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	460b      	mov	r3, r1
 8008cec:	00db      	lsls	r3, r3, #3
 8008cee:	1a5b      	subs	r3, r3, r1
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	4403      	add	r3, r0
 8008cf4:	3344      	adds	r3, #68	; 0x44
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	fbb2 f1f3 	udiv	r1, r2, r3
 8008cfc:	fb03 f301 	mul.w	r3, r3, r1
 8008d00:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d110      	bne.n	8008d28 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008d06:	78fa      	ldrb	r2, [r7, #3]
 8008d08:	6879      	ldr	r1, [r7, #4]
 8008d0a:	4613      	mov	r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	4413      	add	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	440b      	add	r3, r1
 8008d14:	3318      	adds	r3, #24
 8008d16:	2200      	movs	r2, #0
 8008d18:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008d1a:	78f9      	ldrb	r1, [r7, #3]
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	2200      	movs	r2, #0
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f001 fede 	bl	800aae2 <USBD_LL_Transmit>
 8008d26:	e00f      	b.n	8008d48 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d36:	691b      	ldr	r3, [r3, #16]
 8008d38:	68ba      	ldr	r2, [r7, #8]
 8008d3a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008d3e:	68ba      	ldr	r2, [r7, #8]
 8008d40:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008d44:	78fa      	ldrb	r2, [r7, #3]
 8008d46:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3710      	adds	r7, #16
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b084      	sub	sp, #16
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d64:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d101      	bne.n	8008d74 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008d70:	2303      	movs	r3, #3
 8008d72:	e015      	b.n	8008da0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008d74:	78fb      	ldrb	r3, [r7, #3]
 8008d76:	4619      	mov	r1, r3
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f001 fef4 	bl	800ab66 <USBD_LL_GetRxDataSize>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008d9a:	4611      	mov	r1, r2
 8008d9c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008d9e:	2300      	movs	r3, #0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3710      	adds	r7, #16
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008db6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d015      	beq.n	8008dee <USBD_CDC_EP0_RxReady+0x46>
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008dc8:	2bff      	cmp	r3, #255	; 0xff
 8008dca:	d010      	beq.n	8008dee <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008dda:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008ddc:	68fa      	ldr	r2, [r7, #12]
 8008dde:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008de2:	b292      	uxth	r2, r2
 8008de4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	22ff      	movs	r2, #255	; 0xff
 8008dea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3710      	adds	r7, #16
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2243      	movs	r2, #67	; 0x43
 8008e04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008e06:	4b03      	ldr	r3, [pc, #12]	; (8008e14 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	370c      	adds	r7, #12
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr
 8008e14:	20000094 	.word	0x20000094

08008e18 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2243      	movs	r2, #67	; 0x43
 8008e24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008e26:	4b03      	ldr	r3, [pc, #12]	; (8008e34 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	370c      	adds	r7, #12
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr
 8008e34:	20000050 	.word	0x20000050

08008e38 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2243      	movs	r2, #67	; 0x43
 8008e44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008e46:	4b03      	ldr	r3, [pc, #12]	; (8008e54 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	370c      	adds	r7, #12
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr
 8008e54:	200000d8 	.word	0x200000d8

08008e58 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	220a      	movs	r2, #10
 8008e64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008e66:	4b03      	ldr	r3, [pc, #12]	; (8008e74 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	370c      	adds	r7, #12
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr
 8008e74:	2000000c 	.word	0x2000000c

08008e78 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d101      	bne.n	8008e8c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	e004      	b.n	8008e96 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	683a      	ldr	r2, [r7, #0]
 8008e90:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	370c      	adds	r7, #12
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr

08008ea2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008ea2:	b480      	push	{r7}
 8008ea4:	b087      	sub	sp, #28
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	60f8      	str	r0, [r7, #12]
 8008eaa:	60b9      	str	r1, [r7, #8]
 8008eac:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008eb4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	68ba      	ldr	r2, [r7, #8]
 8008eba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	371c      	adds	r7, #28
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ee4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	683a      	ldr	r2, [r7, #0]
 8008eea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008eee:	2300      	movs	r3, #0
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3714      	adds	r7, #20
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f0a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d101      	bne.n	8008f1e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008f1a:	2303      	movs	r3, #3
 8008f1c:	e01a      	b.n	8008f54 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d114      	bne.n	8008f52 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008f46:	2181      	movs	r1, #129	; 0x81
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f001 fdca 	bl	800aae2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f6a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d101      	bne.n	8008f7a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008f76:	2303      	movs	r3, #3
 8008f78:	e016      	b.n	8008fa8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	7c1b      	ldrb	r3, [r3, #16]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d109      	bne.n	8008f96 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f8c:	2101      	movs	r1, #1
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f001 fdc8 	bl	800ab24 <USBD_LL_PrepareReceive>
 8008f94:	e007      	b.n	8008fa6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f9c:	2340      	movs	r3, #64	; 0x40
 8008f9e:	2101      	movs	r1, #1
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f001 fdbf 	bl	800ab24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3710      	adds	r7, #16
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b086      	sub	sp, #24
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	4613      	mov	r3, r2
 8008fbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d101      	bne.n	8008fc8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008fc4:	2303      	movs	r3, #3
 8008fc6:	e025      	b.n	8009014 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d003      	beq.n	8008fda <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d003      	beq.n	8008fec <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d003      	beq.n	8008ffa <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	68ba      	ldr	r2, [r7, #8]
 8008ff6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	79fa      	ldrb	r2, [r7, #7]
 8009006:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009008:	68f8      	ldr	r0, [r7, #12]
 800900a:	f001 fc35 	bl	800a878 <USBD_LL_Init>
 800900e:	4603      	mov	r3, r0
 8009010:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009012:	7dfb      	ldrb	r3, [r7, #23]
}
 8009014:	4618      	mov	r0, r3
 8009016:	3718      	adds	r7, #24
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009026:	2300      	movs	r3, #0
 8009028:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d101      	bne.n	8009034 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009030:	2303      	movs	r3, #3
 8009032:	e010      	b.n	8009056 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	683a      	ldr	r2, [r7, #0]
 8009038:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009044:	f107 020e 	add.w	r2, r7, #14
 8009048:	4610      	mov	r0, r2
 800904a:	4798      	blx	r3
 800904c:	4602      	mov	r2, r0
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b082      	sub	sp, #8
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f001 fc52 	bl	800a910 <USBD_LL_Start>
 800906c:	4603      	mov	r3, r0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3708      	adds	r7, #8
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}

08009076 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009076:	b480      	push	{r7}
 8009078:	b083      	sub	sp, #12
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	370c      	adds	r7, #12
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	460b      	mov	r3, r1
 8009096:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009098:	2303      	movs	r3, #3
 800909a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d009      	beq.n	80090ba <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	78fa      	ldrb	r2, [r7, #3]
 80090b0:	4611      	mov	r1, r2
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	4798      	blx	r3
 80090b6:	4603      	mov	r3, r0
 80090b8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80090ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3710      	adds	r7, #16
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	460b      	mov	r3, r1
 80090ce:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d007      	beq.n	80090ea <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	78fa      	ldrb	r2, [r7, #3]
 80090e4:	4611      	mov	r1, r2
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	4798      	blx	r3
  }

  return USBD_OK;
 80090ea:	2300      	movs	r3, #0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009104:	6839      	ldr	r1, [r7, #0]
 8009106:	4618      	mov	r0, r3
 8009108:	f000 ff2c 	bl	8009f64 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2201      	movs	r2, #1
 8009110:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800911a:	461a      	mov	r2, r3
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009128:	f003 031f 	and.w	r3, r3, #31
 800912c:	2b01      	cmp	r3, #1
 800912e:	d00e      	beq.n	800914e <USBD_LL_SetupStage+0x5a>
 8009130:	2b01      	cmp	r3, #1
 8009132:	d302      	bcc.n	800913a <USBD_LL_SetupStage+0x46>
 8009134:	2b02      	cmp	r3, #2
 8009136:	d014      	beq.n	8009162 <USBD_LL_SetupStage+0x6e>
 8009138:	e01d      	b.n	8009176 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009140:	4619      	mov	r1, r3
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 fa18 	bl	8009578 <USBD_StdDevReq>
 8009148:	4603      	mov	r3, r0
 800914a:	73fb      	strb	r3, [r7, #15]
      break;
 800914c:	e020      	b.n	8009190 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009154:	4619      	mov	r1, r3
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 fa7c 	bl	8009654 <USBD_StdItfReq>
 800915c:	4603      	mov	r3, r0
 800915e:	73fb      	strb	r3, [r7, #15]
      break;
 8009160:	e016      	b.n	8009190 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009168:	4619      	mov	r1, r3
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 fab8 	bl	80096e0 <USBD_StdEPReq>
 8009170:	4603      	mov	r3, r0
 8009172:	73fb      	strb	r3, [r7, #15]
      break;
 8009174:	e00c      	b.n	8009190 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800917c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009180:	b2db      	uxtb	r3, r3
 8009182:	4619      	mov	r1, r3
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f001 fc23 	bl	800a9d0 <USBD_LL_StallEP>
 800918a:	4603      	mov	r3, r0
 800918c:	73fb      	strb	r3, [r7, #15]
      break;
 800918e:	bf00      	nop
  }

  return ret;
 8009190:	7bfb      	ldrb	r3, [r7, #15]
}
 8009192:	4618      	mov	r0, r3
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800919a:	b580      	push	{r7, lr}
 800919c:	b086      	sub	sp, #24
 800919e:	af00      	add	r7, sp, #0
 80091a0:	60f8      	str	r0, [r7, #12]
 80091a2:	460b      	mov	r3, r1
 80091a4:	607a      	str	r2, [r7, #4]
 80091a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80091a8:	7afb      	ldrb	r3, [r7, #11]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d137      	bne.n	800921e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80091b4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80091bc:	2b03      	cmp	r3, #3
 80091be:	d14a      	bne.n	8009256 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	689a      	ldr	r2, [r3, #8]
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d913      	bls.n	80091f4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	689a      	ldr	r2, [r3, #8]
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	1ad2      	subs	r2, r2, r3
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	68da      	ldr	r2, [r3, #12]
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	4293      	cmp	r3, r2
 80091e4:	bf28      	it	cs
 80091e6:	4613      	movcs	r3, r2
 80091e8:	461a      	mov	r2, r3
 80091ea:	6879      	ldr	r1, [r7, #4]
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f000 ffad 	bl	800a14c <USBD_CtlContinueRx>
 80091f2:	e030      	b.n	8009256 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091fa:	691b      	ldr	r3, [r3, #16]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d00a      	beq.n	8009216 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009206:	2b03      	cmp	r3, #3
 8009208:	d105      	bne.n	8009216 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009210:	691b      	ldr	r3, [r3, #16]
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8009216:	68f8      	ldr	r0, [r7, #12]
 8009218:	f000 ffa9 	bl	800a16e <USBD_CtlSendStatus>
 800921c:	e01b      	b.n	8009256 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009224:	699b      	ldr	r3, [r3, #24]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d013      	beq.n	8009252 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009230:	2b03      	cmp	r3, #3
 8009232:	d10e      	bne.n	8009252 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800923a:	699b      	ldr	r3, [r3, #24]
 800923c:	7afa      	ldrb	r2, [r7, #11]
 800923e:	4611      	mov	r1, r2
 8009240:	68f8      	ldr	r0, [r7, #12]
 8009242:	4798      	blx	r3
 8009244:	4603      	mov	r3, r0
 8009246:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8009248:	7dfb      	ldrb	r3, [r7, #23]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d003      	beq.n	8009256 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800924e:	7dfb      	ldrb	r3, [r7, #23]
 8009250:	e002      	b.n	8009258 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009252:	2303      	movs	r3, #3
 8009254:	e000      	b.n	8009258 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8009256:	2300      	movs	r3, #0
}
 8009258:	4618      	mov	r0, r3
 800925a:	3718      	adds	r7, #24
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b086      	sub	sp, #24
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	460b      	mov	r3, r1
 800926a:	607a      	str	r2, [r7, #4]
 800926c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800926e:	7afb      	ldrb	r3, [r7, #11]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d16a      	bne.n	800934a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	3314      	adds	r3, #20
 8009278:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009280:	2b02      	cmp	r3, #2
 8009282:	d155      	bne.n	8009330 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	689a      	ldr	r2, [r3, #8]
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	68db      	ldr	r3, [r3, #12]
 800928c:	429a      	cmp	r2, r3
 800928e:	d914      	bls.n	80092ba <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	689a      	ldr	r2, [r3, #8]
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	1ad2      	subs	r2, r2, r3
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	461a      	mov	r2, r3
 80092a4:	6879      	ldr	r1, [r7, #4]
 80092a6:	68f8      	ldr	r0, [r7, #12]
 80092a8:	f000 ff22 	bl	800a0f0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092ac:	2300      	movs	r3, #0
 80092ae:	2200      	movs	r2, #0
 80092b0:	2100      	movs	r1, #0
 80092b2:	68f8      	ldr	r0, [r7, #12]
 80092b4:	f001 fc36 	bl	800ab24 <USBD_LL_PrepareReceive>
 80092b8:	e03a      	b.n	8009330 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	68da      	ldr	r2, [r3, #12]
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d11c      	bne.n	8009300 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	685a      	ldr	r2, [r3, #4]
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d316      	bcc.n	8009300 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	685a      	ldr	r2, [r3, #4]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80092dc:	429a      	cmp	r2, r3
 80092de:	d20f      	bcs.n	8009300 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80092e0:	2200      	movs	r2, #0
 80092e2:	2100      	movs	r1, #0
 80092e4:	68f8      	ldr	r0, [r7, #12]
 80092e6:	f000 ff03 	bl	800a0f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2200      	movs	r2, #0
 80092ee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092f2:	2300      	movs	r3, #0
 80092f4:	2200      	movs	r2, #0
 80092f6:	2100      	movs	r1, #0
 80092f8:	68f8      	ldr	r0, [r7, #12]
 80092fa:	f001 fc13 	bl	800ab24 <USBD_LL_PrepareReceive>
 80092fe:	e017      	b.n	8009330 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00a      	beq.n	8009322 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009312:	2b03      	cmp	r3, #3
 8009314:	d105      	bne.n	8009322 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	68f8      	ldr	r0, [r7, #12]
 8009320:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009322:	2180      	movs	r1, #128	; 0x80
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f001 fb53 	bl	800a9d0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800932a:	68f8      	ldr	r0, [r7, #12]
 800932c:	f000 ff32 	bl	800a194 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009336:	2b01      	cmp	r3, #1
 8009338:	d123      	bne.n	8009382 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800933a:	68f8      	ldr	r0, [r7, #12]
 800933c:	f7ff fe9b 	bl	8009076 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2200      	movs	r2, #0
 8009344:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009348:	e01b      	b.n	8009382 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009350:	695b      	ldr	r3, [r3, #20]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d013      	beq.n	800937e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800935c:	2b03      	cmp	r3, #3
 800935e:	d10e      	bne.n	800937e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009366:	695b      	ldr	r3, [r3, #20]
 8009368:	7afa      	ldrb	r2, [r7, #11]
 800936a:	4611      	mov	r1, r2
 800936c:	68f8      	ldr	r0, [r7, #12]
 800936e:	4798      	blx	r3
 8009370:	4603      	mov	r3, r0
 8009372:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8009374:	7dfb      	ldrb	r3, [r7, #23]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d003      	beq.n	8009382 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800937a:	7dfb      	ldrb	r3, [r7, #23]
 800937c:	e002      	b.n	8009384 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800937e:	2303      	movs	r3, #3
 8009380:	e000      	b.n	8009384 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8009382:	2300      	movs	r3, #0
}
 8009384:	4618      	mov	r0, r3
 8009386:	3718      	adds	r7, #24
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b082      	sub	sp, #8
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2201      	movs	r2, #1
 8009398:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d009      	beq.n	80093d0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	6852      	ldr	r2, [r2, #4]
 80093c8:	b2d2      	uxtb	r2, r2
 80093ca:	4611      	mov	r1, r2
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80093d0:	2340      	movs	r3, #64	; 0x40
 80093d2:	2200      	movs	r2, #0
 80093d4:	2100      	movs	r1, #0
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f001 fab5 	bl	800a946 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2201      	movs	r2, #1
 80093e0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2240      	movs	r2, #64	; 0x40
 80093e8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80093ec:	2340      	movs	r3, #64	; 0x40
 80093ee:	2200      	movs	r2, #0
 80093f0:	2180      	movs	r1, #128	; 0x80
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f001 faa7 	bl	800a946 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2201      	movs	r2, #1
 80093fc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2240      	movs	r2, #64	; 0x40
 8009402:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009404:	2300      	movs	r3, #0
}
 8009406:	4618      	mov	r0, r3
 8009408:	3708      	adds	r7, #8
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}

0800940e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800940e:	b480      	push	{r7}
 8009410:	b083      	sub	sp, #12
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
 8009416:	460b      	mov	r3, r1
 8009418:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	78fa      	ldrb	r2, [r7, #3]
 800941e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	370c      	adds	r7, #12
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr

0800942e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800942e:	b480      	push	{r7}
 8009430:	b083      	sub	sp, #12
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2204      	movs	r2, #4
 8009446:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800944a:	2300      	movs	r3, #0
}
 800944c:	4618      	mov	r0, r3
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009458:	b480      	push	{r7}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009466:	2b04      	cmp	r3, #4
 8009468:	d105      	bne.n	8009476 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009476:	2300      	movs	r3, #0
}
 8009478:	4618      	mov	r0, r3
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009492:	2b03      	cmp	r3, #3
 8009494:	d10b      	bne.n	80094ae <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800949c:	69db      	ldr	r3, [r3, #28]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d005      	beq.n	80094ae <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094a8:	69db      	ldr	r3, [r3, #28]
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3708      	adds	r7, #8
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	460b      	mov	r3, r1
 80094c2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	370c      	adds	r7, #12
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr

080094d2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80094d2:	b480      	push	{r7}
 80094d4:	b083      	sub	sp, #12
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
 80094da:	460b      	mov	r3, r1
 80094dc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80094de:	2300      	movs	r3, #0
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80094f4:	2300      	movs	r3, #0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	370c      	adds	r7, #12
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr

08009502 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b082      	sub	sp, #8
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2201      	movs	r2, #1
 800950e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009518:	2b00      	cmp	r3, #0
 800951a:	d009      	beq.n	8009530 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	6852      	ldr	r2, [r2, #4]
 8009528:	b2d2      	uxtb	r2, r2
 800952a:	4611      	mov	r1, r2
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	4798      	blx	r3
  }

  return USBD_OK;
 8009530:	2300      	movs	r3, #0
}
 8009532:	4618      	mov	r0, r3
 8009534:	3708      	adds	r7, #8
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800953a:	b480      	push	{r7}
 800953c:	b087      	sub	sp, #28
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	3301      	adds	r3, #1
 8009550:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009558:	8a3b      	ldrh	r3, [r7, #16]
 800955a:	021b      	lsls	r3, r3, #8
 800955c:	b21a      	sxth	r2, r3
 800955e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009562:	4313      	orrs	r3, r2
 8009564:	b21b      	sxth	r3, r3
 8009566:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009568:	89fb      	ldrh	r3, [r7, #14]
}
 800956a:	4618      	mov	r0, r3
 800956c:	371c      	adds	r7, #28
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr
	...

08009578 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009582:	2300      	movs	r3, #0
 8009584:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800958e:	2b20      	cmp	r3, #32
 8009590:	d004      	beq.n	800959c <USBD_StdDevReq+0x24>
 8009592:	2b40      	cmp	r3, #64	; 0x40
 8009594:	d002      	beq.n	800959c <USBD_StdDevReq+0x24>
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00a      	beq.n	80095b0 <USBD_StdDevReq+0x38>
 800959a:	e050      	b.n	800963e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095a2:	689b      	ldr	r3, [r3, #8]
 80095a4:	6839      	ldr	r1, [r7, #0]
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	4798      	blx	r3
 80095aa:	4603      	mov	r3, r0
 80095ac:	73fb      	strb	r3, [r7, #15]
    break;
 80095ae:	e04b      	b.n	8009648 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	785b      	ldrb	r3, [r3, #1]
 80095b4:	2b09      	cmp	r3, #9
 80095b6:	d83c      	bhi.n	8009632 <USBD_StdDevReq+0xba>
 80095b8:	a201      	add	r2, pc, #4	; (adr r2, 80095c0 <USBD_StdDevReq+0x48>)
 80095ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095be:	bf00      	nop
 80095c0:	08009615 	.word	0x08009615
 80095c4:	08009629 	.word	0x08009629
 80095c8:	08009633 	.word	0x08009633
 80095cc:	0800961f 	.word	0x0800961f
 80095d0:	08009633 	.word	0x08009633
 80095d4:	080095f3 	.word	0x080095f3
 80095d8:	080095e9 	.word	0x080095e9
 80095dc:	08009633 	.word	0x08009633
 80095e0:	0800960b 	.word	0x0800960b
 80095e4:	080095fd 	.word	0x080095fd
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80095e8:	6839      	ldr	r1, [r7, #0]
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 f9ce 	bl	800998c <USBD_GetDescriptor>
      break;
 80095f0:	e024      	b.n	800963c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80095f2:	6839      	ldr	r1, [r7, #0]
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 fb33 	bl	8009c60 <USBD_SetAddress>
      break;
 80095fa:	e01f      	b.n	800963c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80095fc:	6839      	ldr	r1, [r7, #0]
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 fb70 	bl	8009ce4 <USBD_SetConfig>
 8009604:	4603      	mov	r3, r0
 8009606:	73fb      	strb	r3, [r7, #15]
      break;
 8009608:	e018      	b.n	800963c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800960a:	6839      	ldr	r1, [r7, #0]
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 fc0d 	bl	8009e2c <USBD_GetConfig>
      break;
 8009612:	e013      	b.n	800963c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8009614:	6839      	ldr	r1, [r7, #0]
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 fc3c 	bl	8009e94 <USBD_GetStatus>
      break;
 800961c:	e00e      	b.n	800963c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800961e:	6839      	ldr	r1, [r7, #0]
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 fc6a 	bl	8009efa <USBD_SetFeature>
      break;
 8009626:	e009      	b.n	800963c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8009628:	6839      	ldr	r1, [r7, #0]
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 fc79 	bl	8009f22 <USBD_ClrFeature>
      break;
 8009630:	e004      	b.n	800963c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8009632:	6839      	ldr	r1, [r7, #0]
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 fccf 	bl	8009fd8 <USBD_CtlError>
      break;
 800963a:	bf00      	nop
    }
    break;
 800963c:	e004      	b.n	8009648 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800963e:	6839      	ldr	r1, [r7, #0]
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 fcc9 	bl	8009fd8 <USBD_CtlError>
    break;
 8009646:	bf00      	nop
  }

  return ret;
 8009648:	7bfb      	ldrb	r3, [r7, #15]
}
 800964a:	4618      	mov	r0, r3
 800964c:	3710      	adds	r7, #16
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop

08009654 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800965e:	2300      	movs	r3, #0
 8009660:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800966a:	2b20      	cmp	r3, #32
 800966c:	d003      	beq.n	8009676 <USBD_StdItfReq+0x22>
 800966e:	2b40      	cmp	r3, #64	; 0x40
 8009670:	d001      	beq.n	8009676 <USBD_StdItfReq+0x22>
 8009672:	2b00      	cmp	r3, #0
 8009674:	d12a      	bne.n	80096cc <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800967c:	3b01      	subs	r3, #1
 800967e:	2b02      	cmp	r3, #2
 8009680:	d81d      	bhi.n	80096be <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	889b      	ldrh	r3, [r3, #4]
 8009686:	b2db      	uxtb	r3, r3
 8009688:	2b01      	cmp	r3, #1
 800968a:	d813      	bhi.n	80096b4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	6839      	ldr	r1, [r7, #0]
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	4798      	blx	r3
 800969a:	4603      	mov	r3, r0
 800969c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	88db      	ldrh	r3, [r3, #6]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d110      	bne.n	80096c8 <USBD_StdItfReq+0x74>
 80096a6:	7bfb      	ldrb	r3, [r7, #15]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d10d      	bne.n	80096c8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 fd5e 	bl	800a16e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80096b2:	e009      	b.n	80096c8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80096b4:	6839      	ldr	r1, [r7, #0]
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 fc8e 	bl	8009fd8 <USBD_CtlError>
      break;
 80096bc:	e004      	b.n	80096c8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80096be:	6839      	ldr	r1, [r7, #0]
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 fc89 	bl	8009fd8 <USBD_CtlError>
      break;
 80096c6:	e000      	b.n	80096ca <USBD_StdItfReq+0x76>
      break;
 80096c8:	bf00      	nop
    }
    break;
 80096ca:	e004      	b.n	80096d6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80096cc:	6839      	ldr	r1, [r7, #0]
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 fc82 	bl	8009fd8 <USBD_CtlError>
    break;
 80096d4:	bf00      	nop
  }

  return ret;
 80096d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80096ea:	2300      	movs	r3, #0
 80096ec:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	889b      	ldrh	r3, [r3, #4]
 80096f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096fc:	2b20      	cmp	r3, #32
 80096fe:	d004      	beq.n	800970a <USBD_StdEPReq+0x2a>
 8009700:	2b40      	cmp	r3, #64	; 0x40
 8009702:	d002      	beq.n	800970a <USBD_StdEPReq+0x2a>
 8009704:	2b00      	cmp	r3, #0
 8009706:	d00a      	beq.n	800971e <USBD_StdEPReq+0x3e>
 8009708:	e135      	b.n	8009976 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009710:	689b      	ldr	r3, [r3, #8]
 8009712:	6839      	ldr	r1, [r7, #0]
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	4798      	blx	r3
 8009718:	4603      	mov	r3, r0
 800971a:	73fb      	strb	r3, [r7, #15]
    break;
 800971c:	e130      	b.n	8009980 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	785b      	ldrb	r3, [r3, #1]
 8009722:	2b01      	cmp	r3, #1
 8009724:	d03e      	beq.n	80097a4 <USBD_StdEPReq+0xc4>
 8009726:	2b03      	cmp	r3, #3
 8009728:	d002      	beq.n	8009730 <USBD_StdEPReq+0x50>
 800972a:	2b00      	cmp	r3, #0
 800972c:	d077      	beq.n	800981e <USBD_StdEPReq+0x13e>
 800972e:	e11c      	b.n	800996a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009736:	2b02      	cmp	r3, #2
 8009738:	d002      	beq.n	8009740 <USBD_StdEPReq+0x60>
 800973a:	2b03      	cmp	r3, #3
 800973c:	d015      	beq.n	800976a <USBD_StdEPReq+0x8a>
 800973e:	e02b      	b.n	8009798 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009740:	7bbb      	ldrb	r3, [r7, #14]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d00c      	beq.n	8009760 <USBD_StdEPReq+0x80>
 8009746:	7bbb      	ldrb	r3, [r7, #14]
 8009748:	2b80      	cmp	r3, #128	; 0x80
 800974a:	d009      	beq.n	8009760 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800974c:	7bbb      	ldrb	r3, [r7, #14]
 800974e:	4619      	mov	r1, r3
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f001 f93d 	bl	800a9d0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009756:	2180      	movs	r1, #128	; 0x80
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f001 f939 	bl	800a9d0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800975e:	e020      	b.n	80097a2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8009760:	6839      	ldr	r1, [r7, #0]
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 fc38 	bl	8009fd8 <USBD_CtlError>
        break;
 8009768:	e01b      	b.n	80097a2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	885b      	ldrh	r3, [r3, #2]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d10e      	bne.n	8009790 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009772:	7bbb      	ldrb	r3, [r7, #14]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d00b      	beq.n	8009790 <USBD_StdEPReq+0xb0>
 8009778:	7bbb      	ldrb	r3, [r7, #14]
 800977a:	2b80      	cmp	r3, #128	; 0x80
 800977c:	d008      	beq.n	8009790 <USBD_StdEPReq+0xb0>
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	88db      	ldrh	r3, [r3, #6]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d104      	bne.n	8009790 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8009786:	7bbb      	ldrb	r3, [r7, #14]
 8009788:	4619      	mov	r1, r3
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f001 f920 	bl	800a9d0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 fcec 	bl	800a16e <USBD_CtlSendStatus>

        break;
 8009796:	e004      	b.n	80097a2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8009798:	6839      	ldr	r1, [r7, #0]
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 fc1c 	bl	8009fd8 <USBD_CtlError>
        break;
 80097a0:	bf00      	nop
      }
      break;
 80097a2:	e0e7      	b.n	8009974 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	d002      	beq.n	80097b4 <USBD_StdEPReq+0xd4>
 80097ae:	2b03      	cmp	r3, #3
 80097b0:	d015      	beq.n	80097de <USBD_StdEPReq+0xfe>
 80097b2:	e02d      	b.n	8009810 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097b4:	7bbb      	ldrb	r3, [r7, #14]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00c      	beq.n	80097d4 <USBD_StdEPReq+0xf4>
 80097ba:	7bbb      	ldrb	r3, [r7, #14]
 80097bc:	2b80      	cmp	r3, #128	; 0x80
 80097be:	d009      	beq.n	80097d4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80097c0:	7bbb      	ldrb	r3, [r7, #14]
 80097c2:	4619      	mov	r1, r3
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f001 f903 	bl	800a9d0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80097ca:	2180      	movs	r1, #128	; 0x80
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f001 f8ff 	bl	800a9d0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80097d2:	e023      	b.n	800981c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80097d4:	6839      	ldr	r1, [r7, #0]
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 fbfe 	bl	8009fd8 <USBD_CtlError>
        break;
 80097dc:	e01e      	b.n	800981c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	885b      	ldrh	r3, [r3, #2]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d119      	bne.n	800981a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80097e6:	7bbb      	ldrb	r3, [r7, #14]
 80097e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d004      	beq.n	80097fa <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80097f0:	7bbb      	ldrb	r3, [r7, #14]
 80097f2:	4619      	mov	r1, r3
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f001 f90a 	bl	800aa0e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 fcb7 	bl	800a16e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	6839      	ldr	r1, [r7, #0]
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	4798      	blx	r3
        }
        break;
 800980e:	e004      	b.n	800981a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8009810:	6839      	ldr	r1, [r7, #0]
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 fbe0 	bl	8009fd8 <USBD_CtlError>
        break;
 8009818:	e000      	b.n	800981c <USBD_StdEPReq+0x13c>
        break;
 800981a:	bf00      	nop
      }
      break;
 800981c:	e0aa      	b.n	8009974 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009824:	2b02      	cmp	r3, #2
 8009826:	d002      	beq.n	800982e <USBD_StdEPReq+0x14e>
 8009828:	2b03      	cmp	r3, #3
 800982a:	d032      	beq.n	8009892 <USBD_StdEPReq+0x1b2>
 800982c:	e097      	b.n	800995e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800982e:	7bbb      	ldrb	r3, [r7, #14]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d007      	beq.n	8009844 <USBD_StdEPReq+0x164>
 8009834:	7bbb      	ldrb	r3, [r7, #14]
 8009836:	2b80      	cmp	r3, #128	; 0x80
 8009838:	d004      	beq.n	8009844 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800983a:	6839      	ldr	r1, [r7, #0]
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 fbcb 	bl	8009fd8 <USBD_CtlError>
          break;
 8009842:	e091      	b.n	8009968 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009844:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009848:	2b00      	cmp	r3, #0
 800984a:	da0b      	bge.n	8009864 <USBD_StdEPReq+0x184>
 800984c:	7bbb      	ldrb	r3, [r7, #14]
 800984e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009852:	4613      	mov	r3, r2
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	4413      	add	r3, r2
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	3310      	adds	r3, #16
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	4413      	add	r3, r2
 8009860:	3304      	adds	r3, #4
 8009862:	e00b      	b.n	800987c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009864:	7bbb      	ldrb	r3, [r7, #14]
 8009866:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800986a:	4613      	mov	r3, r2
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	4413      	add	r3, r2
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	4413      	add	r3, r2
 800987a:	3304      	adds	r3, #4
 800987c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	2200      	movs	r2, #0
 8009882:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	2202      	movs	r2, #2
 8009888:	4619      	mov	r1, r3
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 fc15 	bl	800a0ba <USBD_CtlSendData>
        break;
 8009890:	e06a      	b.n	8009968 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8009892:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009896:	2b00      	cmp	r3, #0
 8009898:	da11      	bge.n	80098be <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800989a:	7bbb      	ldrb	r3, [r7, #14]
 800989c:	f003 020f 	and.w	r2, r3, #15
 80098a0:	6879      	ldr	r1, [r7, #4]
 80098a2:	4613      	mov	r3, r2
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	4413      	add	r3, r2
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	440b      	add	r3, r1
 80098ac:	3324      	adds	r3, #36	; 0x24
 80098ae:	881b      	ldrh	r3, [r3, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d117      	bne.n	80098e4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80098b4:	6839      	ldr	r1, [r7, #0]
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 fb8e 	bl	8009fd8 <USBD_CtlError>
            break;
 80098bc:	e054      	b.n	8009968 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80098be:	7bbb      	ldrb	r3, [r7, #14]
 80098c0:	f003 020f 	and.w	r2, r3, #15
 80098c4:	6879      	ldr	r1, [r7, #4]
 80098c6:	4613      	mov	r3, r2
 80098c8:	009b      	lsls	r3, r3, #2
 80098ca:	4413      	add	r3, r2
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	440b      	add	r3, r1
 80098d0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80098d4:	881b      	ldrh	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d104      	bne.n	80098e4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80098da:	6839      	ldr	r1, [r7, #0]
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 fb7b 	bl	8009fd8 <USBD_CtlError>
            break;
 80098e2:	e041      	b.n	8009968 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	da0b      	bge.n	8009904 <USBD_StdEPReq+0x224>
 80098ec:	7bbb      	ldrb	r3, [r7, #14]
 80098ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098f2:	4613      	mov	r3, r2
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	4413      	add	r3, r2
 80098f8:	009b      	lsls	r3, r3, #2
 80098fa:	3310      	adds	r3, #16
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	4413      	add	r3, r2
 8009900:	3304      	adds	r3, #4
 8009902:	e00b      	b.n	800991c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009904:	7bbb      	ldrb	r3, [r7, #14]
 8009906:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800990a:	4613      	mov	r3, r2
 800990c:	009b      	lsls	r3, r3, #2
 800990e:	4413      	add	r3, r2
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	4413      	add	r3, r2
 800991a:	3304      	adds	r3, #4
 800991c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800991e:	7bbb      	ldrb	r3, [r7, #14]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d002      	beq.n	800992a <USBD_StdEPReq+0x24a>
 8009924:	7bbb      	ldrb	r3, [r7, #14]
 8009926:	2b80      	cmp	r3, #128	; 0x80
 8009928:	d103      	bne.n	8009932 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	2200      	movs	r2, #0
 800992e:	601a      	str	r2, [r3, #0]
 8009930:	e00e      	b.n	8009950 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009932:	7bbb      	ldrb	r3, [r7, #14]
 8009934:	4619      	mov	r1, r3
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f001 f888 	bl	800aa4c <USBD_LL_IsStallEP>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d003      	beq.n	800994a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	2201      	movs	r2, #1
 8009946:	601a      	str	r2, [r3, #0]
 8009948:	e002      	b.n	8009950 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	2200      	movs	r2, #0
 800994e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	2202      	movs	r2, #2
 8009954:	4619      	mov	r1, r3
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 fbaf 	bl	800a0ba <USBD_CtlSendData>
          break;
 800995c:	e004      	b.n	8009968 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800995e:	6839      	ldr	r1, [r7, #0]
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 fb39 	bl	8009fd8 <USBD_CtlError>
        break;
 8009966:	bf00      	nop
      }
      break;
 8009968:	e004      	b.n	8009974 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800996a:	6839      	ldr	r1, [r7, #0]
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 fb33 	bl	8009fd8 <USBD_CtlError>
      break;
 8009972:	bf00      	nop
    }
    break;
 8009974:	e004      	b.n	8009980 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8009976:	6839      	ldr	r1, [r7, #0]
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 fb2d 	bl	8009fd8 <USBD_CtlError>
    break;
 800997e:	bf00      	nop
  }

  return ret;
 8009980:	7bfb      	ldrb	r3, [r7, #15]
}
 8009982:	4618      	mov	r0, r3
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
	...

0800998c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009996:	2300      	movs	r3, #0
 8009998:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800999a:	2300      	movs	r3, #0
 800999c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800999e:	2300      	movs	r3, #0
 80099a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	885b      	ldrh	r3, [r3, #2]
 80099a6:	0a1b      	lsrs	r3, r3, #8
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	3b01      	subs	r3, #1
 80099ac:	2b06      	cmp	r3, #6
 80099ae:	f200 8128 	bhi.w	8009c02 <USBD_GetDescriptor+0x276>
 80099b2:	a201      	add	r2, pc, #4	; (adr r2, 80099b8 <USBD_GetDescriptor+0x2c>)
 80099b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b8:	080099d5 	.word	0x080099d5
 80099bc:	080099ed 	.word	0x080099ed
 80099c0:	08009a2d 	.word	0x08009a2d
 80099c4:	08009c03 	.word	0x08009c03
 80099c8:	08009c03 	.word	0x08009c03
 80099cc:	08009ba3 	.word	0x08009ba3
 80099d0:	08009bcf 	.word	0x08009bcf
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	7c12      	ldrb	r2, [r2, #16]
 80099e0:	f107 0108 	add.w	r1, r7, #8
 80099e4:	4610      	mov	r0, r2
 80099e6:	4798      	blx	r3
 80099e8:	60f8      	str	r0, [r7, #12]
    break;
 80099ea:	e112      	b.n	8009c12 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	7c1b      	ldrb	r3, [r3, #16]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d10d      	bne.n	8009a10 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099fc:	f107 0208 	add.w	r2, r7, #8
 8009a00:	4610      	mov	r0, r2
 8009a02:	4798      	blx	r3
 8009a04:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	2202      	movs	r2, #2
 8009a0c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8009a0e:	e100      	b.n	8009c12 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a18:	f107 0208 	add.w	r2, r7, #8
 8009a1c:	4610      	mov	r0, r2
 8009a1e:	4798      	blx	r3
 8009a20:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	3301      	adds	r3, #1
 8009a26:	2202      	movs	r2, #2
 8009a28:	701a      	strb	r2, [r3, #0]
    break;
 8009a2a:	e0f2      	b.n	8009c12 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	885b      	ldrh	r3, [r3, #2]
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	2b05      	cmp	r3, #5
 8009a34:	f200 80ac 	bhi.w	8009b90 <USBD_GetDescriptor+0x204>
 8009a38:	a201      	add	r2, pc, #4	; (adr r2, 8009a40 <USBD_GetDescriptor+0xb4>)
 8009a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a3e:	bf00      	nop
 8009a40:	08009a59 	.word	0x08009a59
 8009a44:	08009a8d 	.word	0x08009a8d
 8009a48:	08009ac1 	.word	0x08009ac1
 8009a4c:	08009af5 	.word	0x08009af5
 8009a50:	08009b29 	.word	0x08009b29
 8009a54:	08009b5d 	.word	0x08009b5d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d00b      	beq.n	8009a7c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	7c12      	ldrb	r2, [r2, #16]
 8009a70:	f107 0108 	add.w	r1, r7, #8
 8009a74:	4610      	mov	r0, r2
 8009a76:	4798      	blx	r3
 8009a78:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a7a:	e091      	b.n	8009ba0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009a7c:	6839      	ldr	r1, [r7, #0]
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 faaa 	bl	8009fd8 <USBD_CtlError>
        err++;
 8009a84:	7afb      	ldrb	r3, [r7, #11]
 8009a86:	3301      	adds	r3, #1
 8009a88:	72fb      	strb	r3, [r7, #11]
      break;
 8009a8a:	e089      	b.n	8009ba0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d00b      	beq.n	8009ab0 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	687a      	ldr	r2, [r7, #4]
 8009aa2:	7c12      	ldrb	r2, [r2, #16]
 8009aa4:	f107 0108 	add.w	r1, r7, #8
 8009aa8:	4610      	mov	r0, r2
 8009aaa:	4798      	blx	r3
 8009aac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009aae:	e077      	b.n	8009ba0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009ab0:	6839      	ldr	r1, [r7, #0]
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 fa90 	bl	8009fd8 <USBD_CtlError>
        err++;
 8009ab8:	7afb      	ldrb	r3, [r7, #11]
 8009aba:	3301      	adds	r3, #1
 8009abc:	72fb      	strb	r3, [r7, #11]
      break;
 8009abe:	e06f      	b.n	8009ba0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d00b      	beq.n	8009ae4 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	7c12      	ldrb	r2, [r2, #16]
 8009ad8:	f107 0108 	add.w	r1, r7, #8
 8009adc:	4610      	mov	r0, r2
 8009ade:	4798      	blx	r3
 8009ae0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ae2:	e05d      	b.n	8009ba0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009ae4:	6839      	ldr	r1, [r7, #0]
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 fa76 	bl	8009fd8 <USBD_CtlError>
        err++;
 8009aec:	7afb      	ldrb	r3, [r7, #11]
 8009aee:	3301      	adds	r3, #1
 8009af0:	72fb      	strb	r3, [r7, #11]
      break;
 8009af2:	e055      	b.n	8009ba0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009afa:	691b      	ldr	r3, [r3, #16]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d00b      	beq.n	8009b18 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b06:	691b      	ldr	r3, [r3, #16]
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	7c12      	ldrb	r2, [r2, #16]
 8009b0c:	f107 0108 	add.w	r1, r7, #8
 8009b10:	4610      	mov	r0, r2
 8009b12:	4798      	blx	r3
 8009b14:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b16:	e043      	b.n	8009ba0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009b18:	6839      	ldr	r1, [r7, #0]
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 fa5c 	bl	8009fd8 <USBD_CtlError>
        err++;
 8009b20:	7afb      	ldrb	r3, [r7, #11]
 8009b22:	3301      	adds	r3, #1
 8009b24:	72fb      	strb	r3, [r7, #11]
      break;
 8009b26:	e03b      	b.n	8009ba0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b2e:	695b      	ldr	r3, [r3, #20]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d00b      	beq.n	8009b4c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b3a:	695b      	ldr	r3, [r3, #20]
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	7c12      	ldrb	r2, [r2, #16]
 8009b40:	f107 0108 	add.w	r1, r7, #8
 8009b44:	4610      	mov	r0, r2
 8009b46:	4798      	blx	r3
 8009b48:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b4a:	e029      	b.n	8009ba0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009b4c:	6839      	ldr	r1, [r7, #0]
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 fa42 	bl	8009fd8 <USBD_CtlError>
        err++;
 8009b54:	7afb      	ldrb	r3, [r7, #11]
 8009b56:	3301      	adds	r3, #1
 8009b58:	72fb      	strb	r3, [r7, #11]
      break;
 8009b5a:	e021      	b.n	8009ba0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b62:	699b      	ldr	r3, [r3, #24]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d00b      	beq.n	8009b80 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b6e:	699b      	ldr	r3, [r3, #24]
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	7c12      	ldrb	r2, [r2, #16]
 8009b74:	f107 0108 	add.w	r1, r7, #8
 8009b78:	4610      	mov	r0, r2
 8009b7a:	4798      	blx	r3
 8009b7c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b7e:	e00f      	b.n	8009ba0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009b80:	6839      	ldr	r1, [r7, #0]
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 fa28 	bl	8009fd8 <USBD_CtlError>
        err++;
 8009b88:	7afb      	ldrb	r3, [r7, #11]
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	72fb      	strb	r3, [r7, #11]
      break;
 8009b8e:	e007      	b.n	8009ba0 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8009b90:	6839      	ldr	r1, [r7, #0]
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 fa20 	bl	8009fd8 <USBD_CtlError>
      err++;
 8009b98:	7afb      	ldrb	r3, [r7, #11]
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8009b9e:	bf00      	nop
    }
    break;
 8009ba0:	e037      	b.n	8009c12 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	7c1b      	ldrb	r3, [r3, #16]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d109      	bne.n	8009bbe <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bb2:	f107 0208 	add.w	r2, r7, #8
 8009bb6:	4610      	mov	r0, r2
 8009bb8:	4798      	blx	r3
 8009bba:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009bbc:	e029      	b.n	8009c12 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8009bbe:	6839      	ldr	r1, [r7, #0]
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 fa09 	bl	8009fd8 <USBD_CtlError>
      err++;
 8009bc6:	7afb      	ldrb	r3, [r7, #11]
 8009bc8:	3301      	adds	r3, #1
 8009bca:	72fb      	strb	r3, [r7, #11]
    break;
 8009bcc:	e021      	b.n	8009c12 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	7c1b      	ldrb	r3, [r3, #16]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d10d      	bne.n	8009bf2 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bde:	f107 0208 	add.w	r2, r7, #8
 8009be2:	4610      	mov	r0, r2
 8009be4:	4798      	blx	r3
 8009be6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	3301      	adds	r3, #1
 8009bec:	2207      	movs	r2, #7
 8009bee:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009bf0:	e00f      	b.n	8009c12 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8009bf2:	6839      	ldr	r1, [r7, #0]
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 f9ef 	bl	8009fd8 <USBD_CtlError>
      err++;
 8009bfa:	7afb      	ldrb	r3, [r7, #11]
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	72fb      	strb	r3, [r7, #11]
    break;
 8009c00:	e007      	b.n	8009c12 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8009c02:	6839      	ldr	r1, [r7, #0]
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 f9e7 	bl	8009fd8 <USBD_CtlError>
    err++;
 8009c0a:	7afb      	ldrb	r3, [r7, #11]
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	72fb      	strb	r3, [r7, #11]
    break;
 8009c10:	bf00      	nop
  }

  if (err != 0U)
 8009c12:	7afb      	ldrb	r3, [r7, #11]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d11e      	bne.n	8009c56 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	88db      	ldrh	r3, [r3, #6]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d016      	beq.n	8009c4e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8009c20:	893b      	ldrh	r3, [r7, #8]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d00e      	beq.n	8009c44 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	88da      	ldrh	r2, [r3, #6]
 8009c2a:	893b      	ldrh	r3, [r7, #8]
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	bf28      	it	cs
 8009c30:	4613      	movcs	r3, r2
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8009c36:	893b      	ldrh	r3, [r7, #8]
 8009c38:	461a      	mov	r2, r3
 8009c3a:	68f9      	ldr	r1, [r7, #12]
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 fa3c 	bl	800a0ba <USBD_CtlSendData>
 8009c42:	e009      	b.n	8009c58 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8009c44:	6839      	ldr	r1, [r7, #0]
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 f9c6 	bl	8009fd8 <USBD_CtlError>
 8009c4c:	e004      	b.n	8009c58 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 fa8d 	bl	800a16e <USBD_CtlSendStatus>
 8009c54:	e000      	b.n	8009c58 <USBD_GetDescriptor+0x2cc>
    return;
 8009c56:	bf00      	nop
    }
  }
}
 8009c58:	3710      	adds	r7, #16
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop

08009c60 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	889b      	ldrh	r3, [r3, #4]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d130      	bne.n	8009cd4 <USBD_SetAddress+0x74>
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	88db      	ldrh	r3, [r3, #6]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d12c      	bne.n	8009cd4 <USBD_SetAddress+0x74>
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	885b      	ldrh	r3, [r3, #2]
 8009c7e:	2b7f      	cmp	r3, #127	; 0x7f
 8009c80:	d828      	bhi.n	8009cd4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	885b      	ldrh	r3, [r3, #2]
 8009c86:	b2db      	uxtb	r3, r3
 8009c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c8c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c94:	2b03      	cmp	r3, #3
 8009c96:	d104      	bne.n	8009ca2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009c98:	6839      	ldr	r1, [r7, #0]
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 f99c 	bl	8009fd8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ca0:	e01c      	b.n	8009cdc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	7bfa      	ldrb	r2, [r7, #15]
 8009ca6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009caa:	7bfb      	ldrb	r3, [r7, #15]
 8009cac:	4619      	mov	r1, r3
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 fef8 	bl	800aaa4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 fa5a 	bl	800a16e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009cba:	7bfb      	ldrb	r3, [r7, #15]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d004      	beq.n	8009cca <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2202      	movs	r2, #2
 8009cc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cc8:	e008      	b.n	8009cdc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cd2:	e003      	b.n	8009cdc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009cd4:	6839      	ldr	r1, [r7, #0]
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 f97e 	bl	8009fd8 <USBD_CtlError>
  }
}
 8009cdc:	bf00      	nop
 8009cde:	3710      	adds	r7, #16
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	885b      	ldrh	r3, [r3, #2]
 8009cf6:	b2da      	uxtb	r2, r3
 8009cf8:	4b4b      	ldr	r3, [pc, #300]	; (8009e28 <USBD_SetConfig+0x144>)
 8009cfa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009cfc:	4b4a      	ldr	r3, [pc, #296]	; (8009e28 <USBD_SetConfig+0x144>)
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	d905      	bls.n	8009d10 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009d04:	6839      	ldr	r1, [r7, #0]
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 f966 	bl	8009fd8 <USBD_CtlError>
    return USBD_FAIL;
 8009d0c:	2303      	movs	r3, #3
 8009d0e:	e087      	b.n	8009e20 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d16:	2b02      	cmp	r3, #2
 8009d18:	d002      	beq.n	8009d20 <USBD_SetConfig+0x3c>
 8009d1a:	2b03      	cmp	r3, #3
 8009d1c:	d025      	beq.n	8009d6a <USBD_SetConfig+0x86>
 8009d1e:	e071      	b.n	8009e04 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8009d20:	4b41      	ldr	r3, [pc, #260]	; (8009e28 <USBD_SetConfig+0x144>)
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d01c      	beq.n	8009d62 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8009d28:	4b3f      	ldr	r3, [pc, #252]	; (8009e28 <USBD_SetConfig+0x144>)
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d32:	4b3d      	ldr	r3, [pc, #244]	; (8009e28 <USBD_SetConfig+0x144>)
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	4619      	mov	r1, r3
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f7ff f9a7 	bl	800908c <USBD_SetClassConfig>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8009d42:	7bfb      	ldrb	r3, [r7, #15]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d004      	beq.n	8009d52 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8009d48:	6839      	ldr	r1, [r7, #0]
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 f944 	bl	8009fd8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009d50:	e065      	b.n	8009e1e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 fa0b 	bl	800a16e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2203      	movs	r2, #3
 8009d5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009d60:	e05d      	b.n	8009e1e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 fa03 	bl	800a16e <USBD_CtlSendStatus>
    break;
 8009d68:	e059      	b.n	8009e1e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8009d6a:	4b2f      	ldr	r3, [pc, #188]	; (8009e28 <USBD_SetConfig+0x144>)
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d112      	bne.n	8009d98 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2202      	movs	r2, #2
 8009d76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8009d7a:	4b2b      	ldr	r3, [pc, #172]	; (8009e28 <USBD_SetConfig+0x144>)
 8009d7c:	781b      	ldrb	r3, [r3, #0]
 8009d7e:	461a      	mov	r2, r3
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d84:	4b28      	ldr	r3, [pc, #160]	; (8009e28 <USBD_SetConfig+0x144>)
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	4619      	mov	r1, r3
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f7ff f99a 	bl	80090c4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 f9ec 	bl	800a16e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009d96:	e042      	b.n	8009e1e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8009d98:	4b23      	ldr	r3, [pc, #140]	; (8009e28 <USBD_SetConfig+0x144>)
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d02a      	beq.n	8009dfc <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	4619      	mov	r1, r3
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f7ff f988 	bl	80090c4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8009db4:	4b1c      	ldr	r3, [pc, #112]	; (8009e28 <USBD_SetConfig+0x144>)
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	461a      	mov	r2, r3
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009dbe:	4b1a      	ldr	r3, [pc, #104]	; (8009e28 <USBD_SetConfig+0x144>)
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f7ff f961 	bl	800908c <USBD_SetClassConfig>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8009dce:	7bfb      	ldrb	r3, [r7, #15]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d00f      	beq.n	8009df4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8009dd4:	6839      	ldr	r1, [r7, #0]
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 f8fe 	bl	8009fd8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	b2db      	uxtb	r3, r3
 8009de2:	4619      	mov	r1, r3
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f7ff f96d 	bl	80090c4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2202      	movs	r2, #2
 8009dee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009df2:	e014      	b.n	8009e1e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 f9ba 	bl	800a16e <USBD_CtlSendStatus>
    break;
 8009dfa:	e010      	b.n	8009e1e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 f9b6 	bl	800a16e <USBD_CtlSendStatus>
    break;
 8009e02:	e00c      	b.n	8009e1e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8009e04:	6839      	ldr	r1, [r7, #0]
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 f8e6 	bl	8009fd8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009e0c:	4b06      	ldr	r3, [pc, #24]	; (8009e28 <USBD_SetConfig+0x144>)
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	4619      	mov	r1, r3
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f7ff f956 	bl	80090c4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e1c:	bf00      	nop
  }

  return ret;
 8009e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3710      	adds	r7, #16
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}
 8009e28:	200003a8 	.word	0x200003a8

08009e2c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	88db      	ldrh	r3, [r3, #6]
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d004      	beq.n	8009e48 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009e3e:	6839      	ldr	r1, [r7, #0]
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 f8c9 	bl	8009fd8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8009e46:	e021      	b.n	8009e8c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	db17      	blt.n	8009e82 <USBD_GetConfig+0x56>
 8009e52:	2b02      	cmp	r3, #2
 8009e54:	dd02      	ble.n	8009e5c <USBD_GetConfig+0x30>
 8009e56:	2b03      	cmp	r3, #3
 8009e58:	d00b      	beq.n	8009e72 <USBD_GetConfig+0x46>
 8009e5a:	e012      	b.n	8009e82 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	3308      	adds	r3, #8
 8009e66:	2201      	movs	r2, #1
 8009e68:	4619      	mov	r1, r3
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 f925 	bl	800a0ba <USBD_CtlSendData>
      break;
 8009e70:	e00c      	b.n	8009e8c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	3304      	adds	r3, #4
 8009e76:	2201      	movs	r2, #1
 8009e78:	4619      	mov	r1, r3
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 f91d 	bl	800a0ba <USBD_CtlSendData>
      break;
 8009e80:	e004      	b.n	8009e8c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8009e82:	6839      	ldr	r1, [r7, #0]
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 f8a7 	bl	8009fd8 <USBD_CtlError>
      break;
 8009e8a:	bf00      	nop
}
 8009e8c:	bf00      	nop
 8009e8e:	3708      	adds	r7, #8
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b082      	sub	sp, #8
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ea4:	3b01      	subs	r3, #1
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d81e      	bhi.n	8009ee8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	88db      	ldrh	r3, [r3, #6]
 8009eae:	2b02      	cmp	r3, #2
 8009eb0:	d004      	beq.n	8009ebc <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009eb2:	6839      	ldr	r1, [r7, #0]
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 f88f 	bl	8009fd8 <USBD_CtlError>
      break;
 8009eba:	e01a      	b.n	8009ef2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d005      	beq.n	8009ed8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	f043 0202 	orr.w	r2, r3, #2
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	330c      	adds	r3, #12
 8009edc:	2202      	movs	r2, #2
 8009ede:	4619      	mov	r1, r3
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f000 f8ea 	bl	800a0ba <USBD_CtlSendData>
    break;
 8009ee6:	e004      	b.n	8009ef2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009ee8:	6839      	ldr	r1, [r7, #0]
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 f874 	bl	8009fd8 <USBD_CtlError>
    break;
 8009ef0:	bf00      	nop
  }
}
 8009ef2:	bf00      	nop
 8009ef4:	3708      	adds	r7, #8
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b082      	sub	sp, #8
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
 8009f02:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	885b      	ldrh	r3, [r3, #2]
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d106      	bne.n	8009f1a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 f92a 	bl	800a16e <USBD_CtlSendStatus>
  }
}
 8009f1a:	bf00      	nop
 8009f1c:	3708      	adds	r7, #8
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}

08009f22 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f22:	b580      	push	{r7, lr}
 8009f24:	b082      	sub	sp, #8
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
 8009f2a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f32:	3b01      	subs	r3, #1
 8009f34:	2b02      	cmp	r3, #2
 8009f36:	d80b      	bhi.n	8009f50 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	885b      	ldrh	r3, [r3, #2]
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d10c      	bne.n	8009f5a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 f910 	bl	800a16e <USBD_CtlSendStatus>
      }
      break;
 8009f4e:	e004      	b.n	8009f5a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009f50:	6839      	ldr	r1, [r7, #0]
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f000 f840 	bl	8009fd8 <USBD_CtlError>
      break;
 8009f58:	e000      	b.n	8009f5c <USBD_ClrFeature+0x3a>
      break;
 8009f5a:	bf00      	nop
  }
}
 8009f5c:	bf00      	nop
 8009f5e:	3708      	adds	r7, #8
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b084      	sub	sp, #16
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	781a      	ldrb	r2, [r3, #0]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	781a      	ldrb	r2, [r3, #0]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	f7ff fad3 	bl	800953a <SWAPBYTE>
 8009f94:	4603      	mov	r3, r0
 8009f96:	461a      	mov	r2, r3
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009fa8:	68f8      	ldr	r0, [r7, #12]
 8009faa:	f7ff fac6 	bl	800953a <SWAPBYTE>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	3301      	adds	r3, #1
 8009fba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009fc2:	68f8      	ldr	r0, [r7, #12]
 8009fc4:	f7ff fab9 	bl	800953a <SWAPBYTE>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	461a      	mov	r2, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	80da      	strh	r2, [r3, #6]
}
 8009fd0:	bf00      	nop
 8009fd2:	3710      	adds	r7, #16
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009fe2:	2180      	movs	r1, #128	; 0x80
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 fcf3 	bl	800a9d0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009fea:	2100      	movs	r1, #0
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 fcef 	bl	800a9d0 <USBD_LL_StallEP>
}
 8009ff2:	bf00      	nop
 8009ff4:	3708      	adds	r7, #8
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b086      	sub	sp, #24
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	60f8      	str	r0, [r7, #12]
 800a002:	60b9      	str	r1, [r7, #8]
 800a004:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a006:	2300      	movs	r3, #0
 800a008:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d036      	beq.n	800a07e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a014:	6938      	ldr	r0, [r7, #16]
 800a016:	f000 f836 	bl	800a086 <USBD_GetLen>
 800a01a:	4603      	mov	r3, r0
 800a01c:	3301      	adds	r3, #1
 800a01e:	b29b      	uxth	r3, r3
 800a020:	005b      	lsls	r3, r3, #1
 800a022:	b29a      	uxth	r2, r3
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a028:	7dfb      	ldrb	r3, [r7, #23]
 800a02a:	68ba      	ldr	r2, [r7, #8]
 800a02c:	4413      	add	r3, r2
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	7812      	ldrb	r2, [r2, #0]
 800a032:	701a      	strb	r2, [r3, #0]
  idx++;
 800a034:	7dfb      	ldrb	r3, [r7, #23]
 800a036:	3301      	adds	r3, #1
 800a038:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a03a:	7dfb      	ldrb	r3, [r7, #23]
 800a03c:	68ba      	ldr	r2, [r7, #8]
 800a03e:	4413      	add	r3, r2
 800a040:	2203      	movs	r2, #3
 800a042:	701a      	strb	r2, [r3, #0]
  idx++;
 800a044:	7dfb      	ldrb	r3, [r7, #23]
 800a046:	3301      	adds	r3, #1
 800a048:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a04a:	e013      	b.n	800a074 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a04c:	7dfb      	ldrb	r3, [r7, #23]
 800a04e:	68ba      	ldr	r2, [r7, #8]
 800a050:	4413      	add	r3, r2
 800a052:	693a      	ldr	r2, [r7, #16]
 800a054:	7812      	ldrb	r2, [r2, #0]
 800a056:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	3301      	adds	r3, #1
 800a05c:	613b      	str	r3, [r7, #16]
    idx++;
 800a05e:	7dfb      	ldrb	r3, [r7, #23]
 800a060:	3301      	adds	r3, #1
 800a062:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a064:	7dfb      	ldrb	r3, [r7, #23]
 800a066:	68ba      	ldr	r2, [r7, #8]
 800a068:	4413      	add	r3, r2
 800a06a:	2200      	movs	r2, #0
 800a06c:	701a      	strb	r2, [r3, #0]
    idx++;
 800a06e:	7dfb      	ldrb	r3, [r7, #23]
 800a070:	3301      	adds	r3, #1
 800a072:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	781b      	ldrb	r3, [r3, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d1e7      	bne.n	800a04c <USBD_GetString+0x52>
 800a07c:	e000      	b.n	800a080 <USBD_GetString+0x86>
    return;
 800a07e:	bf00      	nop
  }
}
 800a080:	3718      	adds	r7, #24
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}

0800a086 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a086:	b480      	push	{r7}
 800a088:	b085      	sub	sp, #20
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a08e:	2300      	movs	r3, #0
 800a090:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a096:	e005      	b.n	800a0a4 <USBD_GetLen+0x1e>
  {
    len++;
 800a098:	7bfb      	ldrb	r3, [r7, #15]
 800a09a:	3301      	adds	r3, #1
 800a09c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d1f5      	bne.n	800a098 <USBD_GetLen+0x12>
  }

  return len;
 800a0ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3714      	adds	r7, #20
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr

0800a0ba <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a0ba:	b580      	push	{r7, lr}
 800a0bc:	b084      	sub	sp, #16
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	60f8      	str	r0, [r7, #12]
 800a0c2:	60b9      	str	r1, [r7, #8]
 800a0c4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2202      	movs	r2, #2
 800a0ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	68ba      	ldr	r2, [r7, #8]
 800a0de:	2100      	movs	r1, #0
 800a0e0:	68f8      	ldr	r0, [r7, #12]
 800a0e2:	f000 fcfe 	bl	800aae2 <USBD_LL_Transmit>

  return USBD_OK;
 800a0e6:	2300      	movs	r3, #0
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3710      	adds	r7, #16
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	60f8      	str	r0, [r7, #12]
 800a0f8:	60b9      	str	r1, [r7, #8]
 800a0fa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	68ba      	ldr	r2, [r7, #8]
 800a100:	2100      	movs	r1, #0
 800a102:	68f8      	ldr	r0, [r7, #12]
 800a104:	f000 fced 	bl	800aae2 <USBD_LL_Transmit>

  return USBD_OK;
 800a108:	2300      	movs	r3, #0
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3710      	adds	r7, #16
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}

0800a112 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a112:	b580      	push	{r7, lr}
 800a114:	b084      	sub	sp, #16
 800a116:	af00      	add	r7, sp, #0
 800a118:	60f8      	str	r0, [r7, #12]
 800a11a:	60b9      	str	r1, [r7, #8]
 800a11c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2203      	movs	r2, #3
 800a122:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	68ba      	ldr	r2, [r7, #8]
 800a13a:	2100      	movs	r1, #0
 800a13c:	68f8      	ldr	r0, [r7, #12]
 800a13e:	f000 fcf1 	bl	800ab24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a142:	2300      	movs	r3, #0
}
 800a144:	4618      	mov	r0, r3
 800a146:	3710      	adds	r7, #16
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b084      	sub	sp, #16
 800a150:	af00      	add	r7, sp, #0
 800a152:	60f8      	str	r0, [r7, #12]
 800a154:	60b9      	str	r1, [r7, #8]
 800a156:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	68ba      	ldr	r2, [r7, #8]
 800a15c:	2100      	movs	r1, #0
 800a15e:	68f8      	ldr	r0, [r7, #12]
 800a160:	f000 fce0 	bl	800ab24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a164:	2300      	movs	r3, #0
}
 800a166:	4618      	mov	r0, r3
 800a168:	3710      	adds	r7, #16
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}

0800a16e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a16e:	b580      	push	{r7, lr}
 800a170:	b082      	sub	sp, #8
 800a172:	af00      	add	r7, sp, #0
 800a174:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2204      	movs	r2, #4
 800a17a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a17e:	2300      	movs	r3, #0
 800a180:	2200      	movs	r2, #0
 800a182:	2100      	movs	r1, #0
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 fcac 	bl	800aae2 <USBD_LL_Transmit>

  return USBD_OK;
 800a18a:	2300      	movs	r3, #0
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3708      	adds	r7, #8
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2205      	movs	r2, #5
 800a1a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	2100      	movs	r1, #0
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 fcba 	bl	800ab24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1b0:	2300      	movs	r3, #0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3708      	adds	r7, #8
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
	...

0800a1bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	4912      	ldr	r1, [pc, #72]	; (800a20c <MX_USB_DEVICE_Init+0x50>)
 800a1c4:	4812      	ldr	r0, [pc, #72]	; (800a210 <MX_USB_DEVICE_Init+0x54>)
 800a1c6:	f7fe fef3 	bl	8008fb0 <USBD_Init>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d001      	beq.n	800a1d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a1d0:	f7f8 f902 	bl	80023d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a1d4:	490f      	ldr	r1, [pc, #60]	; (800a214 <MX_USB_DEVICE_Init+0x58>)
 800a1d6:	480e      	ldr	r0, [pc, #56]	; (800a210 <MX_USB_DEVICE_Init+0x54>)
 800a1d8:	f7fe ff20 	bl	800901c <USBD_RegisterClass>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d001      	beq.n	800a1e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a1e2:	f7f8 f8f9 	bl	80023d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a1e6:	490c      	ldr	r1, [pc, #48]	; (800a218 <MX_USB_DEVICE_Init+0x5c>)
 800a1e8:	4809      	ldr	r0, [pc, #36]	; (800a210 <MX_USB_DEVICE_Init+0x54>)
 800a1ea:	f7fe fe45 	bl	8008e78 <USBD_CDC_RegisterInterface>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d001      	beq.n	800a1f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a1f4:	f7f8 f8f0 	bl	80023d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a1f8:	4805      	ldr	r0, [pc, #20]	; (800a210 <MX_USB_DEVICE_Init+0x54>)
 800a1fa:	f7fe ff30 	bl	800905e <USBD_Start>
 800a1fe:	4603      	mov	r3, r0
 800a200:	2b00      	cmp	r3, #0
 800a202:	d001      	beq.n	800a208 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a204:	f7f8 f8e8 	bl	80023d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a208:	bf00      	nop
 800a20a:	bd80      	pop	{r7, pc}
 800a20c:	20000138 	.word	0x20000138
 800a210:	200006f0 	.word	0x200006f0
 800a214:	20000018 	.word	0x20000018
 800a218:	20000124 	.word	0x20000124

0800a21c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a220:	2200      	movs	r2, #0
 800a222:	4905      	ldr	r1, [pc, #20]	; (800a238 <CDC_Init_FS+0x1c>)
 800a224:	4805      	ldr	r0, [pc, #20]	; (800a23c <CDC_Init_FS+0x20>)
 800a226:	f7fe fe3c 	bl	8008ea2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a22a:	4905      	ldr	r1, [pc, #20]	; (800a240 <CDC_Init_FS+0x24>)
 800a22c:	4803      	ldr	r0, [pc, #12]	; (800a23c <CDC_Init_FS+0x20>)
 800a22e:	f7fe fe51 	bl	8008ed4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a232:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a234:	4618      	mov	r0, r3
 800a236:	bd80      	pop	{r7, pc}
 800a238:	200011c0 	.word	0x200011c0
 800a23c:	200006f0 	.word	0x200006f0
 800a240:	200009c0 	.word	0x200009c0

0800a244 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a244:	b480      	push	{r7}
 800a246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a248:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr

0800a254 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	4603      	mov	r3, r0
 800a25c:	6039      	str	r1, [r7, #0]
 800a25e:	71fb      	strb	r3, [r7, #7]
 800a260:	4613      	mov	r3, r2
 800a262:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a264:	79fb      	ldrb	r3, [r7, #7]
 800a266:	2b23      	cmp	r3, #35	; 0x23
 800a268:	d85c      	bhi.n	800a324 <CDC_Control_FS+0xd0>
 800a26a:	a201      	add	r2, pc, #4	; (adr r2, 800a270 <CDC_Control_FS+0x1c>)
 800a26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a270:	0800a325 	.word	0x0800a325
 800a274:	0800a325 	.word	0x0800a325
 800a278:	0800a325 	.word	0x0800a325
 800a27c:	0800a325 	.word	0x0800a325
 800a280:	0800a325 	.word	0x0800a325
 800a284:	0800a325 	.word	0x0800a325
 800a288:	0800a325 	.word	0x0800a325
 800a28c:	0800a325 	.word	0x0800a325
 800a290:	0800a325 	.word	0x0800a325
 800a294:	0800a325 	.word	0x0800a325
 800a298:	0800a325 	.word	0x0800a325
 800a29c:	0800a325 	.word	0x0800a325
 800a2a0:	0800a325 	.word	0x0800a325
 800a2a4:	0800a325 	.word	0x0800a325
 800a2a8:	0800a325 	.word	0x0800a325
 800a2ac:	0800a325 	.word	0x0800a325
 800a2b0:	0800a325 	.word	0x0800a325
 800a2b4:	0800a325 	.word	0x0800a325
 800a2b8:	0800a325 	.word	0x0800a325
 800a2bc:	0800a325 	.word	0x0800a325
 800a2c0:	0800a325 	.word	0x0800a325
 800a2c4:	0800a325 	.word	0x0800a325
 800a2c8:	0800a325 	.word	0x0800a325
 800a2cc:	0800a325 	.word	0x0800a325
 800a2d0:	0800a325 	.word	0x0800a325
 800a2d4:	0800a325 	.word	0x0800a325
 800a2d8:	0800a325 	.word	0x0800a325
 800a2dc:	0800a325 	.word	0x0800a325
 800a2e0:	0800a325 	.word	0x0800a325
 800a2e4:	0800a325 	.word	0x0800a325
 800a2e8:	0800a325 	.word	0x0800a325
 800a2ec:	0800a325 	.word	0x0800a325
 800a2f0:	0800a301 	.word	0x0800a301
 800a2f4:	0800a313 	.word	0x0800a313
 800a2f8:	0800a325 	.word	0x0800a325
 800a2fc:	0800a325 	.word	0x0800a325
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800a300:	4b0c      	ldr	r3, [pc, #48]	; (800a334 <CDC_Control_FS+0xe0>)
 800a302:	683a      	ldr	r2, [r7, #0]
 800a304:	6810      	ldr	r0, [r2, #0]
 800a306:	6018      	str	r0, [r3, #0]
 800a308:	8891      	ldrh	r1, [r2, #4]
 800a30a:	7992      	ldrb	r2, [r2, #6]
 800a30c:	8099      	strh	r1, [r3, #4]
 800a30e:	719a      	strb	r2, [r3, #6]
    break;
 800a310:	e009      	b.n	800a326 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	4a07      	ldr	r2, [pc, #28]	; (800a334 <CDC_Control_FS+0xe0>)
 800a316:	6810      	ldr	r0, [r2, #0]
 800a318:	6018      	str	r0, [r3, #0]
 800a31a:	8891      	ldrh	r1, [r2, #4]
 800a31c:	7992      	ldrb	r2, [r2, #6]
 800a31e:	8099      	strh	r1, [r3, #4]
 800a320:	719a      	strb	r2, [r3, #6]
    break;
 800a322:	e000      	b.n	800a326 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a324:	bf00      	nop
  }

  return (USBD_OK);
 800a326:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a328:	4618      	mov	r0, r3
 800a32a:	370c      	adds	r7, #12
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr
 800a334:	2000011c 	.word	0x2000011c

0800a338 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a342:	6879      	ldr	r1, [r7, #4]
 800a344:	4805      	ldr	r0, [pc, #20]	; (800a35c <CDC_Receive_FS+0x24>)
 800a346:	f7fe fdc5 	bl	8008ed4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a34a:	4804      	ldr	r0, [pc, #16]	; (800a35c <CDC_Receive_FS+0x24>)
 800a34c:	f7fe fe06 	bl	8008f5c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a350:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a352:	4618      	mov	r0, r3
 800a354:	3708      	adds	r7, #8
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	200006f0 	.word	0x200006f0

0800a360 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b084      	sub	sp, #16
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	460b      	mov	r3, r1
 800a36a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a36c:	2300      	movs	r3, #0
 800a36e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a370:	4b0d      	ldr	r3, [pc, #52]	; (800a3a8 <CDC_Transmit_FS+0x48>)
 800a372:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a376:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d001      	beq.n	800a386 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a382:	2301      	movs	r3, #1
 800a384:	e00b      	b.n	800a39e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a386:	887b      	ldrh	r3, [r7, #2]
 800a388:	461a      	mov	r2, r3
 800a38a:	6879      	ldr	r1, [r7, #4]
 800a38c:	4806      	ldr	r0, [pc, #24]	; (800a3a8 <CDC_Transmit_FS+0x48>)
 800a38e:	f7fe fd88 	bl	8008ea2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a392:	4805      	ldr	r0, [pc, #20]	; (800a3a8 <CDC_Transmit_FS+0x48>)
 800a394:	f7fe fdb2 	bl	8008efc <USBD_CDC_TransmitPacket>
 800a398:	4603      	mov	r3, r0
 800a39a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a39c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3710      	adds	r7, #16
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	200006f0 	.word	0x200006f0

0800a3ac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b087      	sub	sp, #28
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	4613      	mov	r3, r2
 800a3b8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a3be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	371c      	adds	r7, #28
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr
	...

0800a3d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	6039      	str	r1, [r7, #0]
 800a3da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	2212      	movs	r2, #18
 800a3e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a3e2:	4b03      	ldr	r3, [pc, #12]	; (800a3f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	370c      	adds	r7, #12
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr
 800a3f0:	20000154 	.word	0x20000154

0800a3f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	6039      	str	r1, [r7, #0]
 800a3fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	2204      	movs	r2, #4
 800a404:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a406:	4b03      	ldr	r3, [pc, #12]	; (800a414 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a408:	4618      	mov	r0, r3
 800a40a:	370c      	adds	r7, #12
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr
 800a414:	20000168 	.word	0x20000168

0800a418 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b082      	sub	sp, #8
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	4603      	mov	r3, r0
 800a420:	6039      	str	r1, [r7, #0]
 800a422:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a424:	79fb      	ldrb	r3, [r7, #7]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d105      	bne.n	800a436 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a42a:	683a      	ldr	r2, [r7, #0]
 800a42c:	4907      	ldr	r1, [pc, #28]	; (800a44c <USBD_FS_ProductStrDescriptor+0x34>)
 800a42e:	4808      	ldr	r0, [pc, #32]	; (800a450 <USBD_FS_ProductStrDescriptor+0x38>)
 800a430:	f7ff fde3 	bl	8009ffa <USBD_GetString>
 800a434:	e004      	b.n	800a440 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a436:	683a      	ldr	r2, [r7, #0]
 800a438:	4904      	ldr	r1, [pc, #16]	; (800a44c <USBD_FS_ProductStrDescriptor+0x34>)
 800a43a:	4805      	ldr	r0, [pc, #20]	; (800a450 <USBD_FS_ProductStrDescriptor+0x38>)
 800a43c:	f7ff fddd 	bl	8009ffa <USBD_GetString>
  }
  return USBD_StrDesc;
 800a440:	4b02      	ldr	r3, [pc, #8]	; (800a44c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a442:	4618      	mov	r0, r3
 800a444:	3708      	adds	r7, #8
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop
 800a44c:	200019c0 	.word	0x200019c0
 800a450:	0800cf10 	.word	0x0800cf10

0800a454 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	4603      	mov	r3, r0
 800a45c:	6039      	str	r1, [r7, #0]
 800a45e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a460:	683a      	ldr	r2, [r7, #0]
 800a462:	4904      	ldr	r1, [pc, #16]	; (800a474 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a464:	4804      	ldr	r0, [pc, #16]	; (800a478 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a466:	f7ff fdc8 	bl	8009ffa <USBD_GetString>
  return USBD_StrDesc;
 800a46a:	4b02      	ldr	r3, [pc, #8]	; (800a474 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3708      	adds	r7, #8
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}
 800a474:	200019c0 	.word	0x200019c0
 800a478:	0800cf28 	.word	0x0800cf28

0800a47c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	4603      	mov	r3, r0
 800a484:	6039      	str	r1, [r7, #0]
 800a486:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	221a      	movs	r2, #26
 800a48c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a48e:	f000 f843 	bl	800a518 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a492:	4b02      	ldr	r3, [pc, #8]	; (800a49c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a494:	4618      	mov	r0, r3
 800a496:	3708      	adds	r7, #8
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}
 800a49c:	2000016c 	.word	0x2000016c

0800a4a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b082      	sub	sp, #8
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	6039      	str	r1, [r7, #0]
 800a4aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a4ac:	79fb      	ldrb	r3, [r7, #7]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d105      	bne.n	800a4be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a4b2:	683a      	ldr	r2, [r7, #0]
 800a4b4:	4907      	ldr	r1, [pc, #28]	; (800a4d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a4b6:	4808      	ldr	r0, [pc, #32]	; (800a4d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a4b8:	f7ff fd9f 	bl	8009ffa <USBD_GetString>
 800a4bc:	e004      	b.n	800a4c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a4be:	683a      	ldr	r2, [r7, #0]
 800a4c0:	4904      	ldr	r1, [pc, #16]	; (800a4d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a4c2:	4805      	ldr	r0, [pc, #20]	; (800a4d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a4c4:	f7ff fd99 	bl	8009ffa <USBD_GetString>
  }
  return USBD_StrDesc;
 800a4c8:	4b02      	ldr	r3, [pc, #8]	; (800a4d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3708      	adds	r7, #8
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	200019c0 	.word	0x200019c0
 800a4d8:	0800cf3c 	.word	0x0800cf3c

0800a4dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	6039      	str	r1, [r7, #0]
 800a4e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a4e8:	79fb      	ldrb	r3, [r7, #7]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d105      	bne.n	800a4fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a4ee:	683a      	ldr	r2, [r7, #0]
 800a4f0:	4907      	ldr	r1, [pc, #28]	; (800a510 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a4f2:	4808      	ldr	r0, [pc, #32]	; (800a514 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a4f4:	f7ff fd81 	bl	8009ffa <USBD_GetString>
 800a4f8:	e004      	b.n	800a504 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a4fa:	683a      	ldr	r2, [r7, #0]
 800a4fc:	4904      	ldr	r1, [pc, #16]	; (800a510 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a4fe:	4805      	ldr	r0, [pc, #20]	; (800a514 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a500:	f7ff fd7b 	bl	8009ffa <USBD_GetString>
  }
  return USBD_StrDesc;
 800a504:	4b02      	ldr	r3, [pc, #8]	; (800a510 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a506:	4618      	mov	r0, r3
 800a508:	3708      	adds	r7, #8
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	200019c0 	.word	0x200019c0
 800a514:	0800cf48 	.word	0x0800cf48

0800a518 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a51e:	4b0f      	ldr	r3, [pc, #60]	; (800a55c <Get_SerialNum+0x44>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a524:	4b0e      	ldr	r3, [pc, #56]	; (800a560 <Get_SerialNum+0x48>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a52a:	4b0e      	ldr	r3, [pc, #56]	; (800a564 <Get_SerialNum+0x4c>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a530:	68fa      	ldr	r2, [r7, #12]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	4413      	add	r3, r2
 800a536:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d009      	beq.n	800a552 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a53e:	2208      	movs	r2, #8
 800a540:	4909      	ldr	r1, [pc, #36]	; (800a568 <Get_SerialNum+0x50>)
 800a542:	68f8      	ldr	r0, [r7, #12]
 800a544:	f000 f814 	bl	800a570 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a548:	2204      	movs	r2, #4
 800a54a:	4908      	ldr	r1, [pc, #32]	; (800a56c <Get_SerialNum+0x54>)
 800a54c:	68b8      	ldr	r0, [r7, #8]
 800a54e:	f000 f80f 	bl	800a570 <IntToUnicode>
  }
}
 800a552:	bf00      	nop
 800a554:	3710      	adds	r7, #16
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
 800a55a:	bf00      	nop
 800a55c:	1fff7a10 	.word	0x1fff7a10
 800a560:	1fff7a14 	.word	0x1fff7a14
 800a564:	1fff7a18 	.word	0x1fff7a18
 800a568:	2000016e 	.word	0x2000016e
 800a56c:	2000017e 	.word	0x2000017e

0800a570 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a570:	b480      	push	{r7}
 800a572:	b087      	sub	sp, #28
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	4613      	mov	r3, r2
 800a57c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a57e:	2300      	movs	r3, #0
 800a580:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a582:	2300      	movs	r3, #0
 800a584:	75fb      	strb	r3, [r7, #23]
 800a586:	e027      	b.n	800a5d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	0f1b      	lsrs	r3, r3, #28
 800a58c:	2b09      	cmp	r3, #9
 800a58e:	d80b      	bhi.n	800a5a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	0f1b      	lsrs	r3, r3, #28
 800a594:	b2da      	uxtb	r2, r3
 800a596:	7dfb      	ldrb	r3, [r7, #23]
 800a598:	005b      	lsls	r3, r3, #1
 800a59a:	4619      	mov	r1, r3
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	440b      	add	r3, r1
 800a5a0:	3230      	adds	r2, #48	; 0x30
 800a5a2:	b2d2      	uxtb	r2, r2
 800a5a4:	701a      	strb	r2, [r3, #0]
 800a5a6:	e00a      	b.n	800a5be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	0f1b      	lsrs	r3, r3, #28
 800a5ac:	b2da      	uxtb	r2, r3
 800a5ae:	7dfb      	ldrb	r3, [r7, #23]
 800a5b0:	005b      	lsls	r3, r3, #1
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	440b      	add	r3, r1
 800a5b8:	3237      	adds	r2, #55	; 0x37
 800a5ba:	b2d2      	uxtb	r2, r2
 800a5bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	011b      	lsls	r3, r3, #4
 800a5c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a5c4:	7dfb      	ldrb	r3, [r7, #23]
 800a5c6:	005b      	lsls	r3, r3, #1
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	68ba      	ldr	r2, [r7, #8]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a5d2:	7dfb      	ldrb	r3, [r7, #23]
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	75fb      	strb	r3, [r7, #23]
 800a5d8:	7dfa      	ldrb	r2, [r7, #23]
 800a5da:	79fb      	ldrb	r3, [r7, #7]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d3d3      	bcc.n	800a588 <IntToUnicode+0x18>
  }
}
 800a5e0:	bf00      	nop
 800a5e2:	371c      	adds	r7, #28
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b08a      	sub	sp, #40	; 0x28
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5f4:	f107 0314 	add.w	r3, r7, #20
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	601a      	str	r2, [r3, #0]
 800a5fc:	605a      	str	r2, [r3, #4]
 800a5fe:	609a      	str	r2, [r3, #8]
 800a600:	60da      	str	r2, [r3, #12]
 800a602:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a60c:	d13a      	bne.n	800a684 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a60e:	2300      	movs	r3, #0
 800a610:	613b      	str	r3, [r7, #16]
 800a612:	4b1e      	ldr	r3, [pc, #120]	; (800a68c <HAL_PCD_MspInit+0xa0>)
 800a614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a616:	4a1d      	ldr	r2, [pc, #116]	; (800a68c <HAL_PCD_MspInit+0xa0>)
 800a618:	f043 0301 	orr.w	r3, r3, #1
 800a61c:	6313      	str	r3, [r2, #48]	; 0x30
 800a61e:	4b1b      	ldr	r3, [pc, #108]	; (800a68c <HAL_PCD_MspInit+0xa0>)
 800a620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a622:	f003 0301 	and.w	r3, r3, #1
 800a626:	613b      	str	r3, [r7, #16]
 800a628:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a62a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a62e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a630:	2302      	movs	r3, #2
 800a632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a634:	2300      	movs	r3, #0
 800a636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a638:	2303      	movs	r3, #3
 800a63a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a63c:	230a      	movs	r3, #10
 800a63e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a640:	f107 0314 	add.w	r3, r7, #20
 800a644:	4619      	mov	r1, r3
 800a646:	4812      	ldr	r0, [pc, #72]	; (800a690 <HAL_PCD_MspInit+0xa4>)
 800a648:	f7f8 fe74 	bl	8003334 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a64c:	4b0f      	ldr	r3, [pc, #60]	; (800a68c <HAL_PCD_MspInit+0xa0>)
 800a64e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a650:	4a0e      	ldr	r2, [pc, #56]	; (800a68c <HAL_PCD_MspInit+0xa0>)
 800a652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a656:	6353      	str	r3, [r2, #52]	; 0x34
 800a658:	2300      	movs	r3, #0
 800a65a:	60fb      	str	r3, [r7, #12]
 800a65c:	4b0b      	ldr	r3, [pc, #44]	; (800a68c <HAL_PCD_MspInit+0xa0>)
 800a65e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a660:	4a0a      	ldr	r2, [pc, #40]	; (800a68c <HAL_PCD_MspInit+0xa0>)
 800a662:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a666:	6453      	str	r3, [r2, #68]	; 0x44
 800a668:	4b08      	ldr	r3, [pc, #32]	; (800a68c <HAL_PCD_MspInit+0xa0>)
 800a66a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a66c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a670:	60fb      	str	r3, [r7, #12]
 800a672:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 0);
 800a674:	2200      	movs	r2, #0
 800a676:	2101      	movs	r1, #1
 800a678:	2043      	movs	r0, #67	; 0x43
 800a67a:	f7f8 fe24 	bl	80032c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a67e:	2043      	movs	r0, #67	; 0x43
 800a680:	f7f8 fe3d 	bl	80032fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a684:	bf00      	nop
 800a686:	3728      	adds	r7, #40	; 0x28
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}
 800a68c:	40023800 	.word	0x40023800
 800a690:	40020000 	.word	0x40020000

0800a694 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	4610      	mov	r0, r2
 800a6ac:	f7fe fd22 	bl	80090f4 <USBD_LL_SetupStage>
}
 800a6b0:	bf00      	nop
 800a6b2:	3708      	adds	r7, #8
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	460b      	mov	r3, r1
 800a6c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a6ca:	78fa      	ldrb	r2, [r7, #3]
 800a6cc:	6879      	ldr	r1, [r7, #4]
 800a6ce:	4613      	mov	r3, r2
 800a6d0:	00db      	lsls	r3, r3, #3
 800a6d2:	1a9b      	subs	r3, r3, r2
 800a6d4:	009b      	lsls	r3, r3, #2
 800a6d6:	440b      	add	r3, r1
 800a6d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	78fb      	ldrb	r3, [r7, #3]
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	f7fe fd5a 	bl	800919a <USBD_LL_DataOutStage>
}
 800a6e6:	bf00      	nop
 800a6e8:	3708      	adds	r7, #8
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}

0800a6ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6ee:	b580      	push	{r7, lr}
 800a6f0:	b082      	sub	sp, #8
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	6078      	str	r0, [r7, #4]
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a700:	78fa      	ldrb	r2, [r7, #3]
 800a702:	6879      	ldr	r1, [r7, #4]
 800a704:	4613      	mov	r3, r2
 800a706:	00db      	lsls	r3, r3, #3
 800a708:	1a9b      	subs	r3, r3, r2
 800a70a:	009b      	lsls	r3, r3, #2
 800a70c:	440b      	add	r3, r1
 800a70e:	3348      	adds	r3, #72	; 0x48
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	78fb      	ldrb	r3, [r7, #3]
 800a714:	4619      	mov	r1, r3
 800a716:	f7fe fda3 	bl	8009260 <USBD_LL_DataInStage>
}
 800a71a:	bf00      	nop
 800a71c:	3708      	adds	r7, #8
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a722:	b580      	push	{r7, lr}
 800a724:	b082      	sub	sp, #8
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a730:	4618      	mov	r0, r3
 800a732:	f7fe fea7 	bl	8009484 <USBD_LL_SOF>
}
 800a736:	bf00      	nop
 800a738:	3708      	adds	r7, #8
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}

0800a73e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a73e:	b580      	push	{r7, lr}
 800a740:	b084      	sub	sp, #16
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a746:	2301      	movs	r3, #1
 800a748:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d102      	bne.n	800a758 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a752:	2300      	movs	r3, #0
 800a754:	73fb      	strb	r3, [r7, #15]
 800a756:	e008      	b.n	800a76a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	68db      	ldr	r3, [r3, #12]
 800a75c:	2b02      	cmp	r3, #2
 800a75e:	d102      	bne.n	800a766 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a760:	2301      	movs	r3, #1
 800a762:	73fb      	strb	r3, [r7, #15]
 800a764:	e001      	b.n	800a76a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a766:	f7f7 fe37 	bl	80023d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a770:	7bfa      	ldrb	r2, [r7, #15]
 800a772:	4611      	mov	r1, r2
 800a774:	4618      	mov	r0, r3
 800a776:	f7fe fe4a 	bl	800940e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a780:	4618      	mov	r0, r3
 800a782:	f7fe fe03 	bl	800938c <USBD_LL_Reset>
}
 800a786:	bf00      	nop
 800a788:	3710      	adds	r7, #16
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}
	...

0800a790 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f7fe fe45 	bl	800942e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	6812      	ldr	r2, [r2, #0]
 800a7b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a7b6:	f043 0301 	orr.w	r3, r3, #1
 800a7ba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6a1b      	ldr	r3, [r3, #32]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d005      	beq.n	800a7d0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a7c4:	4b04      	ldr	r3, [pc, #16]	; (800a7d8 <HAL_PCD_SuspendCallback+0x48>)
 800a7c6:	691b      	ldr	r3, [r3, #16]
 800a7c8:	4a03      	ldr	r2, [pc, #12]	; (800a7d8 <HAL_PCD_SuspendCallback+0x48>)
 800a7ca:	f043 0306 	orr.w	r3, r3, #6
 800a7ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a7d0:	bf00      	nop
 800a7d2:	3708      	adds	r7, #8
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	e000ed00 	.word	0xe000ed00

0800a7dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b082      	sub	sp, #8
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f7fe fe34 	bl	8009458 <USBD_LL_Resume>
}
 800a7f0:	bf00      	nop
 800a7f2:	3708      	adds	r7, #8
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}

0800a7f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b082      	sub	sp, #8
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	460b      	mov	r3, r1
 800a802:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a80a:	78fa      	ldrb	r2, [r7, #3]
 800a80c:	4611      	mov	r1, r2
 800a80e:	4618      	mov	r0, r3
 800a810:	f7fe fe5f 	bl	80094d2 <USBD_LL_IsoOUTIncomplete>
}
 800a814:	bf00      	nop
 800a816:	3708      	adds	r7, #8
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	460b      	mov	r3, r1
 800a826:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a82e:	78fa      	ldrb	r2, [r7, #3]
 800a830:	4611      	mov	r1, r2
 800a832:	4618      	mov	r0, r3
 800a834:	f7fe fe40 	bl	80094b8 <USBD_LL_IsoINIncomplete>
}
 800a838:	bf00      	nop
 800a83a:	3708      	adds	r7, #8
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a84e:	4618      	mov	r0, r3
 800a850:	f7fe fe4c 	bl	80094ec <USBD_LL_DevConnected>
}
 800a854:	bf00      	nop
 800a856:	3708      	adds	r7, #8
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7fe fe49 	bl	8009502 <USBD_LL_DevDisconnected>
}
 800a870:	bf00      	nop
 800a872:	3708      	adds	r7, #8
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d13c      	bne.n	800a902 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a888:	4a20      	ldr	r2, [pc, #128]	; (800a90c <USBD_LL_Init+0x94>)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	4a1e      	ldr	r2, [pc, #120]	; (800a90c <USBD_LL_Init+0x94>)
 800a894:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a898:	4b1c      	ldr	r3, [pc, #112]	; (800a90c <USBD_LL_Init+0x94>)
 800a89a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a89e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a8a0:	4b1a      	ldr	r3, [pc, #104]	; (800a90c <USBD_LL_Init+0x94>)
 800a8a2:	2204      	movs	r2, #4
 800a8a4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a8a6:	4b19      	ldr	r3, [pc, #100]	; (800a90c <USBD_LL_Init+0x94>)
 800a8a8:	2202      	movs	r2, #2
 800a8aa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a8ac:	4b17      	ldr	r3, [pc, #92]	; (800a90c <USBD_LL_Init+0x94>)
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a8b2:	4b16      	ldr	r3, [pc, #88]	; (800a90c <USBD_LL_Init+0x94>)
 800a8b4:	2202      	movs	r2, #2
 800a8b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a8b8:	4b14      	ldr	r3, [pc, #80]	; (800a90c <USBD_LL_Init+0x94>)
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a8be:	4b13      	ldr	r3, [pc, #76]	; (800a90c <USBD_LL_Init+0x94>)
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a8c4:	4b11      	ldr	r3, [pc, #68]	; (800a90c <USBD_LL_Init+0x94>)
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a8ca:	4b10      	ldr	r3, [pc, #64]	; (800a90c <USBD_LL_Init+0x94>)
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a8d0:	4b0e      	ldr	r3, [pc, #56]	; (800a90c <USBD_LL_Init+0x94>)
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a8d6:	480d      	ldr	r0, [pc, #52]	; (800a90c <USBD_LL_Init+0x94>)
 800a8d8:	f7f9 feab 	bl	8004632 <HAL_PCD_Init>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d001      	beq.n	800a8e6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a8e2:	f7f7 fd79 	bl	80023d8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a8e6:	2180      	movs	r1, #128	; 0x80
 800a8e8:	4808      	ldr	r0, [pc, #32]	; (800a90c <USBD_LL_Init+0x94>)
 800a8ea:	f7fb f808 	bl	80058fe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a8ee:	2240      	movs	r2, #64	; 0x40
 800a8f0:	2100      	movs	r1, #0
 800a8f2:	4806      	ldr	r0, [pc, #24]	; (800a90c <USBD_LL_Init+0x94>)
 800a8f4:	f7fa ffbc 	bl	8005870 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a8f8:	2280      	movs	r2, #128	; 0x80
 800a8fa:	2101      	movs	r1, #1
 800a8fc:	4803      	ldr	r0, [pc, #12]	; (800a90c <USBD_LL_Init+0x94>)
 800a8fe:	f7fa ffb7 	bl	8005870 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a902:	2300      	movs	r3, #0
}
 800a904:	4618      	mov	r0, r3
 800a906:	3708      	adds	r7, #8
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}
 800a90c:	20001bc0 	.word	0x20001bc0

0800a910 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a918:	2300      	movs	r3, #0
 800a91a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a91c:	2300      	movs	r3, #0
 800a91e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a926:	4618      	mov	r0, r3
 800a928:	f7f9 ffa0 	bl	800486c <HAL_PCD_Start>
 800a92c:	4603      	mov	r3, r0
 800a92e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a930:	7bfb      	ldrb	r3, [r7, #15]
 800a932:	4618      	mov	r0, r3
 800a934:	f000 f92a 	bl	800ab8c <USBD_Get_USB_Status>
 800a938:	4603      	mov	r3, r0
 800a93a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a93c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3710      	adds	r7, #16
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}

0800a946 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a946:	b580      	push	{r7, lr}
 800a948:	b084      	sub	sp, #16
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	6078      	str	r0, [r7, #4]
 800a94e:	4608      	mov	r0, r1
 800a950:	4611      	mov	r1, r2
 800a952:	461a      	mov	r2, r3
 800a954:	4603      	mov	r3, r0
 800a956:	70fb      	strb	r3, [r7, #3]
 800a958:	460b      	mov	r3, r1
 800a95a:	70bb      	strb	r3, [r7, #2]
 800a95c:	4613      	mov	r3, r2
 800a95e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a960:	2300      	movs	r3, #0
 800a962:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a964:	2300      	movs	r3, #0
 800a966:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a96e:	78bb      	ldrb	r3, [r7, #2]
 800a970:	883a      	ldrh	r2, [r7, #0]
 800a972:	78f9      	ldrb	r1, [r7, #3]
 800a974:	f7fa fb84 	bl	8005080 <HAL_PCD_EP_Open>
 800a978:	4603      	mov	r3, r0
 800a97a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a97c:	7bfb      	ldrb	r3, [r7, #15]
 800a97e:	4618      	mov	r0, r3
 800a980:	f000 f904 	bl	800ab8c <USBD_Get_USB_Status>
 800a984:	4603      	mov	r3, r0
 800a986:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a988:	7bbb      	ldrb	r3, [r7, #14]
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3710      	adds	r7, #16
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}

0800a992 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a992:	b580      	push	{r7, lr}
 800a994:	b084      	sub	sp, #16
 800a996:	af00      	add	r7, sp, #0
 800a998:	6078      	str	r0, [r7, #4]
 800a99a:	460b      	mov	r3, r1
 800a99c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a9ac:	78fa      	ldrb	r2, [r7, #3]
 800a9ae:	4611      	mov	r1, r2
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f7fa fbcd 	bl	8005150 <HAL_PCD_EP_Close>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9ba:	7bfb      	ldrb	r3, [r7, #15]
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f000 f8e5 	bl	800ab8c <USBD_Get_USB_Status>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3710      	adds	r7, #16
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	460b      	mov	r3, r1
 800a9da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a9ea:	78fa      	ldrb	r2, [r7, #3]
 800a9ec:	4611      	mov	r1, r2
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7fa fca5 	bl	800533e <HAL_PCD_EP_SetStall>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9f8:	7bfb      	ldrb	r3, [r7, #15]
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f000 f8c6 	bl	800ab8c <USBD_Get_USB_Status>
 800aa00:	4603      	mov	r3, r0
 800aa02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa04:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3710      	adds	r7, #16
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}

0800aa0e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa0e:	b580      	push	{r7, lr}
 800aa10:	b084      	sub	sp, #16
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	6078      	str	r0, [r7, #4]
 800aa16:	460b      	mov	r3, r1
 800aa18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aa28:	78fa      	ldrb	r2, [r7, #3]
 800aa2a:	4611      	mov	r1, r2
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7fa fcea 	bl	8005406 <HAL_PCD_EP_ClrStall>
 800aa32:	4603      	mov	r3, r0
 800aa34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa36:	7bfb      	ldrb	r3, [r7, #15]
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f000 f8a7 	bl	800ab8c <USBD_Get_USB_Status>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa42:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3710      	adds	r7, #16
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b085      	sub	sp, #20
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	460b      	mov	r3, r1
 800aa56:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aa5e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aa60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	da0b      	bge.n	800aa80 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aa68:	78fb      	ldrb	r3, [r7, #3]
 800aa6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa6e:	68f9      	ldr	r1, [r7, #12]
 800aa70:	4613      	mov	r3, r2
 800aa72:	00db      	lsls	r3, r3, #3
 800aa74:	1a9b      	subs	r3, r3, r2
 800aa76:	009b      	lsls	r3, r3, #2
 800aa78:	440b      	add	r3, r1
 800aa7a:	333e      	adds	r3, #62	; 0x3e
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	e00b      	b.n	800aa98 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aa80:	78fb      	ldrb	r3, [r7, #3]
 800aa82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa86:	68f9      	ldr	r1, [r7, #12]
 800aa88:	4613      	mov	r3, r2
 800aa8a:	00db      	lsls	r3, r3, #3
 800aa8c:	1a9b      	subs	r3, r3, r2
 800aa8e:	009b      	lsls	r3, r3, #2
 800aa90:	440b      	add	r3, r1
 800aa92:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aa96:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3714      	adds	r7, #20
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr

0800aaa4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	460b      	mov	r3, r1
 800aaae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aab0:	2300      	movs	r3, #0
 800aab2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aab4:	2300      	movs	r3, #0
 800aab6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aabe:	78fa      	ldrb	r2, [r7, #3]
 800aac0:	4611      	mov	r1, r2
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7fa fab7 	bl	8005036 <HAL_PCD_SetAddress>
 800aac8:	4603      	mov	r3, r0
 800aaca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aacc:	7bfb      	ldrb	r3, [r7, #15]
 800aace:	4618      	mov	r0, r3
 800aad0:	f000 f85c 	bl	800ab8c <USBD_Get_USB_Status>
 800aad4:	4603      	mov	r3, r0
 800aad6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aad8:	7bbb      	ldrb	r3, [r7, #14]
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3710      	adds	r7, #16
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}

0800aae2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aae2:	b580      	push	{r7, lr}
 800aae4:	b086      	sub	sp, #24
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	60f8      	str	r0, [r7, #12]
 800aaea:	607a      	str	r2, [r7, #4]
 800aaec:	603b      	str	r3, [r7, #0]
 800aaee:	460b      	mov	r3, r1
 800aaf0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ab00:	7af9      	ldrb	r1, [r7, #11]
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	687a      	ldr	r2, [r7, #4]
 800ab06:	f7fa fbd0 	bl	80052aa <HAL_PCD_EP_Transmit>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab0e:	7dfb      	ldrb	r3, [r7, #23]
 800ab10:	4618      	mov	r0, r3
 800ab12:	f000 f83b 	bl	800ab8c <USBD_Get_USB_Status>
 800ab16:	4603      	mov	r3, r0
 800ab18:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab1a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3718      	adds	r7, #24
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b086      	sub	sp, #24
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	60f8      	str	r0, [r7, #12]
 800ab2c:	607a      	str	r2, [r7, #4]
 800ab2e:	603b      	str	r3, [r7, #0]
 800ab30:	460b      	mov	r3, r1
 800ab32:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab34:	2300      	movs	r3, #0
 800ab36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ab42:	7af9      	ldrb	r1, [r7, #11]
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	687a      	ldr	r2, [r7, #4]
 800ab48:	f7fa fb4c 	bl	80051e4 <HAL_PCD_EP_Receive>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab50:	7dfb      	ldrb	r3, [r7, #23]
 800ab52:	4618      	mov	r0, r3
 800ab54:	f000 f81a 	bl	800ab8c <USBD_Get_USB_Status>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab5c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3718      	adds	r7, #24
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b082      	sub	sp, #8
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
 800ab6e:	460b      	mov	r3, r1
 800ab70:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ab78:	78fa      	ldrb	r2, [r7, #3]
 800ab7a:	4611      	mov	r1, r2
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f7fa fb7c 	bl	800527a <HAL_PCD_EP_GetRxCount>
 800ab82:	4603      	mov	r3, r0
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3708      	adds	r7, #8
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b085      	sub	sp, #20
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	4603      	mov	r3, r0
 800ab94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab96:	2300      	movs	r3, #0
 800ab98:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ab9a:	79fb      	ldrb	r3, [r7, #7]
 800ab9c:	2b03      	cmp	r3, #3
 800ab9e:	d817      	bhi.n	800abd0 <USBD_Get_USB_Status+0x44>
 800aba0:	a201      	add	r2, pc, #4	; (adr r2, 800aba8 <USBD_Get_USB_Status+0x1c>)
 800aba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aba6:	bf00      	nop
 800aba8:	0800abb9 	.word	0x0800abb9
 800abac:	0800abbf 	.word	0x0800abbf
 800abb0:	0800abc5 	.word	0x0800abc5
 800abb4:	0800abcb 	.word	0x0800abcb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800abb8:	2300      	movs	r3, #0
 800abba:	73fb      	strb	r3, [r7, #15]
    break;
 800abbc:	e00b      	b.n	800abd6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800abbe:	2303      	movs	r3, #3
 800abc0:	73fb      	strb	r3, [r7, #15]
    break;
 800abc2:	e008      	b.n	800abd6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800abc4:	2301      	movs	r3, #1
 800abc6:	73fb      	strb	r3, [r7, #15]
    break;
 800abc8:	e005      	b.n	800abd6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800abca:	2303      	movs	r3, #3
 800abcc:	73fb      	strb	r3, [r7, #15]
    break;
 800abce:	e002      	b.n	800abd6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800abd0:	2303      	movs	r3, #3
 800abd2:	73fb      	strb	r3, [r7, #15]
    break;
 800abd4:	bf00      	nop
  }
  return usb_status;
 800abd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3714      	adds	r7, #20
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr

0800abe4 <__errno>:
 800abe4:	4b01      	ldr	r3, [pc, #4]	; (800abec <__errno+0x8>)
 800abe6:	6818      	ldr	r0, [r3, #0]
 800abe8:	4770      	bx	lr
 800abea:	bf00      	nop
 800abec:	20000188 	.word	0x20000188

0800abf0 <__libc_init_array>:
 800abf0:	b570      	push	{r4, r5, r6, lr}
 800abf2:	4e0d      	ldr	r6, [pc, #52]	; (800ac28 <__libc_init_array+0x38>)
 800abf4:	4c0d      	ldr	r4, [pc, #52]	; (800ac2c <__libc_init_array+0x3c>)
 800abf6:	1ba4      	subs	r4, r4, r6
 800abf8:	10a4      	asrs	r4, r4, #2
 800abfa:	2500      	movs	r5, #0
 800abfc:	42a5      	cmp	r5, r4
 800abfe:	d109      	bne.n	800ac14 <__libc_init_array+0x24>
 800ac00:	4e0b      	ldr	r6, [pc, #44]	; (800ac30 <__libc_init_array+0x40>)
 800ac02:	4c0c      	ldr	r4, [pc, #48]	; (800ac34 <__libc_init_array+0x44>)
 800ac04:	f002 f968 	bl	800ced8 <_init>
 800ac08:	1ba4      	subs	r4, r4, r6
 800ac0a:	10a4      	asrs	r4, r4, #2
 800ac0c:	2500      	movs	r5, #0
 800ac0e:	42a5      	cmp	r5, r4
 800ac10:	d105      	bne.n	800ac1e <__libc_init_array+0x2e>
 800ac12:	bd70      	pop	{r4, r5, r6, pc}
 800ac14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ac18:	4798      	blx	r3
 800ac1a:	3501      	adds	r5, #1
 800ac1c:	e7ee      	b.n	800abfc <__libc_init_array+0xc>
 800ac1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ac22:	4798      	blx	r3
 800ac24:	3501      	adds	r5, #1
 800ac26:	e7f2      	b.n	800ac0e <__libc_init_array+0x1e>
 800ac28:	0800d1f8 	.word	0x0800d1f8
 800ac2c:	0800d1f8 	.word	0x0800d1f8
 800ac30:	0800d1f8 	.word	0x0800d1f8
 800ac34:	0800d1fc 	.word	0x0800d1fc

0800ac38 <malloc>:
 800ac38:	4b02      	ldr	r3, [pc, #8]	; (800ac44 <malloc+0xc>)
 800ac3a:	4601      	mov	r1, r0
 800ac3c:	6818      	ldr	r0, [r3, #0]
 800ac3e:	f000 b861 	b.w	800ad04 <_malloc_r>
 800ac42:	bf00      	nop
 800ac44:	20000188 	.word	0x20000188

0800ac48 <free>:
 800ac48:	4b02      	ldr	r3, [pc, #8]	; (800ac54 <free+0xc>)
 800ac4a:	4601      	mov	r1, r0
 800ac4c:	6818      	ldr	r0, [r3, #0]
 800ac4e:	f000 b80b 	b.w	800ac68 <_free_r>
 800ac52:	bf00      	nop
 800ac54:	20000188 	.word	0x20000188

0800ac58 <memset>:
 800ac58:	4402      	add	r2, r0
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d100      	bne.n	800ac62 <memset+0xa>
 800ac60:	4770      	bx	lr
 800ac62:	f803 1b01 	strb.w	r1, [r3], #1
 800ac66:	e7f9      	b.n	800ac5c <memset+0x4>

0800ac68 <_free_r>:
 800ac68:	b538      	push	{r3, r4, r5, lr}
 800ac6a:	4605      	mov	r5, r0
 800ac6c:	2900      	cmp	r1, #0
 800ac6e:	d045      	beq.n	800acfc <_free_r+0x94>
 800ac70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac74:	1f0c      	subs	r4, r1, #4
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	bfb8      	it	lt
 800ac7a:	18e4      	addlt	r4, r4, r3
 800ac7c:	f001 fb85 	bl	800c38a <__malloc_lock>
 800ac80:	4a1f      	ldr	r2, [pc, #124]	; (800ad00 <_free_r+0x98>)
 800ac82:	6813      	ldr	r3, [r2, #0]
 800ac84:	4610      	mov	r0, r2
 800ac86:	b933      	cbnz	r3, 800ac96 <_free_r+0x2e>
 800ac88:	6063      	str	r3, [r4, #4]
 800ac8a:	6014      	str	r4, [r2, #0]
 800ac8c:	4628      	mov	r0, r5
 800ac8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac92:	f001 bb7b 	b.w	800c38c <__malloc_unlock>
 800ac96:	42a3      	cmp	r3, r4
 800ac98:	d90c      	bls.n	800acb4 <_free_r+0x4c>
 800ac9a:	6821      	ldr	r1, [r4, #0]
 800ac9c:	1862      	adds	r2, r4, r1
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	bf04      	itt	eq
 800aca2:	681a      	ldreq	r2, [r3, #0]
 800aca4:	685b      	ldreq	r3, [r3, #4]
 800aca6:	6063      	str	r3, [r4, #4]
 800aca8:	bf04      	itt	eq
 800acaa:	1852      	addeq	r2, r2, r1
 800acac:	6022      	streq	r2, [r4, #0]
 800acae:	6004      	str	r4, [r0, #0]
 800acb0:	e7ec      	b.n	800ac8c <_free_r+0x24>
 800acb2:	4613      	mov	r3, r2
 800acb4:	685a      	ldr	r2, [r3, #4]
 800acb6:	b10a      	cbz	r2, 800acbc <_free_r+0x54>
 800acb8:	42a2      	cmp	r2, r4
 800acba:	d9fa      	bls.n	800acb2 <_free_r+0x4a>
 800acbc:	6819      	ldr	r1, [r3, #0]
 800acbe:	1858      	adds	r0, r3, r1
 800acc0:	42a0      	cmp	r0, r4
 800acc2:	d10b      	bne.n	800acdc <_free_r+0x74>
 800acc4:	6820      	ldr	r0, [r4, #0]
 800acc6:	4401      	add	r1, r0
 800acc8:	1858      	adds	r0, r3, r1
 800acca:	4282      	cmp	r2, r0
 800accc:	6019      	str	r1, [r3, #0]
 800acce:	d1dd      	bne.n	800ac8c <_free_r+0x24>
 800acd0:	6810      	ldr	r0, [r2, #0]
 800acd2:	6852      	ldr	r2, [r2, #4]
 800acd4:	605a      	str	r2, [r3, #4]
 800acd6:	4401      	add	r1, r0
 800acd8:	6019      	str	r1, [r3, #0]
 800acda:	e7d7      	b.n	800ac8c <_free_r+0x24>
 800acdc:	d902      	bls.n	800ace4 <_free_r+0x7c>
 800acde:	230c      	movs	r3, #12
 800ace0:	602b      	str	r3, [r5, #0]
 800ace2:	e7d3      	b.n	800ac8c <_free_r+0x24>
 800ace4:	6820      	ldr	r0, [r4, #0]
 800ace6:	1821      	adds	r1, r4, r0
 800ace8:	428a      	cmp	r2, r1
 800acea:	bf04      	itt	eq
 800acec:	6811      	ldreq	r1, [r2, #0]
 800acee:	6852      	ldreq	r2, [r2, #4]
 800acf0:	6062      	str	r2, [r4, #4]
 800acf2:	bf04      	itt	eq
 800acf4:	1809      	addeq	r1, r1, r0
 800acf6:	6021      	streq	r1, [r4, #0]
 800acf8:	605c      	str	r4, [r3, #4]
 800acfa:	e7c7      	b.n	800ac8c <_free_r+0x24>
 800acfc:	bd38      	pop	{r3, r4, r5, pc}
 800acfe:	bf00      	nop
 800ad00:	200003ac 	.word	0x200003ac

0800ad04 <_malloc_r>:
 800ad04:	b570      	push	{r4, r5, r6, lr}
 800ad06:	1ccd      	adds	r5, r1, #3
 800ad08:	f025 0503 	bic.w	r5, r5, #3
 800ad0c:	3508      	adds	r5, #8
 800ad0e:	2d0c      	cmp	r5, #12
 800ad10:	bf38      	it	cc
 800ad12:	250c      	movcc	r5, #12
 800ad14:	2d00      	cmp	r5, #0
 800ad16:	4606      	mov	r6, r0
 800ad18:	db01      	blt.n	800ad1e <_malloc_r+0x1a>
 800ad1a:	42a9      	cmp	r1, r5
 800ad1c:	d903      	bls.n	800ad26 <_malloc_r+0x22>
 800ad1e:	230c      	movs	r3, #12
 800ad20:	6033      	str	r3, [r6, #0]
 800ad22:	2000      	movs	r0, #0
 800ad24:	bd70      	pop	{r4, r5, r6, pc}
 800ad26:	f001 fb30 	bl	800c38a <__malloc_lock>
 800ad2a:	4a21      	ldr	r2, [pc, #132]	; (800adb0 <_malloc_r+0xac>)
 800ad2c:	6814      	ldr	r4, [r2, #0]
 800ad2e:	4621      	mov	r1, r4
 800ad30:	b991      	cbnz	r1, 800ad58 <_malloc_r+0x54>
 800ad32:	4c20      	ldr	r4, [pc, #128]	; (800adb4 <_malloc_r+0xb0>)
 800ad34:	6823      	ldr	r3, [r4, #0]
 800ad36:	b91b      	cbnz	r3, 800ad40 <_malloc_r+0x3c>
 800ad38:	4630      	mov	r0, r6
 800ad3a:	f000 fc99 	bl	800b670 <_sbrk_r>
 800ad3e:	6020      	str	r0, [r4, #0]
 800ad40:	4629      	mov	r1, r5
 800ad42:	4630      	mov	r0, r6
 800ad44:	f000 fc94 	bl	800b670 <_sbrk_r>
 800ad48:	1c43      	adds	r3, r0, #1
 800ad4a:	d124      	bne.n	800ad96 <_malloc_r+0x92>
 800ad4c:	230c      	movs	r3, #12
 800ad4e:	6033      	str	r3, [r6, #0]
 800ad50:	4630      	mov	r0, r6
 800ad52:	f001 fb1b 	bl	800c38c <__malloc_unlock>
 800ad56:	e7e4      	b.n	800ad22 <_malloc_r+0x1e>
 800ad58:	680b      	ldr	r3, [r1, #0]
 800ad5a:	1b5b      	subs	r3, r3, r5
 800ad5c:	d418      	bmi.n	800ad90 <_malloc_r+0x8c>
 800ad5e:	2b0b      	cmp	r3, #11
 800ad60:	d90f      	bls.n	800ad82 <_malloc_r+0x7e>
 800ad62:	600b      	str	r3, [r1, #0]
 800ad64:	50cd      	str	r5, [r1, r3]
 800ad66:	18cc      	adds	r4, r1, r3
 800ad68:	4630      	mov	r0, r6
 800ad6a:	f001 fb0f 	bl	800c38c <__malloc_unlock>
 800ad6e:	f104 000b 	add.w	r0, r4, #11
 800ad72:	1d23      	adds	r3, r4, #4
 800ad74:	f020 0007 	bic.w	r0, r0, #7
 800ad78:	1ac3      	subs	r3, r0, r3
 800ad7a:	d0d3      	beq.n	800ad24 <_malloc_r+0x20>
 800ad7c:	425a      	negs	r2, r3
 800ad7e:	50e2      	str	r2, [r4, r3]
 800ad80:	e7d0      	b.n	800ad24 <_malloc_r+0x20>
 800ad82:	428c      	cmp	r4, r1
 800ad84:	684b      	ldr	r3, [r1, #4]
 800ad86:	bf16      	itet	ne
 800ad88:	6063      	strne	r3, [r4, #4]
 800ad8a:	6013      	streq	r3, [r2, #0]
 800ad8c:	460c      	movne	r4, r1
 800ad8e:	e7eb      	b.n	800ad68 <_malloc_r+0x64>
 800ad90:	460c      	mov	r4, r1
 800ad92:	6849      	ldr	r1, [r1, #4]
 800ad94:	e7cc      	b.n	800ad30 <_malloc_r+0x2c>
 800ad96:	1cc4      	adds	r4, r0, #3
 800ad98:	f024 0403 	bic.w	r4, r4, #3
 800ad9c:	42a0      	cmp	r0, r4
 800ad9e:	d005      	beq.n	800adac <_malloc_r+0xa8>
 800ada0:	1a21      	subs	r1, r4, r0
 800ada2:	4630      	mov	r0, r6
 800ada4:	f000 fc64 	bl	800b670 <_sbrk_r>
 800ada8:	3001      	adds	r0, #1
 800adaa:	d0cf      	beq.n	800ad4c <_malloc_r+0x48>
 800adac:	6025      	str	r5, [r4, #0]
 800adae:	e7db      	b.n	800ad68 <_malloc_r+0x64>
 800adb0:	200003ac 	.word	0x200003ac
 800adb4:	200003b0 	.word	0x200003b0

0800adb8 <__cvt>:
 800adb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800adbc:	ec55 4b10 	vmov	r4, r5, d0
 800adc0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800adc2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800adc6:	2d00      	cmp	r5, #0
 800adc8:	460e      	mov	r6, r1
 800adca:	4691      	mov	r9, r2
 800adcc:	4619      	mov	r1, r3
 800adce:	bfb8      	it	lt
 800add0:	4622      	movlt	r2, r4
 800add2:	462b      	mov	r3, r5
 800add4:	f027 0720 	bic.w	r7, r7, #32
 800add8:	bfbb      	ittet	lt
 800adda:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800adde:	461d      	movlt	r5, r3
 800ade0:	2300      	movge	r3, #0
 800ade2:	232d      	movlt	r3, #45	; 0x2d
 800ade4:	bfb8      	it	lt
 800ade6:	4614      	movlt	r4, r2
 800ade8:	2f46      	cmp	r7, #70	; 0x46
 800adea:	700b      	strb	r3, [r1, #0]
 800adec:	d004      	beq.n	800adf8 <__cvt+0x40>
 800adee:	2f45      	cmp	r7, #69	; 0x45
 800adf0:	d100      	bne.n	800adf4 <__cvt+0x3c>
 800adf2:	3601      	adds	r6, #1
 800adf4:	2102      	movs	r1, #2
 800adf6:	e000      	b.n	800adfa <__cvt+0x42>
 800adf8:	2103      	movs	r1, #3
 800adfa:	ab03      	add	r3, sp, #12
 800adfc:	9301      	str	r3, [sp, #4]
 800adfe:	ab02      	add	r3, sp, #8
 800ae00:	9300      	str	r3, [sp, #0]
 800ae02:	4632      	mov	r2, r6
 800ae04:	4653      	mov	r3, sl
 800ae06:	ec45 4b10 	vmov	d0, r4, r5
 800ae0a:	f000 fced 	bl	800b7e8 <_dtoa_r>
 800ae0e:	2f47      	cmp	r7, #71	; 0x47
 800ae10:	4680      	mov	r8, r0
 800ae12:	d102      	bne.n	800ae1a <__cvt+0x62>
 800ae14:	f019 0f01 	tst.w	r9, #1
 800ae18:	d026      	beq.n	800ae68 <__cvt+0xb0>
 800ae1a:	2f46      	cmp	r7, #70	; 0x46
 800ae1c:	eb08 0906 	add.w	r9, r8, r6
 800ae20:	d111      	bne.n	800ae46 <__cvt+0x8e>
 800ae22:	f898 3000 	ldrb.w	r3, [r8]
 800ae26:	2b30      	cmp	r3, #48	; 0x30
 800ae28:	d10a      	bne.n	800ae40 <__cvt+0x88>
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	4620      	mov	r0, r4
 800ae30:	4629      	mov	r1, r5
 800ae32:	f7f5 fe49 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae36:	b918      	cbnz	r0, 800ae40 <__cvt+0x88>
 800ae38:	f1c6 0601 	rsb	r6, r6, #1
 800ae3c:	f8ca 6000 	str.w	r6, [sl]
 800ae40:	f8da 3000 	ldr.w	r3, [sl]
 800ae44:	4499      	add	r9, r3
 800ae46:	2200      	movs	r2, #0
 800ae48:	2300      	movs	r3, #0
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	4629      	mov	r1, r5
 800ae4e:	f7f5 fe3b 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae52:	b938      	cbnz	r0, 800ae64 <__cvt+0xac>
 800ae54:	2230      	movs	r2, #48	; 0x30
 800ae56:	9b03      	ldr	r3, [sp, #12]
 800ae58:	454b      	cmp	r3, r9
 800ae5a:	d205      	bcs.n	800ae68 <__cvt+0xb0>
 800ae5c:	1c59      	adds	r1, r3, #1
 800ae5e:	9103      	str	r1, [sp, #12]
 800ae60:	701a      	strb	r2, [r3, #0]
 800ae62:	e7f8      	b.n	800ae56 <__cvt+0x9e>
 800ae64:	f8cd 900c 	str.w	r9, [sp, #12]
 800ae68:	9b03      	ldr	r3, [sp, #12]
 800ae6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae6c:	eba3 0308 	sub.w	r3, r3, r8
 800ae70:	4640      	mov	r0, r8
 800ae72:	6013      	str	r3, [r2, #0]
 800ae74:	b004      	add	sp, #16
 800ae76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ae7a <__exponent>:
 800ae7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae7c:	2900      	cmp	r1, #0
 800ae7e:	4604      	mov	r4, r0
 800ae80:	bfba      	itte	lt
 800ae82:	4249      	neglt	r1, r1
 800ae84:	232d      	movlt	r3, #45	; 0x2d
 800ae86:	232b      	movge	r3, #43	; 0x2b
 800ae88:	2909      	cmp	r1, #9
 800ae8a:	f804 2b02 	strb.w	r2, [r4], #2
 800ae8e:	7043      	strb	r3, [r0, #1]
 800ae90:	dd20      	ble.n	800aed4 <__exponent+0x5a>
 800ae92:	f10d 0307 	add.w	r3, sp, #7
 800ae96:	461f      	mov	r7, r3
 800ae98:	260a      	movs	r6, #10
 800ae9a:	fb91 f5f6 	sdiv	r5, r1, r6
 800ae9e:	fb06 1115 	mls	r1, r6, r5, r1
 800aea2:	3130      	adds	r1, #48	; 0x30
 800aea4:	2d09      	cmp	r5, #9
 800aea6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800aeaa:	f103 32ff 	add.w	r2, r3, #4294967295
 800aeae:	4629      	mov	r1, r5
 800aeb0:	dc09      	bgt.n	800aec6 <__exponent+0x4c>
 800aeb2:	3130      	adds	r1, #48	; 0x30
 800aeb4:	3b02      	subs	r3, #2
 800aeb6:	f802 1c01 	strb.w	r1, [r2, #-1]
 800aeba:	42bb      	cmp	r3, r7
 800aebc:	4622      	mov	r2, r4
 800aebe:	d304      	bcc.n	800aeca <__exponent+0x50>
 800aec0:	1a10      	subs	r0, r2, r0
 800aec2:	b003      	add	sp, #12
 800aec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aec6:	4613      	mov	r3, r2
 800aec8:	e7e7      	b.n	800ae9a <__exponent+0x20>
 800aeca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aece:	f804 2b01 	strb.w	r2, [r4], #1
 800aed2:	e7f2      	b.n	800aeba <__exponent+0x40>
 800aed4:	2330      	movs	r3, #48	; 0x30
 800aed6:	4419      	add	r1, r3
 800aed8:	7083      	strb	r3, [r0, #2]
 800aeda:	1d02      	adds	r2, r0, #4
 800aedc:	70c1      	strb	r1, [r0, #3]
 800aede:	e7ef      	b.n	800aec0 <__exponent+0x46>

0800aee0 <_printf_float>:
 800aee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee4:	b08d      	sub	sp, #52	; 0x34
 800aee6:	460c      	mov	r4, r1
 800aee8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800aeec:	4616      	mov	r6, r2
 800aeee:	461f      	mov	r7, r3
 800aef0:	4605      	mov	r5, r0
 800aef2:	f001 fa31 	bl	800c358 <_localeconv_r>
 800aef6:	6803      	ldr	r3, [r0, #0]
 800aef8:	9304      	str	r3, [sp, #16]
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7f5 f968 	bl	80001d0 <strlen>
 800af00:	2300      	movs	r3, #0
 800af02:	930a      	str	r3, [sp, #40]	; 0x28
 800af04:	f8d8 3000 	ldr.w	r3, [r8]
 800af08:	9005      	str	r0, [sp, #20]
 800af0a:	3307      	adds	r3, #7
 800af0c:	f023 0307 	bic.w	r3, r3, #7
 800af10:	f103 0208 	add.w	r2, r3, #8
 800af14:	f894 a018 	ldrb.w	sl, [r4, #24]
 800af18:	f8d4 b000 	ldr.w	fp, [r4]
 800af1c:	f8c8 2000 	str.w	r2, [r8]
 800af20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af24:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800af28:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800af2c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800af30:	9307      	str	r3, [sp, #28]
 800af32:	f8cd 8018 	str.w	r8, [sp, #24]
 800af36:	f04f 32ff 	mov.w	r2, #4294967295
 800af3a:	4ba7      	ldr	r3, [pc, #668]	; (800b1d8 <_printf_float+0x2f8>)
 800af3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af40:	f7f5 fdf4 	bl	8000b2c <__aeabi_dcmpun>
 800af44:	bb70      	cbnz	r0, 800afa4 <_printf_float+0xc4>
 800af46:	f04f 32ff 	mov.w	r2, #4294967295
 800af4a:	4ba3      	ldr	r3, [pc, #652]	; (800b1d8 <_printf_float+0x2f8>)
 800af4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af50:	f7f5 fdce 	bl	8000af0 <__aeabi_dcmple>
 800af54:	bb30      	cbnz	r0, 800afa4 <_printf_float+0xc4>
 800af56:	2200      	movs	r2, #0
 800af58:	2300      	movs	r3, #0
 800af5a:	4640      	mov	r0, r8
 800af5c:	4649      	mov	r1, r9
 800af5e:	f7f5 fdbd 	bl	8000adc <__aeabi_dcmplt>
 800af62:	b110      	cbz	r0, 800af6a <_printf_float+0x8a>
 800af64:	232d      	movs	r3, #45	; 0x2d
 800af66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af6a:	4a9c      	ldr	r2, [pc, #624]	; (800b1dc <_printf_float+0x2fc>)
 800af6c:	4b9c      	ldr	r3, [pc, #624]	; (800b1e0 <_printf_float+0x300>)
 800af6e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800af72:	bf8c      	ite	hi
 800af74:	4690      	movhi	r8, r2
 800af76:	4698      	movls	r8, r3
 800af78:	2303      	movs	r3, #3
 800af7a:	f02b 0204 	bic.w	r2, fp, #4
 800af7e:	6123      	str	r3, [r4, #16]
 800af80:	6022      	str	r2, [r4, #0]
 800af82:	f04f 0900 	mov.w	r9, #0
 800af86:	9700      	str	r7, [sp, #0]
 800af88:	4633      	mov	r3, r6
 800af8a:	aa0b      	add	r2, sp, #44	; 0x2c
 800af8c:	4621      	mov	r1, r4
 800af8e:	4628      	mov	r0, r5
 800af90:	f000 f9e6 	bl	800b360 <_printf_common>
 800af94:	3001      	adds	r0, #1
 800af96:	f040 808d 	bne.w	800b0b4 <_printf_float+0x1d4>
 800af9a:	f04f 30ff 	mov.w	r0, #4294967295
 800af9e:	b00d      	add	sp, #52	; 0x34
 800afa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afa4:	4642      	mov	r2, r8
 800afa6:	464b      	mov	r3, r9
 800afa8:	4640      	mov	r0, r8
 800afaa:	4649      	mov	r1, r9
 800afac:	f7f5 fdbe 	bl	8000b2c <__aeabi_dcmpun>
 800afb0:	b110      	cbz	r0, 800afb8 <_printf_float+0xd8>
 800afb2:	4a8c      	ldr	r2, [pc, #560]	; (800b1e4 <_printf_float+0x304>)
 800afb4:	4b8c      	ldr	r3, [pc, #560]	; (800b1e8 <_printf_float+0x308>)
 800afb6:	e7da      	b.n	800af6e <_printf_float+0x8e>
 800afb8:	6861      	ldr	r1, [r4, #4]
 800afba:	1c4b      	adds	r3, r1, #1
 800afbc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800afc0:	a80a      	add	r0, sp, #40	; 0x28
 800afc2:	d13e      	bne.n	800b042 <_printf_float+0x162>
 800afc4:	2306      	movs	r3, #6
 800afc6:	6063      	str	r3, [r4, #4]
 800afc8:	2300      	movs	r3, #0
 800afca:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800afce:	ab09      	add	r3, sp, #36	; 0x24
 800afd0:	9300      	str	r3, [sp, #0]
 800afd2:	ec49 8b10 	vmov	d0, r8, r9
 800afd6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800afda:	6022      	str	r2, [r4, #0]
 800afdc:	f8cd a004 	str.w	sl, [sp, #4]
 800afe0:	6861      	ldr	r1, [r4, #4]
 800afe2:	4628      	mov	r0, r5
 800afe4:	f7ff fee8 	bl	800adb8 <__cvt>
 800afe8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800afec:	2b47      	cmp	r3, #71	; 0x47
 800afee:	4680      	mov	r8, r0
 800aff0:	d109      	bne.n	800b006 <_printf_float+0x126>
 800aff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aff4:	1cd8      	adds	r0, r3, #3
 800aff6:	db02      	blt.n	800affe <_printf_float+0x11e>
 800aff8:	6862      	ldr	r2, [r4, #4]
 800affa:	4293      	cmp	r3, r2
 800affc:	dd47      	ble.n	800b08e <_printf_float+0x1ae>
 800affe:	f1aa 0a02 	sub.w	sl, sl, #2
 800b002:	fa5f fa8a 	uxtb.w	sl, sl
 800b006:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b00a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b00c:	d824      	bhi.n	800b058 <_printf_float+0x178>
 800b00e:	3901      	subs	r1, #1
 800b010:	4652      	mov	r2, sl
 800b012:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b016:	9109      	str	r1, [sp, #36]	; 0x24
 800b018:	f7ff ff2f 	bl	800ae7a <__exponent>
 800b01c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b01e:	1813      	adds	r3, r2, r0
 800b020:	2a01      	cmp	r2, #1
 800b022:	4681      	mov	r9, r0
 800b024:	6123      	str	r3, [r4, #16]
 800b026:	dc02      	bgt.n	800b02e <_printf_float+0x14e>
 800b028:	6822      	ldr	r2, [r4, #0]
 800b02a:	07d1      	lsls	r1, r2, #31
 800b02c:	d501      	bpl.n	800b032 <_printf_float+0x152>
 800b02e:	3301      	adds	r3, #1
 800b030:	6123      	str	r3, [r4, #16]
 800b032:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b036:	2b00      	cmp	r3, #0
 800b038:	d0a5      	beq.n	800af86 <_printf_float+0xa6>
 800b03a:	232d      	movs	r3, #45	; 0x2d
 800b03c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b040:	e7a1      	b.n	800af86 <_printf_float+0xa6>
 800b042:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800b046:	f000 8177 	beq.w	800b338 <_printf_float+0x458>
 800b04a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b04e:	d1bb      	bne.n	800afc8 <_printf_float+0xe8>
 800b050:	2900      	cmp	r1, #0
 800b052:	d1b9      	bne.n	800afc8 <_printf_float+0xe8>
 800b054:	2301      	movs	r3, #1
 800b056:	e7b6      	b.n	800afc6 <_printf_float+0xe6>
 800b058:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800b05c:	d119      	bne.n	800b092 <_printf_float+0x1b2>
 800b05e:	2900      	cmp	r1, #0
 800b060:	6863      	ldr	r3, [r4, #4]
 800b062:	dd0c      	ble.n	800b07e <_printf_float+0x19e>
 800b064:	6121      	str	r1, [r4, #16]
 800b066:	b913      	cbnz	r3, 800b06e <_printf_float+0x18e>
 800b068:	6822      	ldr	r2, [r4, #0]
 800b06a:	07d2      	lsls	r2, r2, #31
 800b06c:	d502      	bpl.n	800b074 <_printf_float+0x194>
 800b06e:	3301      	adds	r3, #1
 800b070:	440b      	add	r3, r1
 800b072:	6123      	str	r3, [r4, #16]
 800b074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b076:	65a3      	str	r3, [r4, #88]	; 0x58
 800b078:	f04f 0900 	mov.w	r9, #0
 800b07c:	e7d9      	b.n	800b032 <_printf_float+0x152>
 800b07e:	b913      	cbnz	r3, 800b086 <_printf_float+0x1a6>
 800b080:	6822      	ldr	r2, [r4, #0]
 800b082:	07d0      	lsls	r0, r2, #31
 800b084:	d501      	bpl.n	800b08a <_printf_float+0x1aa>
 800b086:	3302      	adds	r3, #2
 800b088:	e7f3      	b.n	800b072 <_printf_float+0x192>
 800b08a:	2301      	movs	r3, #1
 800b08c:	e7f1      	b.n	800b072 <_printf_float+0x192>
 800b08e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800b092:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b096:	4293      	cmp	r3, r2
 800b098:	db05      	blt.n	800b0a6 <_printf_float+0x1c6>
 800b09a:	6822      	ldr	r2, [r4, #0]
 800b09c:	6123      	str	r3, [r4, #16]
 800b09e:	07d1      	lsls	r1, r2, #31
 800b0a0:	d5e8      	bpl.n	800b074 <_printf_float+0x194>
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	e7e5      	b.n	800b072 <_printf_float+0x192>
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	bfd4      	ite	le
 800b0aa:	f1c3 0302 	rsble	r3, r3, #2
 800b0ae:	2301      	movgt	r3, #1
 800b0b0:	4413      	add	r3, r2
 800b0b2:	e7de      	b.n	800b072 <_printf_float+0x192>
 800b0b4:	6823      	ldr	r3, [r4, #0]
 800b0b6:	055a      	lsls	r2, r3, #21
 800b0b8:	d407      	bmi.n	800b0ca <_printf_float+0x1ea>
 800b0ba:	6923      	ldr	r3, [r4, #16]
 800b0bc:	4642      	mov	r2, r8
 800b0be:	4631      	mov	r1, r6
 800b0c0:	4628      	mov	r0, r5
 800b0c2:	47b8      	blx	r7
 800b0c4:	3001      	adds	r0, #1
 800b0c6:	d12b      	bne.n	800b120 <_printf_float+0x240>
 800b0c8:	e767      	b.n	800af9a <_printf_float+0xba>
 800b0ca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b0ce:	f240 80dc 	bls.w	800b28a <_printf_float+0x3aa>
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b0da:	f7f5 fcf5 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0de:	2800      	cmp	r0, #0
 800b0e0:	d033      	beq.n	800b14a <_printf_float+0x26a>
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	4a41      	ldr	r2, [pc, #260]	; (800b1ec <_printf_float+0x30c>)
 800b0e6:	4631      	mov	r1, r6
 800b0e8:	4628      	mov	r0, r5
 800b0ea:	47b8      	blx	r7
 800b0ec:	3001      	adds	r0, #1
 800b0ee:	f43f af54 	beq.w	800af9a <_printf_float+0xba>
 800b0f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	db02      	blt.n	800b100 <_printf_float+0x220>
 800b0fa:	6823      	ldr	r3, [r4, #0]
 800b0fc:	07d8      	lsls	r0, r3, #31
 800b0fe:	d50f      	bpl.n	800b120 <_printf_float+0x240>
 800b100:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b104:	4631      	mov	r1, r6
 800b106:	4628      	mov	r0, r5
 800b108:	47b8      	blx	r7
 800b10a:	3001      	adds	r0, #1
 800b10c:	f43f af45 	beq.w	800af9a <_printf_float+0xba>
 800b110:	f04f 0800 	mov.w	r8, #0
 800b114:	f104 091a 	add.w	r9, r4, #26
 800b118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b11a:	3b01      	subs	r3, #1
 800b11c:	4543      	cmp	r3, r8
 800b11e:	dc09      	bgt.n	800b134 <_printf_float+0x254>
 800b120:	6823      	ldr	r3, [r4, #0]
 800b122:	079b      	lsls	r3, r3, #30
 800b124:	f100 8103 	bmi.w	800b32e <_printf_float+0x44e>
 800b128:	68e0      	ldr	r0, [r4, #12]
 800b12a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b12c:	4298      	cmp	r0, r3
 800b12e:	bfb8      	it	lt
 800b130:	4618      	movlt	r0, r3
 800b132:	e734      	b.n	800af9e <_printf_float+0xbe>
 800b134:	2301      	movs	r3, #1
 800b136:	464a      	mov	r2, r9
 800b138:	4631      	mov	r1, r6
 800b13a:	4628      	mov	r0, r5
 800b13c:	47b8      	blx	r7
 800b13e:	3001      	adds	r0, #1
 800b140:	f43f af2b 	beq.w	800af9a <_printf_float+0xba>
 800b144:	f108 0801 	add.w	r8, r8, #1
 800b148:	e7e6      	b.n	800b118 <_printf_float+0x238>
 800b14a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	dc2b      	bgt.n	800b1a8 <_printf_float+0x2c8>
 800b150:	2301      	movs	r3, #1
 800b152:	4a26      	ldr	r2, [pc, #152]	; (800b1ec <_printf_float+0x30c>)
 800b154:	4631      	mov	r1, r6
 800b156:	4628      	mov	r0, r5
 800b158:	47b8      	blx	r7
 800b15a:	3001      	adds	r0, #1
 800b15c:	f43f af1d 	beq.w	800af9a <_printf_float+0xba>
 800b160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b162:	b923      	cbnz	r3, 800b16e <_printf_float+0x28e>
 800b164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b166:	b913      	cbnz	r3, 800b16e <_printf_float+0x28e>
 800b168:	6823      	ldr	r3, [r4, #0]
 800b16a:	07d9      	lsls	r1, r3, #31
 800b16c:	d5d8      	bpl.n	800b120 <_printf_float+0x240>
 800b16e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b172:	4631      	mov	r1, r6
 800b174:	4628      	mov	r0, r5
 800b176:	47b8      	blx	r7
 800b178:	3001      	adds	r0, #1
 800b17a:	f43f af0e 	beq.w	800af9a <_printf_float+0xba>
 800b17e:	f04f 0900 	mov.w	r9, #0
 800b182:	f104 0a1a 	add.w	sl, r4, #26
 800b186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b188:	425b      	negs	r3, r3
 800b18a:	454b      	cmp	r3, r9
 800b18c:	dc01      	bgt.n	800b192 <_printf_float+0x2b2>
 800b18e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b190:	e794      	b.n	800b0bc <_printf_float+0x1dc>
 800b192:	2301      	movs	r3, #1
 800b194:	4652      	mov	r2, sl
 800b196:	4631      	mov	r1, r6
 800b198:	4628      	mov	r0, r5
 800b19a:	47b8      	blx	r7
 800b19c:	3001      	adds	r0, #1
 800b19e:	f43f aefc 	beq.w	800af9a <_printf_float+0xba>
 800b1a2:	f109 0901 	add.w	r9, r9, #1
 800b1a6:	e7ee      	b.n	800b186 <_printf_float+0x2a6>
 800b1a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	bfa8      	it	ge
 800b1b0:	461a      	movge	r2, r3
 800b1b2:	2a00      	cmp	r2, #0
 800b1b4:	4691      	mov	r9, r2
 800b1b6:	dd07      	ble.n	800b1c8 <_printf_float+0x2e8>
 800b1b8:	4613      	mov	r3, r2
 800b1ba:	4631      	mov	r1, r6
 800b1bc:	4642      	mov	r2, r8
 800b1be:	4628      	mov	r0, r5
 800b1c0:	47b8      	blx	r7
 800b1c2:	3001      	adds	r0, #1
 800b1c4:	f43f aee9 	beq.w	800af9a <_printf_float+0xba>
 800b1c8:	f104 031a 	add.w	r3, r4, #26
 800b1cc:	f04f 0b00 	mov.w	fp, #0
 800b1d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b1d4:	9306      	str	r3, [sp, #24]
 800b1d6:	e015      	b.n	800b204 <_printf_float+0x324>
 800b1d8:	7fefffff 	.word	0x7fefffff
 800b1dc:	0800cf98 	.word	0x0800cf98
 800b1e0:	0800cf94 	.word	0x0800cf94
 800b1e4:	0800cfa0 	.word	0x0800cfa0
 800b1e8:	0800cf9c 	.word	0x0800cf9c
 800b1ec:	0800cfa4 	.word	0x0800cfa4
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	9a06      	ldr	r2, [sp, #24]
 800b1f4:	4631      	mov	r1, r6
 800b1f6:	4628      	mov	r0, r5
 800b1f8:	47b8      	blx	r7
 800b1fa:	3001      	adds	r0, #1
 800b1fc:	f43f aecd 	beq.w	800af9a <_printf_float+0xba>
 800b200:	f10b 0b01 	add.w	fp, fp, #1
 800b204:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b208:	ebaa 0309 	sub.w	r3, sl, r9
 800b20c:	455b      	cmp	r3, fp
 800b20e:	dcef      	bgt.n	800b1f0 <_printf_float+0x310>
 800b210:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b214:	429a      	cmp	r2, r3
 800b216:	44d0      	add	r8, sl
 800b218:	db15      	blt.n	800b246 <_printf_float+0x366>
 800b21a:	6823      	ldr	r3, [r4, #0]
 800b21c:	07da      	lsls	r2, r3, #31
 800b21e:	d412      	bmi.n	800b246 <_printf_float+0x366>
 800b220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b222:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b224:	eba3 020a 	sub.w	r2, r3, sl
 800b228:	eba3 0a01 	sub.w	sl, r3, r1
 800b22c:	4592      	cmp	sl, r2
 800b22e:	bfa8      	it	ge
 800b230:	4692      	movge	sl, r2
 800b232:	f1ba 0f00 	cmp.w	sl, #0
 800b236:	dc0e      	bgt.n	800b256 <_printf_float+0x376>
 800b238:	f04f 0800 	mov.w	r8, #0
 800b23c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b240:	f104 091a 	add.w	r9, r4, #26
 800b244:	e019      	b.n	800b27a <_printf_float+0x39a>
 800b246:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b24a:	4631      	mov	r1, r6
 800b24c:	4628      	mov	r0, r5
 800b24e:	47b8      	blx	r7
 800b250:	3001      	adds	r0, #1
 800b252:	d1e5      	bne.n	800b220 <_printf_float+0x340>
 800b254:	e6a1      	b.n	800af9a <_printf_float+0xba>
 800b256:	4653      	mov	r3, sl
 800b258:	4642      	mov	r2, r8
 800b25a:	4631      	mov	r1, r6
 800b25c:	4628      	mov	r0, r5
 800b25e:	47b8      	blx	r7
 800b260:	3001      	adds	r0, #1
 800b262:	d1e9      	bne.n	800b238 <_printf_float+0x358>
 800b264:	e699      	b.n	800af9a <_printf_float+0xba>
 800b266:	2301      	movs	r3, #1
 800b268:	464a      	mov	r2, r9
 800b26a:	4631      	mov	r1, r6
 800b26c:	4628      	mov	r0, r5
 800b26e:	47b8      	blx	r7
 800b270:	3001      	adds	r0, #1
 800b272:	f43f ae92 	beq.w	800af9a <_printf_float+0xba>
 800b276:	f108 0801 	add.w	r8, r8, #1
 800b27a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b27e:	1a9b      	subs	r3, r3, r2
 800b280:	eba3 030a 	sub.w	r3, r3, sl
 800b284:	4543      	cmp	r3, r8
 800b286:	dcee      	bgt.n	800b266 <_printf_float+0x386>
 800b288:	e74a      	b.n	800b120 <_printf_float+0x240>
 800b28a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b28c:	2a01      	cmp	r2, #1
 800b28e:	dc01      	bgt.n	800b294 <_printf_float+0x3b4>
 800b290:	07db      	lsls	r3, r3, #31
 800b292:	d53a      	bpl.n	800b30a <_printf_float+0x42a>
 800b294:	2301      	movs	r3, #1
 800b296:	4642      	mov	r2, r8
 800b298:	4631      	mov	r1, r6
 800b29a:	4628      	mov	r0, r5
 800b29c:	47b8      	blx	r7
 800b29e:	3001      	adds	r0, #1
 800b2a0:	f43f ae7b 	beq.w	800af9a <_printf_float+0xba>
 800b2a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2a8:	4631      	mov	r1, r6
 800b2aa:	4628      	mov	r0, r5
 800b2ac:	47b8      	blx	r7
 800b2ae:	3001      	adds	r0, #1
 800b2b0:	f108 0801 	add.w	r8, r8, #1
 800b2b4:	f43f ae71 	beq.w	800af9a <_printf_float+0xba>
 800b2b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f103 3aff 	add.w	sl, r3, #4294967295
 800b2c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	f7f5 fbff 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2ca:	b9c8      	cbnz	r0, 800b300 <_printf_float+0x420>
 800b2cc:	4653      	mov	r3, sl
 800b2ce:	4642      	mov	r2, r8
 800b2d0:	4631      	mov	r1, r6
 800b2d2:	4628      	mov	r0, r5
 800b2d4:	47b8      	blx	r7
 800b2d6:	3001      	adds	r0, #1
 800b2d8:	d10e      	bne.n	800b2f8 <_printf_float+0x418>
 800b2da:	e65e      	b.n	800af9a <_printf_float+0xba>
 800b2dc:	2301      	movs	r3, #1
 800b2de:	4652      	mov	r2, sl
 800b2e0:	4631      	mov	r1, r6
 800b2e2:	4628      	mov	r0, r5
 800b2e4:	47b8      	blx	r7
 800b2e6:	3001      	adds	r0, #1
 800b2e8:	f43f ae57 	beq.w	800af9a <_printf_float+0xba>
 800b2ec:	f108 0801 	add.w	r8, r8, #1
 800b2f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2f2:	3b01      	subs	r3, #1
 800b2f4:	4543      	cmp	r3, r8
 800b2f6:	dcf1      	bgt.n	800b2dc <_printf_float+0x3fc>
 800b2f8:	464b      	mov	r3, r9
 800b2fa:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b2fe:	e6de      	b.n	800b0be <_printf_float+0x1de>
 800b300:	f04f 0800 	mov.w	r8, #0
 800b304:	f104 0a1a 	add.w	sl, r4, #26
 800b308:	e7f2      	b.n	800b2f0 <_printf_float+0x410>
 800b30a:	2301      	movs	r3, #1
 800b30c:	e7df      	b.n	800b2ce <_printf_float+0x3ee>
 800b30e:	2301      	movs	r3, #1
 800b310:	464a      	mov	r2, r9
 800b312:	4631      	mov	r1, r6
 800b314:	4628      	mov	r0, r5
 800b316:	47b8      	blx	r7
 800b318:	3001      	adds	r0, #1
 800b31a:	f43f ae3e 	beq.w	800af9a <_printf_float+0xba>
 800b31e:	f108 0801 	add.w	r8, r8, #1
 800b322:	68e3      	ldr	r3, [r4, #12]
 800b324:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b326:	1a9b      	subs	r3, r3, r2
 800b328:	4543      	cmp	r3, r8
 800b32a:	dcf0      	bgt.n	800b30e <_printf_float+0x42e>
 800b32c:	e6fc      	b.n	800b128 <_printf_float+0x248>
 800b32e:	f04f 0800 	mov.w	r8, #0
 800b332:	f104 0919 	add.w	r9, r4, #25
 800b336:	e7f4      	b.n	800b322 <_printf_float+0x442>
 800b338:	2900      	cmp	r1, #0
 800b33a:	f43f ae8b 	beq.w	800b054 <_printf_float+0x174>
 800b33e:	2300      	movs	r3, #0
 800b340:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b344:	ab09      	add	r3, sp, #36	; 0x24
 800b346:	9300      	str	r3, [sp, #0]
 800b348:	ec49 8b10 	vmov	d0, r8, r9
 800b34c:	6022      	str	r2, [r4, #0]
 800b34e:	f8cd a004 	str.w	sl, [sp, #4]
 800b352:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b356:	4628      	mov	r0, r5
 800b358:	f7ff fd2e 	bl	800adb8 <__cvt>
 800b35c:	4680      	mov	r8, r0
 800b35e:	e648      	b.n	800aff2 <_printf_float+0x112>

0800b360 <_printf_common>:
 800b360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b364:	4691      	mov	r9, r2
 800b366:	461f      	mov	r7, r3
 800b368:	688a      	ldr	r2, [r1, #8]
 800b36a:	690b      	ldr	r3, [r1, #16]
 800b36c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b370:	4293      	cmp	r3, r2
 800b372:	bfb8      	it	lt
 800b374:	4613      	movlt	r3, r2
 800b376:	f8c9 3000 	str.w	r3, [r9]
 800b37a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b37e:	4606      	mov	r6, r0
 800b380:	460c      	mov	r4, r1
 800b382:	b112      	cbz	r2, 800b38a <_printf_common+0x2a>
 800b384:	3301      	adds	r3, #1
 800b386:	f8c9 3000 	str.w	r3, [r9]
 800b38a:	6823      	ldr	r3, [r4, #0]
 800b38c:	0699      	lsls	r1, r3, #26
 800b38e:	bf42      	ittt	mi
 800b390:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b394:	3302      	addmi	r3, #2
 800b396:	f8c9 3000 	strmi.w	r3, [r9]
 800b39a:	6825      	ldr	r5, [r4, #0]
 800b39c:	f015 0506 	ands.w	r5, r5, #6
 800b3a0:	d107      	bne.n	800b3b2 <_printf_common+0x52>
 800b3a2:	f104 0a19 	add.w	sl, r4, #25
 800b3a6:	68e3      	ldr	r3, [r4, #12]
 800b3a8:	f8d9 2000 	ldr.w	r2, [r9]
 800b3ac:	1a9b      	subs	r3, r3, r2
 800b3ae:	42ab      	cmp	r3, r5
 800b3b0:	dc28      	bgt.n	800b404 <_printf_common+0xa4>
 800b3b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b3b6:	6822      	ldr	r2, [r4, #0]
 800b3b8:	3300      	adds	r3, #0
 800b3ba:	bf18      	it	ne
 800b3bc:	2301      	movne	r3, #1
 800b3be:	0692      	lsls	r2, r2, #26
 800b3c0:	d42d      	bmi.n	800b41e <_printf_common+0xbe>
 800b3c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b3c6:	4639      	mov	r1, r7
 800b3c8:	4630      	mov	r0, r6
 800b3ca:	47c0      	blx	r8
 800b3cc:	3001      	adds	r0, #1
 800b3ce:	d020      	beq.n	800b412 <_printf_common+0xb2>
 800b3d0:	6823      	ldr	r3, [r4, #0]
 800b3d2:	68e5      	ldr	r5, [r4, #12]
 800b3d4:	f8d9 2000 	ldr.w	r2, [r9]
 800b3d8:	f003 0306 	and.w	r3, r3, #6
 800b3dc:	2b04      	cmp	r3, #4
 800b3de:	bf08      	it	eq
 800b3e0:	1aad      	subeq	r5, r5, r2
 800b3e2:	68a3      	ldr	r3, [r4, #8]
 800b3e4:	6922      	ldr	r2, [r4, #16]
 800b3e6:	bf0c      	ite	eq
 800b3e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3ec:	2500      	movne	r5, #0
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	bfc4      	itt	gt
 800b3f2:	1a9b      	subgt	r3, r3, r2
 800b3f4:	18ed      	addgt	r5, r5, r3
 800b3f6:	f04f 0900 	mov.w	r9, #0
 800b3fa:	341a      	adds	r4, #26
 800b3fc:	454d      	cmp	r5, r9
 800b3fe:	d11a      	bne.n	800b436 <_printf_common+0xd6>
 800b400:	2000      	movs	r0, #0
 800b402:	e008      	b.n	800b416 <_printf_common+0xb6>
 800b404:	2301      	movs	r3, #1
 800b406:	4652      	mov	r2, sl
 800b408:	4639      	mov	r1, r7
 800b40a:	4630      	mov	r0, r6
 800b40c:	47c0      	blx	r8
 800b40e:	3001      	adds	r0, #1
 800b410:	d103      	bne.n	800b41a <_printf_common+0xba>
 800b412:	f04f 30ff 	mov.w	r0, #4294967295
 800b416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b41a:	3501      	adds	r5, #1
 800b41c:	e7c3      	b.n	800b3a6 <_printf_common+0x46>
 800b41e:	18e1      	adds	r1, r4, r3
 800b420:	1c5a      	adds	r2, r3, #1
 800b422:	2030      	movs	r0, #48	; 0x30
 800b424:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b428:	4422      	add	r2, r4
 800b42a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b42e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b432:	3302      	adds	r3, #2
 800b434:	e7c5      	b.n	800b3c2 <_printf_common+0x62>
 800b436:	2301      	movs	r3, #1
 800b438:	4622      	mov	r2, r4
 800b43a:	4639      	mov	r1, r7
 800b43c:	4630      	mov	r0, r6
 800b43e:	47c0      	blx	r8
 800b440:	3001      	adds	r0, #1
 800b442:	d0e6      	beq.n	800b412 <_printf_common+0xb2>
 800b444:	f109 0901 	add.w	r9, r9, #1
 800b448:	e7d8      	b.n	800b3fc <_printf_common+0x9c>
	...

0800b44c <_printf_i>:
 800b44c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b450:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b454:	460c      	mov	r4, r1
 800b456:	7e09      	ldrb	r1, [r1, #24]
 800b458:	b085      	sub	sp, #20
 800b45a:	296e      	cmp	r1, #110	; 0x6e
 800b45c:	4617      	mov	r7, r2
 800b45e:	4606      	mov	r6, r0
 800b460:	4698      	mov	r8, r3
 800b462:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b464:	f000 80b3 	beq.w	800b5ce <_printf_i+0x182>
 800b468:	d822      	bhi.n	800b4b0 <_printf_i+0x64>
 800b46a:	2963      	cmp	r1, #99	; 0x63
 800b46c:	d036      	beq.n	800b4dc <_printf_i+0x90>
 800b46e:	d80a      	bhi.n	800b486 <_printf_i+0x3a>
 800b470:	2900      	cmp	r1, #0
 800b472:	f000 80b9 	beq.w	800b5e8 <_printf_i+0x19c>
 800b476:	2958      	cmp	r1, #88	; 0x58
 800b478:	f000 8083 	beq.w	800b582 <_printf_i+0x136>
 800b47c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b480:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b484:	e032      	b.n	800b4ec <_printf_i+0xa0>
 800b486:	2964      	cmp	r1, #100	; 0x64
 800b488:	d001      	beq.n	800b48e <_printf_i+0x42>
 800b48a:	2969      	cmp	r1, #105	; 0x69
 800b48c:	d1f6      	bne.n	800b47c <_printf_i+0x30>
 800b48e:	6820      	ldr	r0, [r4, #0]
 800b490:	6813      	ldr	r3, [r2, #0]
 800b492:	0605      	lsls	r5, r0, #24
 800b494:	f103 0104 	add.w	r1, r3, #4
 800b498:	d52a      	bpl.n	800b4f0 <_printf_i+0xa4>
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	6011      	str	r1, [r2, #0]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	da03      	bge.n	800b4aa <_printf_i+0x5e>
 800b4a2:	222d      	movs	r2, #45	; 0x2d
 800b4a4:	425b      	negs	r3, r3
 800b4a6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b4aa:	486f      	ldr	r0, [pc, #444]	; (800b668 <_printf_i+0x21c>)
 800b4ac:	220a      	movs	r2, #10
 800b4ae:	e039      	b.n	800b524 <_printf_i+0xd8>
 800b4b0:	2973      	cmp	r1, #115	; 0x73
 800b4b2:	f000 809d 	beq.w	800b5f0 <_printf_i+0x1a4>
 800b4b6:	d808      	bhi.n	800b4ca <_printf_i+0x7e>
 800b4b8:	296f      	cmp	r1, #111	; 0x6f
 800b4ba:	d020      	beq.n	800b4fe <_printf_i+0xb2>
 800b4bc:	2970      	cmp	r1, #112	; 0x70
 800b4be:	d1dd      	bne.n	800b47c <_printf_i+0x30>
 800b4c0:	6823      	ldr	r3, [r4, #0]
 800b4c2:	f043 0320 	orr.w	r3, r3, #32
 800b4c6:	6023      	str	r3, [r4, #0]
 800b4c8:	e003      	b.n	800b4d2 <_printf_i+0x86>
 800b4ca:	2975      	cmp	r1, #117	; 0x75
 800b4cc:	d017      	beq.n	800b4fe <_printf_i+0xb2>
 800b4ce:	2978      	cmp	r1, #120	; 0x78
 800b4d0:	d1d4      	bne.n	800b47c <_printf_i+0x30>
 800b4d2:	2378      	movs	r3, #120	; 0x78
 800b4d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b4d8:	4864      	ldr	r0, [pc, #400]	; (800b66c <_printf_i+0x220>)
 800b4da:	e055      	b.n	800b588 <_printf_i+0x13c>
 800b4dc:	6813      	ldr	r3, [r2, #0]
 800b4de:	1d19      	adds	r1, r3, #4
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	6011      	str	r1, [r2, #0]
 800b4e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	e08c      	b.n	800b60a <_printf_i+0x1be>
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	6011      	str	r1, [r2, #0]
 800b4f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b4f8:	bf18      	it	ne
 800b4fa:	b21b      	sxthne	r3, r3
 800b4fc:	e7cf      	b.n	800b49e <_printf_i+0x52>
 800b4fe:	6813      	ldr	r3, [r2, #0]
 800b500:	6825      	ldr	r5, [r4, #0]
 800b502:	1d18      	adds	r0, r3, #4
 800b504:	6010      	str	r0, [r2, #0]
 800b506:	0628      	lsls	r0, r5, #24
 800b508:	d501      	bpl.n	800b50e <_printf_i+0xc2>
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	e002      	b.n	800b514 <_printf_i+0xc8>
 800b50e:	0668      	lsls	r0, r5, #25
 800b510:	d5fb      	bpl.n	800b50a <_printf_i+0xbe>
 800b512:	881b      	ldrh	r3, [r3, #0]
 800b514:	4854      	ldr	r0, [pc, #336]	; (800b668 <_printf_i+0x21c>)
 800b516:	296f      	cmp	r1, #111	; 0x6f
 800b518:	bf14      	ite	ne
 800b51a:	220a      	movne	r2, #10
 800b51c:	2208      	moveq	r2, #8
 800b51e:	2100      	movs	r1, #0
 800b520:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b524:	6865      	ldr	r5, [r4, #4]
 800b526:	60a5      	str	r5, [r4, #8]
 800b528:	2d00      	cmp	r5, #0
 800b52a:	f2c0 8095 	blt.w	800b658 <_printf_i+0x20c>
 800b52e:	6821      	ldr	r1, [r4, #0]
 800b530:	f021 0104 	bic.w	r1, r1, #4
 800b534:	6021      	str	r1, [r4, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d13d      	bne.n	800b5b6 <_printf_i+0x16a>
 800b53a:	2d00      	cmp	r5, #0
 800b53c:	f040 808e 	bne.w	800b65c <_printf_i+0x210>
 800b540:	4665      	mov	r5, ip
 800b542:	2a08      	cmp	r2, #8
 800b544:	d10b      	bne.n	800b55e <_printf_i+0x112>
 800b546:	6823      	ldr	r3, [r4, #0]
 800b548:	07db      	lsls	r3, r3, #31
 800b54a:	d508      	bpl.n	800b55e <_printf_i+0x112>
 800b54c:	6923      	ldr	r3, [r4, #16]
 800b54e:	6862      	ldr	r2, [r4, #4]
 800b550:	429a      	cmp	r2, r3
 800b552:	bfde      	ittt	le
 800b554:	2330      	movle	r3, #48	; 0x30
 800b556:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b55a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b55e:	ebac 0305 	sub.w	r3, ip, r5
 800b562:	6123      	str	r3, [r4, #16]
 800b564:	f8cd 8000 	str.w	r8, [sp]
 800b568:	463b      	mov	r3, r7
 800b56a:	aa03      	add	r2, sp, #12
 800b56c:	4621      	mov	r1, r4
 800b56e:	4630      	mov	r0, r6
 800b570:	f7ff fef6 	bl	800b360 <_printf_common>
 800b574:	3001      	adds	r0, #1
 800b576:	d14d      	bne.n	800b614 <_printf_i+0x1c8>
 800b578:	f04f 30ff 	mov.w	r0, #4294967295
 800b57c:	b005      	add	sp, #20
 800b57e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b582:	4839      	ldr	r0, [pc, #228]	; (800b668 <_printf_i+0x21c>)
 800b584:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b588:	6813      	ldr	r3, [r2, #0]
 800b58a:	6821      	ldr	r1, [r4, #0]
 800b58c:	1d1d      	adds	r5, r3, #4
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	6015      	str	r5, [r2, #0]
 800b592:	060a      	lsls	r2, r1, #24
 800b594:	d50b      	bpl.n	800b5ae <_printf_i+0x162>
 800b596:	07ca      	lsls	r2, r1, #31
 800b598:	bf44      	itt	mi
 800b59a:	f041 0120 	orrmi.w	r1, r1, #32
 800b59e:	6021      	strmi	r1, [r4, #0]
 800b5a0:	b91b      	cbnz	r3, 800b5aa <_printf_i+0x15e>
 800b5a2:	6822      	ldr	r2, [r4, #0]
 800b5a4:	f022 0220 	bic.w	r2, r2, #32
 800b5a8:	6022      	str	r2, [r4, #0]
 800b5aa:	2210      	movs	r2, #16
 800b5ac:	e7b7      	b.n	800b51e <_printf_i+0xd2>
 800b5ae:	064d      	lsls	r5, r1, #25
 800b5b0:	bf48      	it	mi
 800b5b2:	b29b      	uxthmi	r3, r3
 800b5b4:	e7ef      	b.n	800b596 <_printf_i+0x14a>
 800b5b6:	4665      	mov	r5, ip
 800b5b8:	fbb3 f1f2 	udiv	r1, r3, r2
 800b5bc:	fb02 3311 	mls	r3, r2, r1, r3
 800b5c0:	5cc3      	ldrb	r3, [r0, r3]
 800b5c2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b5c6:	460b      	mov	r3, r1
 800b5c8:	2900      	cmp	r1, #0
 800b5ca:	d1f5      	bne.n	800b5b8 <_printf_i+0x16c>
 800b5cc:	e7b9      	b.n	800b542 <_printf_i+0xf6>
 800b5ce:	6813      	ldr	r3, [r2, #0]
 800b5d0:	6825      	ldr	r5, [r4, #0]
 800b5d2:	6961      	ldr	r1, [r4, #20]
 800b5d4:	1d18      	adds	r0, r3, #4
 800b5d6:	6010      	str	r0, [r2, #0]
 800b5d8:	0628      	lsls	r0, r5, #24
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	d501      	bpl.n	800b5e2 <_printf_i+0x196>
 800b5de:	6019      	str	r1, [r3, #0]
 800b5e0:	e002      	b.n	800b5e8 <_printf_i+0x19c>
 800b5e2:	066a      	lsls	r2, r5, #25
 800b5e4:	d5fb      	bpl.n	800b5de <_printf_i+0x192>
 800b5e6:	8019      	strh	r1, [r3, #0]
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	6123      	str	r3, [r4, #16]
 800b5ec:	4665      	mov	r5, ip
 800b5ee:	e7b9      	b.n	800b564 <_printf_i+0x118>
 800b5f0:	6813      	ldr	r3, [r2, #0]
 800b5f2:	1d19      	adds	r1, r3, #4
 800b5f4:	6011      	str	r1, [r2, #0]
 800b5f6:	681d      	ldr	r5, [r3, #0]
 800b5f8:	6862      	ldr	r2, [r4, #4]
 800b5fa:	2100      	movs	r1, #0
 800b5fc:	4628      	mov	r0, r5
 800b5fe:	f7f4 fdef 	bl	80001e0 <memchr>
 800b602:	b108      	cbz	r0, 800b608 <_printf_i+0x1bc>
 800b604:	1b40      	subs	r0, r0, r5
 800b606:	6060      	str	r0, [r4, #4]
 800b608:	6863      	ldr	r3, [r4, #4]
 800b60a:	6123      	str	r3, [r4, #16]
 800b60c:	2300      	movs	r3, #0
 800b60e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b612:	e7a7      	b.n	800b564 <_printf_i+0x118>
 800b614:	6923      	ldr	r3, [r4, #16]
 800b616:	462a      	mov	r2, r5
 800b618:	4639      	mov	r1, r7
 800b61a:	4630      	mov	r0, r6
 800b61c:	47c0      	blx	r8
 800b61e:	3001      	adds	r0, #1
 800b620:	d0aa      	beq.n	800b578 <_printf_i+0x12c>
 800b622:	6823      	ldr	r3, [r4, #0]
 800b624:	079b      	lsls	r3, r3, #30
 800b626:	d413      	bmi.n	800b650 <_printf_i+0x204>
 800b628:	68e0      	ldr	r0, [r4, #12]
 800b62a:	9b03      	ldr	r3, [sp, #12]
 800b62c:	4298      	cmp	r0, r3
 800b62e:	bfb8      	it	lt
 800b630:	4618      	movlt	r0, r3
 800b632:	e7a3      	b.n	800b57c <_printf_i+0x130>
 800b634:	2301      	movs	r3, #1
 800b636:	464a      	mov	r2, r9
 800b638:	4639      	mov	r1, r7
 800b63a:	4630      	mov	r0, r6
 800b63c:	47c0      	blx	r8
 800b63e:	3001      	adds	r0, #1
 800b640:	d09a      	beq.n	800b578 <_printf_i+0x12c>
 800b642:	3501      	adds	r5, #1
 800b644:	68e3      	ldr	r3, [r4, #12]
 800b646:	9a03      	ldr	r2, [sp, #12]
 800b648:	1a9b      	subs	r3, r3, r2
 800b64a:	42ab      	cmp	r3, r5
 800b64c:	dcf2      	bgt.n	800b634 <_printf_i+0x1e8>
 800b64e:	e7eb      	b.n	800b628 <_printf_i+0x1dc>
 800b650:	2500      	movs	r5, #0
 800b652:	f104 0919 	add.w	r9, r4, #25
 800b656:	e7f5      	b.n	800b644 <_printf_i+0x1f8>
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d1ac      	bne.n	800b5b6 <_printf_i+0x16a>
 800b65c:	7803      	ldrb	r3, [r0, #0]
 800b65e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b662:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b666:	e76c      	b.n	800b542 <_printf_i+0xf6>
 800b668:	0800cfa6 	.word	0x0800cfa6
 800b66c:	0800cfb7 	.word	0x0800cfb7

0800b670 <_sbrk_r>:
 800b670:	b538      	push	{r3, r4, r5, lr}
 800b672:	4c06      	ldr	r4, [pc, #24]	; (800b68c <_sbrk_r+0x1c>)
 800b674:	2300      	movs	r3, #0
 800b676:	4605      	mov	r5, r0
 800b678:	4608      	mov	r0, r1
 800b67a:	6023      	str	r3, [r4, #0]
 800b67c:	f7f7 fc3e 	bl	8002efc <_sbrk>
 800b680:	1c43      	adds	r3, r0, #1
 800b682:	d102      	bne.n	800b68a <_sbrk_r+0x1a>
 800b684:	6823      	ldr	r3, [r4, #0]
 800b686:	b103      	cbz	r3, 800b68a <_sbrk_r+0x1a>
 800b688:	602b      	str	r3, [r5, #0]
 800b68a:	bd38      	pop	{r3, r4, r5, pc}
 800b68c:	20001fc8 	.word	0x20001fc8

0800b690 <siprintf>:
 800b690:	b40e      	push	{r1, r2, r3}
 800b692:	b500      	push	{lr}
 800b694:	b09c      	sub	sp, #112	; 0x70
 800b696:	ab1d      	add	r3, sp, #116	; 0x74
 800b698:	9002      	str	r0, [sp, #8]
 800b69a:	9006      	str	r0, [sp, #24]
 800b69c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b6a0:	4809      	ldr	r0, [pc, #36]	; (800b6c8 <siprintf+0x38>)
 800b6a2:	9107      	str	r1, [sp, #28]
 800b6a4:	9104      	str	r1, [sp, #16]
 800b6a6:	4909      	ldr	r1, [pc, #36]	; (800b6cc <siprintf+0x3c>)
 800b6a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6ac:	9105      	str	r1, [sp, #20]
 800b6ae:	6800      	ldr	r0, [r0, #0]
 800b6b0:	9301      	str	r3, [sp, #4]
 800b6b2:	a902      	add	r1, sp, #8
 800b6b4:	f001 f9ae 	bl	800ca14 <_svfiprintf_r>
 800b6b8:	9b02      	ldr	r3, [sp, #8]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	701a      	strb	r2, [r3, #0]
 800b6be:	b01c      	add	sp, #112	; 0x70
 800b6c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6c4:	b003      	add	sp, #12
 800b6c6:	4770      	bx	lr
 800b6c8:	20000188 	.word	0x20000188
 800b6cc:	ffff0208 	.word	0xffff0208

0800b6d0 <quorem>:
 800b6d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d4:	6903      	ldr	r3, [r0, #16]
 800b6d6:	690c      	ldr	r4, [r1, #16]
 800b6d8:	42a3      	cmp	r3, r4
 800b6da:	4680      	mov	r8, r0
 800b6dc:	f2c0 8082 	blt.w	800b7e4 <quorem+0x114>
 800b6e0:	3c01      	subs	r4, #1
 800b6e2:	f101 0714 	add.w	r7, r1, #20
 800b6e6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b6ea:	f100 0614 	add.w	r6, r0, #20
 800b6ee:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b6f2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b6f6:	eb06 030c 	add.w	r3, r6, ip
 800b6fa:	3501      	adds	r5, #1
 800b6fc:	eb07 090c 	add.w	r9, r7, ip
 800b700:	9301      	str	r3, [sp, #4]
 800b702:	fbb0 f5f5 	udiv	r5, r0, r5
 800b706:	b395      	cbz	r5, 800b76e <quorem+0x9e>
 800b708:	f04f 0a00 	mov.w	sl, #0
 800b70c:	4638      	mov	r0, r7
 800b70e:	46b6      	mov	lr, r6
 800b710:	46d3      	mov	fp, sl
 800b712:	f850 2b04 	ldr.w	r2, [r0], #4
 800b716:	b293      	uxth	r3, r2
 800b718:	fb05 a303 	mla	r3, r5, r3, sl
 800b71c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b720:	b29b      	uxth	r3, r3
 800b722:	ebab 0303 	sub.w	r3, fp, r3
 800b726:	0c12      	lsrs	r2, r2, #16
 800b728:	f8de b000 	ldr.w	fp, [lr]
 800b72c:	fb05 a202 	mla	r2, r5, r2, sl
 800b730:	fa13 f38b 	uxtah	r3, r3, fp
 800b734:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b738:	fa1f fb82 	uxth.w	fp, r2
 800b73c:	f8de 2000 	ldr.w	r2, [lr]
 800b740:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b744:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b748:	b29b      	uxth	r3, r3
 800b74a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b74e:	4581      	cmp	r9, r0
 800b750:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b754:	f84e 3b04 	str.w	r3, [lr], #4
 800b758:	d2db      	bcs.n	800b712 <quorem+0x42>
 800b75a:	f856 300c 	ldr.w	r3, [r6, ip]
 800b75e:	b933      	cbnz	r3, 800b76e <quorem+0x9e>
 800b760:	9b01      	ldr	r3, [sp, #4]
 800b762:	3b04      	subs	r3, #4
 800b764:	429e      	cmp	r6, r3
 800b766:	461a      	mov	r2, r3
 800b768:	d330      	bcc.n	800b7cc <quorem+0xfc>
 800b76a:	f8c8 4010 	str.w	r4, [r8, #16]
 800b76e:	4640      	mov	r0, r8
 800b770:	f001 f822 	bl	800c7b8 <__mcmp>
 800b774:	2800      	cmp	r0, #0
 800b776:	db25      	blt.n	800b7c4 <quorem+0xf4>
 800b778:	3501      	adds	r5, #1
 800b77a:	4630      	mov	r0, r6
 800b77c:	f04f 0c00 	mov.w	ip, #0
 800b780:	f857 2b04 	ldr.w	r2, [r7], #4
 800b784:	f8d0 e000 	ldr.w	lr, [r0]
 800b788:	b293      	uxth	r3, r2
 800b78a:	ebac 0303 	sub.w	r3, ip, r3
 800b78e:	0c12      	lsrs	r2, r2, #16
 800b790:	fa13 f38e 	uxtah	r3, r3, lr
 800b794:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b798:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b79c:	b29b      	uxth	r3, r3
 800b79e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7a2:	45b9      	cmp	r9, r7
 800b7a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b7a8:	f840 3b04 	str.w	r3, [r0], #4
 800b7ac:	d2e8      	bcs.n	800b780 <quorem+0xb0>
 800b7ae:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b7b2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b7b6:	b92a      	cbnz	r2, 800b7c4 <quorem+0xf4>
 800b7b8:	3b04      	subs	r3, #4
 800b7ba:	429e      	cmp	r6, r3
 800b7bc:	461a      	mov	r2, r3
 800b7be:	d30b      	bcc.n	800b7d8 <quorem+0x108>
 800b7c0:	f8c8 4010 	str.w	r4, [r8, #16]
 800b7c4:	4628      	mov	r0, r5
 800b7c6:	b003      	add	sp, #12
 800b7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7cc:	6812      	ldr	r2, [r2, #0]
 800b7ce:	3b04      	subs	r3, #4
 800b7d0:	2a00      	cmp	r2, #0
 800b7d2:	d1ca      	bne.n	800b76a <quorem+0x9a>
 800b7d4:	3c01      	subs	r4, #1
 800b7d6:	e7c5      	b.n	800b764 <quorem+0x94>
 800b7d8:	6812      	ldr	r2, [r2, #0]
 800b7da:	3b04      	subs	r3, #4
 800b7dc:	2a00      	cmp	r2, #0
 800b7de:	d1ef      	bne.n	800b7c0 <quorem+0xf0>
 800b7e0:	3c01      	subs	r4, #1
 800b7e2:	e7ea      	b.n	800b7ba <quorem+0xea>
 800b7e4:	2000      	movs	r0, #0
 800b7e6:	e7ee      	b.n	800b7c6 <quorem+0xf6>

0800b7e8 <_dtoa_r>:
 800b7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ec:	ec57 6b10 	vmov	r6, r7, d0
 800b7f0:	b097      	sub	sp, #92	; 0x5c
 800b7f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b7f4:	9106      	str	r1, [sp, #24]
 800b7f6:	4604      	mov	r4, r0
 800b7f8:	920b      	str	r2, [sp, #44]	; 0x2c
 800b7fa:	9312      	str	r3, [sp, #72]	; 0x48
 800b7fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b800:	e9cd 6700 	strd	r6, r7, [sp]
 800b804:	b93d      	cbnz	r5, 800b816 <_dtoa_r+0x2e>
 800b806:	2010      	movs	r0, #16
 800b808:	f7ff fa16 	bl	800ac38 <malloc>
 800b80c:	6260      	str	r0, [r4, #36]	; 0x24
 800b80e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b812:	6005      	str	r5, [r0, #0]
 800b814:	60c5      	str	r5, [r0, #12]
 800b816:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b818:	6819      	ldr	r1, [r3, #0]
 800b81a:	b151      	cbz	r1, 800b832 <_dtoa_r+0x4a>
 800b81c:	685a      	ldr	r2, [r3, #4]
 800b81e:	604a      	str	r2, [r1, #4]
 800b820:	2301      	movs	r3, #1
 800b822:	4093      	lsls	r3, r2
 800b824:	608b      	str	r3, [r1, #8]
 800b826:	4620      	mov	r0, r4
 800b828:	f000 fde5 	bl	800c3f6 <_Bfree>
 800b82c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b82e:	2200      	movs	r2, #0
 800b830:	601a      	str	r2, [r3, #0]
 800b832:	1e3b      	subs	r3, r7, #0
 800b834:	bfbb      	ittet	lt
 800b836:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b83a:	9301      	strlt	r3, [sp, #4]
 800b83c:	2300      	movge	r3, #0
 800b83e:	2201      	movlt	r2, #1
 800b840:	bfac      	ite	ge
 800b842:	f8c8 3000 	strge.w	r3, [r8]
 800b846:	f8c8 2000 	strlt.w	r2, [r8]
 800b84a:	4baf      	ldr	r3, [pc, #700]	; (800bb08 <_dtoa_r+0x320>)
 800b84c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b850:	ea33 0308 	bics.w	r3, r3, r8
 800b854:	d114      	bne.n	800b880 <_dtoa_r+0x98>
 800b856:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b858:	f242 730f 	movw	r3, #9999	; 0x270f
 800b85c:	6013      	str	r3, [r2, #0]
 800b85e:	9b00      	ldr	r3, [sp, #0]
 800b860:	b923      	cbnz	r3, 800b86c <_dtoa_r+0x84>
 800b862:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b866:	2800      	cmp	r0, #0
 800b868:	f000 8542 	beq.w	800c2f0 <_dtoa_r+0xb08>
 800b86c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b86e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800bb1c <_dtoa_r+0x334>
 800b872:	2b00      	cmp	r3, #0
 800b874:	f000 8544 	beq.w	800c300 <_dtoa_r+0xb18>
 800b878:	f10b 0303 	add.w	r3, fp, #3
 800b87c:	f000 bd3e 	b.w	800c2fc <_dtoa_r+0xb14>
 800b880:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b884:	2200      	movs	r2, #0
 800b886:	2300      	movs	r3, #0
 800b888:	4630      	mov	r0, r6
 800b88a:	4639      	mov	r1, r7
 800b88c:	f7f5 f91c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b890:	4681      	mov	r9, r0
 800b892:	b168      	cbz	r0, 800b8b0 <_dtoa_r+0xc8>
 800b894:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b896:	2301      	movs	r3, #1
 800b898:	6013      	str	r3, [r2, #0]
 800b89a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	f000 8524 	beq.w	800c2ea <_dtoa_r+0xb02>
 800b8a2:	4b9a      	ldr	r3, [pc, #616]	; (800bb0c <_dtoa_r+0x324>)
 800b8a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b8a6:	f103 3bff 	add.w	fp, r3, #4294967295
 800b8aa:	6013      	str	r3, [r2, #0]
 800b8ac:	f000 bd28 	b.w	800c300 <_dtoa_r+0xb18>
 800b8b0:	aa14      	add	r2, sp, #80	; 0x50
 800b8b2:	a915      	add	r1, sp, #84	; 0x54
 800b8b4:	ec47 6b10 	vmov	d0, r6, r7
 800b8b8:	4620      	mov	r0, r4
 800b8ba:	f000 fff4 	bl	800c8a6 <__d2b>
 800b8be:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b8c2:	9004      	str	r0, [sp, #16]
 800b8c4:	2d00      	cmp	r5, #0
 800b8c6:	d07c      	beq.n	800b9c2 <_dtoa_r+0x1da>
 800b8c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b8cc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800b8d0:	46b2      	mov	sl, r6
 800b8d2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800b8d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b8da:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800b8de:	2200      	movs	r2, #0
 800b8e0:	4b8b      	ldr	r3, [pc, #556]	; (800bb10 <_dtoa_r+0x328>)
 800b8e2:	4650      	mov	r0, sl
 800b8e4:	4659      	mov	r1, fp
 800b8e6:	f7f4 fccf 	bl	8000288 <__aeabi_dsub>
 800b8ea:	a381      	add	r3, pc, #516	; (adr r3, 800baf0 <_dtoa_r+0x308>)
 800b8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f0:	f7f4 fe82 	bl	80005f8 <__aeabi_dmul>
 800b8f4:	a380      	add	r3, pc, #512	; (adr r3, 800baf8 <_dtoa_r+0x310>)
 800b8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fa:	f7f4 fcc7 	bl	800028c <__adddf3>
 800b8fe:	4606      	mov	r6, r0
 800b900:	4628      	mov	r0, r5
 800b902:	460f      	mov	r7, r1
 800b904:	f7f4 fe0e 	bl	8000524 <__aeabi_i2d>
 800b908:	a37d      	add	r3, pc, #500	; (adr r3, 800bb00 <_dtoa_r+0x318>)
 800b90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90e:	f7f4 fe73 	bl	80005f8 <__aeabi_dmul>
 800b912:	4602      	mov	r2, r0
 800b914:	460b      	mov	r3, r1
 800b916:	4630      	mov	r0, r6
 800b918:	4639      	mov	r1, r7
 800b91a:	f7f4 fcb7 	bl	800028c <__adddf3>
 800b91e:	4606      	mov	r6, r0
 800b920:	460f      	mov	r7, r1
 800b922:	f7f5 f919 	bl	8000b58 <__aeabi_d2iz>
 800b926:	2200      	movs	r2, #0
 800b928:	4682      	mov	sl, r0
 800b92a:	2300      	movs	r3, #0
 800b92c:	4630      	mov	r0, r6
 800b92e:	4639      	mov	r1, r7
 800b930:	f7f5 f8d4 	bl	8000adc <__aeabi_dcmplt>
 800b934:	b148      	cbz	r0, 800b94a <_dtoa_r+0x162>
 800b936:	4650      	mov	r0, sl
 800b938:	f7f4 fdf4 	bl	8000524 <__aeabi_i2d>
 800b93c:	4632      	mov	r2, r6
 800b93e:	463b      	mov	r3, r7
 800b940:	f7f5 f8c2 	bl	8000ac8 <__aeabi_dcmpeq>
 800b944:	b908      	cbnz	r0, 800b94a <_dtoa_r+0x162>
 800b946:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b94a:	f1ba 0f16 	cmp.w	sl, #22
 800b94e:	d859      	bhi.n	800ba04 <_dtoa_r+0x21c>
 800b950:	4970      	ldr	r1, [pc, #448]	; (800bb14 <_dtoa_r+0x32c>)
 800b952:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b956:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b95a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b95e:	f7f5 f8db 	bl	8000b18 <__aeabi_dcmpgt>
 800b962:	2800      	cmp	r0, #0
 800b964:	d050      	beq.n	800ba08 <_dtoa_r+0x220>
 800b966:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b96a:	2300      	movs	r3, #0
 800b96c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b96e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b970:	1b5d      	subs	r5, r3, r5
 800b972:	f1b5 0801 	subs.w	r8, r5, #1
 800b976:	bf49      	itett	mi
 800b978:	f1c5 0301 	rsbmi	r3, r5, #1
 800b97c:	2300      	movpl	r3, #0
 800b97e:	9305      	strmi	r3, [sp, #20]
 800b980:	f04f 0800 	movmi.w	r8, #0
 800b984:	bf58      	it	pl
 800b986:	9305      	strpl	r3, [sp, #20]
 800b988:	f1ba 0f00 	cmp.w	sl, #0
 800b98c:	db3e      	blt.n	800ba0c <_dtoa_r+0x224>
 800b98e:	2300      	movs	r3, #0
 800b990:	44d0      	add	r8, sl
 800b992:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b996:	9307      	str	r3, [sp, #28]
 800b998:	9b06      	ldr	r3, [sp, #24]
 800b99a:	2b09      	cmp	r3, #9
 800b99c:	f200 8090 	bhi.w	800bac0 <_dtoa_r+0x2d8>
 800b9a0:	2b05      	cmp	r3, #5
 800b9a2:	bfc4      	itt	gt
 800b9a4:	3b04      	subgt	r3, #4
 800b9a6:	9306      	strgt	r3, [sp, #24]
 800b9a8:	9b06      	ldr	r3, [sp, #24]
 800b9aa:	f1a3 0302 	sub.w	r3, r3, #2
 800b9ae:	bfcc      	ite	gt
 800b9b0:	2500      	movgt	r5, #0
 800b9b2:	2501      	movle	r5, #1
 800b9b4:	2b03      	cmp	r3, #3
 800b9b6:	f200 808f 	bhi.w	800bad8 <_dtoa_r+0x2f0>
 800b9ba:	e8df f003 	tbb	[pc, r3]
 800b9be:	7f7d      	.short	0x7f7d
 800b9c0:	7131      	.short	0x7131
 800b9c2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800b9c6:	441d      	add	r5, r3
 800b9c8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800b9cc:	2820      	cmp	r0, #32
 800b9ce:	dd13      	ble.n	800b9f8 <_dtoa_r+0x210>
 800b9d0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800b9d4:	9b00      	ldr	r3, [sp, #0]
 800b9d6:	fa08 f800 	lsl.w	r8, r8, r0
 800b9da:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b9de:	fa23 f000 	lsr.w	r0, r3, r0
 800b9e2:	ea48 0000 	orr.w	r0, r8, r0
 800b9e6:	f7f4 fd8d 	bl	8000504 <__aeabi_ui2d>
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	4682      	mov	sl, r0
 800b9ee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800b9f2:	3d01      	subs	r5, #1
 800b9f4:	9313      	str	r3, [sp, #76]	; 0x4c
 800b9f6:	e772      	b.n	800b8de <_dtoa_r+0xf6>
 800b9f8:	9b00      	ldr	r3, [sp, #0]
 800b9fa:	f1c0 0020 	rsb	r0, r0, #32
 800b9fe:	fa03 f000 	lsl.w	r0, r3, r0
 800ba02:	e7f0      	b.n	800b9e6 <_dtoa_r+0x1fe>
 800ba04:	2301      	movs	r3, #1
 800ba06:	e7b1      	b.n	800b96c <_dtoa_r+0x184>
 800ba08:	900f      	str	r0, [sp, #60]	; 0x3c
 800ba0a:	e7b0      	b.n	800b96e <_dtoa_r+0x186>
 800ba0c:	9b05      	ldr	r3, [sp, #20]
 800ba0e:	eba3 030a 	sub.w	r3, r3, sl
 800ba12:	9305      	str	r3, [sp, #20]
 800ba14:	f1ca 0300 	rsb	r3, sl, #0
 800ba18:	9307      	str	r3, [sp, #28]
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	930e      	str	r3, [sp, #56]	; 0x38
 800ba1e:	e7bb      	b.n	800b998 <_dtoa_r+0x1b0>
 800ba20:	2301      	movs	r3, #1
 800ba22:	930a      	str	r3, [sp, #40]	; 0x28
 800ba24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	dd59      	ble.n	800bade <_dtoa_r+0x2f6>
 800ba2a:	9302      	str	r3, [sp, #8]
 800ba2c:	4699      	mov	r9, r3
 800ba2e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ba30:	2200      	movs	r2, #0
 800ba32:	6072      	str	r2, [r6, #4]
 800ba34:	2204      	movs	r2, #4
 800ba36:	f102 0014 	add.w	r0, r2, #20
 800ba3a:	4298      	cmp	r0, r3
 800ba3c:	6871      	ldr	r1, [r6, #4]
 800ba3e:	d953      	bls.n	800bae8 <_dtoa_r+0x300>
 800ba40:	4620      	mov	r0, r4
 800ba42:	f000 fca4 	bl	800c38e <_Balloc>
 800ba46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba48:	6030      	str	r0, [r6, #0]
 800ba4a:	f1b9 0f0e 	cmp.w	r9, #14
 800ba4e:	f8d3 b000 	ldr.w	fp, [r3]
 800ba52:	f200 80e6 	bhi.w	800bc22 <_dtoa_r+0x43a>
 800ba56:	2d00      	cmp	r5, #0
 800ba58:	f000 80e3 	beq.w	800bc22 <_dtoa_r+0x43a>
 800ba5c:	ed9d 7b00 	vldr	d7, [sp]
 800ba60:	f1ba 0f00 	cmp.w	sl, #0
 800ba64:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800ba68:	dd74      	ble.n	800bb54 <_dtoa_r+0x36c>
 800ba6a:	4a2a      	ldr	r2, [pc, #168]	; (800bb14 <_dtoa_r+0x32c>)
 800ba6c:	f00a 030f 	and.w	r3, sl, #15
 800ba70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ba74:	ed93 7b00 	vldr	d7, [r3]
 800ba78:	ea4f 162a 	mov.w	r6, sl, asr #4
 800ba7c:	06f0      	lsls	r0, r6, #27
 800ba7e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ba82:	d565      	bpl.n	800bb50 <_dtoa_r+0x368>
 800ba84:	4b24      	ldr	r3, [pc, #144]	; (800bb18 <_dtoa_r+0x330>)
 800ba86:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ba8a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ba8e:	f7f4 fedd 	bl	800084c <__aeabi_ddiv>
 800ba92:	e9cd 0100 	strd	r0, r1, [sp]
 800ba96:	f006 060f 	and.w	r6, r6, #15
 800ba9a:	2503      	movs	r5, #3
 800ba9c:	4f1e      	ldr	r7, [pc, #120]	; (800bb18 <_dtoa_r+0x330>)
 800ba9e:	e04c      	b.n	800bb3a <_dtoa_r+0x352>
 800baa0:	2301      	movs	r3, #1
 800baa2:	930a      	str	r3, [sp, #40]	; 0x28
 800baa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800baa6:	4453      	add	r3, sl
 800baa8:	f103 0901 	add.w	r9, r3, #1
 800baac:	9302      	str	r3, [sp, #8]
 800baae:	464b      	mov	r3, r9
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	bfb8      	it	lt
 800bab4:	2301      	movlt	r3, #1
 800bab6:	e7ba      	b.n	800ba2e <_dtoa_r+0x246>
 800bab8:	2300      	movs	r3, #0
 800baba:	e7b2      	b.n	800ba22 <_dtoa_r+0x23a>
 800babc:	2300      	movs	r3, #0
 800babe:	e7f0      	b.n	800baa2 <_dtoa_r+0x2ba>
 800bac0:	2501      	movs	r5, #1
 800bac2:	2300      	movs	r3, #0
 800bac4:	9306      	str	r3, [sp, #24]
 800bac6:	950a      	str	r5, [sp, #40]	; 0x28
 800bac8:	f04f 33ff 	mov.w	r3, #4294967295
 800bacc:	9302      	str	r3, [sp, #8]
 800bace:	4699      	mov	r9, r3
 800bad0:	2200      	movs	r2, #0
 800bad2:	2312      	movs	r3, #18
 800bad4:	920b      	str	r2, [sp, #44]	; 0x2c
 800bad6:	e7aa      	b.n	800ba2e <_dtoa_r+0x246>
 800bad8:	2301      	movs	r3, #1
 800bada:	930a      	str	r3, [sp, #40]	; 0x28
 800badc:	e7f4      	b.n	800bac8 <_dtoa_r+0x2e0>
 800bade:	2301      	movs	r3, #1
 800bae0:	9302      	str	r3, [sp, #8]
 800bae2:	4699      	mov	r9, r3
 800bae4:	461a      	mov	r2, r3
 800bae6:	e7f5      	b.n	800bad4 <_dtoa_r+0x2ec>
 800bae8:	3101      	adds	r1, #1
 800baea:	6071      	str	r1, [r6, #4]
 800baec:	0052      	lsls	r2, r2, #1
 800baee:	e7a2      	b.n	800ba36 <_dtoa_r+0x24e>
 800baf0:	636f4361 	.word	0x636f4361
 800baf4:	3fd287a7 	.word	0x3fd287a7
 800baf8:	8b60c8b3 	.word	0x8b60c8b3
 800bafc:	3fc68a28 	.word	0x3fc68a28
 800bb00:	509f79fb 	.word	0x509f79fb
 800bb04:	3fd34413 	.word	0x3fd34413
 800bb08:	7ff00000 	.word	0x7ff00000
 800bb0c:	0800cfa5 	.word	0x0800cfa5
 800bb10:	3ff80000 	.word	0x3ff80000
 800bb14:	0800d000 	.word	0x0800d000
 800bb18:	0800cfd8 	.word	0x0800cfd8
 800bb1c:	0800cfd1 	.word	0x0800cfd1
 800bb20:	07f1      	lsls	r1, r6, #31
 800bb22:	d508      	bpl.n	800bb36 <_dtoa_r+0x34e>
 800bb24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bb28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb2c:	f7f4 fd64 	bl	80005f8 <__aeabi_dmul>
 800bb30:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bb34:	3501      	adds	r5, #1
 800bb36:	1076      	asrs	r6, r6, #1
 800bb38:	3708      	adds	r7, #8
 800bb3a:	2e00      	cmp	r6, #0
 800bb3c:	d1f0      	bne.n	800bb20 <_dtoa_r+0x338>
 800bb3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bb42:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb46:	f7f4 fe81 	bl	800084c <__aeabi_ddiv>
 800bb4a:	e9cd 0100 	strd	r0, r1, [sp]
 800bb4e:	e01a      	b.n	800bb86 <_dtoa_r+0x39e>
 800bb50:	2502      	movs	r5, #2
 800bb52:	e7a3      	b.n	800ba9c <_dtoa_r+0x2b4>
 800bb54:	f000 80a0 	beq.w	800bc98 <_dtoa_r+0x4b0>
 800bb58:	f1ca 0600 	rsb	r6, sl, #0
 800bb5c:	4b9f      	ldr	r3, [pc, #636]	; (800bddc <_dtoa_r+0x5f4>)
 800bb5e:	4fa0      	ldr	r7, [pc, #640]	; (800bde0 <_dtoa_r+0x5f8>)
 800bb60:	f006 020f 	and.w	r2, r6, #15
 800bb64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bb70:	f7f4 fd42 	bl	80005f8 <__aeabi_dmul>
 800bb74:	e9cd 0100 	strd	r0, r1, [sp]
 800bb78:	1136      	asrs	r6, r6, #4
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	2502      	movs	r5, #2
 800bb7e:	2e00      	cmp	r6, #0
 800bb80:	d17f      	bne.n	800bc82 <_dtoa_r+0x49a>
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d1e1      	bne.n	800bb4a <_dtoa_r+0x362>
 800bb86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	f000 8087 	beq.w	800bc9c <_dtoa_r+0x4b4>
 800bb8e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bb92:	2200      	movs	r2, #0
 800bb94:	4b93      	ldr	r3, [pc, #588]	; (800bde4 <_dtoa_r+0x5fc>)
 800bb96:	4630      	mov	r0, r6
 800bb98:	4639      	mov	r1, r7
 800bb9a:	f7f4 ff9f 	bl	8000adc <__aeabi_dcmplt>
 800bb9e:	2800      	cmp	r0, #0
 800bba0:	d07c      	beq.n	800bc9c <_dtoa_r+0x4b4>
 800bba2:	f1b9 0f00 	cmp.w	r9, #0
 800bba6:	d079      	beq.n	800bc9c <_dtoa_r+0x4b4>
 800bba8:	9b02      	ldr	r3, [sp, #8]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	dd35      	ble.n	800bc1a <_dtoa_r+0x432>
 800bbae:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bbb2:	9308      	str	r3, [sp, #32]
 800bbb4:	4639      	mov	r1, r7
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	4b8b      	ldr	r3, [pc, #556]	; (800bde8 <_dtoa_r+0x600>)
 800bbba:	4630      	mov	r0, r6
 800bbbc:	f7f4 fd1c 	bl	80005f8 <__aeabi_dmul>
 800bbc0:	e9cd 0100 	strd	r0, r1, [sp]
 800bbc4:	9f02      	ldr	r7, [sp, #8]
 800bbc6:	3501      	adds	r5, #1
 800bbc8:	4628      	mov	r0, r5
 800bbca:	f7f4 fcab 	bl	8000524 <__aeabi_i2d>
 800bbce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbd2:	f7f4 fd11 	bl	80005f8 <__aeabi_dmul>
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	4b84      	ldr	r3, [pc, #528]	; (800bdec <_dtoa_r+0x604>)
 800bbda:	f7f4 fb57 	bl	800028c <__adddf3>
 800bbde:	4605      	mov	r5, r0
 800bbe0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800bbe4:	2f00      	cmp	r7, #0
 800bbe6:	d15d      	bne.n	800bca4 <_dtoa_r+0x4bc>
 800bbe8:	2200      	movs	r2, #0
 800bbea:	4b81      	ldr	r3, [pc, #516]	; (800bdf0 <_dtoa_r+0x608>)
 800bbec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bbf0:	f7f4 fb4a 	bl	8000288 <__aeabi_dsub>
 800bbf4:	462a      	mov	r2, r5
 800bbf6:	4633      	mov	r3, r6
 800bbf8:	e9cd 0100 	strd	r0, r1, [sp]
 800bbfc:	f7f4 ff8c 	bl	8000b18 <__aeabi_dcmpgt>
 800bc00:	2800      	cmp	r0, #0
 800bc02:	f040 8288 	bne.w	800c116 <_dtoa_r+0x92e>
 800bc06:	462a      	mov	r2, r5
 800bc08:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bc0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc10:	f7f4 ff64 	bl	8000adc <__aeabi_dcmplt>
 800bc14:	2800      	cmp	r0, #0
 800bc16:	f040 827c 	bne.w	800c112 <_dtoa_r+0x92a>
 800bc1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bc1e:	e9cd 2300 	strd	r2, r3, [sp]
 800bc22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	f2c0 8150 	blt.w	800beca <_dtoa_r+0x6e2>
 800bc2a:	f1ba 0f0e 	cmp.w	sl, #14
 800bc2e:	f300 814c 	bgt.w	800beca <_dtoa_r+0x6e2>
 800bc32:	4b6a      	ldr	r3, [pc, #424]	; (800bddc <_dtoa_r+0x5f4>)
 800bc34:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bc38:	ed93 7b00 	vldr	d7, [r3]
 800bc3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bc44:	f280 80d8 	bge.w	800bdf8 <_dtoa_r+0x610>
 800bc48:	f1b9 0f00 	cmp.w	r9, #0
 800bc4c:	f300 80d4 	bgt.w	800bdf8 <_dtoa_r+0x610>
 800bc50:	f040 825e 	bne.w	800c110 <_dtoa_r+0x928>
 800bc54:	2200      	movs	r2, #0
 800bc56:	4b66      	ldr	r3, [pc, #408]	; (800bdf0 <_dtoa_r+0x608>)
 800bc58:	ec51 0b17 	vmov	r0, r1, d7
 800bc5c:	f7f4 fccc 	bl	80005f8 <__aeabi_dmul>
 800bc60:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc64:	f7f4 ff4e 	bl	8000b04 <__aeabi_dcmpge>
 800bc68:	464f      	mov	r7, r9
 800bc6a:	464e      	mov	r6, r9
 800bc6c:	2800      	cmp	r0, #0
 800bc6e:	f040 8234 	bne.w	800c0da <_dtoa_r+0x8f2>
 800bc72:	2331      	movs	r3, #49	; 0x31
 800bc74:	f10b 0501 	add.w	r5, fp, #1
 800bc78:	f88b 3000 	strb.w	r3, [fp]
 800bc7c:	f10a 0a01 	add.w	sl, sl, #1
 800bc80:	e22f      	b.n	800c0e2 <_dtoa_r+0x8fa>
 800bc82:	07f2      	lsls	r2, r6, #31
 800bc84:	d505      	bpl.n	800bc92 <_dtoa_r+0x4aa>
 800bc86:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc8a:	f7f4 fcb5 	bl	80005f8 <__aeabi_dmul>
 800bc8e:	3501      	adds	r5, #1
 800bc90:	2301      	movs	r3, #1
 800bc92:	1076      	asrs	r6, r6, #1
 800bc94:	3708      	adds	r7, #8
 800bc96:	e772      	b.n	800bb7e <_dtoa_r+0x396>
 800bc98:	2502      	movs	r5, #2
 800bc9a:	e774      	b.n	800bb86 <_dtoa_r+0x39e>
 800bc9c:	f8cd a020 	str.w	sl, [sp, #32]
 800bca0:	464f      	mov	r7, r9
 800bca2:	e791      	b.n	800bbc8 <_dtoa_r+0x3e0>
 800bca4:	4b4d      	ldr	r3, [pc, #308]	; (800bddc <_dtoa_r+0x5f4>)
 800bca6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bcaa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800bcae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d047      	beq.n	800bd44 <_dtoa_r+0x55c>
 800bcb4:	4602      	mov	r2, r0
 800bcb6:	460b      	mov	r3, r1
 800bcb8:	2000      	movs	r0, #0
 800bcba:	494e      	ldr	r1, [pc, #312]	; (800bdf4 <_dtoa_r+0x60c>)
 800bcbc:	f7f4 fdc6 	bl	800084c <__aeabi_ddiv>
 800bcc0:	462a      	mov	r2, r5
 800bcc2:	4633      	mov	r3, r6
 800bcc4:	f7f4 fae0 	bl	8000288 <__aeabi_dsub>
 800bcc8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bccc:	465d      	mov	r5, fp
 800bcce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bcd2:	f7f4 ff41 	bl	8000b58 <__aeabi_d2iz>
 800bcd6:	4606      	mov	r6, r0
 800bcd8:	f7f4 fc24 	bl	8000524 <__aeabi_i2d>
 800bcdc:	4602      	mov	r2, r0
 800bcde:	460b      	mov	r3, r1
 800bce0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bce4:	f7f4 fad0 	bl	8000288 <__aeabi_dsub>
 800bce8:	3630      	adds	r6, #48	; 0x30
 800bcea:	f805 6b01 	strb.w	r6, [r5], #1
 800bcee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bcf2:	e9cd 0100 	strd	r0, r1, [sp]
 800bcf6:	f7f4 fef1 	bl	8000adc <__aeabi_dcmplt>
 800bcfa:	2800      	cmp	r0, #0
 800bcfc:	d163      	bne.n	800bdc6 <_dtoa_r+0x5de>
 800bcfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd02:	2000      	movs	r0, #0
 800bd04:	4937      	ldr	r1, [pc, #220]	; (800bde4 <_dtoa_r+0x5fc>)
 800bd06:	f7f4 fabf 	bl	8000288 <__aeabi_dsub>
 800bd0a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bd0e:	f7f4 fee5 	bl	8000adc <__aeabi_dcmplt>
 800bd12:	2800      	cmp	r0, #0
 800bd14:	f040 80b7 	bne.w	800be86 <_dtoa_r+0x69e>
 800bd18:	eba5 030b 	sub.w	r3, r5, fp
 800bd1c:	429f      	cmp	r7, r3
 800bd1e:	f77f af7c 	ble.w	800bc1a <_dtoa_r+0x432>
 800bd22:	2200      	movs	r2, #0
 800bd24:	4b30      	ldr	r3, [pc, #192]	; (800bde8 <_dtoa_r+0x600>)
 800bd26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bd2a:	f7f4 fc65 	bl	80005f8 <__aeabi_dmul>
 800bd2e:	2200      	movs	r2, #0
 800bd30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bd34:	4b2c      	ldr	r3, [pc, #176]	; (800bde8 <_dtoa_r+0x600>)
 800bd36:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd3a:	f7f4 fc5d 	bl	80005f8 <__aeabi_dmul>
 800bd3e:	e9cd 0100 	strd	r0, r1, [sp]
 800bd42:	e7c4      	b.n	800bcce <_dtoa_r+0x4e6>
 800bd44:	462a      	mov	r2, r5
 800bd46:	4633      	mov	r3, r6
 800bd48:	f7f4 fc56 	bl	80005f8 <__aeabi_dmul>
 800bd4c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bd50:	eb0b 0507 	add.w	r5, fp, r7
 800bd54:	465e      	mov	r6, fp
 800bd56:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd5a:	f7f4 fefd 	bl	8000b58 <__aeabi_d2iz>
 800bd5e:	4607      	mov	r7, r0
 800bd60:	f7f4 fbe0 	bl	8000524 <__aeabi_i2d>
 800bd64:	3730      	adds	r7, #48	; 0x30
 800bd66:	4602      	mov	r2, r0
 800bd68:	460b      	mov	r3, r1
 800bd6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd6e:	f7f4 fa8b 	bl	8000288 <__aeabi_dsub>
 800bd72:	f806 7b01 	strb.w	r7, [r6], #1
 800bd76:	42ae      	cmp	r6, r5
 800bd78:	e9cd 0100 	strd	r0, r1, [sp]
 800bd7c:	f04f 0200 	mov.w	r2, #0
 800bd80:	d126      	bne.n	800bdd0 <_dtoa_r+0x5e8>
 800bd82:	4b1c      	ldr	r3, [pc, #112]	; (800bdf4 <_dtoa_r+0x60c>)
 800bd84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bd88:	f7f4 fa80 	bl	800028c <__adddf3>
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	460b      	mov	r3, r1
 800bd90:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd94:	f7f4 fec0 	bl	8000b18 <__aeabi_dcmpgt>
 800bd98:	2800      	cmp	r0, #0
 800bd9a:	d174      	bne.n	800be86 <_dtoa_r+0x69e>
 800bd9c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bda0:	2000      	movs	r0, #0
 800bda2:	4914      	ldr	r1, [pc, #80]	; (800bdf4 <_dtoa_r+0x60c>)
 800bda4:	f7f4 fa70 	bl	8000288 <__aeabi_dsub>
 800bda8:	4602      	mov	r2, r0
 800bdaa:	460b      	mov	r3, r1
 800bdac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bdb0:	f7f4 fe94 	bl	8000adc <__aeabi_dcmplt>
 800bdb4:	2800      	cmp	r0, #0
 800bdb6:	f43f af30 	beq.w	800bc1a <_dtoa_r+0x432>
 800bdba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bdbe:	2b30      	cmp	r3, #48	; 0x30
 800bdc0:	f105 32ff 	add.w	r2, r5, #4294967295
 800bdc4:	d002      	beq.n	800bdcc <_dtoa_r+0x5e4>
 800bdc6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bdca:	e04a      	b.n	800be62 <_dtoa_r+0x67a>
 800bdcc:	4615      	mov	r5, r2
 800bdce:	e7f4      	b.n	800bdba <_dtoa_r+0x5d2>
 800bdd0:	4b05      	ldr	r3, [pc, #20]	; (800bde8 <_dtoa_r+0x600>)
 800bdd2:	f7f4 fc11 	bl	80005f8 <__aeabi_dmul>
 800bdd6:	e9cd 0100 	strd	r0, r1, [sp]
 800bdda:	e7bc      	b.n	800bd56 <_dtoa_r+0x56e>
 800bddc:	0800d000 	.word	0x0800d000
 800bde0:	0800cfd8 	.word	0x0800cfd8
 800bde4:	3ff00000 	.word	0x3ff00000
 800bde8:	40240000 	.word	0x40240000
 800bdec:	401c0000 	.word	0x401c0000
 800bdf0:	40140000 	.word	0x40140000
 800bdf4:	3fe00000 	.word	0x3fe00000
 800bdf8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bdfc:	465d      	mov	r5, fp
 800bdfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be02:	4630      	mov	r0, r6
 800be04:	4639      	mov	r1, r7
 800be06:	f7f4 fd21 	bl	800084c <__aeabi_ddiv>
 800be0a:	f7f4 fea5 	bl	8000b58 <__aeabi_d2iz>
 800be0e:	4680      	mov	r8, r0
 800be10:	f7f4 fb88 	bl	8000524 <__aeabi_i2d>
 800be14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be18:	f7f4 fbee 	bl	80005f8 <__aeabi_dmul>
 800be1c:	4602      	mov	r2, r0
 800be1e:	460b      	mov	r3, r1
 800be20:	4630      	mov	r0, r6
 800be22:	4639      	mov	r1, r7
 800be24:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800be28:	f7f4 fa2e 	bl	8000288 <__aeabi_dsub>
 800be2c:	f805 6b01 	strb.w	r6, [r5], #1
 800be30:	eba5 060b 	sub.w	r6, r5, fp
 800be34:	45b1      	cmp	r9, r6
 800be36:	4602      	mov	r2, r0
 800be38:	460b      	mov	r3, r1
 800be3a:	d139      	bne.n	800beb0 <_dtoa_r+0x6c8>
 800be3c:	f7f4 fa26 	bl	800028c <__adddf3>
 800be40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be44:	4606      	mov	r6, r0
 800be46:	460f      	mov	r7, r1
 800be48:	f7f4 fe66 	bl	8000b18 <__aeabi_dcmpgt>
 800be4c:	b9c8      	cbnz	r0, 800be82 <_dtoa_r+0x69a>
 800be4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be52:	4630      	mov	r0, r6
 800be54:	4639      	mov	r1, r7
 800be56:	f7f4 fe37 	bl	8000ac8 <__aeabi_dcmpeq>
 800be5a:	b110      	cbz	r0, 800be62 <_dtoa_r+0x67a>
 800be5c:	f018 0f01 	tst.w	r8, #1
 800be60:	d10f      	bne.n	800be82 <_dtoa_r+0x69a>
 800be62:	9904      	ldr	r1, [sp, #16]
 800be64:	4620      	mov	r0, r4
 800be66:	f000 fac6 	bl	800c3f6 <_Bfree>
 800be6a:	2300      	movs	r3, #0
 800be6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800be6e:	702b      	strb	r3, [r5, #0]
 800be70:	f10a 0301 	add.w	r3, sl, #1
 800be74:	6013      	str	r3, [r2, #0]
 800be76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be78:	2b00      	cmp	r3, #0
 800be7a:	f000 8241 	beq.w	800c300 <_dtoa_r+0xb18>
 800be7e:	601d      	str	r5, [r3, #0]
 800be80:	e23e      	b.n	800c300 <_dtoa_r+0xb18>
 800be82:	f8cd a020 	str.w	sl, [sp, #32]
 800be86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800be8a:	2a39      	cmp	r2, #57	; 0x39
 800be8c:	f105 33ff 	add.w	r3, r5, #4294967295
 800be90:	d108      	bne.n	800bea4 <_dtoa_r+0x6bc>
 800be92:	459b      	cmp	fp, r3
 800be94:	d10a      	bne.n	800beac <_dtoa_r+0x6c4>
 800be96:	9b08      	ldr	r3, [sp, #32]
 800be98:	3301      	adds	r3, #1
 800be9a:	9308      	str	r3, [sp, #32]
 800be9c:	2330      	movs	r3, #48	; 0x30
 800be9e:	f88b 3000 	strb.w	r3, [fp]
 800bea2:	465b      	mov	r3, fp
 800bea4:	781a      	ldrb	r2, [r3, #0]
 800bea6:	3201      	adds	r2, #1
 800bea8:	701a      	strb	r2, [r3, #0]
 800beaa:	e78c      	b.n	800bdc6 <_dtoa_r+0x5de>
 800beac:	461d      	mov	r5, r3
 800beae:	e7ea      	b.n	800be86 <_dtoa_r+0x69e>
 800beb0:	2200      	movs	r2, #0
 800beb2:	4b9b      	ldr	r3, [pc, #620]	; (800c120 <_dtoa_r+0x938>)
 800beb4:	f7f4 fba0 	bl	80005f8 <__aeabi_dmul>
 800beb8:	2200      	movs	r2, #0
 800beba:	2300      	movs	r3, #0
 800bebc:	4606      	mov	r6, r0
 800bebe:	460f      	mov	r7, r1
 800bec0:	f7f4 fe02 	bl	8000ac8 <__aeabi_dcmpeq>
 800bec4:	2800      	cmp	r0, #0
 800bec6:	d09a      	beq.n	800bdfe <_dtoa_r+0x616>
 800bec8:	e7cb      	b.n	800be62 <_dtoa_r+0x67a>
 800beca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800becc:	2a00      	cmp	r2, #0
 800bece:	f000 808b 	beq.w	800bfe8 <_dtoa_r+0x800>
 800bed2:	9a06      	ldr	r2, [sp, #24]
 800bed4:	2a01      	cmp	r2, #1
 800bed6:	dc6e      	bgt.n	800bfb6 <_dtoa_r+0x7ce>
 800bed8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800beda:	2a00      	cmp	r2, #0
 800bedc:	d067      	beq.n	800bfae <_dtoa_r+0x7c6>
 800bede:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bee2:	9f07      	ldr	r7, [sp, #28]
 800bee4:	9d05      	ldr	r5, [sp, #20]
 800bee6:	9a05      	ldr	r2, [sp, #20]
 800bee8:	2101      	movs	r1, #1
 800beea:	441a      	add	r2, r3
 800beec:	4620      	mov	r0, r4
 800beee:	9205      	str	r2, [sp, #20]
 800bef0:	4498      	add	r8, r3
 800bef2:	f000 fb20 	bl	800c536 <__i2b>
 800bef6:	4606      	mov	r6, r0
 800bef8:	2d00      	cmp	r5, #0
 800befa:	dd0c      	ble.n	800bf16 <_dtoa_r+0x72e>
 800befc:	f1b8 0f00 	cmp.w	r8, #0
 800bf00:	dd09      	ble.n	800bf16 <_dtoa_r+0x72e>
 800bf02:	4545      	cmp	r5, r8
 800bf04:	9a05      	ldr	r2, [sp, #20]
 800bf06:	462b      	mov	r3, r5
 800bf08:	bfa8      	it	ge
 800bf0a:	4643      	movge	r3, r8
 800bf0c:	1ad2      	subs	r2, r2, r3
 800bf0e:	9205      	str	r2, [sp, #20]
 800bf10:	1aed      	subs	r5, r5, r3
 800bf12:	eba8 0803 	sub.w	r8, r8, r3
 800bf16:	9b07      	ldr	r3, [sp, #28]
 800bf18:	b1eb      	cbz	r3, 800bf56 <_dtoa_r+0x76e>
 800bf1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d067      	beq.n	800bff0 <_dtoa_r+0x808>
 800bf20:	b18f      	cbz	r7, 800bf46 <_dtoa_r+0x75e>
 800bf22:	4631      	mov	r1, r6
 800bf24:	463a      	mov	r2, r7
 800bf26:	4620      	mov	r0, r4
 800bf28:	f000 fba4 	bl	800c674 <__pow5mult>
 800bf2c:	9a04      	ldr	r2, [sp, #16]
 800bf2e:	4601      	mov	r1, r0
 800bf30:	4606      	mov	r6, r0
 800bf32:	4620      	mov	r0, r4
 800bf34:	f000 fb08 	bl	800c548 <__multiply>
 800bf38:	9904      	ldr	r1, [sp, #16]
 800bf3a:	9008      	str	r0, [sp, #32]
 800bf3c:	4620      	mov	r0, r4
 800bf3e:	f000 fa5a 	bl	800c3f6 <_Bfree>
 800bf42:	9b08      	ldr	r3, [sp, #32]
 800bf44:	9304      	str	r3, [sp, #16]
 800bf46:	9b07      	ldr	r3, [sp, #28]
 800bf48:	1bda      	subs	r2, r3, r7
 800bf4a:	d004      	beq.n	800bf56 <_dtoa_r+0x76e>
 800bf4c:	9904      	ldr	r1, [sp, #16]
 800bf4e:	4620      	mov	r0, r4
 800bf50:	f000 fb90 	bl	800c674 <__pow5mult>
 800bf54:	9004      	str	r0, [sp, #16]
 800bf56:	2101      	movs	r1, #1
 800bf58:	4620      	mov	r0, r4
 800bf5a:	f000 faec 	bl	800c536 <__i2b>
 800bf5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf60:	4607      	mov	r7, r0
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	f000 81d0 	beq.w	800c308 <_dtoa_r+0xb20>
 800bf68:	461a      	mov	r2, r3
 800bf6a:	4601      	mov	r1, r0
 800bf6c:	4620      	mov	r0, r4
 800bf6e:	f000 fb81 	bl	800c674 <__pow5mult>
 800bf72:	9b06      	ldr	r3, [sp, #24]
 800bf74:	2b01      	cmp	r3, #1
 800bf76:	4607      	mov	r7, r0
 800bf78:	dc40      	bgt.n	800bffc <_dtoa_r+0x814>
 800bf7a:	9b00      	ldr	r3, [sp, #0]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d139      	bne.n	800bff4 <_dtoa_r+0x80c>
 800bf80:	9b01      	ldr	r3, [sp, #4]
 800bf82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d136      	bne.n	800bff8 <_dtoa_r+0x810>
 800bf8a:	9b01      	ldr	r3, [sp, #4]
 800bf8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bf90:	0d1b      	lsrs	r3, r3, #20
 800bf92:	051b      	lsls	r3, r3, #20
 800bf94:	b12b      	cbz	r3, 800bfa2 <_dtoa_r+0x7ba>
 800bf96:	9b05      	ldr	r3, [sp, #20]
 800bf98:	3301      	adds	r3, #1
 800bf9a:	9305      	str	r3, [sp, #20]
 800bf9c:	f108 0801 	add.w	r8, r8, #1
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	9307      	str	r3, [sp, #28]
 800bfa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d12a      	bne.n	800c000 <_dtoa_r+0x818>
 800bfaa:	2001      	movs	r0, #1
 800bfac:	e030      	b.n	800c010 <_dtoa_r+0x828>
 800bfae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bfb0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bfb4:	e795      	b.n	800bee2 <_dtoa_r+0x6fa>
 800bfb6:	9b07      	ldr	r3, [sp, #28]
 800bfb8:	f109 37ff 	add.w	r7, r9, #4294967295
 800bfbc:	42bb      	cmp	r3, r7
 800bfbe:	bfbf      	itttt	lt
 800bfc0:	9b07      	ldrlt	r3, [sp, #28]
 800bfc2:	9707      	strlt	r7, [sp, #28]
 800bfc4:	1afa      	sublt	r2, r7, r3
 800bfc6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800bfc8:	bfbb      	ittet	lt
 800bfca:	189b      	addlt	r3, r3, r2
 800bfcc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800bfce:	1bdf      	subge	r7, r3, r7
 800bfd0:	2700      	movlt	r7, #0
 800bfd2:	f1b9 0f00 	cmp.w	r9, #0
 800bfd6:	bfb5      	itete	lt
 800bfd8:	9b05      	ldrlt	r3, [sp, #20]
 800bfda:	9d05      	ldrge	r5, [sp, #20]
 800bfdc:	eba3 0509 	sublt.w	r5, r3, r9
 800bfe0:	464b      	movge	r3, r9
 800bfe2:	bfb8      	it	lt
 800bfe4:	2300      	movlt	r3, #0
 800bfe6:	e77e      	b.n	800bee6 <_dtoa_r+0x6fe>
 800bfe8:	9f07      	ldr	r7, [sp, #28]
 800bfea:	9d05      	ldr	r5, [sp, #20]
 800bfec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800bfee:	e783      	b.n	800bef8 <_dtoa_r+0x710>
 800bff0:	9a07      	ldr	r2, [sp, #28]
 800bff2:	e7ab      	b.n	800bf4c <_dtoa_r+0x764>
 800bff4:	2300      	movs	r3, #0
 800bff6:	e7d4      	b.n	800bfa2 <_dtoa_r+0x7ba>
 800bff8:	9b00      	ldr	r3, [sp, #0]
 800bffa:	e7d2      	b.n	800bfa2 <_dtoa_r+0x7ba>
 800bffc:	2300      	movs	r3, #0
 800bffe:	9307      	str	r3, [sp, #28]
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800c006:	6918      	ldr	r0, [r3, #16]
 800c008:	f000 fa47 	bl	800c49a <__hi0bits>
 800c00c:	f1c0 0020 	rsb	r0, r0, #32
 800c010:	4440      	add	r0, r8
 800c012:	f010 001f 	ands.w	r0, r0, #31
 800c016:	d047      	beq.n	800c0a8 <_dtoa_r+0x8c0>
 800c018:	f1c0 0320 	rsb	r3, r0, #32
 800c01c:	2b04      	cmp	r3, #4
 800c01e:	dd3b      	ble.n	800c098 <_dtoa_r+0x8b0>
 800c020:	9b05      	ldr	r3, [sp, #20]
 800c022:	f1c0 001c 	rsb	r0, r0, #28
 800c026:	4403      	add	r3, r0
 800c028:	9305      	str	r3, [sp, #20]
 800c02a:	4405      	add	r5, r0
 800c02c:	4480      	add	r8, r0
 800c02e:	9b05      	ldr	r3, [sp, #20]
 800c030:	2b00      	cmp	r3, #0
 800c032:	dd05      	ble.n	800c040 <_dtoa_r+0x858>
 800c034:	461a      	mov	r2, r3
 800c036:	9904      	ldr	r1, [sp, #16]
 800c038:	4620      	mov	r0, r4
 800c03a:	f000 fb69 	bl	800c710 <__lshift>
 800c03e:	9004      	str	r0, [sp, #16]
 800c040:	f1b8 0f00 	cmp.w	r8, #0
 800c044:	dd05      	ble.n	800c052 <_dtoa_r+0x86a>
 800c046:	4639      	mov	r1, r7
 800c048:	4642      	mov	r2, r8
 800c04a:	4620      	mov	r0, r4
 800c04c:	f000 fb60 	bl	800c710 <__lshift>
 800c050:	4607      	mov	r7, r0
 800c052:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c054:	b353      	cbz	r3, 800c0ac <_dtoa_r+0x8c4>
 800c056:	4639      	mov	r1, r7
 800c058:	9804      	ldr	r0, [sp, #16]
 800c05a:	f000 fbad 	bl	800c7b8 <__mcmp>
 800c05e:	2800      	cmp	r0, #0
 800c060:	da24      	bge.n	800c0ac <_dtoa_r+0x8c4>
 800c062:	2300      	movs	r3, #0
 800c064:	220a      	movs	r2, #10
 800c066:	9904      	ldr	r1, [sp, #16]
 800c068:	4620      	mov	r0, r4
 800c06a:	f000 f9db 	bl	800c424 <__multadd>
 800c06e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c070:	9004      	str	r0, [sp, #16]
 800c072:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c076:	2b00      	cmp	r3, #0
 800c078:	f000 814d 	beq.w	800c316 <_dtoa_r+0xb2e>
 800c07c:	2300      	movs	r3, #0
 800c07e:	4631      	mov	r1, r6
 800c080:	220a      	movs	r2, #10
 800c082:	4620      	mov	r0, r4
 800c084:	f000 f9ce 	bl	800c424 <__multadd>
 800c088:	9b02      	ldr	r3, [sp, #8]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	4606      	mov	r6, r0
 800c08e:	dc4f      	bgt.n	800c130 <_dtoa_r+0x948>
 800c090:	9b06      	ldr	r3, [sp, #24]
 800c092:	2b02      	cmp	r3, #2
 800c094:	dd4c      	ble.n	800c130 <_dtoa_r+0x948>
 800c096:	e011      	b.n	800c0bc <_dtoa_r+0x8d4>
 800c098:	d0c9      	beq.n	800c02e <_dtoa_r+0x846>
 800c09a:	9a05      	ldr	r2, [sp, #20]
 800c09c:	331c      	adds	r3, #28
 800c09e:	441a      	add	r2, r3
 800c0a0:	9205      	str	r2, [sp, #20]
 800c0a2:	441d      	add	r5, r3
 800c0a4:	4498      	add	r8, r3
 800c0a6:	e7c2      	b.n	800c02e <_dtoa_r+0x846>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	e7f6      	b.n	800c09a <_dtoa_r+0x8b2>
 800c0ac:	f1b9 0f00 	cmp.w	r9, #0
 800c0b0:	dc38      	bgt.n	800c124 <_dtoa_r+0x93c>
 800c0b2:	9b06      	ldr	r3, [sp, #24]
 800c0b4:	2b02      	cmp	r3, #2
 800c0b6:	dd35      	ble.n	800c124 <_dtoa_r+0x93c>
 800c0b8:	f8cd 9008 	str.w	r9, [sp, #8]
 800c0bc:	9b02      	ldr	r3, [sp, #8]
 800c0be:	b963      	cbnz	r3, 800c0da <_dtoa_r+0x8f2>
 800c0c0:	4639      	mov	r1, r7
 800c0c2:	2205      	movs	r2, #5
 800c0c4:	4620      	mov	r0, r4
 800c0c6:	f000 f9ad 	bl	800c424 <__multadd>
 800c0ca:	4601      	mov	r1, r0
 800c0cc:	4607      	mov	r7, r0
 800c0ce:	9804      	ldr	r0, [sp, #16]
 800c0d0:	f000 fb72 	bl	800c7b8 <__mcmp>
 800c0d4:	2800      	cmp	r0, #0
 800c0d6:	f73f adcc 	bgt.w	800bc72 <_dtoa_r+0x48a>
 800c0da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0dc:	465d      	mov	r5, fp
 800c0de:	ea6f 0a03 	mvn.w	sl, r3
 800c0e2:	f04f 0900 	mov.w	r9, #0
 800c0e6:	4639      	mov	r1, r7
 800c0e8:	4620      	mov	r0, r4
 800c0ea:	f000 f984 	bl	800c3f6 <_Bfree>
 800c0ee:	2e00      	cmp	r6, #0
 800c0f0:	f43f aeb7 	beq.w	800be62 <_dtoa_r+0x67a>
 800c0f4:	f1b9 0f00 	cmp.w	r9, #0
 800c0f8:	d005      	beq.n	800c106 <_dtoa_r+0x91e>
 800c0fa:	45b1      	cmp	r9, r6
 800c0fc:	d003      	beq.n	800c106 <_dtoa_r+0x91e>
 800c0fe:	4649      	mov	r1, r9
 800c100:	4620      	mov	r0, r4
 800c102:	f000 f978 	bl	800c3f6 <_Bfree>
 800c106:	4631      	mov	r1, r6
 800c108:	4620      	mov	r0, r4
 800c10a:	f000 f974 	bl	800c3f6 <_Bfree>
 800c10e:	e6a8      	b.n	800be62 <_dtoa_r+0x67a>
 800c110:	2700      	movs	r7, #0
 800c112:	463e      	mov	r6, r7
 800c114:	e7e1      	b.n	800c0da <_dtoa_r+0x8f2>
 800c116:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c11a:	463e      	mov	r6, r7
 800c11c:	e5a9      	b.n	800bc72 <_dtoa_r+0x48a>
 800c11e:	bf00      	nop
 800c120:	40240000 	.word	0x40240000
 800c124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c126:	f8cd 9008 	str.w	r9, [sp, #8]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	f000 80fa 	beq.w	800c324 <_dtoa_r+0xb3c>
 800c130:	2d00      	cmp	r5, #0
 800c132:	dd05      	ble.n	800c140 <_dtoa_r+0x958>
 800c134:	4631      	mov	r1, r6
 800c136:	462a      	mov	r2, r5
 800c138:	4620      	mov	r0, r4
 800c13a:	f000 fae9 	bl	800c710 <__lshift>
 800c13e:	4606      	mov	r6, r0
 800c140:	9b07      	ldr	r3, [sp, #28]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d04c      	beq.n	800c1e0 <_dtoa_r+0x9f8>
 800c146:	6871      	ldr	r1, [r6, #4]
 800c148:	4620      	mov	r0, r4
 800c14a:	f000 f920 	bl	800c38e <_Balloc>
 800c14e:	6932      	ldr	r2, [r6, #16]
 800c150:	3202      	adds	r2, #2
 800c152:	4605      	mov	r5, r0
 800c154:	0092      	lsls	r2, r2, #2
 800c156:	f106 010c 	add.w	r1, r6, #12
 800c15a:	300c      	adds	r0, #12
 800c15c:	f000 f90a 	bl	800c374 <memcpy>
 800c160:	2201      	movs	r2, #1
 800c162:	4629      	mov	r1, r5
 800c164:	4620      	mov	r0, r4
 800c166:	f000 fad3 	bl	800c710 <__lshift>
 800c16a:	9b00      	ldr	r3, [sp, #0]
 800c16c:	f8cd b014 	str.w	fp, [sp, #20]
 800c170:	f003 0301 	and.w	r3, r3, #1
 800c174:	46b1      	mov	r9, r6
 800c176:	9307      	str	r3, [sp, #28]
 800c178:	4606      	mov	r6, r0
 800c17a:	4639      	mov	r1, r7
 800c17c:	9804      	ldr	r0, [sp, #16]
 800c17e:	f7ff faa7 	bl	800b6d0 <quorem>
 800c182:	4649      	mov	r1, r9
 800c184:	4605      	mov	r5, r0
 800c186:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c18a:	9804      	ldr	r0, [sp, #16]
 800c18c:	f000 fb14 	bl	800c7b8 <__mcmp>
 800c190:	4632      	mov	r2, r6
 800c192:	9000      	str	r0, [sp, #0]
 800c194:	4639      	mov	r1, r7
 800c196:	4620      	mov	r0, r4
 800c198:	f000 fb28 	bl	800c7ec <__mdiff>
 800c19c:	68c3      	ldr	r3, [r0, #12]
 800c19e:	4602      	mov	r2, r0
 800c1a0:	bb03      	cbnz	r3, 800c1e4 <_dtoa_r+0x9fc>
 800c1a2:	4601      	mov	r1, r0
 800c1a4:	9008      	str	r0, [sp, #32]
 800c1a6:	9804      	ldr	r0, [sp, #16]
 800c1a8:	f000 fb06 	bl	800c7b8 <__mcmp>
 800c1ac:	9a08      	ldr	r2, [sp, #32]
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	4611      	mov	r1, r2
 800c1b2:	4620      	mov	r0, r4
 800c1b4:	9308      	str	r3, [sp, #32]
 800c1b6:	f000 f91e 	bl	800c3f6 <_Bfree>
 800c1ba:	9b08      	ldr	r3, [sp, #32]
 800c1bc:	b9a3      	cbnz	r3, 800c1e8 <_dtoa_r+0xa00>
 800c1be:	9a06      	ldr	r2, [sp, #24]
 800c1c0:	b992      	cbnz	r2, 800c1e8 <_dtoa_r+0xa00>
 800c1c2:	9a07      	ldr	r2, [sp, #28]
 800c1c4:	b982      	cbnz	r2, 800c1e8 <_dtoa_r+0xa00>
 800c1c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c1ca:	d029      	beq.n	800c220 <_dtoa_r+0xa38>
 800c1cc:	9b00      	ldr	r3, [sp, #0]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	dd01      	ble.n	800c1d6 <_dtoa_r+0x9ee>
 800c1d2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c1d6:	9b05      	ldr	r3, [sp, #20]
 800c1d8:	1c5d      	adds	r5, r3, #1
 800c1da:	f883 8000 	strb.w	r8, [r3]
 800c1de:	e782      	b.n	800c0e6 <_dtoa_r+0x8fe>
 800c1e0:	4630      	mov	r0, r6
 800c1e2:	e7c2      	b.n	800c16a <_dtoa_r+0x982>
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	e7e3      	b.n	800c1b0 <_dtoa_r+0x9c8>
 800c1e8:	9a00      	ldr	r2, [sp, #0]
 800c1ea:	2a00      	cmp	r2, #0
 800c1ec:	db04      	blt.n	800c1f8 <_dtoa_r+0xa10>
 800c1ee:	d125      	bne.n	800c23c <_dtoa_r+0xa54>
 800c1f0:	9a06      	ldr	r2, [sp, #24]
 800c1f2:	bb1a      	cbnz	r2, 800c23c <_dtoa_r+0xa54>
 800c1f4:	9a07      	ldr	r2, [sp, #28]
 800c1f6:	bb0a      	cbnz	r2, 800c23c <_dtoa_r+0xa54>
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	ddec      	ble.n	800c1d6 <_dtoa_r+0x9ee>
 800c1fc:	2201      	movs	r2, #1
 800c1fe:	9904      	ldr	r1, [sp, #16]
 800c200:	4620      	mov	r0, r4
 800c202:	f000 fa85 	bl	800c710 <__lshift>
 800c206:	4639      	mov	r1, r7
 800c208:	9004      	str	r0, [sp, #16]
 800c20a:	f000 fad5 	bl	800c7b8 <__mcmp>
 800c20e:	2800      	cmp	r0, #0
 800c210:	dc03      	bgt.n	800c21a <_dtoa_r+0xa32>
 800c212:	d1e0      	bne.n	800c1d6 <_dtoa_r+0x9ee>
 800c214:	f018 0f01 	tst.w	r8, #1
 800c218:	d0dd      	beq.n	800c1d6 <_dtoa_r+0x9ee>
 800c21a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c21e:	d1d8      	bne.n	800c1d2 <_dtoa_r+0x9ea>
 800c220:	9b05      	ldr	r3, [sp, #20]
 800c222:	9a05      	ldr	r2, [sp, #20]
 800c224:	1c5d      	adds	r5, r3, #1
 800c226:	2339      	movs	r3, #57	; 0x39
 800c228:	7013      	strb	r3, [r2, #0]
 800c22a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c22e:	2b39      	cmp	r3, #57	; 0x39
 800c230:	f105 32ff 	add.w	r2, r5, #4294967295
 800c234:	d04f      	beq.n	800c2d6 <_dtoa_r+0xaee>
 800c236:	3301      	adds	r3, #1
 800c238:	7013      	strb	r3, [r2, #0]
 800c23a:	e754      	b.n	800c0e6 <_dtoa_r+0x8fe>
 800c23c:	9a05      	ldr	r2, [sp, #20]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	f102 0501 	add.w	r5, r2, #1
 800c244:	dd06      	ble.n	800c254 <_dtoa_r+0xa6c>
 800c246:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c24a:	d0e9      	beq.n	800c220 <_dtoa_r+0xa38>
 800c24c:	f108 0801 	add.w	r8, r8, #1
 800c250:	9b05      	ldr	r3, [sp, #20]
 800c252:	e7c2      	b.n	800c1da <_dtoa_r+0x9f2>
 800c254:	9a02      	ldr	r2, [sp, #8]
 800c256:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c25a:	eba5 030b 	sub.w	r3, r5, fp
 800c25e:	4293      	cmp	r3, r2
 800c260:	d021      	beq.n	800c2a6 <_dtoa_r+0xabe>
 800c262:	2300      	movs	r3, #0
 800c264:	220a      	movs	r2, #10
 800c266:	9904      	ldr	r1, [sp, #16]
 800c268:	4620      	mov	r0, r4
 800c26a:	f000 f8db 	bl	800c424 <__multadd>
 800c26e:	45b1      	cmp	r9, r6
 800c270:	9004      	str	r0, [sp, #16]
 800c272:	f04f 0300 	mov.w	r3, #0
 800c276:	f04f 020a 	mov.w	r2, #10
 800c27a:	4649      	mov	r1, r9
 800c27c:	4620      	mov	r0, r4
 800c27e:	d105      	bne.n	800c28c <_dtoa_r+0xaa4>
 800c280:	f000 f8d0 	bl	800c424 <__multadd>
 800c284:	4681      	mov	r9, r0
 800c286:	4606      	mov	r6, r0
 800c288:	9505      	str	r5, [sp, #20]
 800c28a:	e776      	b.n	800c17a <_dtoa_r+0x992>
 800c28c:	f000 f8ca 	bl	800c424 <__multadd>
 800c290:	4631      	mov	r1, r6
 800c292:	4681      	mov	r9, r0
 800c294:	2300      	movs	r3, #0
 800c296:	220a      	movs	r2, #10
 800c298:	4620      	mov	r0, r4
 800c29a:	f000 f8c3 	bl	800c424 <__multadd>
 800c29e:	4606      	mov	r6, r0
 800c2a0:	e7f2      	b.n	800c288 <_dtoa_r+0xaa0>
 800c2a2:	f04f 0900 	mov.w	r9, #0
 800c2a6:	2201      	movs	r2, #1
 800c2a8:	9904      	ldr	r1, [sp, #16]
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	f000 fa30 	bl	800c710 <__lshift>
 800c2b0:	4639      	mov	r1, r7
 800c2b2:	9004      	str	r0, [sp, #16]
 800c2b4:	f000 fa80 	bl	800c7b8 <__mcmp>
 800c2b8:	2800      	cmp	r0, #0
 800c2ba:	dcb6      	bgt.n	800c22a <_dtoa_r+0xa42>
 800c2bc:	d102      	bne.n	800c2c4 <_dtoa_r+0xadc>
 800c2be:	f018 0f01 	tst.w	r8, #1
 800c2c2:	d1b2      	bne.n	800c22a <_dtoa_r+0xa42>
 800c2c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c2c8:	2b30      	cmp	r3, #48	; 0x30
 800c2ca:	f105 32ff 	add.w	r2, r5, #4294967295
 800c2ce:	f47f af0a 	bne.w	800c0e6 <_dtoa_r+0x8fe>
 800c2d2:	4615      	mov	r5, r2
 800c2d4:	e7f6      	b.n	800c2c4 <_dtoa_r+0xadc>
 800c2d6:	4593      	cmp	fp, r2
 800c2d8:	d105      	bne.n	800c2e6 <_dtoa_r+0xafe>
 800c2da:	2331      	movs	r3, #49	; 0x31
 800c2dc:	f10a 0a01 	add.w	sl, sl, #1
 800c2e0:	f88b 3000 	strb.w	r3, [fp]
 800c2e4:	e6ff      	b.n	800c0e6 <_dtoa_r+0x8fe>
 800c2e6:	4615      	mov	r5, r2
 800c2e8:	e79f      	b.n	800c22a <_dtoa_r+0xa42>
 800c2ea:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c350 <_dtoa_r+0xb68>
 800c2ee:	e007      	b.n	800c300 <_dtoa_r+0xb18>
 800c2f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c2f2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800c354 <_dtoa_r+0xb6c>
 800c2f6:	b11b      	cbz	r3, 800c300 <_dtoa_r+0xb18>
 800c2f8:	f10b 0308 	add.w	r3, fp, #8
 800c2fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c2fe:	6013      	str	r3, [r2, #0]
 800c300:	4658      	mov	r0, fp
 800c302:	b017      	add	sp, #92	; 0x5c
 800c304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c308:	9b06      	ldr	r3, [sp, #24]
 800c30a:	2b01      	cmp	r3, #1
 800c30c:	f77f ae35 	ble.w	800bf7a <_dtoa_r+0x792>
 800c310:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c312:	9307      	str	r3, [sp, #28]
 800c314:	e649      	b.n	800bfaa <_dtoa_r+0x7c2>
 800c316:	9b02      	ldr	r3, [sp, #8]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	dc03      	bgt.n	800c324 <_dtoa_r+0xb3c>
 800c31c:	9b06      	ldr	r3, [sp, #24]
 800c31e:	2b02      	cmp	r3, #2
 800c320:	f73f aecc 	bgt.w	800c0bc <_dtoa_r+0x8d4>
 800c324:	465d      	mov	r5, fp
 800c326:	4639      	mov	r1, r7
 800c328:	9804      	ldr	r0, [sp, #16]
 800c32a:	f7ff f9d1 	bl	800b6d0 <quorem>
 800c32e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c332:	f805 8b01 	strb.w	r8, [r5], #1
 800c336:	9a02      	ldr	r2, [sp, #8]
 800c338:	eba5 030b 	sub.w	r3, r5, fp
 800c33c:	429a      	cmp	r2, r3
 800c33e:	ddb0      	ble.n	800c2a2 <_dtoa_r+0xaba>
 800c340:	2300      	movs	r3, #0
 800c342:	220a      	movs	r2, #10
 800c344:	9904      	ldr	r1, [sp, #16]
 800c346:	4620      	mov	r0, r4
 800c348:	f000 f86c 	bl	800c424 <__multadd>
 800c34c:	9004      	str	r0, [sp, #16]
 800c34e:	e7ea      	b.n	800c326 <_dtoa_r+0xb3e>
 800c350:	0800cfa4 	.word	0x0800cfa4
 800c354:	0800cfc8 	.word	0x0800cfc8

0800c358 <_localeconv_r>:
 800c358:	4b04      	ldr	r3, [pc, #16]	; (800c36c <_localeconv_r+0x14>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	6a18      	ldr	r0, [r3, #32]
 800c35e:	4b04      	ldr	r3, [pc, #16]	; (800c370 <_localeconv_r+0x18>)
 800c360:	2800      	cmp	r0, #0
 800c362:	bf08      	it	eq
 800c364:	4618      	moveq	r0, r3
 800c366:	30f0      	adds	r0, #240	; 0xf0
 800c368:	4770      	bx	lr
 800c36a:	bf00      	nop
 800c36c:	20000188 	.word	0x20000188
 800c370:	200001ec 	.word	0x200001ec

0800c374 <memcpy>:
 800c374:	b510      	push	{r4, lr}
 800c376:	1e43      	subs	r3, r0, #1
 800c378:	440a      	add	r2, r1
 800c37a:	4291      	cmp	r1, r2
 800c37c:	d100      	bne.n	800c380 <memcpy+0xc>
 800c37e:	bd10      	pop	{r4, pc}
 800c380:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c384:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c388:	e7f7      	b.n	800c37a <memcpy+0x6>

0800c38a <__malloc_lock>:
 800c38a:	4770      	bx	lr

0800c38c <__malloc_unlock>:
 800c38c:	4770      	bx	lr

0800c38e <_Balloc>:
 800c38e:	b570      	push	{r4, r5, r6, lr}
 800c390:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c392:	4604      	mov	r4, r0
 800c394:	460e      	mov	r6, r1
 800c396:	b93d      	cbnz	r5, 800c3a8 <_Balloc+0x1a>
 800c398:	2010      	movs	r0, #16
 800c39a:	f7fe fc4d 	bl	800ac38 <malloc>
 800c39e:	6260      	str	r0, [r4, #36]	; 0x24
 800c3a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c3a4:	6005      	str	r5, [r0, #0]
 800c3a6:	60c5      	str	r5, [r0, #12]
 800c3a8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c3aa:	68eb      	ldr	r3, [r5, #12]
 800c3ac:	b183      	cbz	r3, 800c3d0 <_Balloc+0x42>
 800c3ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3b0:	68db      	ldr	r3, [r3, #12]
 800c3b2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c3b6:	b9b8      	cbnz	r0, 800c3e8 <_Balloc+0x5a>
 800c3b8:	2101      	movs	r1, #1
 800c3ba:	fa01 f506 	lsl.w	r5, r1, r6
 800c3be:	1d6a      	adds	r2, r5, #5
 800c3c0:	0092      	lsls	r2, r2, #2
 800c3c2:	4620      	mov	r0, r4
 800c3c4:	f000 fabe 	bl	800c944 <_calloc_r>
 800c3c8:	b160      	cbz	r0, 800c3e4 <_Balloc+0x56>
 800c3ca:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c3ce:	e00e      	b.n	800c3ee <_Balloc+0x60>
 800c3d0:	2221      	movs	r2, #33	; 0x21
 800c3d2:	2104      	movs	r1, #4
 800c3d4:	4620      	mov	r0, r4
 800c3d6:	f000 fab5 	bl	800c944 <_calloc_r>
 800c3da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3dc:	60e8      	str	r0, [r5, #12]
 800c3de:	68db      	ldr	r3, [r3, #12]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d1e4      	bne.n	800c3ae <_Balloc+0x20>
 800c3e4:	2000      	movs	r0, #0
 800c3e6:	bd70      	pop	{r4, r5, r6, pc}
 800c3e8:	6802      	ldr	r2, [r0, #0]
 800c3ea:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c3f4:	e7f7      	b.n	800c3e6 <_Balloc+0x58>

0800c3f6 <_Bfree>:
 800c3f6:	b570      	push	{r4, r5, r6, lr}
 800c3f8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c3fa:	4606      	mov	r6, r0
 800c3fc:	460d      	mov	r5, r1
 800c3fe:	b93c      	cbnz	r4, 800c410 <_Bfree+0x1a>
 800c400:	2010      	movs	r0, #16
 800c402:	f7fe fc19 	bl	800ac38 <malloc>
 800c406:	6270      	str	r0, [r6, #36]	; 0x24
 800c408:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c40c:	6004      	str	r4, [r0, #0]
 800c40e:	60c4      	str	r4, [r0, #12]
 800c410:	b13d      	cbz	r5, 800c422 <_Bfree+0x2c>
 800c412:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c414:	686a      	ldr	r2, [r5, #4]
 800c416:	68db      	ldr	r3, [r3, #12]
 800c418:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c41c:	6029      	str	r1, [r5, #0]
 800c41e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c422:	bd70      	pop	{r4, r5, r6, pc}

0800c424 <__multadd>:
 800c424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c428:	690d      	ldr	r5, [r1, #16]
 800c42a:	461f      	mov	r7, r3
 800c42c:	4606      	mov	r6, r0
 800c42e:	460c      	mov	r4, r1
 800c430:	f101 0c14 	add.w	ip, r1, #20
 800c434:	2300      	movs	r3, #0
 800c436:	f8dc 0000 	ldr.w	r0, [ip]
 800c43a:	b281      	uxth	r1, r0
 800c43c:	fb02 7101 	mla	r1, r2, r1, r7
 800c440:	0c0f      	lsrs	r7, r1, #16
 800c442:	0c00      	lsrs	r0, r0, #16
 800c444:	fb02 7000 	mla	r0, r2, r0, r7
 800c448:	b289      	uxth	r1, r1
 800c44a:	3301      	adds	r3, #1
 800c44c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c450:	429d      	cmp	r5, r3
 800c452:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c456:	f84c 1b04 	str.w	r1, [ip], #4
 800c45a:	dcec      	bgt.n	800c436 <__multadd+0x12>
 800c45c:	b1d7      	cbz	r7, 800c494 <__multadd+0x70>
 800c45e:	68a3      	ldr	r3, [r4, #8]
 800c460:	42ab      	cmp	r3, r5
 800c462:	dc12      	bgt.n	800c48a <__multadd+0x66>
 800c464:	6861      	ldr	r1, [r4, #4]
 800c466:	4630      	mov	r0, r6
 800c468:	3101      	adds	r1, #1
 800c46a:	f7ff ff90 	bl	800c38e <_Balloc>
 800c46e:	6922      	ldr	r2, [r4, #16]
 800c470:	3202      	adds	r2, #2
 800c472:	f104 010c 	add.w	r1, r4, #12
 800c476:	4680      	mov	r8, r0
 800c478:	0092      	lsls	r2, r2, #2
 800c47a:	300c      	adds	r0, #12
 800c47c:	f7ff ff7a 	bl	800c374 <memcpy>
 800c480:	4621      	mov	r1, r4
 800c482:	4630      	mov	r0, r6
 800c484:	f7ff ffb7 	bl	800c3f6 <_Bfree>
 800c488:	4644      	mov	r4, r8
 800c48a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c48e:	3501      	adds	r5, #1
 800c490:	615f      	str	r7, [r3, #20]
 800c492:	6125      	str	r5, [r4, #16]
 800c494:	4620      	mov	r0, r4
 800c496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c49a <__hi0bits>:
 800c49a:	0c02      	lsrs	r2, r0, #16
 800c49c:	0412      	lsls	r2, r2, #16
 800c49e:	4603      	mov	r3, r0
 800c4a0:	b9b2      	cbnz	r2, 800c4d0 <__hi0bits+0x36>
 800c4a2:	0403      	lsls	r3, r0, #16
 800c4a4:	2010      	movs	r0, #16
 800c4a6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c4aa:	bf04      	itt	eq
 800c4ac:	021b      	lsleq	r3, r3, #8
 800c4ae:	3008      	addeq	r0, #8
 800c4b0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c4b4:	bf04      	itt	eq
 800c4b6:	011b      	lsleq	r3, r3, #4
 800c4b8:	3004      	addeq	r0, #4
 800c4ba:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c4be:	bf04      	itt	eq
 800c4c0:	009b      	lsleq	r3, r3, #2
 800c4c2:	3002      	addeq	r0, #2
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	db06      	blt.n	800c4d6 <__hi0bits+0x3c>
 800c4c8:	005b      	lsls	r3, r3, #1
 800c4ca:	d503      	bpl.n	800c4d4 <__hi0bits+0x3a>
 800c4cc:	3001      	adds	r0, #1
 800c4ce:	4770      	bx	lr
 800c4d0:	2000      	movs	r0, #0
 800c4d2:	e7e8      	b.n	800c4a6 <__hi0bits+0xc>
 800c4d4:	2020      	movs	r0, #32
 800c4d6:	4770      	bx	lr

0800c4d8 <__lo0bits>:
 800c4d8:	6803      	ldr	r3, [r0, #0]
 800c4da:	f013 0207 	ands.w	r2, r3, #7
 800c4de:	4601      	mov	r1, r0
 800c4e0:	d00b      	beq.n	800c4fa <__lo0bits+0x22>
 800c4e2:	07da      	lsls	r2, r3, #31
 800c4e4:	d423      	bmi.n	800c52e <__lo0bits+0x56>
 800c4e6:	0798      	lsls	r0, r3, #30
 800c4e8:	bf49      	itett	mi
 800c4ea:	085b      	lsrmi	r3, r3, #1
 800c4ec:	089b      	lsrpl	r3, r3, #2
 800c4ee:	2001      	movmi	r0, #1
 800c4f0:	600b      	strmi	r3, [r1, #0]
 800c4f2:	bf5c      	itt	pl
 800c4f4:	600b      	strpl	r3, [r1, #0]
 800c4f6:	2002      	movpl	r0, #2
 800c4f8:	4770      	bx	lr
 800c4fa:	b298      	uxth	r0, r3
 800c4fc:	b9a8      	cbnz	r0, 800c52a <__lo0bits+0x52>
 800c4fe:	0c1b      	lsrs	r3, r3, #16
 800c500:	2010      	movs	r0, #16
 800c502:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c506:	bf04      	itt	eq
 800c508:	0a1b      	lsreq	r3, r3, #8
 800c50a:	3008      	addeq	r0, #8
 800c50c:	071a      	lsls	r2, r3, #28
 800c50e:	bf04      	itt	eq
 800c510:	091b      	lsreq	r3, r3, #4
 800c512:	3004      	addeq	r0, #4
 800c514:	079a      	lsls	r2, r3, #30
 800c516:	bf04      	itt	eq
 800c518:	089b      	lsreq	r3, r3, #2
 800c51a:	3002      	addeq	r0, #2
 800c51c:	07da      	lsls	r2, r3, #31
 800c51e:	d402      	bmi.n	800c526 <__lo0bits+0x4e>
 800c520:	085b      	lsrs	r3, r3, #1
 800c522:	d006      	beq.n	800c532 <__lo0bits+0x5a>
 800c524:	3001      	adds	r0, #1
 800c526:	600b      	str	r3, [r1, #0]
 800c528:	4770      	bx	lr
 800c52a:	4610      	mov	r0, r2
 800c52c:	e7e9      	b.n	800c502 <__lo0bits+0x2a>
 800c52e:	2000      	movs	r0, #0
 800c530:	4770      	bx	lr
 800c532:	2020      	movs	r0, #32
 800c534:	4770      	bx	lr

0800c536 <__i2b>:
 800c536:	b510      	push	{r4, lr}
 800c538:	460c      	mov	r4, r1
 800c53a:	2101      	movs	r1, #1
 800c53c:	f7ff ff27 	bl	800c38e <_Balloc>
 800c540:	2201      	movs	r2, #1
 800c542:	6144      	str	r4, [r0, #20]
 800c544:	6102      	str	r2, [r0, #16]
 800c546:	bd10      	pop	{r4, pc}

0800c548 <__multiply>:
 800c548:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c54c:	4614      	mov	r4, r2
 800c54e:	690a      	ldr	r2, [r1, #16]
 800c550:	6923      	ldr	r3, [r4, #16]
 800c552:	429a      	cmp	r2, r3
 800c554:	bfb8      	it	lt
 800c556:	460b      	movlt	r3, r1
 800c558:	4688      	mov	r8, r1
 800c55a:	bfbc      	itt	lt
 800c55c:	46a0      	movlt	r8, r4
 800c55e:	461c      	movlt	r4, r3
 800c560:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c564:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c568:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c56c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c570:	eb07 0609 	add.w	r6, r7, r9
 800c574:	42b3      	cmp	r3, r6
 800c576:	bfb8      	it	lt
 800c578:	3101      	addlt	r1, #1
 800c57a:	f7ff ff08 	bl	800c38e <_Balloc>
 800c57e:	f100 0514 	add.w	r5, r0, #20
 800c582:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c586:	462b      	mov	r3, r5
 800c588:	2200      	movs	r2, #0
 800c58a:	4573      	cmp	r3, lr
 800c58c:	d316      	bcc.n	800c5bc <__multiply+0x74>
 800c58e:	f104 0214 	add.w	r2, r4, #20
 800c592:	f108 0114 	add.w	r1, r8, #20
 800c596:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c59a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c59e:	9300      	str	r3, [sp, #0]
 800c5a0:	9b00      	ldr	r3, [sp, #0]
 800c5a2:	9201      	str	r2, [sp, #4]
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	d80c      	bhi.n	800c5c2 <__multiply+0x7a>
 800c5a8:	2e00      	cmp	r6, #0
 800c5aa:	dd03      	ble.n	800c5b4 <__multiply+0x6c>
 800c5ac:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d05d      	beq.n	800c670 <__multiply+0x128>
 800c5b4:	6106      	str	r6, [r0, #16]
 800c5b6:	b003      	add	sp, #12
 800c5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5bc:	f843 2b04 	str.w	r2, [r3], #4
 800c5c0:	e7e3      	b.n	800c58a <__multiply+0x42>
 800c5c2:	f8b2 b000 	ldrh.w	fp, [r2]
 800c5c6:	f1bb 0f00 	cmp.w	fp, #0
 800c5ca:	d023      	beq.n	800c614 <__multiply+0xcc>
 800c5cc:	4689      	mov	r9, r1
 800c5ce:	46ac      	mov	ip, r5
 800c5d0:	f04f 0800 	mov.w	r8, #0
 800c5d4:	f859 4b04 	ldr.w	r4, [r9], #4
 800c5d8:	f8dc a000 	ldr.w	sl, [ip]
 800c5dc:	b2a3      	uxth	r3, r4
 800c5de:	fa1f fa8a 	uxth.w	sl, sl
 800c5e2:	fb0b a303 	mla	r3, fp, r3, sl
 800c5e6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c5ea:	f8dc 4000 	ldr.w	r4, [ip]
 800c5ee:	4443      	add	r3, r8
 800c5f0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c5f4:	fb0b 840a 	mla	r4, fp, sl, r8
 800c5f8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c5fc:	46e2      	mov	sl, ip
 800c5fe:	b29b      	uxth	r3, r3
 800c600:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c604:	454f      	cmp	r7, r9
 800c606:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c60a:	f84a 3b04 	str.w	r3, [sl], #4
 800c60e:	d82b      	bhi.n	800c668 <__multiply+0x120>
 800c610:	f8cc 8004 	str.w	r8, [ip, #4]
 800c614:	9b01      	ldr	r3, [sp, #4]
 800c616:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c61a:	3204      	adds	r2, #4
 800c61c:	f1ba 0f00 	cmp.w	sl, #0
 800c620:	d020      	beq.n	800c664 <__multiply+0x11c>
 800c622:	682b      	ldr	r3, [r5, #0]
 800c624:	4689      	mov	r9, r1
 800c626:	46a8      	mov	r8, r5
 800c628:	f04f 0b00 	mov.w	fp, #0
 800c62c:	f8b9 c000 	ldrh.w	ip, [r9]
 800c630:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c634:	fb0a 440c 	mla	r4, sl, ip, r4
 800c638:	445c      	add	r4, fp
 800c63a:	46c4      	mov	ip, r8
 800c63c:	b29b      	uxth	r3, r3
 800c63e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c642:	f84c 3b04 	str.w	r3, [ip], #4
 800c646:	f859 3b04 	ldr.w	r3, [r9], #4
 800c64a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c64e:	0c1b      	lsrs	r3, r3, #16
 800c650:	fb0a b303 	mla	r3, sl, r3, fp
 800c654:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c658:	454f      	cmp	r7, r9
 800c65a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c65e:	d805      	bhi.n	800c66c <__multiply+0x124>
 800c660:	f8c8 3004 	str.w	r3, [r8, #4]
 800c664:	3504      	adds	r5, #4
 800c666:	e79b      	b.n	800c5a0 <__multiply+0x58>
 800c668:	46d4      	mov	ip, sl
 800c66a:	e7b3      	b.n	800c5d4 <__multiply+0x8c>
 800c66c:	46e0      	mov	r8, ip
 800c66e:	e7dd      	b.n	800c62c <__multiply+0xe4>
 800c670:	3e01      	subs	r6, #1
 800c672:	e799      	b.n	800c5a8 <__multiply+0x60>

0800c674 <__pow5mult>:
 800c674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c678:	4615      	mov	r5, r2
 800c67a:	f012 0203 	ands.w	r2, r2, #3
 800c67e:	4606      	mov	r6, r0
 800c680:	460f      	mov	r7, r1
 800c682:	d007      	beq.n	800c694 <__pow5mult+0x20>
 800c684:	3a01      	subs	r2, #1
 800c686:	4c21      	ldr	r4, [pc, #132]	; (800c70c <__pow5mult+0x98>)
 800c688:	2300      	movs	r3, #0
 800c68a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c68e:	f7ff fec9 	bl	800c424 <__multadd>
 800c692:	4607      	mov	r7, r0
 800c694:	10ad      	asrs	r5, r5, #2
 800c696:	d035      	beq.n	800c704 <__pow5mult+0x90>
 800c698:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c69a:	b93c      	cbnz	r4, 800c6ac <__pow5mult+0x38>
 800c69c:	2010      	movs	r0, #16
 800c69e:	f7fe facb 	bl	800ac38 <malloc>
 800c6a2:	6270      	str	r0, [r6, #36]	; 0x24
 800c6a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c6a8:	6004      	str	r4, [r0, #0]
 800c6aa:	60c4      	str	r4, [r0, #12]
 800c6ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c6b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c6b4:	b94c      	cbnz	r4, 800c6ca <__pow5mult+0x56>
 800c6b6:	f240 2171 	movw	r1, #625	; 0x271
 800c6ba:	4630      	mov	r0, r6
 800c6bc:	f7ff ff3b 	bl	800c536 <__i2b>
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c6c6:	4604      	mov	r4, r0
 800c6c8:	6003      	str	r3, [r0, #0]
 800c6ca:	f04f 0800 	mov.w	r8, #0
 800c6ce:	07eb      	lsls	r3, r5, #31
 800c6d0:	d50a      	bpl.n	800c6e8 <__pow5mult+0x74>
 800c6d2:	4639      	mov	r1, r7
 800c6d4:	4622      	mov	r2, r4
 800c6d6:	4630      	mov	r0, r6
 800c6d8:	f7ff ff36 	bl	800c548 <__multiply>
 800c6dc:	4639      	mov	r1, r7
 800c6de:	4681      	mov	r9, r0
 800c6e0:	4630      	mov	r0, r6
 800c6e2:	f7ff fe88 	bl	800c3f6 <_Bfree>
 800c6e6:	464f      	mov	r7, r9
 800c6e8:	106d      	asrs	r5, r5, #1
 800c6ea:	d00b      	beq.n	800c704 <__pow5mult+0x90>
 800c6ec:	6820      	ldr	r0, [r4, #0]
 800c6ee:	b938      	cbnz	r0, 800c700 <__pow5mult+0x8c>
 800c6f0:	4622      	mov	r2, r4
 800c6f2:	4621      	mov	r1, r4
 800c6f4:	4630      	mov	r0, r6
 800c6f6:	f7ff ff27 	bl	800c548 <__multiply>
 800c6fa:	6020      	str	r0, [r4, #0]
 800c6fc:	f8c0 8000 	str.w	r8, [r0]
 800c700:	4604      	mov	r4, r0
 800c702:	e7e4      	b.n	800c6ce <__pow5mult+0x5a>
 800c704:	4638      	mov	r0, r7
 800c706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c70a:	bf00      	nop
 800c70c:	0800d0c8 	.word	0x0800d0c8

0800c710 <__lshift>:
 800c710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c714:	460c      	mov	r4, r1
 800c716:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c71a:	6923      	ldr	r3, [r4, #16]
 800c71c:	6849      	ldr	r1, [r1, #4]
 800c71e:	eb0a 0903 	add.w	r9, sl, r3
 800c722:	68a3      	ldr	r3, [r4, #8]
 800c724:	4607      	mov	r7, r0
 800c726:	4616      	mov	r6, r2
 800c728:	f109 0501 	add.w	r5, r9, #1
 800c72c:	42ab      	cmp	r3, r5
 800c72e:	db32      	blt.n	800c796 <__lshift+0x86>
 800c730:	4638      	mov	r0, r7
 800c732:	f7ff fe2c 	bl	800c38e <_Balloc>
 800c736:	2300      	movs	r3, #0
 800c738:	4680      	mov	r8, r0
 800c73a:	f100 0114 	add.w	r1, r0, #20
 800c73e:	461a      	mov	r2, r3
 800c740:	4553      	cmp	r3, sl
 800c742:	db2b      	blt.n	800c79c <__lshift+0x8c>
 800c744:	6920      	ldr	r0, [r4, #16]
 800c746:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c74a:	f104 0314 	add.w	r3, r4, #20
 800c74e:	f016 021f 	ands.w	r2, r6, #31
 800c752:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c756:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c75a:	d025      	beq.n	800c7a8 <__lshift+0x98>
 800c75c:	f1c2 0e20 	rsb	lr, r2, #32
 800c760:	2000      	movs	r0, #0
 800c762:	681e      	ldr	r6, [r3, #0]
 800c764:	468a      	mov	sl, r1
 800c766:	4096      	lsls	r6, r2
 800c768:	4330      	orrs	r0, r6
 800c76a:	f84a 0b04 	str.w	r0, [sl], #4
 800c76e:	f853 0b04 	ldr.w	r0, [r3], #4
 800c772:	459c      	cmp	ip, r3
 800c774:	fa20 f00e 	lsr.w	r0, r0, lr
 800c778:	d814      	bhi.n	800c7a4 <__lshift+0x94>
 800c77a:	6048      	str	r0, [r1, #4]
 800c77c:	b108      	cbz	r0, 800c782 <__lshift+0x72>
 800c77e:	f109 0502 	add.w	r5, r9, #2
 800c782:	3d01      	subs	r5, #1
 800c784:	4638      	mov	r0, r7
 800c786:	f8c8 5010 	str.w	r5, [r8, #16]
 800c78a:	4621      	mov	r1, r4
 800c78c:	f7ff fe33 	bl	800c3f6 <_Bfree>
 800c790:	4640      	mov	r0, r8
 800c792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c796:	3101      	adds	r1, #1
 800c798:	005b      	lsls	r3, r3, #1
 800c79a:	e7c7      	b.n	800c72c <__lshift+0x1c>
 800c79c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c7a0:	3301      	adds	r3, #1
 800c7a2:	e7cd      	b.n	800c740 <__lshift+0x30>
 800c7a4:	4651      	mov	r1, sl
 800c7a6:	e7dc      	b.n	800c762 <__lshift+0x52>
 800c7a8:	3904      	subs	r1, #4
 800c7aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7ae:	f841 2f04 	str.w	r2, [r1, #4]!
 800c7b2:	459c      	cmp	ip, r3
 800c7b4:	d8f9      	bhi.n	800c7aa <__lshift+0x9a>
 800c7b6:	e7e4      	b.n	800c782 <__lshift+0x72>

0800c7b8 <__mcmp>:
 800c7b8:	6903      	ldr	r3, [r0, #16]
 800c7ba:	690a      	ldr	r2, [r1, #16]
 800c7bc:	1a9b      	subs	r3, r3, r2
 800c7be:	b530      	push	{r4, r5, lr}
 800c7c0:	d10c      	bne.n	800c7dc <__mcmp+0x24>
 800c7c2:	0092      	lsls	r2, r2, #2
 800c7c4:	3014      	adds	r0, #20
 800c7c6:	3114      	adds	r1, #20
 800c7c8:	1884      	adds	r4, r0, r2
 800c7ca:	4411      	add	r1, r2
 800c7cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c7d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c7d4:	4295      	cmp	r5, r2
 800c7d6:	d003      	beq.n	800c7e0 <__mcmp+0x28>
 800c7d8:	d305      	bcc.n	800c7e6 <__mcmp+0x2e>
 800c7da:	2301      	movs	r3, #1
 800c7dc:	4618      	mov	r0, r3
 800c7de:	bd30      	pop	{r4, r5, pc}
 800c7e0:	42a0      	cmp	r0, r4
 800c7e2:	d3f3      	bcc.n	800c7cc <__mcmp+0x14>
 800c7e4:	e7fa      	b.n	800c7dc <__mcmp+0x24>
 800c7e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c7ea:	e7f7      	b.n	800c7dc <__mcmp+0x24>

0800c7ec <__mdiff>:
 800c7ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7f0:	460d      	mov	r5, r1
 800c7f2:	4607      	mov	r7, r0
 800c7f4:	4611      	mov	r1, r2
 800c7f6:	4628      	mov	r0, r5
 800c7f8:	4614      	mov	r4, r2
 800c7fa:	f7ff ffdd 	bl	800c7b8 <__mcmp>
 800c7fe:	1e06      	subs	r6, r0, #0
 800c800:	d108      	bne.n	800c814 <__mdiff+0x28>
 800c802:	4631      	mov	r1, r6
 800c804:	4638      	mov	r0, r7
 800c806:	f7ff fdc2 	bl	800c38e <_Balloc>
 800c80a:	2301      	movs	r3, #1
 800c80c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c814:	bfa4      	itt	ge
 800c816:	4623      	movge	r3, r4
 800c818:	462c      	movge	r4, r5
 800c81a:	4638      	mov	r0, r7
 800c81c:	6861      	ldr	r1, [r4, #4]
 800c81e:	bfa6      	itte	ge
 800c820:	461d      	movge	r5, r3
 800c822:	2600      	movge	r6, #0
 800c824:	2601      	movlt	r6, #1
 800c826:	f7ff fdb2 	bl	800c38e <_Balloc>
 800c82a:	692b      	ldr	r3, [r5, #16]
 800c82c:	60c6      	str	r6, [r0, #12]
 800c82e:	6926      	ldr	r6, [r4, #16]
 800c830:	f105 0914 	add.w	r9, r5, #20
 800c834:	f104 0214 	add.w	r2, r4, #20
 800c838:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c83c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c840:	f100 0514 	add.w	r5, r0, #20
 800c844:	f04f 0e00 	mov.w	lr, #0
 800c848:	f852 ab04 	ldr.w	sl, [r2], #4
 800c84c:	f859 4b04 	ldr.w	r4, [r9], #4
 800c850:	fa1e f18a 	uxtah	r1, lr, sl
 800c854:	b2a3      	uxth	r3, r4
 800c856:	1ac9      	subs	r1, r1, r3
 800c858:	0c23      	lsrs	r3, r4, #16
 800c85a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c85e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c862:	b289      	uxth	r1, r1
 800c864:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c868:	45c8      	cmp	r8, r9
 800c86a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c86e:	4694      	mov	ip, r2
 800c870:	f845 3b04 	str.w	r3, [r5], #4
 800c874:	d8e8      	bhi.n	800c848 <__mdiff+0x5c>
 800c876:	45bc      	cmp	ip, r7
 800c878:	d304      	bcc.n	800c884 <__mdiff+0x98>
 800c87a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c87e:	b183      	cbz	r3, 800c8a2 <__mdiff+0xb6>
 800c880:	6106      	str	r6, [r0, #16]
 800c882:	e7c5      	b.n	800c810 <__mdiff+0x24>
 800c884:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c888:	fa1e f381 	uxtah	r3, lr, r1
 800c88c:	141a      	asrs	r2, r3, #16
 800c88e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c892:	b29b      	uxth	r3, r3
 800c894:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c898:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c89c:	f845 3b04 	str.w	r3, [r5], #4
 800c8a0:	e7e9      	b.n	800c876 <__mdiff+0x8a>
 800c8a2:	3e01      	subs	r6, #1
 800c8a4:	e7e9      	b.n	800c87a <__mdiff+0x8e>

0800c8a6 <__d2b>:
 800c8a6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c8aa:	460e      	mov	r6, r1
 800c8ac:	2101      	movs	r1, #1
 800c8ae:	ec59 8b10 	vmov	r8, r9, d0
 800c8b2:	4615      	mov	r5, r2
 800c8b4:	f7ff fd6b 	bl	800c38e <_Balloc>
 800c8b8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c8bc:	4607      	mov	r7, r0
 800c8be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c8c2:	bb34      	cbnz	r4, 800c912 <__d2b+0x6c>
 800c8c4:	9301      	str	r3, [sp, #4]
 800c8c6:	f1b8 0300 	subs.w	r3, r8, #0
 800c8ca:	d027      	beq.n	800c91c <__d2b+0x76>
 800c8cc:	a802      	add	r0, sp, #8
 800c8ce:	f840 3d08 	str.w	r3, [r0, #-8]!
 800c8d2:	f7ff fe01 	bl	800c4d8 <__lo0bits>
 800c8d6:	9900      	ldr	r1, [sp, #0]
 800c8d8:	b1f0      	cbz	r0, 800c918 <__d2b+0x72>
 800c8da:	9a01      	ldr	r2, [sp, #4]
 800c8dc:	f1c0 0320 	rsb	r3, r0, #32
 800c8e0:	fa02 f303 	lsl.w	r3, r2, r3
 800c8e4:	430b      	orrs	r3, r1
 800c8e6:	40c2      	lsrs	r2, r0
 800c8e8:	617b      	str	r3, [r7, #20]
 800c8ea:	9201      	str	r2, [sp, #4]
 800c8ec:	9b01      	ldr	r3, [sp, #4]
 800c8ee:	61bb      	str	r3, [r7, #24]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	bf14      	ite	ne
 800c8f4:	2102      	movne	r1, #2
 800c8f6:	2101      	moveq	r1, #1
 800c8f8:	6139      	str	r1, [r7, #16]
 800c8fa:	b1c4      	cbz	r4, 800c92e <__d2b+0x88>
 800c8fc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c900:	4404      	add	r4, r0
 800c902:	6034      	str	r4, [r6, #0]
 800c904:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c908:	6028      	str	r0, [r5, #0]
 800c90a:	4638      	mov	r0, r7
 800c90c:	b003      	add	sp, #12
 800c90e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c912:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c916:	e7d5      	b.n	800c8c4 <__d2b+0x1e>
 800c918:	6179      	str	r1, [r7, #20]
 800c91a:	e7e7      	b.n	800c8ec <__d2b+0x46>
 800c91c:	a801      	add	r0, sp, #4
 800c91e:	f7ff fddb 	bl	800c4d8 <__lo0bits>
 800c922:	9b01      	ldr	r3, [sp, #4]
 800c924:	617b      	str	r3, [r7, #20]
 800c926:	2101      	movs	r1, #1
 800c928:	6139      	str	r1, [r7, #16]
 800c92a:	3020      	adds	r0, #32
 800c92c:	e7e5      	b.n	800c8fa <__d2b+0x54>
 800c92e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c932:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c936:	6030      	str	r0, [r6, #0]
 800c938:	6918      	ldr	r0, [r3, #16]
 800c93a:	f7ff fdae 	bl	800c49a <__hi0bits>
 800c93e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c942:	e7e1      	b.n	800c908 <__d2b+0x62>

0800c944 <_calloc_r>:
 800c944:	b538      	push	{r3, r4, r5, lr}
 800c946:	fb02 f401 	mul.w	r4, r2, r1
 800c94a:	4621      	mov	r1, r4
 800c94c:	f7fe f9da 	bl	800ad04 <_malloc_r>
 800c950:	4605      	mov	r5, r0
 800c952:	b118      	cbz	r0, 800c95c <_calloc_r+0x18>
 800c954:	4622      	mov	r2, r4
 800c956:	2100      	movs	r1, #0
 800c958:	f7fe f97e 	bl	800ac58 <memset>
 800c95c:	4628      	mov	r0, r5
 800c95e:	bd38      	pop	{r3, r4, r5, pc}

0800c960 <__ssputs_r>:
 800c960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c964:	688e      	ldr	r6, [r1, #8]
 800c966:	429e      	cmp	r6, r3
 800c968:	4682      	mov	sl, r0
 800c96a:	460c      	mov	r4, r1
 800c96c:	4690      	mov	r8, r2
 800c96e:	4699      	mov	r9, r3
 800c970:	d837      	bhi.n	800c9e2 <__ssputs_r+0x82>
 800c972:	898a      	ldrh	r2, [r1, #12]
 800c974:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c978:	d031      	beq.n	800c9de <__ssputs_r+0x7e>
 800c97a:	6825      	ldr	r5, [r4, #0]
 800c97c:	6909      	ldr	r1, [r1, #16]
 800c97e:	1a6f      	subs	r7, r5, r1
 800c980:	6965      	ldr	r5, [r4, #20]
 800c982:	2302      	movs	r3, #2
 800c984:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c988:	fb95 f5f3 	sdiv	r5, r5, r3
 800c98c:	f109 0301 	add.w	r3, r9, #1
 800c990:	443b      	add	r3, r7
 800c992:	429d      	cmp	r5, r3
 800c994:	bf38      	it	cc
 800c996:	461d      	movcc	r5, r3
 800c998:	0553      	lsls	r3, r2, #21
 800c99a:	d530      	bpl.n	800c9fe <__ssputs_r+0x9e>
 800c99c:	4629      	mov	r1, r5
 800c99e:	f7fe f9b1 	bl	800ad04 <_malloc_r>
 800c9a2:	4606      	mov	r6, r0
 800c9a4:	b950      	cbnz	r0, 800c9bc <__ssputs_r+0x5c>
 800c9a6:	230c      	movs	r3, #12
 800c9a8:	f8ca 3000 	str.w	r3, [sl]
 800c9ac:	89a3      	ldrh	r3, [r4, #12]
 800c9ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9b2:	81a3      	strh	r3, [r4, #12]
 800c9b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c9b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9bc:	463a      	mov	r2, r7
 800c9be:	6921      	ldr	r1, [r4, #16]
 800c9c0:	f7ff fcd8 	bl	800c374 <memcpy>
 800c9c4:	89a3      	ldrh	r3, [r4, #12]
 800c9c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c9ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9ce:	81a3      	strh	r3, [r4, #12]
 800c9d0:	6126      	str	r6, [r4, #16]
 800c9d2:	6165      	str	r5, [r4, #20]
 800c9d4:	443e      	add	r6, r7
 800c9d6:	1bed      	subs	r5, r5, r7
 800c9d8:	6026      	str	r6, [r4, #0]
 800c9da:	60a5      	str	r5, [r4, #8]
 800c9dc:	464e      	mov	r6, r9
 800c9de:	454e      	cmp	r6, r9
 800c9e0:	d900      	bls.n	800c9e4 <__ssputs_r+0x84>
 800c9e2:	464e      	mov	r6, r9
 800c9e4:	4632      	mov	r2, r6
 800c9e6:	4641      	mov	r1, r8
 800c9e8:	6820      	ldr	r0, [r4, #0]
 800c9ea:	f000 f91d 	bl	800cc28 <memmove>
 800c9ee:	68a3      	ldr	r3, [r4, #8]
 800c9f0:	1b9b      	subs	r3, r3, r6
 800c9f2:	60a3      	str	r3, [r4, #8]
 800c9f4:	6823      	ldr	r3, [r4, #0]
 800c9f6:	441e      	add	r6, r3
 800c9f8:	6026      	str	r6, [r4, #0]
 800c9fa:	2000      	movs	r0, #0
 800c9fc:	e7dc      	b.n	800c9b8 <__ssputs_r+0x58>
 800c9fe:	462a      	mov	r2, r5
 800ca00:	f000 f92b 	bl	800cc5a <_realloc_r>
 800ca04:	4606      	mov	r6, r0
 800ca06:	2800      	cmp	r0, #0
 800ca08:	d1e2      	bne.n	800c9d0 <__ssputs_r+0x70>
 800ca0a:	6921      	ldr	r1, [r4, #16]
 800ca0c:	4650      	mov	r0, sl
 800ca0e:	f7fe f92b 	bl	800ac68 <_free_r>
 800ca12:	e7c8      	b.n	800c9a6 <__ssputs_r+0x46>

0800ca14 <_svfiprintf_r>:
 800ca14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca18:	461d      	mov	r5, r3
 800ca1a:	898b      	ldrh	r3, [r1, #12]
 800ca1c:	061f      	lsls	r7, r3, #24
 800ca1e:	b09d      	sub	sp, #116	; 0x74
 800ca20:	4680      	mov	r8, r0
 800ca22:	460c      	mov	r4, r1
 800ca24:	4616      	mov	r6, r2
 800ca26:	d50f      	bpl.n	800ca48 <_svfiprintf_r+0x34>
 800ca28:	690b      	ldr	r3, [r1, #16]
 800ca2a:	b96b      	cbnz	r3, 800ca48 <_svfiprintf_r+0x34>
 800ca2c:	2140      	movs	r1, #64	; 0x40
 800ca2e:	f7fe f969 	bl	800ad04 <_malloc_r>
 800ca32:	6020      	str	r0, [r4, #0]
 800ca34:	6120      	str	r0, [r4, #16]
 800ca36:	b928      	cbnz	r0, 800ca44 <_svfiprintf_r+0x30>
 800ca38:	230c      	movs	r3, #12
 800ca3a:	f8c8 3000 	str.w	r3, [r8]
 800ca3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ca42:	e0c8      	b.n	800cbd6 <_svfiprintf_r+0x1c2>
 800ca44:	2340      	movs	r3, #64	; 0x40
 800ca46:	6163      	str	r3, [r4, #20]
 800ca48:	2300      	movs	r3, #0
 800ca4a:	9309      	str	r3, [sp, #36]	; 0x24
 800ca4c:	2320      	movs	r3, #32
 800ca4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca52:	2330      	movs	r3, #48	; 0x30
 800ca54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca58:	9503      	str	r5, [sp, #12]
 800ca5a:	f04f 0b01 	mov.w	fp, #1
 800ca5e:	4637      	mov	r7, r6
 800ca60:	463d      	mov	r5, r7
 800ca62:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ca66:	b10b      	cbz	r3, 800ca6c <_svfiprintf_r+0x58>
 800ca68:	2b25      	cmp	r3, #37	; 0x25
 800ca6a:	d13e      	bne.n	800caea <_svfiprintf_r+0xd6>
 800ca6c:	ebb7 0a06 	subs.w	sl, r7, r6
 800ca70:	d00b      	beq.n	800ca8a <_svfiprintf_r+0x76>
 800ca72:	4653      	mov	r3, sl
 800ca74:	4632      	mov	r2, r6
 800ca76:	4621      	mov	r1, r4
 800ca78:	4640      	mov	r0, r8
 800ca7a:	f7ff ff71 	bl	800c960 <__ssputs_r>
 800ca7e:	3001      	adds	r0, #1
 800ca80:	f000 80a4 	beq.w	800cbcc <_svfiprintf_r+0x1b8>
 800ca84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca86:	4453      	add	r3, sl
 800ca88:	9309      	str	r3, [sp, #36]	; 0x24
 800ca8a:	783b      	ldrb	r3, [r7, #0]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	f000 809d 	beq.w	800cbcc <_svfiprintf_r+0x1b8>
 800ca92:	2300      	movs	r3, #0
 800ca94:	f04f 32ff 	mov.w	r2, #4294967295
 800ca98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca9c:	9304      	str	r3, [sp, #16]
 800ca9e:	9307      	str	r3, [sp, #28]
 800caa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800caa4:	931a      	str	r3, [sp, #104]	; 0x68
 800caa6:	462f      	mov	r7, r5
 800caa8:	2205      	movs	r2, #5
 800caaa:	f817 1b01 	ldrb.w	r1, [r7], #1
 800caae:	4850      	ldr	r0, [pc, #320]	; (800cbf0 <_svfiprintf_r+0x1dc>)
 800cab0:	f7f3 fb96 	bl	80001e0 <memchr>
 800cab4:	9b04      	ldr	r3, [sp, #16]
 800cab6:	b9d0      	cbnz	r0, 800caee <_svfiprintf_r+0xda>
 800cab8:	06d9      	lsls	r1, r3, #27
 800caba:	bf44      	itt	mi
 800cabc:	2220      	movmi	r2, #32
 800cabe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cac2:	071a      	lsls	r2, r3, #28
 800cac4:	bf44      	itt	mi
 800cac6:	222b      	movmi	r2, #43	; 0x2b
 800cac8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cacc:	782a      	ldrb	r2, [r5, #0]
 800cace:	2a2a      	cmp	r2, #42	; 0x2a
 800cad0:	d015      	beq.n	800cafe <_svfiprintf_r+0xea>
 800cad2:	9a07      	ldr	r2, [sp, #28]
 800cad4:	462f      	mov	r7, r5
 800cad6:	2000      	movs	r0, #0
 800cad8:	250a      	movs	r5, #10
 800cada:	4639      	mov	r1, r7
 800cadc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cae0:	3b30      	subs	r3, #48	; 0x30
 800cae2:	2b09      	cmp	r3, #9
 800cae4:	d94d      	bls.n	800cb82 <_svfiprintf_r+0x16e>
 800cae6:	b1b8      	cbz	r0, 800cb18 <_svfiprintf_r+0x104>
 800cae8:	e00f      	b.n	800cb0a <_svfiprintf_r+0xf6>
 800caea:	462f      	mov	r7, r5
 800caec:	e7b8      	b.n	800ca60 <_svfiprintf_r+0x4c>
 800caee:	4a40      	ldr	r2, [pc, #256]	; (800cbf0 <_svfiprintf_r+0x1dc>)
 800caf0:	1a80      	subs	r0, r0, r2
 800caf2:	fa0b f000 	lsl.w	r0, fp, r0
 800caf6:	4318      	orrs	r0, r3
 800caf8:	9004      	str	r0, [sp, #16]
 800cafa:	463d      	mov	r5, r7
 800cafc:	e7d3      	b.n	800caa6 <_svfiprintf_r+0x92>
 800cafe:	9a03      	ldr	r2, [sp, #12]
 800cb00:	1d11      	adds	r1, r2, #4
 800cb02:	6812      	ldr	r2, [r2, #0]
 800cb04:	9103      	str	r1, [sp, #12]
 800cb06:	2a00      	cmp	r2, #0
 800cb08:	db01      	blt.n	800cb0e <_svfiprintf_r+0xfa>
 800cb0a:	9207      	str	r2, [sp, #28]
 800cb0c:	e004      	b.n	800cb18 <_svfiprintf_r+0x104>
 800cb0e:	4252      	negs	r2, r2
 800cb10:	f043 0302 	orr.w	r3, r3, #2
 800cb14:	9207      	str	r2, [sp, #28]
 800cb16:	9304      	str	r3, [sp, #16]
 800cb18:	783b      	ldrb	r3, [r7, #0]
 800cb1a:	2b2e      	cmp	r3, #46	; 0x2e
 800cb1c:	d10c      	bne.n	800cb38 <_svfiprintf_r+0x124>
 800cb1e:	787b      	ldrb	r3, [r7, #1]
 800cb20:	2b2a      	cmp	r3, #42	; 0x2a
 800cb22:	d133      	bne.n	800cb8c <_svfiprintf_r+0x178>
 800cb24:	9b03      	ldr	r3, [sp, #12]
 800cb26:	1d1a      	adds	r2, r3, #4
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	9203      	str	r2, [sp, #12]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	bfb8      	it	lt
 800cb30:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb34:	3702      	adds	r7, #2
 800cb36:	9305      	str	r3, [sp, #20]
 800cb38:	4d2e      	ldr	r5, [pc, #184]	; (800cbf4 <_svfiprintf_r+0x1e0>)
 800cb3a:	7839      	ldrb	r1, [r7, #0]
 800cb3c:	2203      	movs	r2, #3
 800cb3e:	4628      	mov	r0, r5
 800cb40:	f7f3 fb4e 	bl	80001e0 <memchr>
 800cb44:	b138      	cbz	r0, 800cb56 <_svfiprintf_r+0x142>
 800cb46:	2340      	movs	r3, #64	; 0x40
 800cb48:	1b40      	subs	r0, r0, r5
 800cb4a:	fa03 f000 	lsl.w	r0, r3, r0
 800cb4e:	9b04      	ldr	r3, [sp, #16]
 800cb50:	4303      	orrs	r3, r0
 800cb52:	3701      	adds	r7, #1
 800cb54:	9304      	str	r3, [sp, #16]
 800cb56:	7839      	ldrb	r1, [r7, #0]
 800cb58:	4827      	ldr	r0, [pc, #156]	; (800cbf8 <_svfiprintf_r+0x1e4>)
 800cb5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb5e:	2206      	movs	r2, #6
 800cb60:	1c7e      	adds	r6, r7, #1
 800cb62:	f7f3 fb3d 	bl	80001e0 <memchr>
 800cb66:	2800      	cmp	r0, #0
 800cb68:	d038      	beq.n	800cbdc <_svfiprintf_r+0x1c8>
 800cb6a:	4b24      	ldr	r3, [pc, #144]	; (800cbfc <_svfiprintf_r+0x1e8>)
 800cb6c:	bb13      	cbnz	r3, 800cbb4 <_svfiprintf_r+0x1a0>
 800cb6e:	9b03      	ldr	r3, [sp, #12]
 800cb70:	3307      	adds	r3, #7
 800cb72:	f023 0307 	bic.w	r3, r3, #7
 800cb76:	3308      	adds	r3, #8
 800cb78:	9303      	str	r3, [sp, #12]
 800cb7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb7c:	444b      	add	r3, r9
 800cb7e:	9309      	str	r3, [sp, #36]	; 0x24
 800cb80:	e76d      	b.n	800ca5e <_svfiprintf_r+0x4a>
 800cb82:	fb05 3202 	mla	r2, r5, r2, r3
 800cb86:	2001      	movs	r0, #1
 800cb88:	460f      	mov	r7, r1
 800cb8a:	e7a6      	b.n	800cada <_svfiprintf_r+0xc6>
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	3701      	adds	r7, #1
 800cb90:	9305      	str	r3, [sp, #20]
 800cb92:	4619      	mov	r1, r3
 800cb94:	250a      	movs	r5, #10
 800cb96:	4638      	mov	r0, r7
 800cb98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb9c:	3a30      	subs	r2, #48	; 0x30
 800cb9e:	2a09      	cmp	r2, #9
 800cba0:	d903      	bls.n	800cbaa <_svfiprintf_r+0x196>
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d0c8      	beq.n	800cb38 <_svfiprintf_r+0x124>
 800cba6:	9105      	str	r1, [sp, #20]
 800cba8:	e7c6      	b.n	800cb38 <_svfiprintf_r+0x124>
 800cbaa:	fb05 2101 	mla	r1, r5, r1, r2
 800cbae:	2301      	movs	r3, #1
 800cbb0:	4607      	mov	r7, r0
 800cbb2:	e7f0      	b.n	800cb96 <_svfiprintf_r+0x182>
 800cbb4:	ab03      	add	r3, sp, #12
 800cbb6:	9300      	str	r3, [sp, #0]
 800cbb8:	4622      	mov	r2, r4
 800cbba:	4b11      	ldr	r3, [pc, #68]	; (800cc00 <_svfiprintf_r+0x1ec>)
 800cbbc:	a904      	add	r1, sp, #16
 800cbbe:	4640      	mov	r0, r8
 800cbc0:	f7fe f98e 	bl	800aee0 <_printf_float>
 800cbc4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cbc8:	4681      	mov	r9, r0
 800cbca:	d1d6      	bne.n	800cb7a <_svfiprintf_r+0x166>
 800cbcc:	89a3      	ldrh	r3, [r4, #12]
 800cbce:	065b      	lsls	r3, r3, #25
 800cbd0:	f53f af35 	bmi.w	800ca3e <_svfiprintf_r+0x2a>
 800cbd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cbd6:	b01d      	add	sp, #116	; 0x74
 800cbd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbdc:	ab03      	add	r3, sp, #12
 800cbde:	9300      	str	r3, [sp, #0]
 800cbe0:	4622      	mov	r2, r4
 800cbe2:	4b07      	ldr	r3, [pc, #28]	; (800cc00 <_svfiprintf_r+0x1ec>)
 800cbe4:	a904      	add	r1, sp, #16
 800cbe6:	4640      	mov	r0, r8
 800cbe8:	f7fe fc30 	bl	800b44c <_printf_i>
 800cbec:	e7ea      	b.n	800cbc4 <_svfiprintf_r+0x1b0>
 800cbee:	bf00      	nop
 800cbf0:	0800d0d4 	.word	0x0800d0d4
 800cbf4:	0800d0da 	.word	0x0800d0da
 800cbf8:	0800d0de 	.word	0x0800d0de
 800cbfc:	0800aee1 	.word	0x0800aee1
 800cc00:	0800c961 	.word	0x0800c961

0800cc04 <__ascii_mbtowc>:
 800cc04:	b082      	sub	sp, #8
 800cc06:	b901      	cbnz	r1, 800cc0a <__ascii_mbtowc+0x6>
 800cc08:	a901      	add	r1, sp, #4
 800cc0a:	b142      	cbz	r2, 800cc1e <__ascii_mbtowc+0x1a>
 800cc0c:	b14b      	cbz	r3, 800cc22 <__ascii_mbtowc+0x1e>
 800cc0e:	7813      	ldrb	r3, [r2, #0]
 800cc10:	600b      	str	r3, [r1, #0]
 800cc12:	7812      	ldrb	r2, [r2, #0]
 800cc14:	1c10      	adds	r0, r2, #0
 800cc16:	bf18      	it	ne
 800cc18:	2001      	movne	r0, #1
 800cc1a:	b002      	add	sp, #8
 800cc1c:	4770      	bx	lr
 800cc1e:	4610      	mov	r0, r2
 800cc20:	e7fb      	b.n	800cc1a <__ascii_mbtowc+0x16>
 800cc22:	f06f 0001 	mvn.w	r0, #1
 800cc26:	e7f8      	b.n	800cc1a <__ascii_mbtowc+0x16>

0800cc28 <memmove>:
 800cc28:	4288      	cmp	r0, r1
 800cc2a:	b510      	push	{r4, lr}
 800cc2c:	eb01 0302 	add.w	r3, r1, r2
 800cc30:	d807      	bhi.n	800cc42 <memmove+0x1a>
 800cc32:	1e42      	subs	r2, r0, #1
 800cc34:	4299      	cmp	r1, r3
 800cc36:	d00a      	beq.n	800cc4e <memmove+0x26>
 800cc38:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc3c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800cc40:	e7f8      	b.n	800cc34 <memmove+0xc>
 800cc42:	4283      	cmp	r3, r0
 800cc44:	d9f5      	bls.n	800cc32 <memmove+0xa>
 800cc46:	1881      	adds	r1, r0, r2
 800cc48:	1ad2      	subs	r2, r2, r3
 800cc4a:	42d3      	cmn	r3, r2
 800cc4c:	d100      	bne.n	800cc50 <memmove+0x28>
 800cc4e:	bd10      	pop	{r4, pc}
 800cc50:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc54:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800cc58:	e7f7      	b.n	800cc4a <memmove+0x22>

0800cc5a <_realloc_r>:
 800cc5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc5c:	4607      	mov	r7, r0
 800cc5e:	4614      	mov	r4, r2
 800cc60:	460e      	mov	r6, r1
 800cc62:	b921      	cbnz	r1, 800cc6e <_realloc_r+0x14>
 800cc64:	4611      	mov	r1, r2
 800cc66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cc6a:	f7fe b84b 	b.w	800ad04 <_malloc_r>
 800cc6e:	b922      	cbnz	r2, 800cc7a <_realloc_r+0x20>
 800cc70:	f7fd fffa 	bl	800ac68 <_free_r>
 800cc74:	4625      	mov	r5, r4
 800cc76:	4628      	mov	r0, r5
 800cc78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc7a:	f000 f821 	bl	800ccc0 <_malloc_usable_size_r>
 800cc7e:	42a0      	cmp	r0, r4
 800cc80:	d20f      	bcs.n	800cca2 <_realloc_r+0x48>
 800cc82:	4621      	mov	r1, r4
 800cc84:	4638      	mov	r0, r7
 800cc86:	f7fe f83d 	bl	800ad04 <_malloc_r>
 800cc8a:	4605      	mov	r5, r0
 800cc8c:	2800      	cmp	r0, #0
 800cc8e:	d0f2      	beq.n	800cc76 <_realloc_r+0x1c>
 800cc90:	4631      	mov	r1, r6
 800cc92:	4622      	mov	r2, r4
 800cc94:	f7ff fb6e 	bl	800c374 <memcpy>
 800cc98:	4631      	mov	r1, r6
 800cc9a:	4638      	mov	r0, r7
 800cc9c:	f7fd ffe4 	bl	800ac68 <_free_r>
 800cca0:	e7e9      	b.n	800cc76 <_realloc_r+0x1c>
 800cca2:	4635      	mov	r5, r6
 800cca4:	e7e7      	b.n	800cc76 <_realloc_r+0x1c>

0800cca6 <__ascii_wctomb>:
 800cca6:	b149      	cbz	r1, 800ccbc <__ascii_wctomb+0x16>
 800cca8:	2aff      	cmp	r2, #255	; 0xff
 800ccaa:	bf85      	ittet	hi
 800ccac:	238a      	movhi	r3, #138	; 0x8a
 800ccae:	6003      	strhi	r3, [r0, #0]
 800ccb0:	700a      	strbls	r2, [r1, #0]
 800ccb2:	f04f 30ff 	movhi.w	r0, #4294967295
 800ccb6:	bf98      	it	ls
 800ccb8:	2001      	movls	r0, #1
 800ccba:	4770      	bx	lr
 800ccbc:	4608      	mov	r0, r1
 800ccbe:	4770      	bx	lr

0800ccc0 <_malloc_usable_size_r>:
 800ccc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccc4:	1f18      	subs	r0, r3, #4
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	bfbc      	itt	lt
 800ccca:	580b      	ldrlt	r3, [r1, r0]
 800cccc:	18c0      	addlt	r0, r0, r3
 800ccce:	4770      	bx	lr

0800ccd0 <ceil>:
 800ccd0:	ec51 0b10 	vmov	r0, r1, d0
 800ccd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccd8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ccdc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800cce0:	2e13      	cmp	r6, #19
 800cce2:	460c      	mov	r4, r1
 800cce4:	ee10 5a10 	vmov	r5, s0
 800cce8:	4680      	mov	r8, r0
 800ccea:	dc30      	bgt.n	800cd4e <ceil+0x7e>
 800ccec:	2e00      	cmp	r6, #0
 800ccee:	da12      	bge.n	800cd16 <ceil+0x46>
 800ccf0:	a333      	add	r3, pc, #204	; (adr r3, 800cdc0 <ceil+0xf0>)
 800ccf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf6:	f7f3 fac9 	bl	800028c <__adddf3>
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	f7f3 ff0b 	bl	8000b18 <__aeabi_dcmpgt>
 800cd02:	b128      	cbz	r0, 800cd10 <ceil+0x40>
 800cd04:	2c00      	cmp	r4, #0
 800cd06:	db55      	blt.n	800cdb4 <ceil+0xe4>
 800cd08:	432c      	orrs	r4, r5
 800cd0a:	d057      	beq.n	800cdbc <ceil+0xec>
 800cd0c:	4c2e      	ldr	r4, [pc, #184]	; (800cdc8 <ceil+0xf8>)
 800cd0e:	2500      	movs	r5, #0
 800cd10:	4621      	mov	r1, r4
 800cd12:	4628      	mov	r0, r5
 800cd14:	e025      	b.n	800cd62 <ceil+0x92>
 800cd16:	4f2d      	ldr	r7, [pc, #180]	; (800cdcc <ceil+0xfc>)
 800cd18:	4137      	asrs	r7, r6
 800cd1a:	ea01 0307 	and.w	r3, r1, r7
 800cd1e:	4303      	orrs	r3, r0
 800cd20:	d01f      	beq.n	800cd62 <ceil+0x92>
 800cd22:	a327      	add	r3, pc, #156	; (adr r3, 800cdc0 <ceil+0xf0>)
 800cd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd28:	f7f3 fab0 	bl	800028c <__adddf3>
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	2300      	movs	r3, #0
 800cd30:	f7f3 fef2 	bl	8000b18 <__aeabi_dcmpgt>
 800cd34:	2800      	cmp	r0, #0
 800cd36:	d0eb      	beq.n	800cd10 <ceil+0x40>
 800cd38:	2c00      	cmp	r4, #0
 800cd3a:	bfc2      	ittt	gt
 800cd3c:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800cd40:	fa43 f606 	asrgt.w	r6, r3, r6
 800cd44:	19a4      	addgt	r4, r4, r6
 800cd46:	ea24 0407 	bic.w	r4, r4, r7
 800cd4a:	2500      	movs	r5, #0
 800cd4c:	e7e0      	b.n	800cd10 <ceil+0x40>
 800cd4e:	2e33      	cmp	r6, #51	; 0x33
 800cd50:	dd0b      	ble.n	800cd6a <ceil+0x9a>
 800cd52:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cd56:	d104      	bne.n	800cd62 <ceil+0x92>
 800cd58:	ee10 2a10 	vmov	r2, s0
 800cd5c:	460b      	mov	r3, r1
 800cd5e:	f7f3 fa95 	bl	800028c <__adddf3>
 800cd62:	ec41 0b10 	vmov	d0, r0, r1
 800cd66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd6a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800cd6e:	f04f 33ff 	mov.w	r3, #4294967295
 800cd72:	fa23 f707 	lsr.w	r7, r3, r7
 800cd76:	4207      	tst	r7, r0
 800cd78:	d0f3      	beq.n	800cd62 <ceil+0x92>
 800cd7a:	a311      	add	r3, pc, #68	; (adr r3, 800cdc0 <ceil+0xf0>)
 800cd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd80:	f7f3 fa84 	bl	800028c <__adddf3>
 800cd84:	2200      	movs	r2, #0
 800cd86:	2300      	movs	r3, #0
 800cd88:	f7f3 fec6 	bl	8000b18 <__aeabi_dcmpgt>
 800cd8c:	2800      	cmp	r0, #0
 800cd8e:	d0bf      	beq.n	800cd10 <ceil+0x40>
 800cd90:	2c00      	cmp	r4, #0
 800cd92:	dd02      	ble.n	800cd9a <ceil+0xca>
 800cd94:	2e14      	cmp	r6, #20
 800cd96:	d103      	bne.n	800cda0 <ceil+0xd0>
 800cd98:	3401      	adds	r4, #1
 800cd9a:	ea25 0507 	bic.w	r5, r5, r7
 800cd9e:	e7b7      	b.n	800cd10 <ceil+0x40>
 800cda0:	2301      	movs	r3, #1
 800cda2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800cda6:	fa03 f606 	lsl.w	r6, r3, r6
 800cdaa:	4435      	add	r5, r6
 800cdac:	4545      	cmp	r5, r8
 800cdae:	bf38      	it	cc
 800cdb0:	18e4      	addcc	r4, r4, r3
 800cdb2:	e7f2      	b.n	800cd9a <ceil+0xca>
 800cdb4:	2500      	movs	r5, #0
 800cdb6:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800cdba:	e7a9      	b.n	800cd10 <ceil+0x40>
 800cdbc:	4625      	mov	r5, r4
 800cdbe:	e7a7      	b.n	800cd10 <ceil+0x40>
 800cdc0:	8800759c 	.word	0x8800759c
 800cdc4:	7e37e43c 	.word	0x7e37e43c
 800cdc8:	3ff00000 	.word	0x3ff00000
 800cdcc:	000fffff 	.word	0x000fffff

0800cdd0 <floor>:
 800cdd0:	ec51 0b10 	vmov	r0, r1, d0
 800cdd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdd8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800cddc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800cde0:	2e13      	cmp	r6, #19
 800cde2:	460c      	mov	r4, r1
 800cde4:	ee10 5a10 	vmov	r5, s0
 800cde8:	4680      	mov	r8, r0
 800cdea:	dc34      	bgt.n	800ce56 <floor+0x86>
 800cdec:	2e00      	cmp	r6, #0
 800cdee:	da16      	bge.n	800ce1e <floor+0x4e>
 800cdf0:	a335      	add	r3, pc, #212	; (adr r3, 800cec8 <floor+0xf8>)
 800cdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdf6:	f7f3 fa49 	bl	800028c <__adddf3>
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	f7f3 fe8b 	bl	8000b18 <__aeabi_dcmpgt>
 800ce02:	b148      	cbz	r0, 800ce18 <floor+0x48>
 800ce04:	2c00      	cmp	r4, #0
 800ce06:	da59      	bge.n	800cebc <floor+0xec>
 800ce08:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ce0c:	4a30      	ldr	r2, [pc, #192]	; (800ced0 <floor+0x100>)
 800ce0e:	432b      	orrs	r3, r5
 800ce10:	2500      	movs	r5, #0
 800ce12:	42ab      	cmp	r3, r5
 800ce14:	bf18      	it	ne
 800ce16:	4614      	movne	r4, r2
 800ce18:	4621      	mov	r1, r4
 800ce1a:	4628      	mov	r0, r5
 800ce1c:	e025      	b.n	800ce6a <floor+0x9a>
 800ce1e:	4f2d      	ldr	r7, [pc, #180]	; (800ced4 <floor+0x104>)
 800ce20:	4137      	asrs	r7, r6
 800ce22:	ea01 0307 	and.w	r3, r1, r7
 800ce26:	4303      	orrs	r3, r0
 800ce28:	d01f      	beq.n	800ce6a <floor+0x9a>
 800ce2a:	a327      	add	r3, pc, #156	; (adr r3, 800cec8 <floor+0xf8>)
 800ce2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce30:	f7f3 fa2c 	bl	800028c <__adddf3>
 800ce34:	2200      	movs	r2, #0
 800ce36:	2300      	movs	r3, #0
 800ce38:	f7f3 fe6e 	bl	8000b18 <__aeabi_dcmpgt>
 800ce3c:	2800      	cmp	r0, #0
 800ce3e:	d0eb      	beq.n	800ce18 <floor+0x48>
 800ce40:	2c00      	cmp	r4, #0
 800ce42:	bfbe      	ittt	lt
 800ce44:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ce48:	fa43 f606 	asrlt.w	r6, r3, r6
 800ce4c:	19a4      	addlt	r4, r4, r6
 800ce4e:	ea24 0407 	bic.w	r4, r4, r7
 800ce52:	2500      	movs	r5, #0
 800ce54:	e7e0      	b.n	800ce18 <floor+0x48>
 800ce56:	2e33      	cmp	r6, #51	; 0x33
 800ce58:	dd0b      	ble.n	800ce72 <floor+0xa2>
 800ce5a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ce5e:	d104      	bne.n	800ce6a <floor+0x9a>
 800ce60:	ee10 2a10 	vmov	r2, s0
 800ce64:	460b      	mov	r3, r1
 800ce66:	f7f3 fa11 	bl	800028c <__adddf3>
 800ce6a:	ec41 0b10 	vmov	d0, r0, r1
 800ce6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce72:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ce76:	f04f 33ff 	mov.w	r3, #4294967295
 800ce7a:	fa23 f707 	lsr.w	r7, r3, r7
 800ce7e:	4207      	tst	r7, r0
 800ce80:	d0f3      	beq.n	800ce6a <floor+0x9a>
 800ce82:	a311      	add	r3, pc, #68	; (adr r3, 800cec8 <floor+0xf8>)
 800ce84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce88:	f7f3 fa00 	bl	800028c <__adddf3>
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	2300      	movs	r3, #0
 800ce90:	f7f3 fe42 	bl	8000b18 <__aeabi_dcmpgt>
 800ce94:	2800      	cmp	r0, #0
 800ce96:	d0bf      	beq.n	800ce18 <floor+0x48>
 800ce98:	2c00      	cmp	r4, #0
 800ce9a:	da02      	bge.n	800cea2 <floor+0xd2>
 800ce9c:	2e14      	cmp	r6, #20
 800ce9e:	d103      	bne.n	800cea8 <floor+0xd8>
 800cea0:	3401      	adds	r4, #1
 800cea2:	ea25 0507 	bic.w	r5, r5, r7
 800cea6:	e7b7      	b.n	800ce18 <floor+0x48>
 800cea8:	2301      	movs	r3, #1
 800ceaa:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ceae:	fa03 f606 	lsl.w	r6, r3, r6
 800ceb2:	4435      	add	r5, r6
 800ceb4:	4545      	cmp	r5, r8
 800ceb6:	bf38      	it	cc
 800ceb8:	18e4      	addcc	r4, r4, r3
 800ceba:	e7f2      	b.n	800cea2 <floor+0xd2>
 800cebc:	2500      	movs	r5, #0
 800cebe:	462c      	mov	r4, r5
 800cec0:	e7aa      	b.n	800ce18 <floor+0x48>
 800cec2:	bf00      	nop
 800cec4:	f3af 8000 	nop.w
 800cec8:	8800759c 	.word	0x8800759c
 800cecc:	7e37e43c 	.word	0x7e37e43c
 800ced0:	bff00000 	.word	0xbff00000
 800ced4:	000fffff 	.word	0x000fffff

0800ced8 <_init>:
 800ced8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceda:	bf00      	nop
 800cedc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cede:	bc08      	pop	{r3}
 800cee0:	469e      	mov	lr, r3
 800cee2:	4770      	bx	lr

0800cee4 <_fini>:
 800cee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cee6:	bf00      	nop
 800cee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceea:	bc08      	pop	{r3}
 800ceec:	469e      	mov	lr, r3
 800ceee:	4770      	bx	lr

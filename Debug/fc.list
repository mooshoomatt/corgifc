
fc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d30c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  0800d4a0  0800d4a0  0001d4a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7a0  0800d7a0  00020358  2**0
                  CONTENTS
  4 .ARM          00000008  0800d7a0  0800d7a0  0001d7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d7a8  0800d7a8  00020358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7a8  0800d7a8  0001d7a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d7ac  0800d7ac  0001d7ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  0800d7b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c3c  20000358  0800db08  00020358  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  20001f94  0800db08  00021f94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dd14  00000000  00000000  00020388  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b5a  00000000  00000000  0003e09c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014b0  00000000  00000000  00041bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001320  00000000  00000000  000430a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023860  00000000  00000000  000443c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000132f1  00000000  00000000  00067c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c40dc  00000000  00000000  0007af19  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013eff5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006174  00000000  00000000  0013f070  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000358 	.word	0x20000358
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d484 	.word	0x0800d484

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000035c 	.word	0x2000035c
 80001cc:	0800d484 	.word	0x0800d484

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <BMI088_I2C_Read_CHIP_IDS>:

#include "BMI088.h"

/* READ ACCEL AND GYRO CHIP IDS */
HAL_StatusTypeDef BMI088_I2C_Read_CHIP_IDS(I2C_HandleTypeDef *hi2c)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af04      	add	r7, sp, #16
 8000f4e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef ret; // HAL Status Value
	uint8_t buf[4];        // Rx Buffer

	ret    = HAL_OK;
 8000f50:	2300      	movs	r3, #0
 8000f52:	73fb      	strb	r3, [r7, #15]
    ret = (ret | HAL_I2C_Mem_Read(hi2c, BMI088_ACC_ADDR << 1, ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY));
 8000f54:	f04f 33ff 	mov.w	r3, #4294967295
 8000f58:	9302      	str	r3, [sp, #8]
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	9301      	str	r3, [sp, #4]
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	2301      	movs	r3, #1
 8000f66:	2200      	movs	r2, #0
 8000f68:	2130      	movs	r1, #48	; 0x30
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f003 f83c 	bl	8003fe8 <HAL_I2C_Mem_Read>
 8000f70:	4603      	mov	r3, r0
 8000f72:	461a      	mov	r2, r3
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	73fb      	strb	r3, [r7, #15]
	if ( buf[0] != BMI088_ACC_ID ){ ret = HAL_ERROR; }
 8000f7a:	7a3b      	ldrb	r3, [r7, #8]
 8000f7c:	2b1e      	cmp	r3, #30
 8000f7e:	d001      	beq.n	8000f84 <BMI088_I2C_Read_CHIP_IDS+0x3c>
 8000f80:	2301      	movs	r3, #1
 8000f82:	73fb      	strb	r3, [r7, #15]
	ret = (ret | HAL_I2C_Mem_Read(hi2c, BMI088_GYRO_ADDR << 1, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY));
 8000f84:	f04f 33ff 	mov.w	r3, #4294967295
 8000f88:	9302      	str	r3, [sp, #8]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	9301      	str	r3, [sp, #4]
 8000f8e:	f107 0308 	add.w	r3, r7, #8
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	2301      	movs	r3, #1
 8000f96:	2200      	movs	r2, #0
 8000f98:	21d0      	movs	r1, #208	; 0xd0
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f003 f824 	bl	8003fe8 <HAL_I2C_Mem_Read>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	73fb      	strb	r3, [r7, #15]
	if ( buf[0] != BMI088_GYRO_ID ){ ret = HAL_ERROR; }
 8000faa:	7a3b      	ldrb	r3, [r7, #8]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d001      	beq.n	8000fb4 <BMI088_I2C_Read_CHIP_IDS+0x6c>
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	73fb      	strb	r3, [r7, #15]

	return ret;
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <BMI088_I2C_GYRO_INIT>:

/* CUSTOM GYROSCOPE SETTING INITIALIZATION */
HAL_StatusTypeDef BMI088_I2C_GYRO_INIT(I2C_HandleTypeDef *hi2c)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b084      	sub	sp, #16
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
	 * WRITING BACK TO THE REGISTER
	 */

	HAL_StatusTypeDef ret;
	uint8_t buf[1]; // Tx/Rx Buffer
	ret = HAL_OK;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	73fb      	strb	r3, [r7, #15]
	// ret = (ret | BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, GYRO_RANGE, buf));

	// SET GYROSCOPE DATA RATE AND BANDWIDTH
	// DATA RATE: [1000 HZ]    400 HZ
	// BANDWIDTH: [116 Hz]     47 HZ
	buf[0] = 0x82;
 8000fca:	2382      	movs	r3, #130	; 0x82
 8000fcc:	733b      	strb	r3, [r7, #12]
	ret    |= BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, GYRO_BANDWIDTH, buf);
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	2210      	movs	r2, #16
 8000fd4:	2168      	movs	r1, #104	; 0x68
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f000 f878 	bl	80010cc <BMI088_I2C_Reg_Write>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	461a      	mov	r2, r3
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	73fb      	strb	r3, [r7, #15]

	// SET GYROSCOPE INT3 MODE TO PUSH-PULL
	ret    |= BMI088_I2C_Reg_Read(hi2c, BMI088_GYRO_ADDR, INT3_INT4_IO_CONF, buf);
 8000fe6:	f107 030c 	add.w	r3, r7, #12
 8000fea:	2216      	movs	r2, #22
 8000fec:	2168      	movs	r1, #104	; 0x68
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 f88b 	bl	800110a <BMI088_I2C_Reg_Read>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	73fb      	strb	r3, [r7, #15]
	buf[0] &= 0xFD;
 8000ffe:	7b3b      	ldrb	r3, [r7, #12]
 8001000:	f023 0302 	bic.w	r3, r3, #2
 8001004:	b2db      	uxtb	r3, r3
 8001006:	733b      	strb	r3, [r7, #12]
	ret    |= BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, INT3_INT4_IO_CONF, buf);
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	2216      	movs	r2, #22
 800100e:	2168      	movs	r1, #104	; 0x68
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f000 f85b 	bl	80010cc <BMI088_I2C_Reg_Write>
 8001016:	4603      	mov	r3, r0
 8001018:	461a      	mov	r2, r3
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	4313      	orrs	r3, r2
 800101e:	73fb      	strb	r3, [r7, #15]

	// MAP GYROSCOPE DATA-READY INTERRUPT TO INT3
	ret    |= BMI088_I2C_Reg_Read(hi2c, BMI088_GYRO_ADDR, INT3_INT4_IO_MAP, buf);
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	2218      	movs	r2, #24
 8001026:	2168      	movs	r1, #104	; 0x68
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f000 f86e 	bl	800110a <BMI088_I2C_Reg_Read>
 800102e:	4603      	mov	r3, r0
 8001030:	461a      	mov	r2, r3
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	4313      	orrs	r3, r2
 8001036:	73fb      	strb	r3, [r7, #15]
	buf[0] |= 0x01;
 8001038:	7b3b      	ldrb	r3, [r7, #12]
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	b2db      	uxtb	r3, r3
 8001040:	733b      	strb	r3, [r7, #12]
	ret    |= BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, INT3_INT4_IO_MAP, buf);
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	2218      	movs	r2, #24
 8001048:	2168      	movs	r1, #104	; 0x68
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 f83e 	bl	80010cc <BMI088_I2C_Reg_Write>
 8001050:	4603      	mov	r3, r0
 8001052:	461a      	mov	r2, r3
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	4313      	orrs	r3, r2
 8001058:	73fb      	strb	r3, [r7, #15]

	// ENABLE GYROSCOPE DATA-READY INTERRUPT
	ret    |= BMI088_I2C_Reg_Read(hi2c, BMI088_GYRO_ADDR, GYRO_INT_CTRL, buf);
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	2215      	movs	r2, #21
 8001060:	2168      	movs	r1, #104	; 0x68
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 f851 	bl	800110a <BMI088_I2C_Reg_Read>
 8001068:	4603      	mov	r3, r0
 800106a:	461a      	mov	r2, r3
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	4313      	orrs	r3, r2
 8001070:	73fb      	strb	r3, [r7, #15]
	buf[0] |= 0x80;
 8001072:	7b3b      	ldrb	r3, [r7, #12]
 8001074:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001078:	b2db      	uxtb	r3, r3
 800107a:	733b      	strb	r3, [r7, #12]
	ret    |= BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, GYRO_INT_CTRL, buf);
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	2215      	movs	r2, #21
 8001082:	2168      	movs	r1, #104	; 0x68
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f821 	bl	80010cc <BMI088_I2C_Reg_Write>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	4313      	orrs	r3, r2
 8001092:	73fb      	strb	r3, [r7, #15]

	return ret;
 8001094:	7bfb      	ldrb	r3, [r7, #15]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <BMI088_I2C_Read_Gyro>:
	return HAL_I2C_Mem_Read_IT(hi2c, BMI088_ACC_ADDR << 1, ACC_DATA, I2C_MEMADD_SIZE_8BIT, pData, 6);
}

/* READ ALL GYROSCOPE DATA IN POLLING MODE */
HAL_StatusTypeDef BMI088_I2C_Read_Gyro(I2C_HandleTypeDef *hi2c, uint8_t *pData)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b086      	sub	sp, #24
 80010a2:	af04      	add	r7, sp, #16
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	6039      	str	r1, [r7, #0]
	return HAL_I2C_Mem_Read(hi2c, BMI088_GYRO_ADDR << 1, GYRO_DATA, I2C_MEMADD_SIZE_8BIT, pData, 6, HAL_MAX_DELAY);
 80010a8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ac:	9302      	str	r3, [sp, #8]
 80010ae:	2306      	movs	r3, #6
 80010b0:	9301      	str	r3, [sp, #4]
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2301      	movs	r3, #1
 80010b8:	2202      	movs	r2, #2
 80010ba:	21d0      	movs	r1, #208	; 0xd0
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f002 ff93 	bl	8003fe8 <HAL_I2C_Mem_Read>
 80010c2:	4603      	mov	r3, r0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <BMI088_I2C_Reg_Write>:
	return HAL_I2C_Mem_Read_IT(hi2c, BMI088_GYRO_ADDR << 1, GYRO_DATA, I2C_MEMADD_SIZE_8BIT, pData, 6);
}

/* WRITE REGISTER */
HAL_StatusTypeDef BMI088_I2C_Reg_Write(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t mem_addr, uint8_t *pData)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af04      	add	r7, sp, #16
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	460b      	mov	r3, r1
 80010d8:	72fb      	strb	r3, [r7, #11]
 80010da:	4613      	mov	r3, r2
 80010dc:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Write(hi2c, dev_addr << 1, mem_addr, I2C_MEMADD_SIZE_8BIT, pData, 1, HAL_MAX_DELAY);
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	b299      	uxth	r1, r3
 80010e6:	7abb      	ldrb	r3, [r7, #10]
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	9302      	str	r3, [sp, #8]
 80010f0:	2301      	movs	r3, #1
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2301      	movs	r3, #1
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f002 fe7a 	bl	8003df4 <HAL_I2C_Mem_Write>
 8001100:	4603      	mov	r3, r0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <BMI088_I2C_Reg_Read>:

/* READ REGISTER */
HAL_StatusTypeDef BMI088_I2C_Reg_Read(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t mem_addr, uint8_t *pData)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b088      	sub	sp, #32
 800110e:	af04      	add	r7, sp, #16
 8001110:	60f8      	str	r0, [r7, #12]
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	72fb      	strb	r3, [r7, #11]
 8001118:	4613      	mov	r3, r2
 800111a:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(hi2c, dev_addr << 1, mem_addr, I2C_MEMADD_SIZE_8BIT, pData, 1, HAL_MAX_DELAY);
 800111c:	7afb      	ldrb	r3, [r7, #11]
 800111e:	b29b      	uxth	r3, r3
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	b299      	uxth	r1, r3
 8001124:	7abb      	ldrb	r3, [r7, #10]
 8001126:	b29a      	uxth	r2, r3
 8001128:	f04f 33ff 	mov.w	r3, #4294967295
 800112c:	9302      	str	r3, [sp, #8]
 800112e:	2301      	movs	r3, #1
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2301      	movs	r3, #1
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	f002 ff55 	bl	8003fe8 <HAL_I2C_Mem_Read>
 800113e:	4603      	mov	r3, r0
}
 8001140:	4618      	mov	r0, r3
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <PID3_Init>:

#include "PID3.h"

/* INITIALIZATION FUNCTION */
PID_StatusTypeDef PID3_Init(PID3 *pid, const float *p, const float *i, const float*d)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
 8001154:	603b      	str	r3, [r7, #0]
	/* SET PID GAINS */
	pid->Kp[0] = p[0]; pid->Kp[1] = p[1]; pid->Kp[2] = p[2];
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	611a      	str	r2, [r3, #16]
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	689a      	ldr	r2, [r3, #8]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	615a      	str	r2, [r3, #20]

	pid->Ki[0] = i[0]; pid->Ki[1] = i[1]; pid->Ki[2] = i[2];
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	619a      	str	r2, [r3, #24]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	61da      	str	r2, [r3, #28]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689a      	ldr	r2, [r3, #8]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	621a      	str	r2, [r3, #32]

	pid->Kd[0] = d[0]; pid->Kd[1] = d[1]; pid->Kd[2] = d[2];
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	625a      	str	r2, [r3, #36]	; 0x24
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	629a      	str	r2, [r3, #40]	; 0x28
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	689a      	ldr	r2, [r3, #8]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	62da      	str	r2, [r3, #44]	; 0x2c

	/* CLEAR IMPORTANT VARIABLES */
	pid->out[0] = 0.0; pid->out[1] = 0.0; pid->out[2] = 0.0;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f04f 0200 	mov.w	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f04f 0200 	mov.w	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]

	pid->integral[0] = 0.0; pid->integral[1] = 0.0; pid->integral[2] = 0.0;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	65da      	str	r2, [r3, #92]	; 0x5c
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f04f 0200 	mov.w	r2, #0
 80011c4:	661a      	str	r2, [r3, #96]	; 0x60
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f04f 0200 	mov.w	r2, #0
 80011cc:	665a      	str	r2, [r3, #100]	; 0x64

	pid->prevError[0] = 0.0; pid->prevError[1] = 0.0; pid->prevError[2] = 0.0;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f04f 0200 	mov.w	r2, #0
 80011d4:	669a      	str	r2, [r3, #104]	; 0x68
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f04f 0200 	mov.w	r2, #0
 80011dc:	66da      	str	r2, [r3, #108]	; 0x6c
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	671a      	str	r2, [r3, #112]	; 0x70

	pid->prevRot[0] = 0.0; pid->prevRot[1] = 0.0; pid->prevRot[2] = 0.0;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f04f 0200 	mov.w	r2, #0
 80011f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	/* SET CLAMPS */
	pid->intLimMax = PID_MAXINT;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800120a:	631a      	str	r2, [r3, #48]	; 0x30
	pid->intLimMin = PID_MININT;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4a07      	ldr	r2, [pc, #28]	; (800122c <PID3_Init+0xe4>)
 8001210:	635a      	str	r2, [r3, #52]	; 0x34
	pid->outLimMax = PID_MAXOUT;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	4a06      	ldr	r2, [pc, #24]	; (8001230 <PID3_Init+0xe8>)
 8001216:	639a      	str	r2, [r3, #56]	; 0x38
	pid->outLimMin = PID_MINOUT;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4a06      	ldr	r2, [pc, #24]	; (8001234 <PID3_Init+0xec>)
 800121c:	63da      	str	r2, [r3, #60]	; 0x3c

	return PID_OK;
 800121e:	2300      	movs	r3, #0
}
 8001220:	4618      	mov	r0, r3
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	bf800000 	.word	0xbf800000
 8001230:	41200000 	.word	0x41200000
 8001234:	c1200000 	.word	0xc1200000

08001238 <PID3_Clear>:

/* CLEAR STATE FUNCTION */
PID_StatusTypeDef PID3_Clear(PID3 *pid)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	/* CLEAR IMPORTANT VARIABLES */
	pid->out[0] = 0.0; pid->out[1] = 0.0; pid->out[2] = 0.0;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f04f 0200 	mov.w	r2, #0
 8001256:	609a      	str	r2, [r3, #8]

	pid->integral[0] = 0.0; pid->integral[1] = 0.0; pid->integral[2] = 0.0;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	661a      	str	r2, [r3, #96]	; 0x60
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f04f 0200 	mov.w	r2, #0
 800126e:	665a      	str	r2, [r3, #100]	; 0x64

	pid->prevError[0] = 0.0; pid->prevError[1] = 0.0; pid->prevError[2] = 0.0;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	669a      	str	r2, [r3, #104]	; 0x68
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	66da      	str	r2, [r3, #108]	; 0x6c
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	671a      	str	r2, [r3, #112]	; 0x70

	pid->prevRot[0] = 0.0; pid->prevRot[1] = 0.0; pid->prevRot[2] = 0.0;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f04f 0200 	mov.w	r2, #0
 800128e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	return PID_OK;
 80012a6:	2300      	movs	r3, #0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <PID3_Set_Tau>:

/* SET FILTER TIME CONSTANT */
PID_StatusTypeDef PID3_Set_Tau(PID3 *pid, float t)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	ed87 0a00 	vstr	s0, [r7]
	if (t < 0.0) { return PID_ERROR; }
 80012c0:	edd7 7a00 	vldr	s15, [r7]
 80012c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012cc:	d501      	bpl.n	80012d2 <PID3_Set_Tau+0x1e>
 80012ce:	2301      	movs	r3, #1
 80012d0:	e003      	b.n	80012da <PID3_Set_Tau+0x26>

	pid->tau = t;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	641a      	str	r2, [r3, #64]	; 0x40

	return PID_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <PID3_Set_Integrator_Limit>:

/* SET INTEGRATOR LIMIT */
PID_StatusTypeDef PID3_Set_Integrator_Limit(PID3 *pid, float min, float max)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b085      	sub	sp, #20
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	60f8      	str	r0, [r7, #12]
 80012ee:	ed87 0a02 	vstr	s0, [r7, #8]
 80012f2:	edc7 0a01 	vstr	s1, [r7, #4]
	if ((min >= 0.0) | (max <= 0.0)) { return PID_ERROR; }
 80012f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80012fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	bfac      	ite	ge
 8001304:	2301      	movge	r3, #1
 8001306:	2300      	movlt	r3, #0
 8001308:	b2da      	uxtb	r2, r3
 800130a:	edd7 7a01 	vldr	s15, [r7, #4]
 800130e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001316:	bf94      	ite	ls
 8001318:	2301      	movls	r3, #1
 800131a:	2300      	movhi	r3, #0
 800131c:	b2db      	uxtb	r3, r3
 800131e:	4313      	orrs	r3, r2
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <PID3_Set_Integrator_Limit+0x44>
 8001326:	2301      	movs	r3, #1
 8001328:	e006      	b.n	8001338 <PID3_Set_Integrator_Limit+0x52>

	pid->intLimMax = max;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	631a      	str	r2, [r3, #48]	; 0x30
	pid->intLimMin = min;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	635a      	str	r2, [r3, #52]	; 0x34

	return PID_OK;
 8001336:	2300      	movs	r3, #0
}
 8001338:	4618      	mov	r0, r3
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <PID3_Set_Output_Limit>:


/* SET OUTPUT LIMIT */
PID_StatusTypeDef PID3_Set_Output_Limit(PID3 *pid, float min, float max)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001350:	edc7 0a01 	vstr	s1, [r7, #4]
	if ((min >= 0.0) | (max <= 0.0)) { return PID_ERROR; }
 8001354:	edd7 7a02 	vldr	s15, [r7, #8]
 8001358:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800135c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001360:	bfac      	ite	ge
 8001362:	2301      	movge	r3, #1
 8001364:	2300      	movlt	r3, #0
 8001366:	b2da      	uxtb	r2, r3
 8001368:	edd7 7a01 	vldr	s15, [r7, #4]
 800136c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001374:	bf94      	ite	ls
 8001376:	2301      	movls	r3, #1
 8001378:	2300      	movhi	r3, #0
 800137a:	b2db      	uxtb	r3, r3
 800137c:	4313      	orrs	r3, r2
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <PID3_Set_Output_Limit+0x44>
 8001384:	2301      	movs	r3, #1
 8001386:	e006      	b.n	8001396 <PID3_Set_Output_Limit+0x52>

	pid->outLimMax = max;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	639a      	str	r2, [r3, #56]	; 0x38
	pid->outLimMin = min;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	68ba      	ldr	r2, [r7, #8]
 8001392:	63da      	str	r2, [r3, #60]	; 0x3c

	return PID_OK;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
	...

080013a4 <PID3_Update>:

/* ADVANCE TIMESTEP FUNCTION */
PID_StatusTypeDef PID3_Update(PID3 *pid, float *set, float *rot, float T)
{
 80013a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013a8:	b086      	sub	sp, #24
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	60f8      	str	r0, [r7, #12]
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
 80013b2:	ed87 0a00 	vstr	s0, [r7]
	// FOR EACH AXIS
	for (int i = 0; i < 3; i++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	e1f1      	b.n	80017a0 <PID3_Update+0x3fc>
	{
		// CALCULATE ERROR
		pid->error[i] = set[i] - rot[i];
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	68ba      	ldr	r2, [r7, #8]
 80013c2:	4413      	add	r3, r2
 80013c4:	ed93 7a00 	vldr	s14, [r3]
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	4413      	add	r3, r2
 80013d0:	edd3 7a00 	vldr	s15, [r3]
 80013d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d8:	68fa      	ldr	r2, [r7, #12]
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	3310      	adds	r3, #16
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	3304      	adds	r3, #4
 80013e4:	edc3 7a00 	vstr	s15, [r3]

		// CALCULATE PROPORTIONAL TERM
		pid->proportional[i] = pid->Kp[i] * pid->error[i];
 80013e8:	68fa      	ldr	r2, [r7, #12]
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	3302      	adds	r3, #2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	3304      	adds	r3, #4
 80013f4:	ed93 7a00 	vldr	s14, [r3]
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	3310      	adds	r3, #16
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	3304      	adds	r3, #4
 8001404:	edd3 7a00 	vldr	s15, [r3]
 8001408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800140c:	68fa      	ldr	r2, [r7, #12]
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	3314      	adds	r3, #20
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	edc3 7a00 	vstr	s15, [r3]

		// CALCULATE INTEGRAL TERM AND CLAMP
		pid->integral[i] += 0.5*(pid->Ki[i])*T*(pid->error[i] + pid->prevError[i]);
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	3316      	adds	r3, #22
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	3304      	adds	r3, #4
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f88d 	bl	8000548 <__aeabi_f2d>
 800142e:	4680      	mov	r8, r0
 8001430:	4689      	mov	r9, r1
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	3306      	adds	r3, #6
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f882 	bl	8000548 <__aeabi_f2d>
 8001444:	f04f 0200 	mov.w	r2, #0
 8001448:	4b4c      	ldr	r3, [pc, #304]	; (800157c <PID3_Update+0x1d8>)
 800144a:	f7ff f8d5 	bl	80005f8 <__aeabi_dmul>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4692      	mov	sl, r2
 8001454:	469b      	mov	fp, r3
 8001456:	6838      	ldr	r0, [r7, #0]
 8001458:	f7ff f876 	bl	8000548 <__aeabi_f2d>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4650      	mov	r0, sl
 8001462:	4659      	mov	r1, fp
 8001464:	f7ff f8c8 	bl	80005f8 <__aeabi_dmul>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4692      	mov	sl, r2
 800146e:	469b      	mov	fp, r3
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	3310      	adds	r3, #16
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	3304      	adds	r3, #4
 800147c:	ed93 7a00 	vldr	s14, [r3]
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	331a      	adds	r3, #26
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	edd3 7a00 	vldr	s15, [r3]
 800148e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001492:	ee17 0a90 	vmov	r0, s15
 8001496:	f7ff f857 	bl	8000548 <__aeabi_f2d>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4650      	mov	r0, sl
 80014a0:	4659      	mov	r1, fp
 80014a2:	f7ff f8a9 	bl	80005f8 <__aeabi_dmul>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4640      	mov	r0, r8
 80014ac:	4649      	mov	r1, r9
 80014ae:	f7fe feed 	bl	800028c <__adddf3>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4610      	mov	r0, r2
 80014b8:	4619      	mov	r1, r3
 80014ba:	f7ff fb75 	bl	8000ba8 <__aeabi_d2f>
 80014be:	4601      	mov	r1, r0
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	3316      	adds	r3, #22
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	3304      	adds	r3, #4
 80014cc:	6019      	str	r1, [r3, #0]
		pid->integral[i] = fmax(pid->integral[i], pid->intLimMin);
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	3316      	adds	r3, #22
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	3304      	adds	r3, #4
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff f833 	bl	8000548 <__aeabi_f2d>
 80014e2:	4680      	mov	r8, r0
 80014e4:	4689      	mov	r9, r1
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff f82c 	bl	8000548 <__aeabi_f2d>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	ec43 2b11 	vmov	d1, r2, r3
 80014f8:	ec49 8b10 	vmov	d0, r8, r9
 80014fc:	f00b ff48 	bl	800d390 <fmax>
 8001500:	ec53 2b10 	vmov	r2, r3, d0
 8001504:	4610      	mov	r0, r2
 8001506:	4619      	mov	r1, r3
 8001508:	f7ff fb4e 	bl	8000ba8 <__aeabi_d2f>
 800150c:	4601      	mov	r1, r0
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	3316      	adds	r3, #22
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	3304      	adds	r3, #4
 800151a:	6019      	str	r1, [r3, #0]
	    pid->integral[i] = fmin(pid->integral[i], pid->intLimMax);
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	3316      	adds	r3, #22
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	3304      	adds	r3, #4
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff f80c 	bl	8000548 <__aeabi_f2d>
 8001530:	4680      	mov	r8, r0
 8001532:	4689      	mov	r9, r1
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f805 	bl	8000548 <__aeabi_f2d>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	ec43 2b11 	vmov	d1, r2, r3
 8001546:	ec49 8b10 	vmov	d0, r8, r9
 800154a:	f00b ff48 	bl	800d3de <fmin>
 800154e:	ec53 2b10 	vmov	r2, r3, d0
 8001552:	4610      	mov	r0, r2
 8001554:	4619      	mov	r1, r3
 8001556:	f7ff fb27 	bl	8000ba8 <__aeabi_d2f>
 800155a:	4601      	mov	r1, r0
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	3316      	adds	r3, #22
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	3304      	adds	r3, #4
 8001568:	6019      	str	r1, [r3, #0]

		// CALCULATE DERIVATIVE TERM (ON MEASUREMENT)
		if (T == 0) { return PID_ERROR; }
 800156a:	edd7 7a00 	vldr	s15, [r7]
 800156e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001576:	d103      	bne.n	8001580 <PID3_Update+0x1dc>
 8001578:	2301      	movs	r3, #1
 800157a:	e116      	b.n	80017aa <PID3_Update+0x406>
 800157c:	3fe00000 	.word	0x3fe00000
		pid->derivative[i] = -(2.0*(pid->Kd[i])*(rot[i] - pid->prevRot[i]) + (2.0*pid->tau - T)*pid->derivative[i])/(2.0*pid->tau + T);
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	3308      	adds	r3, #8
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	3304      	adds	r3, #4
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe ffda 	bl	8000548 <__aeabi_f2d>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	f7fe fe78 	bl	800028c <__adddf3>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4690      	mov	r8, r2
 80015a2:	4699      	mov	r9, r3
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	4413      	add	r3, r2
 80015ac:	ed93 7a00 	vldr	s14, [r3]
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	3320      	adds	r3, #32
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	edd3 7a00 	vldr	s15, [r3]
 80015be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015c2:	ee17 0a90 	vmov	r0, s15
 80015c6:	f7fe ffbf 	bl	8000548 <__aeabi_f2d>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4640      	mov	r0, r8
 80015d0:	4649      	mov	r1, r9
 80015d2:	f7ff f811 	bl	80005f8 <__aeabi_dmul>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4690      	mov	r8, r2
 80015dc:	4699      	mov	r9, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe ffb0 	bl	8000548 <__aeabi_f2d>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	f7fe fe4e 	bl	800028c <__adddf3>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4692      	mov	sl, r2
 80015f6:	469b      	mov	fp, r3
 80015f8:	6838      	ldr	r0, [r7, #0]
 80015fa:	f7fe ffa5 	bl	8000548 <__aeabi_f2d>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4650      	mov	r0, sl
 8001604:	4659      	mov	r1, fp
 8001606:	f7fe fe3f 	bl	8000288 <__aeabi_dsub>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4692      	mov	sl, r2
 8001610:	469b      	mov	fp, r3
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	331c      	adds	r3, #28
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	3304      	adds	r3, #4
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f7fe ff91 	bl	8000548 <__aeabi_f2d>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	4650      	mov	r0, sl
 800162c:	4659      	mov	r1, fp
 800162e:	f7fe ffe3 	bl	80005f8 <__aeabi_dmul>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4640      	mov	r0, r8
 8001638:	4649      	mov	r1, r9
 800163a:	f7fe fe27 	bl	800028c <__adddf3>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4614      	mov	r4, r2
 8001644:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164c:	4618      	mov	r0, r3
 800164e:	f7fe ff7b 	bl	8000548 <__aeabi_f2d>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	f7fe fe19 	bl	800028c <__adddf3>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4690      	mov	r8, r2
 8001660:	4699      	mov	r9, r3
 8001662:	6838      	ldr	r0, [r7, #0]
 8001664:	f7fe ff70 	bl	8000548 <__aeabi_f2d>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4640      	mov	r0, r8
 800166e:	4649      	mov	r1, r9
 8001670:	f7fe fe0c 	bl	800028c <__adddf3>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4620      	mov	r0, r4
 800167a:	4629      	mov	r1, r5
 800167c:	f7ff f8e6 	bl	800084c <__aeabi_ddiv>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4610      	mov	r0, r2
 8001686:	4619      	mov	r1, r3
 8001688:	f7ff fa8e 	bl	8000ba8 <__aeabi_d2f>
 800168c:	4601      	mov	r1, r0
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	331c      	adds	r3, #28
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	3304      	adds	r3, #4
 800169a:	6019      	str	r1, [r3, #0]

		// CALCULATE OUTPUT AND CLAMP
		pid->out[i] = pid->proportional[i] + pid->integral[i] + pid->derivative[i];
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	3314      	adds	r3, #20
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	ed93 7a00 	vldr	s14, [r3]
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	3316      	adds	r3, #22
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	3304      	adds	r3, #4
 80016b6:	edd3 7a00 	vldr	s15, [r3]
 80016ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	331c      	adds	r3, #28
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	3304      	adds	r3, #4
 80016ca:	edd3 7a00 	vldr	s15, [r3]
 80016ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	edc3 7a00 	vstr	s15, [r3]
		pid->out[i] = fmax(pid->out[i], pid->outLimMin);
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe ff2d 	bl	8000548 <__aeabi_f2d>
 80016ee:	4680      	mov	r8, r0
 80016f0:	4689      	mov	r9, r1
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7fe ff26 	bl	8000548 <__aeabi_f2d>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	ec43 2b11 	vmov	d1, r2, r3
 8001704:	ec49 8b10 	vmov	d0, r8, r9
 8001708:	f00b fe42 	bl	800d390 <fmax>
 800170c:	ec53 2b10 	vmov	r2, r3, d0
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	f7ff fa48 	bl	8000ba8 <__aeabi_d2f>
 8001718:	4601      	mov	r1, r0
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	6019      	str	r1, [r3, #0]
		pid->out[i] = fmin(pid->out[i], pid->outLimMax);
 8001724:	68fa      	ldr	r2, [r7, #12]
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe ff0a 	bl	8000548 <__aeabi_f2d>
 8001734:	4680      	mov	r8, r0
 8001736:	4689      	mov	r9, r1
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800173c:	4618      	mov	r0, r3
 800173e:	f7fe ff03 	bl	8000548 <__aeabi_f2d>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	ec43 2b11 	vmov	d1, r2, r3
 800174a:	ec49 8b10 	vmov	d0, r8, r9
 800174e:	f00b fe46 	bl	800d3de <fmin>
 8001752:	ec53 2b10 	vmov	r2, r3, d0
 8001756:	4610      	mov	r0, r2
 8001758:	4619      	mov	r1, r3
 800175a:	f7ff fa25 	bl	8000ba8 <__aeabi_d2f>
 800175e:	4601      	mov	r1, r0
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	6019      	str	r1, [r3, #0]
		// OLD CLAMPING METHOD
		//pid->out[i] = (pid->out[i] > pid->outLimMax) ? pid->outLimMax : pid->out[i];
		//pid->out[i] = (pid->out[i] < pid->outLimMin) ? pid->outLimMin : pid->out[i];

		// UPDATE TEMPVARS
		pid->prevError[i] = pid->error[i];
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	3310      	adds	r3, #16
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	3304      	adds	r3, #4
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	68f9      	ldr	r1, [r7, #12]
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	331a      	adds	r3, #26
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	440b      	add	r3, r1
 8001782:	601a      	str	r2, [r3, #0]
		pid->prevRot[i]   = rot[i];
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	4413      	add	r3, r2
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	68f9      	ldr	r1, [r7, #12]
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	3320      	adds	r3, #32
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	440b      	add	r3, r1
 8001798:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 3; i++)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	3301      	adds	r3, #1
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	f77f ae0a 	ble.w	80013bc <PID3_Update+0x18>
	}

	return PID_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080017b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017b8:	f001 fe72 	bl	80034a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017bc:	f000 f84e 	bl	800185c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017c0:	f000 fa9c 	bl	8001cfc <MX_GPIO_Init>
  MX_I2C1_Init();
 80017c4:	f000 f8b4 	bl	8001930 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80017c8:	f008 ff54 	bl	800a674 <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 80017cc:	f000 fa60 	bl	8001c90 <MX_TIM7_Init>
  MX_TIM6_Init();
 80017d0:	f000 fa28 	bl	8001c24 <MX_TIM6_Init>
  MX_TIM2_Init();
 80017d4:	f000 f8da 	bl	800198c <MX_TIM2_Init>
  MX_TIM3_Init();
 80017d8:	f000 f952 	bl	8001a80 <MX_TIM3_Init>
  MX_TIM4_Init();
 80017dc:	f000 f9c4 	bl	8001b68 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim7);	// START 50Hz SERIAL UPDATE TIMER
 80017e0:	4817      	ldr	r0, [pc, #92]	; (8001840 <main+0x8c>)
 80017e2:	f004 ffa0 	bl	8006726 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim6);    	// START TIMEKEEPING TIMER
 80017e6:	4817      	ldr	r0, [pc, #92]	; (8001844 <main+0x90>)
 80017e8:	f004 ff79 	bl	80066de <HAL_TIM_Base_Start>

  BMI088_Wrapper_Init();			// INITIALIZE GYROSCOPE
 80017ec:	f000 fd68 	bl	80022c0 <BMI088_Wrapper_Init>
  OS125_Wrapper_Init();				// INITIALIZE ONESHOT125 OUTPUT DRIVER
 80017f0:	f000 fd7c 	bl	80022ec <OS125_Wrapper_Init>
  PID3_Wrapper_Init();				// INITALIZE PID CONTROLLER
 80017f4:	f000 fda0 	bl	8002338 <PID3_Wrapper_Init>
  QUAD_Wrapper_Init();				// INITIALIZE QUAD STRUCTURE
 80017f8:	f000 fd40 	bl	800227c <QUAD_Wrapper_Init>

  PWM_INPUT_START();             	// START RX INPUT CAPTURE TIMERS
 80017fc:	f000 fde0 	bl	80023c0 <PWM_INPUT_START>
  PWM_OUTPUT_START();				// START PWM OUTPUT TIMERS
 8001800:	f000 fdfe 	bl	8002400 <PWM_OUTPUT_START>

  // TURN ON STATUS LED
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001804:	2201      	movs	r2, #1
 8001806:	2140      	movs	r1, #64	; 0x40
 8001808:	480f      	ldr	r0, [pc, #60]	; (8001848 <main+0x94>)
 800180a:	f002 f989 	bl	8003b20 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // CHECK IF DATA_READY FLAG IS SET
	  if (DATA_STATUS == DATA_READY)
 800180e:	4b0f      	ldr	r3, [pc, #60]	; (800184c <main+0x98>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b01      	cmp	r3, #1
 8001816:	d106      	bne.n	8001826 <main+0x72>
	  {
		  QUAD_UPDATE(&quad, IC_Elapsed);
 8001818:	490d      	ldr	r1, [pc, #52]	; (8001850 <main+0x9c>)
 800181a:	480e      	ldr	r0, [pc, #56]	; (8001854 <main+0xa0>)
 800181c:	f001 f994 	bl	8002b48 <QUAD_UPDATE>

		  // RESET DATA_READY FLAG
		  DATA_STATUS = DATA_RESET;
 8001820:	4b0a      	ldr	r3, [pc, #40]	; (800184c <main+0x98>)
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]
	  }

	  // CHECK IF UPDATE_READY FLAG IS SET
	  if (UPDATE_STATUS == UPDATE_READY)
 8001826:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <main+0xa4>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b01      	cmp	r3, #1
 800182e:	d1ee      	bne.n	800180e <main+0x5a>
	  {
		  QUAD_SEND_ORIENTATION(&quad);
 8001830:	4808      	ldr	r0, [pc, #32]	; (8001854 <main+0xa0>)
 8001832:	f001 fb41 	bl	8002eb8 <QUAD_SEND_ORIENTATION>

		  // RESET UPDATE_READY FLAG
		  UPDATE_STATUS = UPDATE_RESET;
 8001836:	4b08      	ldr	r3, [pc, #32]	; (8001858 <main+0xa4>)
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
	  if (DATA_STATUS == DATA_READY)
 800183c:	e7e7      	b.n	800180e <main+0x5a>
 800183e:	bf00      	nop
 8001840:	20000674 	.word	0x20000674
 8001844:	20000558 	.word	0x20000558
 8001848:	40020800 	.word	0x40020800
 800184c:	200003a0 	.word	0x200003a0
 8001850:	20000394 	.word	0x20000394
 8001854:	20000598 	.word	0x20000598
 8001858:	200003a1 	.word	0x200003a1

0800185c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b094      	sub	sp, #80	; 0x50
 8001860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001862:	f107 0320 	add.w	r3, r7, #32
 8001866:	2230      	movs	r2, #48	; 0x30
 8001868:	2100      	movs	r1, #0
 800186a:	4618      	mov	r0, r3
 800186c:	f009 fc50 	bl	800b110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001870:	f107 030c 	add.w	r3, r7, #12
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001880:	2300      	movs	r3, #0
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	4b28      	ldr	r3, [pc, #160]	; (8001928 <SystemClock_Config+0xcc>)
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	4a27      	ldr	r2, [pc, #156]	; (8001928 <SystemClock_Config+0xcc>)
 800188a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800188e:	6413      	str	r3, [r2, #64]	; 0x40
 8001890:	4b25      	ldr	r3, [pc, #148]	; (8001928 <SystemClock_Config+0xcc>)
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800189c:	2300      	movs	r3, #0
 800189e:	607b      	str	r3, [r7, #4]
 80018a0:	4b22      	ldr	r3, [pc, #136]	; (800192c <SystemClock_Config+0xd0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a21      	ldr	r2, [pc, #132]	; (800192c <SystemClock_Config+0xd0>)
 80018a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018aa:	6013      	str	r3, [r2, #0]
 80018ac:	4b1f      	ldr	r3, [pc, #124]	; (800192c <SystemClock_Config+0xd0>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018b8:	2301      	movs	r3, #1
 80018ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018c2:	2302      	movs	r3, #2
 80018c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80018cc:	2310      	movs	r3, #16
 80018ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 288;
 80018d0:	f44f 7390 	mov.w	r3, #288	; 0x120
 80018d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018d6:	2302      	movs	r3, #2
 80018d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80018da:	2306      	movs	r3, #6
 80018dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018de:	f107 0320 	add.w	r3, r7, #32
 80018e2:	4618      	mov	r0, r3
 80018e4:	f004 fa84 	bl	8005df0 <HAL_RCC_OscConfig>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80018ee:	f000 fd9d 	bl	800242c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018f2:	230f      	movs	r3, #15
 80018f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018f6:	2302      	movs	r3, #2
 80018f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001902:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001904:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001908:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800190a:	f107 030c 	add.w	r3, r7, #12
 800190e:	2104      	movs	r1, #4
 8001910:	4618      	mov	r0, r3
 8001912:	f004 fcdd 	bl	80062d0 <HAL_RCC_ClockConfig>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800191c:	f000 fd86 	bl	800242c <Error_Handler>
  }
}
 8001920:	bf00      	nop
 8001922:	3750      	adds	r7, #80	; 0x50
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40023800 	.word	0x40023800
 800192c:	40007000 	.word	0x40007000

08001930 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001934:	4b12      	ldr	r3, [pc, #72]	; (8001980 <MX_I2C1_Init+0x50>)
 8001936:	4a13      	ldr	r2, [pc, #76]	; (8001984 <MX_I2C1_Init+0x54>)
 8001938:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800193a:	4b11      	ldr	r3, [pc, #68]	; (8001980 <MX_I2C1_Init+0x50>)
 800193c:	4a12      	ldr	r2, [pc, #72]	; (8001988 <MX_I2C1_Init+0x58>)
 800193e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001940:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <MX_I2C1_Init+0x50>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001946:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <MX_I2C1_Init+0x50>)
 8001948:	2200      	movs	r2, #0
 800194a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <MX_I2C1_Init+0x50>)
 800194e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001952:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001954:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <MX_I2C1_Init+0x50>)
 8001956:	2200      	movs	r2, #0
 8001958:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <MX_I2C1_Init+0x50>)
 800195c:	2200      	movs	r2, #0
 800195e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001960:	4b07      	ldr	r3, [pc, #28]	; (8001980 <MX_I2C1_Init+0x50>)
 8001962:	2200      	movs	r2, #0
 8001964:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001966:	4b06      	ldr	r3, [pc, #24]	; (8001980 <MX_I2C1_Init+0x50>)
 8001968:	2200      	movs	r2, #0
 800196a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800196c:	4804      	ldr	r0, [pc, #16]	; (8001980 <MX_I2C1_Init+0x50>)
 800196e:	f002 f909 	bl	8003b84 <HAL_I2C_Init>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001978:	f000 fd58 	bl	800242c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000438 	.word	0x20000438
 8001984:	40005400 	.word	0x40005400
 8001988:	00061a80 	.word	0x00061a80

0800198c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08a      	sub	sp, #40	; 0x28
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001992:	f107 0320 	add.w	r3, r7, #32
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]
 80019a8:	611a      	str	r2, [r3, #16]
 80019aa:	615a      	str	r2, [r3, #20]
 80019ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019ae:	4b33      	ldr	r3, [pc, #204]	; (8001a7c <MX_TIM2_Init+0xf0>)
 80019b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1 - 1;
 80019b6:	4b31      	ldr	r3, [pc, #196]	; (8001a7c <MX_TIM2_Init+0xf0>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019bc:	4b2f      	ldr	r3, [pc, #188]	; (8001a7c <MX_TIM2_Init+0xf0>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 36000 - 1;
 80019c2:	4b2e      	ldr	r3, [pc, #184]	; (8001a7c <MX_TIM2_Init+0xf0>)
 80019c4:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80019c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ca:	4b2c      	ldr	r3, [pc, #176]	; (8001a7c <MX_TIM2_Init+0xf0>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d0:	4b2a      	ldr	r3, [pc, #168]	; (8001a7c <MX_TIM2_Init+0xf0>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019d6:	4829      	ldr	r0, [pc, #164]	; (8001a7c <MX_TIM2_Init+0xf0>)
 80019d8:	f004 fec9 	bl	800676e <HAL_TIM_PWM_Init>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80019e2:	f000 fd23 	bl	800242c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019e6:	2300      	movs	r3, #0
 80019e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019ee:	f107 0320 	add.w	r3, r7, #32
 80019f2:	4619      	mov	r1, r3
 80019f4:	4821      	ldr	r0, [pc, #132]	; (8001a7c <MX_TIM2_Init+0xf0>)
 80019f6:	f005 fe7b 	bl	80076f0 <HAL_TIMEx_MasterConfigSynchronization>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001a00:	f000 fd14 	bl	800242c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a04:	2360      	movs	r3, #96	; 0x60
 8001a06:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	2200      	movs	r2, #0
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4818      	ldr	r0, [pc, #96]	; (8001a7c <MX_TIM2_Init+0xf0>)
 8001a1c:	f005 f9a0 	bl	8006d60 <HAL_TIM_PWM_ConfigChannel>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001a26:	f000 fd01 	bl	800242c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	2204      	movs	r2, #4
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4812      	ldr	r0, [pc, #72]	; (8001a7c <MX_TIM2_Init+0xf0>)
 8001a32:	f005 f995 	bl	8006d60 <HAL_TIM_PWM_ConfigChannel>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001a3c:	f000 fcf6 	bl	800242c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a40:	1d3b      	adds	r3, r7, #4
 8001a42:	2208      	movs	r2, #8
 8001a44:	4619      	mov	r1, r3
 8001a46:	480d      	ldr	r0, [pc, #52]	; (8001a7c <MX_TIM2_Init+0xf0>)
 8001a48:	f005 f98a 	bl	8006d60 <HAL_TIM_PWM_ConfigChannel>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8001a52:	f000 fceb 	bl	800242c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a56:	1d3b      	adds	r3, r7, #4
 8001a58:	220c      	movs	r2, #12
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4807      	ldr	r0, [pc, #28]	; (8001a7c <MX_TIM2_Init+0xf0>)
 8001a5e:	f005 f97f 	bl	8006d60 <HAL_TIM_PWM_ConfigChannel>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8001a68:	f000 fce0 	bl	800242c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a6c:	4803      	ldr	r0, [pc, #12]	; (8001a7c <MX_TIM2_Init+0xf0>)
 8001a6e:	f001 fc0f 	bl	8003290 <HAL_TIM_MspPostInit>

}
 8001a72:	bf00      	nop
 8001a74:	3728      	adds	r7, #40	; 0x28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000634 	.word	0x20000634

08001a80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a86:	f107 0310 	add.w	r3, r7, #16
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a90:	463b      	mov	r3, r7
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a9c:	4b30      	ldr	r3, [pc, #192]	; (8001b60 <MX_TIM3_Init+0xe0>)
 8001a9e:	4a31      	ldr	r2, [pc, #196]	; (8001b64 <MX_TIM3_Init+0xe4>)
 8001aa0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72 - 1;
 8001aa2:	4b2f      	ldr	r3, [pc, #188]	; (8001b60 <MX_TIM3_Init+0xe0>)
 8001aa4:	2247      	movs	r2, #71	; 0x47
 8001aa6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa8:	4b2d      	ldr	r3, [pc, #180]	; (8001b60 <MX_TIM3_Init+0xe0>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65536 - 1;
 8001aae:	4b2c      	ldr	r3, [pc, #176]	; (8001b60 <MX_TIM3_Init+0xe0>)
 8001ab0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ab4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab6:	4b2a      	ldr	r3, [pc, #168]	; (8001b60 <MX_TIM3_Init+0xe0>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001abc:	4b28      	ldr	r3, [pc, #160]	; (8001b60 <MX_TIM3_Init+0xe0>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001ac2:	4827      	ldr	r0, [pc, #156]	; (8001b60 <MX_TIM3_Init+0xe0>)
 8001ac4:	f004 ff14 	bl	80068f0 <HAL_TIM_IC_Init>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001ace:	f000 fcad 	bl	800242c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ada:	f107 0310 	add.w	r3, r7, #16
 8001ade:	4619      	mov	r1, r3
 8001ae0:	481f      	ldr	r0, [pc, #124]	; (8001b60 <MX_TIM3_Init+0xe0>)
 8001ae2:	f005 fe05 	bl	80076f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001aec:	f000 fc9e 	bl	800242c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001af0:	2300      	movs	r3, #0
 8001af2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001af4:	2301      	movs	r3, #1
 8001af6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b00:	463b      	mov	r3, r7
 8001b02:	2200      	movs	r2, #0
 8001b04:	4619      	mov	r1, r3
 8001b06:	4816      	ldr	r0, [pc, #88]	; (8001b60 <MX_TIM3_Init+0xe0>)
 8001b08:	f005 f88e 	bl	8006c28 <HAL_TIM_IC_ConfigChannel>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001b12:	f000 fc8b 	bl	800242c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001b16:	463b      	mov	r3, r7
 8001b18:	2204      	movs	r2, #4
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4810      	ldr	r0, [pc, #64]	; (8001b60 <MX_TIM3_Init+0xe0>)
 8001b1e:	f005 f883 	bl	8006c28 <HAL_TIM_IC_ConfigChannel>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8001b28:	f000 fc80 	bl	800242c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001b2c:	463b      	mov	r3, r7
 8001b2e:	2208      	movs	r2, #8
 8001b30:	4619      	mov	r1, r3
 8001b32:	480b      	ldr	r0, [pc, #44]	; (8001b60 <MX_TIM3_Init+0xe0>)
 8001b34:	f005 f878 	bl	8006c28 <HAL_TIM_IC_ConfigChannel>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 8001b3e:	f000 fc75 	bl	800242c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001b42:	463b      	mov	r3, r7
 8001b44:	220c      	movs	r2, #12
 8001b46:	4619      	mov	r1, r3
 8001b48:	4805      	ldr	r0, [pc, #20]	; (8001b60 <MX_TIM3_Init+0xe0>)
 8001b4a:	f005 f86d 	bl	8006c28 <HAL_TIM_IC_ConfigChannel>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001b54:	f000 fc6a 	bl	800242c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b58:	bf00      	nop
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20000518 	.word	0x20000518
 8001b64:	40000400 	.word	0x40000400

08001b68 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b6e:	f107 0310 	add.w	r3, r7, #16
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b78:	463b      	mov	r3, r7
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b84:	4b25      	ldr	r3, [pc, #148]	; (8001c1c <MX_TIM4_Init+0xb4>)
 8001b86:	4a26      	ldr	r2, [pc, #152]	; (8001c20 <MX_TIM4_Init+0xb8>)
 8001b88:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72 - 1;
 8001b8a:	4b24      	ldr	r3, [pc, #144]	; (8001c1c <MX_TIM4_Init+0xb4>)
 8001b8c:	2247      	movs	r2, #71	; 0x47
 8001b8e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b90:	4b22      	ldr	r3, [pc, #136]	; (8001c1c <MX_TIM4_Init+0xb4>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65536 - 1;
 8001b96:	4b21      	ldr	r3, [pc, #132]	; (8001c1c <MX_TIM4_Init+0xb4>)
 8001b98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b9c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b9e:	4b1f      	ldr	r3, [pc, #124]	; (8001c1c <MX_TIM4_Init+0xb4>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba4:	4b1d      	ldr	r3, [pc, #116]	; (8001c1c <MX_TIM4_Init+0xb4>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001baa:	481c      	ldr	r0, [pc, #112]	; (8001c1c <MX_TIM4_Init+0xb4>)
 8001bac:	f004 fea0 	bl	80068f0 <HAL_TIM_IC_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001bb6:	f000 fc39 	bl	800242c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bc2:	f107 0310 	add.w	r3, r7, #16
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4814      	ldr	r0, [pc, #80]	; (8001c1c <MX_TIM4_Init+0xb4>)
 8001bca:	f005 fd91 	bl	80076f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001bd4:	f000 fc2a 	bl	800242c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001be8:	463b      	mov	r3, r7
 8001bea:	2200      	movs	r2, #0
 8001bec:	4619      	mov	r1, r3
 8001bee:	480b      	ldr	r0, [pc, #44]	; (8001c1c <MX_TIM4_Init+0xb4>)
 8001bf0:	f005 f81a 	bl	8006c28 <HAL_TIM_IC_ConfigChannel>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001bfa:	f000 fc17 	bl	800242c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001bfe:	463b      	mov	r3, r7
 8001c00:	2204      	movs	r2, #4
 8001c02:	4619      	mov	r1, r3
 8001c04:	4805      	ldr	r0, [pc, #20]	; (8001c1c <MX_TIM4_Init+0xb4>)
 8001c06:	f005 f80f 	bl	8006c28 <HAL_TIM_IC_ConfigChannel>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8001c10:	f000 fc0c 	bl	800242c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c14:	bf00      	nop
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	200003f8 	.word	0x200003f8
 8001c20:	40000800 	.word	0x40000800

08001c24 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c2a:	463b      	mov	r3, r7
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c32:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <MX_TIM6_Init+0x64>)
 8001c34:	4a15      	ldr	r2, [pc, #84]	; (8001c8c <MX_TIM6_Init+0x68>)
 8001c36:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72 - 1;
 8001c38:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <MX_TIM6_Init+0x64>)
 8001c3a:	2247      	movs	r2, #71	; 0x47
 8001c3c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3e:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <MX_TIM6_Init+0x64>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536 - 1;
 8001c44:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <MX_TIM6_Init+0x64>)
 8001c46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c4a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c4c:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <MX_TIM6_Init+0x64>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c52:	480d      	ldr	r0, [pc, #52]	; (8001c88 <MX_TIM6_Init+0x64>)
 8001c54:	f004 fd18 	bl	8006688 <HAL_TIM_Base_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001c5e:	f000 fbe5 	bl	800242c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c62:	2300      	movs	r3, #0
 8001c64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c6a:	463b      	mov	r3, r7
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4806      	ldr	r0, [pc, #24]	; (8001c88 <MX_TIM6_Init+0x64>)
 8001c70:	f005 fd3e 	bl	80076f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001c7a:	f000 fbd7 	bl	800242c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000558 	.word	0x20000558
 8001c8c:	40001000 	.word	0x40001000

08001c90 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c96:	463b      	mov	r3, r7
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <MX_TIM7_Init+0x64>)
 8001ca0:	4a15      	ldr	r2, [pc, #84]	; (8001cf8 <MX_TIM7_Init+0x68>)
 8001ca2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 72 - 1;
 8001ca4:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <MX_TIM7_Init+0x64>)
 8001ca6:	2247      	movs	r2, #71	; 0x47
 8001ca8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001caa:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <MX_TIM7_Init+0x64>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 20000 - 1;
 8001cb0:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <MX_TIM7_Init+0x64>)
 8001cb2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001cb6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb8:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <MX_TIM7_Init+0x64>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001cbe:	480d      	ldr	r0, [pc, #52]	; (8001cf4 <MX_TIM7_Init+0x64>)
 8001cc0:	f004 fce2 	bl	8006688 <HAL_TIM_Base_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001cca:	f000 fbaf 	bl	800242c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001cd6:	463b      	mov	r3, r7
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4806      	ldr	r0, [pc, #24]	; (8001cf4 <MX_TIM7_Init+0x64>)
 8001cdc:	f005 fd08 	bl	80076f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001ce6:	f000 fba1 	bl	800242c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000674 	.word	0x20000674
 8001cf8:	40001400 	.word	0x40001400

08001cfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08a      	sub	sp, #40	; 0x28
 8001d00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d02:	f107 0314 	add.w	r3, r7, #20
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	60da      	str	r2, [r3, #12]
 8001d10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	4b31      	ldr	r3, [pc, #196]	; (8001ddc <MX_GPIO_Init+0xe0>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a30      	ldr	r2, [pc, #192]	; (8001ddc <MX_GPIO_Init+0xe0>)
 8001d1c:	f043 0304 	orr.w	r3, r3, #4
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b2e      	ldr	r3, [pc, #184]	; (8001ddc <MX_GPIO_Init+0xe0>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	4b2a      	ldr	r3, [pc, #168]	; (8001ddc <MX_GPIO_Init+0xe0>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a29      	ldr	r2, [pc, #164]	; (8001ddc <MX_GPIO_Init+0xe0>)
 8001d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b27      	ldr	r3, [pc, #156]	; (8001ddc <MX_GPIO_Init+0xe0>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	4b23      	ldr	r3, [pc, #140]	; (8001ddc <MX_GPIO_Init+0xe0>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a22      	ldr	r2, [pc, #136]	; (8001ddc <MX_GPIO_Init+0xe0>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <MX_GPIO_Init+0xe0>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	4b1c      	ldr	r3, [pc, #112]	; (8001ddc <MX_GPIO_Init+0xe0>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	4a1b      	ldr	r2, [pc, #108]	; (8001ddc <MX_GPIO_Init+0xe0>)
 8001d70:	f043 0302 	orr.w	r3, r3, #2
 8001d74:	6313      	str	r3, [r2, #48]	; 0x30
 8001d76:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <MX_GPIO_Init+0xe0>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	607b      	str	r3, [r7, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001d82:	2200      	movs	r2, #0
 8001d84:	21c0      	movs	r1, #192	; 0xc0
 8001d86:	4816      	ldr	r0, [pc, #88]	; (8001de0 <MX_GPIO_Init+0xe4>)
 8001d88:	f001 feca 	bl	8003b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GYRO_INT_Pin */
  GPIO_InitStruct.Pin = GYRO_INT_Pin;
 8001d8c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d92:	4b14      	ldr	r3, [pc, #80]	; (8001de4 <MX_GPIO_Init+0xe8>)
 8001d94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYRO_INT_GPIO_Port, &GPIO_InitStruct);
 8001d9a:	f107 0314 	add.w	r3, r7, #20
 8001d9e:	4619      	mov	r1, r3
 8001da0:	480f      	ldr	r0, [pc, #60]	; (8001de0 <MX_GPIO_Init+0xe4>)
 8001da2:	f001 fd23 	bl	80037ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001da6:	23c0      	movs	r3, #192	; 0xc0
 8001da8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001daa:	2301      	movs	r3, #1
 8001dac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db2:	2300      	movs	r3, #0
 8001db4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4808      	ldr	r0, [pc, #32]	; (8001de0 <MX_GPIO_Init+0xe4>)
 8001dbe:	f001 fd15 	bl	80037ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	2028      	movs	r0, #40	; 0x28
 8001dc8:	f001 fcd9 	bl	800377e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001dcc:	2028      	movs	r0, #40	; 0x28
 8001dce:	f001 fcf2 	bl	80037b6 <HAL_NVIC_EnableIRQ>

}
 8001dd2:	bf00      	nop
 8001dd4:	3728      	adds	r7, #40	; 0x28
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40020800 	.word	0x40020800
 8001de4:	10110000 	.word	0x10110000

08001de8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

/* GYROSCOPE DATA READY INTERRUPT CALLBACK */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_14) { DATA_STATUS = DATA_READY; }    // SET DATA_READY FLAG
 8001df2:	88fb      	ldrh	r3, [r7, #6]
 8001df4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001df8:	d102      	bne.n	8001e00 <HAL_GPIO_EXTI_Callback+0x18>
 8001dfa:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <HAL_GPIO_EXTI_Callback+0x24>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	701a      	strb	r2, [r3, #0]
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	200003a0 	.word	0x200003a0

08001e10 <HAL_TIM_PeriodElapsedCallback>:

/* TIMER INTERRUPT CALLBACK FOR 50Hz UPDATE OVER SERIAL */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM7) { UPDATE_STATUS = UPDATE_READY; } // SET UPDATE_READY FLAG
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a05      	ldr	r2, [pc, #20]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d102      	bne.n	8001e28 <HAL_TIM_PeriodElapsedCallback+0x18>
 8001e22:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001e24:	2201      	movs	r2, #1
 8001e26:	701a      	strb	r2, [r3, #0]
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	40001400 	.word	0x40001400
 8001e38:	200003a1 	.word	0x200003a1

08001e3c <HAL_TIM_IC_CaptureCallback>:
 * Measures pulse widths on the following channels:
 * TIM3: CH1, CH2, CH3, CH4
 * TIM4: CH1, CH2
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
	uint8_t idx     = 0; // CHANNEL INDEX
 8001e44:	2300      	movs	r3, #0
 8001e46:	73fb      	strb	r3, [r7, #15]
	uint8_t channel = 0; // TIMER CHANNEL
 8001e48:	2300      	movs	r3, #0
 8001e4a:	73bb      	strb	r3, [r7, #14]

	// TIMER 3: 4 CHANNELS
	if (htim == &htim3)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a7e      	ldr	r2, [pc, #504]	; (8002048 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	f040 810d 	bne.w	8002070 <HAL_TIM_IC_CaptureCallback+0x234>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	7f1b      	ldrb	r3, [r3, #28]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d103      	bne.n	8001e66 <HAL_TIM_IC_CaptureCallback+0x2a>
		{
			idx     = 4;
 8001e5e:	2304      	movs	r3, #4
 8001e60:	73fb      	strb	r3, [r7, #15]
			channel = TIM_CHANNEL_1;
 8001e62:	2300      	movs	r3, #0
 8001e64:	73bb      	strb	r3, [r7, #14]
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	7f1b      	ldrb	r3, [r3, #28]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d103      	bne.n	8001e76 <HAL_TIM_IC_CaptureCallback+0x3a>
		{
			idx     = 5;
 8001e6e:	2305      	movs	r3, #5
 8001e70:	73fb      	strb	r3, [r7, #15]
			channel = TIM_CHANNEL_2;
 8001e72:	2304      	movs	r3, #4
 8001e74:	73bb      	strb	r3, [r7, #14]
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	7f1b      	ldrb	r3, [r3, #28]
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	d103      	bne.n	8001e86 <HAL_TIM_IC_CaptureCallback+0x4a>
		{
			idx     = 3;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	73fb      	strb	r3, [r7, #15]
			channel = TIM_CHANNEL_3;
 8001e82:	2308      	movs	r3, #8
 8001e84:	73bb      	strb	r3, [r7, #14]
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	7f1b      	ldrb	r3, [r3, #28]
 8001e8a:	2b08      	cmp	r3, #8
 8001e8c:	d103      	bne.n	8001e96 <HAL_TIM_IC_CaptureCallback+0x5a>
		{
			idx     = 2;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	73fb      	strb	r3, [r7, #15]
			channel = TIM_CHANNEL_4;
 8001e92:	230c      	movs	r3, #12
 8001e94:	73bb      	strb	r3, [r7, #14]
		}

		//  PULSE WIDTH CAPTURE
		if (IC_Started[idx] == 0x0) {
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	4a6c      	ldr	r2, [pc, #432]	; (800204c <HAL_TIM_IC_CaptureCallback+0x210>)
 8001e9a:	5cd3      	ldrb	r3, [r2, r3]
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d167      	bne.n	8001f72 <HAL_TIM_IC_CaptureCallback+0x136>
			IC_ts1[idx] = HAL_TIM_ReadCapturedValue(htim, channel);							// GET FIRST TIMESTAMP
 8001ea2:	7bbb      	ldrb	r3, [r7, #14]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f005 f820 	bl	8006eec <HAL_TIM_ReadCapturedValue>
 8001eac:	4602      	mov	r2, r0
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
 8001eb0:	b291      	uxth	r1, r2
 8001eb2:	4a67      	ldr	r2, [pc, #412]	; (8002050 <HAL_TIM_IC_CaptureCallback+0x214>)
 8001eb4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_FALLING);	// FLIP POLARITY
 8001eb8:	7bbb      	ldrb	r3, [r7, #14]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d108      	bne.n	8001ed0 <HAL_TIM_IC_CaptureCallback+0x94>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6a1a      	ldr	r2, [r3, #32]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 020a 	bic.w	r2, r2, #10
 8001ecc:	621a      	str	r2, [r3, #32]
 8001ece:	e01f      	b.n	8001f10 <HAL_TIM_IC_CaptureCallback+0xd4>
 8001ed0:	7bbb      	ldrb	r3, [r7, #14]
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	d108      	bne.n	8001ee8 <HAL_TIM_IC_CaptureCallback+0xac>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6a1a      	ldr	r2, [r3, #32]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ee4:	621a      	str	r2, [r3, #32]
 8001ee6:	e013      	b.n	8001f10 <HAL_TIM_IC_CaptureCallback+0xd4>
 8001ee8:	7bbb      	ldrb	r3, [r7, #14]
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d108      	bne.n	8001f00 <HAL_TIM_IC_CaptureCallback+0xc4>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6a1a      	ldr	r2, [r3, #32]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8001efc:	621a      	str	r2, [r3, #32]
 8001efe:	e007      	b.n	8001f10 <HAL_TIM_IC_CaptureCallback+0xd4>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6a1a      	ldr	r2, [r3, #32]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 8001f0e:	621a      	str	r2, [r3, #32]
 8001f10:	7bbb      	ldrb	r3, [r7, #14]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d108      	bne.n	8001f28 <HAL_TIM_IC_CaptureCallback+0xec>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6a1a      	ldr	r2, [r3, #32]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f042 0202 	orr.w	r2, r2, #2
 8001f24:	621a      	str	r2, [r3, #32]
 8001f26:	e01f      	b.n	8001f68 <HAL_TIM_IC_CaptureCallback+0x12c>
 8001f28:	7bbb      	ldrb	r3, [r7, #14]
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	d108      	bne.n	8001f40 <HAL_TIM_IC_CaptureCallback+0x104>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6a1a      	ldr	r2, [r3, #32]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f042 0220 	orr.w	r2, r2, #32
 8001f3c:	621a      	str	r2, [r3, #32]
 8001f3e:	e013      	b.n	8001f68 <HAL_TIM_IC_CaptureCallback+0x12c>
 8001f40:	7bbb      	ldrb	r3, [r7, #14]
 8001f42:	2b08      	cmp	r3, #8
 8001f44:	d108      	bne.n	8001f58 <HAL_TIM_IC_CaptureCallback+0x11c>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6a1a      	ldr	r2, [r3, #32]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f54:	621a      	str	r2, [r3, #32]
 8001f56:	e007      	b.n	8001f68 <HAL_TIM_IC_CaptureCallback+0x12c>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6a1a      	ldr	r2, [r3, #32]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f66:	621a      	str	r2, [r3, #32]
			IC_Started[idx] = 0x1;															// UPDATE STATUS
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
 8001f6a:	4a38      	ldr	r2, [pc, #224]	; (800204c <HAL_TIM_IC_CaptureCallback+0x210>)
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	54d1      	strb	r1, [r2, r3]
 8001f70:	e07e      	b.n	8002070 <HAL_TIM_IC_CaptureCallback+0x234>
		} else if (IC_Started[idx] == 0x1) {
 8001f72:	7bfb      	ldrb	r3, [r7, #15]
 8001f74:	4a35      	ldr	r2, [pc, #212]	; (800204c <HAL_TIM_IC_CaptureCallback+0x210>)
 8001f76:	5cd3      	ldrb	r3, [r2, r3]
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d178      	bne.n	8002070 <HAL_TIM_IC_CaptureCallback+0x234>
			IC_ts2[idx] = HAL_TIM_ReadCapturedValue(htim, channel);							// GET SECOND TIMESTAMP
 8001f7e:	7bbb      	ldrb	r3, [r7, #14]
 8001f80:	4619      	mov	r1, r3
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f004 ffb2 	bl	8006eec <HAL_TIM_ReadCapturedValue>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	7bfb      	ldrb	r3, [r7, #15]
 8001f8c:	b291      	uxth	r1, r2
 8001f8e:	4a31      	ldr	r2, [pc, #196]	; (8002054 <HAL_TIM_IC_CaptureCallback+0x218>)
 8001f90:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			IC_Elapsed[idx] = IC_ts2[idx] - IC_ts1[idx];									// CALCULATE PULSE WIDTH
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
 8001f96:	4a2f      	ldr	r2, [pc, #188]	; (8002054 <HAL_TIM_IC_CaptureCallback+0x218>)
 8001f98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f9c:	b299      	uxth	r1, r3
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
 8001fa0:	4a2b      	ldr	r2, [pc, #172]	; (8002050 <HAL_TIM_IC_CaptureCallback+0x214>)
 8001fa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	1a8a      	subs	r2, r1, r2
 8001fac:	b291      	uxth	r1, r2
 8001fae:	4a2a      	ldr	r2, [pc, #168]	; (8002058 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8001fb0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_RISING);	// FLIP POLARITY
 8001fb4:	7bbb      	ldrb	r3, [r7, #14]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d108      	bne.n	8001fcc <HAL_TIM_IC_CaptureCallback+0x190>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6a1a      	ldr	r2, [r3, #32]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 020a 	bic.w	r2, r2, #10
 8001fc8:	621a      	str	r2, [r3, #32]
 8001fca:	e01f      	b.n	800200c <HAL_TIM_IC_CaptureCallback+0x1d0>
 8001fcc:	7bbb      	ldrb	r3, [r7, #14]
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	d108      	bne.n	8001fe4 <HAL_TIM_IC_CaptureCallback+0x1a8>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6a1a      	ldr	r2, [r3, #32]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fe0:	621a      	str	r2, [r3, #32]
 8001fe2:	e013      	b.n	800200c <HAL_TIM_IC_CaptureCallback+0x1d0>
 8001fe4:	7bbb      	ldrb	r3, [r7, #14]
 8001fe6:	2b08      	cmp	r3, #8
 8001fe8:	d108      	bne.n	8001ffc <HAL_TIM_IC_CaptureCallback+0x1c0>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6a1a      	ldr	r2, [r3, #32]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8001ff8:	621a      	str	r2, [r3, #32]
 8001ffa:	e007      	b.n	800200c <HAL_TIM_IC_CaptureCallback+0x1d0>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6a1a      	ldr	r2, [r3, #32]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 800200a:	621a      	str	r2, [r3, #32]
 800200c:	7bbb      	ldrb	r3, [r7, #14]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d106      	bne.n	8002020 <HAL_TIM_IC_CaptureCallback+0x1e4>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6a12      	ldr	r2, [r2, #32]
 800201c:	621a      	str	r2, [r3, #32]
 800201e:	e023      	b.n	8002068 <HAL_TIM_IC_CaptureCallback+0x22c>
 8002020:	7bbb      	ldrb	r3, [r7, #14]
 8002022:	2b04      	cmp	r3, #4
 8002024:	d106      	bne.n	8002034 <HAL_TIM_IC_CaptureCallback+0x1f8>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6a12      	ldr	r2, [r2, #32]
 8002030:	621a      	str	r2, [r3, #32]
 8002032:	e019      	b.n	8002068 <HAL_TIM_IC_CaptureCallback+0x22c>
 8002034:	7bbb      	ldrb	r3, [r7, #14]
 8002036:	2b08      	cmp	r3, #8
 8002038:	d110      	bne.n	800205c <HAL_TIM_IC_CaptureCallback+0x220>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6a12      	ldr	r2, [r2, #32]
 8002044:	621a      	str	r2, [r3, #32]
 8002046:	e00f      	b.n	8002068 <HAL_TIM_IC_CaptureCallback+0x22c>
 8002048:	20000518 	.word	0x20000518
 800204c:	20000374 	.word	0x20000374
 8002050:	2000037c 	.word	0x2000037c
 8002054:	20000388 	.word	0x20000388
 8002058:	20000394 	.word	0x20000394
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6a12      	ldr	r2, [r2, #32]
 8002066:	621a      	str	r2, [r3, #32]
			IC_Started[idx] = 0x0;															// UPDATE STATUS
 8002068:	7bfb      	ldrb	r3, [r7, #15]
 800206a:	4a7f      	ldr	r2, [pc, #508]	; (8002268 <HAL_TIM_IC_CaptureCallback+0x42c>)
 800206c:	2100      	movs	r1, #0
 800206e:	54d1      	strb	r1, [r2, r3]
		}
	}
	// TIMER 4: 2 CHANNELS
	if (htim == &htim4)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a7e      	ldr	r2, [pc, #504]	; (800226c <HAL_TIM_IC_CaptureCallback+0x430>)
 8002074:	4293      	cmp	r3, r2
 8002076:	f040 80f3 	bne.w	8002260 <HAL_TIM_IC_CaptureCallback+0x424>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	7f1b      	ldrb	r3, [r3, #28]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d103      	bne.n	800208a <HAL_TIM_IC_CaptureCallback+0x24e>
		{
			idx     = 1;
 8002082:	2301      	movs	r3, #1
 8002084:	73fb      	strb	r3, [r7, #15]
			channel = TIM_CHANNEL_1;
 8002086:	2300      	movs	r3, #0
 8002088:	73bb      	strb	r3, [r7, #14]
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	7f1b      	ldrb	r3, [r3, #28]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d103      	bne.n	800209a <HAL_TIM_IC_CaptureCallback+0x25e>
		{
			idx     = 0;
 8002092:	2300      	movs	r3, #0
 8002094:	73fb      	strb	r3, [r7, #15]
			channel = TIM_CHANNEL_2;
 8002096:	2304      	movs	r3, #4
 8002098:	73bb      	strb	r3, [r7, #14]
		}

		//  PULSE WIDTH CAPTURE
		if (IC_Started[idx] == 0x0) {
 800209a:	7bfb      	ldrb	r3, [r7, #15]
 800209c:	4a72      	ldr	r2, [pc, #456]	; (8002268 <HAL_TIM_IC_CaptureCallback+0x42c>)
 800209e:	5cd3      	ldrb	r3, [r2, r3]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d167      	bne.n	8002176 <HAL_TIM_IC_CaptureCallback+0x33a>
			IC_ts1[idx] = HAL_TIM_ReadCapturedValue(htim, channel);							// GET FIRST TIMESTAMP
 80020a6:	7bbb      	ldrb	r3, [r7, #14]
 80020a8:	4619      	mov	r1, r3
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f004 ff1e 	bl	8006eec <HAL_TIM_ReadCapturedValue>
 80020b0:	4602      	mov	r2, r0
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
 80020b4:	b291      	uxth	r1, r2
 80020b6:	4a6e      	ldr	r2, [pc, #440]	; (8002270 <HAL_TIM_IC_CaptureCallback+0x434>)
 80020b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_FALLING);	// FLIP POLARITY
 80020bc:	7bbb      	ldrb	r3, [r7, #14]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d108      	bne.n	80020d4 <HAL_TIM_IC_CaptureCallback+0x298>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6a1a      	ldr	r2, [r3, #32]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 020a 	bic.w	r2, r2, #10
 80020d0:	621a      	str	r2, [r3, #32]
 80020d2:	e01f      	b.n	8002114 <HAL_TIM_IC_CaptureCallback+0x2d8>
 80020d4:	7bbb      	ldrb	r3, [r7, #14]
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d108      	bne.n	80020ec <HAL_TIM_IC_CaptureCallback+0x2b0>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6a1a      	ldr	r2, [r3, #32]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80020e8:	621a      	str	r2, [r3, #32]
 80020ea:	e013      	b.n	8002114 <HAL_TIM_IC_CaptureCallback+0x2d8>
 80020ec:	7bbb      	ldrb	r3, [r7, #14]
 80020ee:	2b08      	cmp	r3, #8
 80020f0:	d108      	bne.n	8002104 <HAL_TIM_IC_CaptureCallback+0x2c8>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6a1a      	ldr	r2, [r3, #32]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8002100:	621a      	str	r2, [r3, #32]
 8002102:	e007      	b.n	8002114 <HAL_TIM_IC_CaptureCallback+0x2d8>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6a1a      	ldr	r2, [r3, #32]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 8002112:	621a      	str	r2, [r3, #32]
 8002114:	7bbb      	ldrb	r3, [r7, #14]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d108      	bne.n	800212c <HAL_TIM_IC_CaptureCallback+0x2f0>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6a1a      	ldr	r2, [r3, #32]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f042 0202 	orr.w	r2, r2, #2
 8002128:	621a      	str	r2, [r3, #32]
 800212a:	e01f      	b.n	800216c <HAL_TIM_IC_CaptureCallback+0x330>
 800212c:	7bbb      	ldrb	r3, [r7, #14]
 800212e:	2b04      	cmp	r3, #4
 8002130:	d108      	bne.n	8002144 <HAL_TIM_IC_CaptureCallback+0x308>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6a1a      	ldr	r2, [r3, #32]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f042 0220 	orr.w	r2, r2, #32
 8002140:	621a      	str	r2, [r3, #32]
 8002142:	e013      	b.n	800216c <HAL_TIM_IC_CaptureCallback+0x330>
 8002144:	7bbb      	ldrb	r3, [r7, #14]
 8002146:	2b08      	cmp	r3, #8
 8002148:	d108      	bne.n	800215c <HAL_TIM_IC_CaptureCallback+0x320>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6a1a      	ldr	r2, [r3, #32]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002158:	621a      	str	r2, [r3, #32]
 800215a:	e007      	b.n	800216c <HAL_TIM_IC_CaptureCallback+0x330>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6a1a      	ldr	r2, [r3, #32]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800216a:	621a      	str	r2, [r3, #32]
			IC_Started[idx] = 0x1;															// UPDATE STATUS
 800216c:	7bfb      	ldrb	r3, [r7, #15]
 800216e:	4a3e      	ldr	r2, [pc, #248]	; (8002268 <HAL_TIM_IC_CaptureCallback+0x42c>)
 8002170:	2101      	movs	r1, #1
 8002172:	54d1      	strb	r1, [r2, r3]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_RISING);	// FLIP POLARITY
			IC_Started[idx] = 0x0;															// UPDATE STATUS
		}
	}

}
 8002174:	e074      	b.n	8002260 <HAL_TIM_IC_CaptureCallback+0x424>
		} else if (IC_Started[idx] == 0x1) {
 8002176:	7bfb      	ldrb	r3, [r7, #15]
 8002178:	4a3b      	ldr	r2, [pc, #236]	; (8002268 <HAL_TIM_IC_CaptureCallback+0x42c>)
 800217a:	5cd3      	ldrb	r3, [r2, r3]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b01      	cmp	r3, #1
 8002180:	d16e      	bne.n	8002260 <HAL_TIM_IC_CaptureCallback+0x424>
			IC_ts2[idx] = HAL_TIM_ReadCapturedValue(htim, channel);							// GET SECOND TIMESTAMP
 8002182:	7bbb      	ldrb	r3, [r7, #14]
 8002184:	4619      	mov	r1, r3
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f004 feb0 	bl	8006eec <HAL_TIM_ReadCapturedValue>
 800218c:	4602      	mov	r2, r0
 800218e:	7bfb      	ldrb	r3, [r7, #15]
 8002190:	b291      	uxth	r1, r2
 8002192:	4a38      	ldr	r2, [pc, #224]	; (8002274 <HAL_TIM_IC_CaptureCallback+0x438>)
 8002194:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			IC_Elapsed[idx] = IC_ts2[idx] - IC_ts1[idx];									// CALCULATE PULSE WIDTH
 8002198:	7bfb      	ldrb	r3, [r7, #15]
 800219a:	4a36      	ldr	r2, [pc, #216]	; (8002274 <HAL_TIM_IC_CaptureCallback+0x438>)
 800219c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021a0:	b299      	uxth	r1, r3
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
 80021a4:	4a32      	ldr	r2, [pc, #200]	; (8002270 <HAL_TIM_IC_CaptureCallback+0x434>)
 80021a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	1a8a      	subs	r2, r1, r2
 80021b0:	b291      	uxth	r1, r2
 80021b2:	4a31      	ldr	r2, [pc, #196]	; (8002278 <HAL_TIM_IC_CaptureCallback+0x43c>)
 80021b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_RISING);	// FLIP POLARITY
 80021b8:	7bbb      	ldrb	r3, [r7, #14]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d108      	bne.n	80021d0 <HAL_TIM_IC_CaptureCallback+0x394>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6a1a      	ldr	r2, [r3, #32]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 020a 	bic.w	r2, r2, #10
 80021cc:	621a      	str	r2, [r3, #32]
 80021ce:	e01f      	b.n	8002210 <HAL_TIM_IC_CaptureCallback+0x3d4>
 80021d0:	7bbb      	ldrb	r3, [r7, #14]
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d108      	bne.n	80021e8 <HAL_TIM_IC_CaptureCallback+0x3ac>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6a1a      	ldr	r2, [r3, #32]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80021e4:	621a      	str	r2, [r3, #32]
 80021e6:	e013      	b.n	8002210 <HAL_TIM_IC_CaptureCallback+0x3d4>
 80021e8:	7bbb      	ldrb	r3, [r7, #14]
 80021ea:	2b08      	cmp	r3, #8
 80021ec:	d108      	bne.n	8002200 <HAL_TIM_IC_CaptureCallback+0x3c4>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6a1a      	ldr	r2, [r3, #32]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 80021fc:	621a      	str	r2, [r3, #32]
 80021fe:	e007      	b.n	8002210 <HAL_TIM_IC_CaptureCallback+0x3d4>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6a1a      	ldr	r2, [r3, #32]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 800220e:	621a      	str	r2, [r3, #32]
 8002210:	7bbb      	ldrb	r3, [r7, #14]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d106      	bne.n	8002224 <HAL_TIM_IC_CaptureCallback+0x3e8>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6a12      	ldr	r2, [r2, #32]
 8002220:	621a      	str	r2, [r3, #32]
 8002222:	e019      	b.n	8002258 <HAL_TIM_IC_CaptureCallback+0x41c>
 8002224:	7bbb      	ldrb	r3, [r7, #14]
 8002226:	2b04      	cmp	r3, #4
 8002228:	d106      	bne.n	8002238 <HAL_TIM_IC_CaptureCallback+0x3fc>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6a12      	ldr	r2, [r2, #32]
 8002234:	621a      	str	r2, [r3, #32]
 8002236:	e00f      	b.n	8002258 <HAL_TIM_IC_CaptureCallback+0x41c>
 8002238:	7bbb      	ldrb	r3, [r7, #14]
 800223a:	2b08      	cmp	r3, #8
 800223c:	d106      	bne.n	800224c <HAL_TIM_IC_CaptureCallback+0x410>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6a12      	ldr	r2, [r2, #32]
 8002248:	621a      	str	r2, [r3, #32]
 800224a:	e005      	b.n	8002258 <HAL_TIM_IC_CaptureCallback+0x41c>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6a12      	ldr	r2, [r2, #32]
 8002256:	621a      	str	r2, [r3, #32]
			IC_Started[idx] = 0x0;															// UPDATE STATUS
 8002258:	7bfb      	ldrb	r3, [r7, #15]
 800225a:	4a03      	ldr	r2, [pc, #12]	; (8002268 <HAL_TIM_IC_CaptureCallback+0x42c>)
 800225c:	2100      	movs	r1, #0
 800225e:	54d1      	strb	r1, [r2, r3]
}
 8002260:	bf00      	nop
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20000374 	.word	0x20000374
 800226c:	200003f8 	.word	0x200003f8
 8002270:	2000037c 	.word	0x2000037c
 8002274:	20000388 	.word	0x20000388
 8002278:	20000394 	.word	0x20000394

0800227c <QUAD_Wrapper_Init>:

static void QUAD_Wrapper_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
	quad.hi2c = &hi2c1;
 8002280:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <QUAD_Wrapper_Init+0x30>)
 8002282:	4a0b      	ldr	r2, [pc, #44]	; (80022b0 <QUAD_Wrapper_Init+0x34>)
 8002284:	601a      	str	r2, [r3, #0]
	quad.htim = &htim6;
 8002286:	4b09      	ldr	r3, [pc, #36]	; (80022ac <QUAD_Wrapper_Init+0x30>)
 8002288:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <QUAD_Wrapper_Init+0x38>)
 800228a:	605a      	str	r2, [r3, #4]
	quad.OS   = &OSHOT;
 800228c:	4b07      	ldr	r3, [pc, #28]	; (80022ac <QUAD_Wrapper_Init+0x30>)
 800228e:	4a0a      	ldr	r2, [pc, #40]	; (80022b8 <QUAD_Wrapper_Init+0x3c>)
 8002290:	609a      	str	r2, [r3, #8]
	quad.PID  = &PID;
 8002292:	4b06      	ldr	r3, [pc, #24]	; (80022ac <QUAD_Wrapper_Init+0x30>)
 8002294:	4a09      	ldr	r2, [pc, #36]	; (80022bc <QUAD_Wrapper_Init+0x40>)
 8002296:	60da      	str	r2, [r3, #12]

	QUAD_Init(&quad);
 8002298:	4804      	ldr	r0, [pc, #16]	; (80022ac <QUAD_Wrapper_Init+0x30>)
 800229a:	f000 fbf9 	bl	8002a90 <QUAD_Init>

	// ENABLE TEST MODE (THROTTLE PASS THROUGH)
	quad.TEST_MODE = 0x1;
 800229e:	4b03      	ldr	r3, [pc, #12]	; (80022ac <QUAD_Wrapper_Init+0x30>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000598 	.word	0x20000598
 80022b0:	20000438 	.word	0x20000438
 80022b4:	20000558 	.word	0x20000558
 80022b8:	200003b4 	.word	0x200003b4
 80022bc:	2000048c 	.word	0x2000048c

080022c0 <BMI088_Wrapper_Init>:

static void BMI088_Wrapper_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
	// CHECK DEVICE IDENTIFIERS
	if ( BMI088_I2C_Read_CHIP_IDS(&hi2c1) != HAL_OK ) { Error_Handler(); }
 80022c4:	4808      	ldr	r0, [pc, #32]	; (80022e8 <BMI088_Wrapper_Init+0x28>)
 80022c6:	f7fe fe3f 	bl	8000f48 <BMI088_I2C_Read_CHIP_IDS>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <BMI088_Wrapper_Init+0x14>
 80022d0:	f000 f8ac 	bl	800242c <Error_Handler>
	// RUN BMI088 GYROSCOPE INITIALIZATION
	if ( BMI088_I2C_GYRO_INIT(&hi2c1) != HAL_OK )     { Error_Handler(); };
 80022d4:	4804      	ldr	r0, [pc, #16]	; (80022e8 <BMI088_Wrapper_Init+0x28>)
 80022d6:	f7fe fe72 	bl	8000fbe <BMI088_I2C_GYRO_INIT>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <BMI088_Wrapper_Init+0x24>
 80022e0:	f000 f8a4 	bl	800242c <Error_Handler>
}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20000438 	.word	0x20000438

080022ec <OS125_Wrapper_Init>:

/* ONESHOT125 INTIALIZATION FUNCTION */
static void OS125_Wrapper_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
	OSHOT.htim     = &htim2;
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <OS125_Wrapper_Init+0x38>)
 80022f2:	4a0d      	ldr	r2, [pc, #52]	; (8002328 <OS125_Wrapper_Init+0x3c>)
 80022f4:	601a      	str	r2, [r3, #0]
	OSHOT.com      = PID.out;
 80022f6:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <OS125_Wrapper_Init+0x38>)
 80022f8:	4a0c      	ldr	r2, [pc, #48]	; (800232c <OS125_Wrapper_Init+0x40>)
 80022fa:	609a      	str	r2, [r3, #8]
	OSHOT.IC       = IC_Elapsed;
 80022fc:	4b09      	ldr	r3, [pc, #36]	; (8002324 <OS125_Wrapper_Init+0x38>)
 80022fe:	4a0c      	ldr	r2, [pc, #48]	; (8002330 <OS125_Wrapper_Init+0x44>)
 8002300:	60da      	str	r2, [r3, #12]
	OSHOT.fclk     = 72000000;
 8002302:	4b08      	ldr	r3, [pc, #32]	; (8002324 <OS125_Wrapper_Init+0x38>)
 8002304:	4a0b      	ldr	r2, [pc, #44]	; (8002334 <OS125_Wrapper_Init+0x48>)
 8002306:	625a      	str	r2, [r3, #36]	; 0x24
	OSHOT.fclk_psc = 1 - 1;
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <OS125_Wrapper_Init+0x38>)
 800230a:	2200      	movs	r2, #0
 800230c:	629a      	str	r2, [r3, #40]	; 0x28

	if (OS125_Init(&OSHOT) != OS125_OK) { Error_Handler(); };
 800230e:	4805      	ldr	r0, [pc, #20]	; (8002324 <OS125_Wrapper_Init+0x38>)
 8002310:	f000 f8b6 	bl	8002480 <OS125_Init>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <OS125_Wrapper_Init+0x32>
 800231a:	f000 f887 	bl	800242c <Error_Handler>
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	200003b4 	.word	0x200003b4
 8002328:	20000634 	.word	0x20000634
 800232c:	2000048c 	.word	0x2000048c
 8002330:	20000394 	.word	0x20000394
 8002334:	044aa200 	.word	0x044aa200

08002338 <PID3_Wrapper_Init>:

/* PID INITIALIZATION FUNCTION */
static void PID3_Wrapper_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
	if ( PID3_Init(&PID, Kp, Ki, Kd) != PID_OK )               { Error_Handler(); }
 800233c:	4b17      	ldr	r3, [pc, #92]	; (800239c <PID3_Wrapper_Init+0x64>)
 800233e:	4a18      	ldr	r2, [pc, #96]	; (80023a0 <PID3_Wrapper_Init+0x68>)
 8002340:	4918      	ldr	r1, [pc, #96]	; (80023a4 <PID3_Wrapper_Init+0x6c>)
 8002342:	4819      	ldr	r0, [pc, #100]	; (80023a8 <PID3_Wrapper_Init+0x70>)
 8002344:	f7fe ff00 	bl	8001148 <PID3_Init>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <PID3_Wrapper_Init+0x1a>
 800234e:	f000 f86d 	bl	800242c <Error_Handler>
	if ( PID3_Set_Tau(&PID, 0.02) != PID_OK)                   { Error_Handler(); }
 8002352:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80023ac <PID3_Wrapper_Init+0x74>
 8002356:	4814      	ldr	r0, [pc, #80]	; (80023a8 <PID3_Wrapper_Init+0x70>)
 8002358:	f7fe ffac 	bl	80012b4 <PID3_Set_Tau>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <PID3_Wrapper_Init+0x2e>
 8002362:	f000 f863 	bl	800242c <Error_Handler>
	// SET INTEGRATOR LIMITS TO 10% OF OUTPUT
	if ( PID3_Set_Integrator_Limit(&PID, -0.1, 0.1) != PID_OK) { Error_Handler(); }
 8002366:	eddf 0a12 	vldr	s1, [pc, #72]	; 80023b0 <PID3_Wrapper_Init+0x78>
 800236a:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80023b4 <PID3_Wrapper_Init+0x7c>
 800236e:	480e      	ldr	r0, [pc, #56]	; (80023a8 <PID3_Wrapper_Init+0x70>)
 8002370:	f7fe ffb9 	bl	80012e6 <PID3_Set_Integrator_Limit>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <PID3_Wrapper_Init+0x46>
 800237a:	f000 f857 	bl	800242c <Error_Handler>
	// SET PID OUTPUT LIMIT TO 20% OF OUTPUT
	if ( PID3_Set_Output_Limit(&PID, -0.2, 0.2) != PID_OK)   { Error_Handler(); }
 800237e:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80023b8 <PID3_Wrapper_Init+0x80>
 8002382:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80023bc <PID3_Wrapper_Init+0x84>
 8002386:	4808      	ldr	r0, [pc, #32]	; (80023a8 <PID3_Wrapper_Init+0x70>)
 8002388:	f7fe ffdc 	bl	8001344 <PID3_Set_Output_Limit>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <PID3_Wrapper_Init+0x5e>
 8002392:	f000 f84b 	bl	800242c <Error_Handler>
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	0800d520 	.word	0x0800d520
 80023a0:	0800d514 	.word	0x0800d514
 80023a4:	0800d508 	.word	0x0800d508
 80023a8:	2000048c 	.word	0x2000048c
 80023ac:	3ca3d70a 	.word	0x3ca3d70a
 80023b0:	3dcccccd 	.word	0x3dcccccd
 80023b4:	bdcccccd 	.word	0xbdcccccd
 80023b8:	3e4ccccd 	.word	0x3e4ccccd
 80023bc:	be4ccccd 	.word	0xbe4ccccd

080023c0 <PWM_INPUT_START>:

/* START INPUT CAPTURE */
static void PWM_INPUT_START(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80023c4:	2100      	movs	r1, #0
 80023c6:	480c      	ldr	r0, [pc, #48]	; (80023f8 <PWM_INPUT_START+0x38>)
 80023c8:	f004 fabe 	bl	8006948 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80023cc:	2104      	movs	r1, #4
 80023ce:	480a      	ldr	r0, [pc, #40]	; (80023f8 <PWM_INPUT_START+0x38>)
 80023d0:	f004 faba 	bl	8006948 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 80023d4:	2108      	movs	r1, #8
 80023d6:	4808      	ldr	r0, [pc, #32]	; (80023f8 <PWM_INPUT_START+0x38>)
 80023d8:	f004 fab6 	bl	8006948 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 80023dc:	210c      	movs	r1, #12
 80023de:	4806      	ldr	r0, [pc, #24]	; (80023f8 <PWM_INPUT_START+0x38>)
 80023e0:	f004 fab2 	bl	8006948 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80023e4:	2100      	movs	r1, #0
 80023e6:	4805      	ldr	r0, [pc, #20]	; (80023fc <PWM_INPUT_START+0x3c>)
 80023e8:	f004 faae 	bl	8006948 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 80023ec:	2104      	movs	r1, #4
 80023ee:	4803      	ldr	r0, [pc, #12]	; (80023fc <PWM_INPUT_START+0x3c>)
 80023f0:	f004 faaa 	bl	8006948 <HAL_TIM_IC_Start_IT>
}
 80023f4:	bf00      	nop
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20000518 	.word	0x20000518
 80023fc:	200003f8 	.word	0x200003f8

08002400 <PWM_OUTPUT_START>:

/* START PWM OUTPUT */
static void PWM_OUTPUT_START(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002404:	2100      	movs	r1, #0
 8002406:	4808      	ldr	r0, [pc, #32]	; (8002428 <PWM_OUTPUT_START+0x28>)
 8002408:	f004 f9dc 	bl	80067c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800240c:	2104      	movs	r1, #4
 800240e:	4806      	ldr	r0, [pc, #24]	; (8002428 <PWM_OUTPUT_START+0x28>)
 8002410:	f004 f9d8 	bl	80067c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002414:	2108      	movs	r1, #8
 8002416:	4804      	ldr	r0, [pc, #16]	; (8002428 <PWM_OUTPUT_START+0x28>)
 8002418:	f004 f9d4 	bl	80067c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800241c:	210c      	movs	r1, #12
 800241e:	4802      	ldr	r0, [pc, #8]	; (8002428 <PWM_OUTPUT_START+0x28>)
 8002420:	f004 f9d0 	bl	80067c4 <HAL_TIM_PWM_Start>
}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20000634 	.word	0x20000634

0800242c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002430:	b672      	cpsid	i
  /* User can add his own implementation to report the HAL error return state */

  __disable_irq();

  // DISABLE PWM OUTPUT
  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8002432:	2100      	movs	r1, #0
 8002434:	480e      	ldr	r0, [pc, #56]	; (8002470 <Error_Handler+0x44>)
 8002436:	f004 fa03 	bl	8006840 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 800243a:	2104      	movs	r1, #4
 800243c:	480c      	ldr	r0, [pc, #48]	; (8002470 <Error_Handler+0x44>)
 800243e:	f004 f9ff 	bl	8006840 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8002442:	2108      	movs	r1, #8
 8002444:	480a      	ldr	r0, [pc, #40]	; (8002470 <Error_Handler+0x44>)
 8002446:	f004 f9fb 	bl	8006840 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 800244a:	210c      	movs	r1, #12
 800244c:	4808      	ldr	r0, [pc, #32]	; (8002470 <Error_Handler+0x44>)
 800244e:	f004 f9f7 	bl	8006840 <HAL_TIM_PWM_Stop>

  // SET STATUS LEDS
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8002452:	2200      	movs	r2, #0
 8002454:	2140      	movs	r1, #64	; 0x40
 8002456:	4807      	ldr	r0, [pc, #28]	; (8002474 <Error_Handler+0x48>)
 8002458:	f001 fb62 	bl	8003b20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800245c:	2201      	movs	r2, #1
 800245e:	2180      	movs	r1, #128	; 0x80
 8002460:	4804      	ldr	r0, [pc, #16]	; (8002474 <Error_Handler+0x48>)
 8002462:	f001 fb5d 	bl	8003b20 <HAL_GPIO_WritePin>

  CDC_Transmit_FS((uint8_t*)"ERROR\n", 6);
 8002466:	2106      	movs	r1, #6
 8002468:	4803      	ldr	r0, [pc, #12]	; (8002478 <Error_Handler+0x4c>)
 800246a:	f008 f9d5 	bl	800a818 <CDC_Transmit_FS>

  while (1)
 800246e:	e7fe      	b.n	800246e <Error_Handler+0x42>
 8002470:	20000634 	.word	0x20000634
 8002474:	40020800 	.word	0x40020800
 8002478:	0800d4a0 	.word	0x0800d4a0
 800247c:	00000000 	.word	0x00000000

08002480 <OS125_Init>:
 * 2) Set OS.command
 * 3) Set OS.fclk
 * 4) Set OS.fclk_psc
 */
OS125_StatusTypeDef OS125_Init(ONESHOT125 *OS)
{
 8002480:	b590      	push	{r4, r7, lr}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
	// GET TIMER INSTANCE
	OS->TIM = OS->htim->Instance;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	605a      	str	r2, [r3, #4]
	// CALCULATE TIMER CLOCK FREQUENCY
	OS->tim_clk = (float)OS->fclk / ((float)OS->fclk_psc + 1);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	ee07 3a90 	vmov	s15, r3
 800249a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a2:	ee07 3a90 	vmov	s15, r3
 80024a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80024ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80024b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	// CALCULATE TIMER CLOCK PERIOD
	OS->dt = 1.0/OS->tim_clk;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80024c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	// CALCULATE MAXIMUM CCR VALUE (100% Power)
	OS->CCR_MAX = (int)ceil(0.000250 / OS->dt);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fe f837 	bl	8000548 <__aeabi_f2d>
 80024da:	4603      	mov	r3, r0
 80024dc:	460c      	mov	r4, r1
 80024de:	461a      	mov	r2, r3
 80024e0:	4623      	mov	r3, r4
 80024e2:	a137      	add	r1, pc, #220	; (adr r1, 80025c0 <OS125_Init+0x140>)
 80024e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024e8:	f7fe f9b0 	bl	800084c <__aeabi_ddiv>
 80024ec:	4603      	mov	r3, r0
 80024ee:	460c      	mov	r4, r1
 80024f0:	ec44 3b17 	vmov	d7, r3, r4
 80024f4:	eeb0 0a47 	vmov.f32	s0, s14
 80024f8:	eef0 0a67 	vmov.f32	s1, s15
 80024fc:	f00a fe44 	bl	800d188 <ceil>
 8002500:	ec54 3b10 	vmov	r3, r4, d0
 8002504:	4618      	mov	r0, r3
 8002506:	4621      	mov	r1, r4
 8002508:	f7fe fb26 	bl	8000b58 <__aeabi_d2iz>
 800250c:	4602      	mov	r2, r0
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	635a      	str	r2, [r3, #52]	; 0x34
	// CALCULATE MINIMUM CCR VALUE (0% Power)
	OS->CCR_MIN = (int)floor(0.000125 / OS->dt);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe f816 	bl	8000548 <__aeabi_f2d>
 800251c:	4603      	mov	r3, r0
 800251e:	460c      	mov	r4, r1
 8002520:	461a      	mov	r2, r3
 8002522:	4623      	mov	r3, r4
 8002524:	a128      	add	r1, pc, #160	; (adr r1, 80025c8 <OS125_Init+0x148>)
 8002526:	e9d1 0100 	ldrd	r0, r1, [r1]
 800252a:	f7fe f98f 	bl	800084c <__aeabi_ddiv>
 800252e:	4603      	mov	r3, r0
 8002530:	460c      	mov	r4, r1
 8002532:	ec44 3b17 	vmov	d7, r3, r4
 8002536:	eeb0 0a47 	vmov.f32	s0, s14
 800253a:	eef0 0a67 	vmov.f32	s1, s15
 800253e:	f00a fea3 	bl	800d288 <floor>
 8002542:	ec54 3b10 	vmov	r3, r4, d0
 8002546:	4618      	mov	r0, r3
 8002548:	4621      	mov	r1, r4
 800254a:	f7fe fb05 	bl	8000b58 <__aeabi_d2iz>
 800254e:	4602      	mov	r2, r0
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	639a      	str	r2, [r3, #56]	; 0x38
	// MINIMUM IDLE CCR VALUE
	OS->CCR_MIN_ON = (int)OS->CCR_MIN*(1.0 + MIN_ON_MULTIPLIER);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002558:	4618      	mov	r0, r3
 800255a:	f7fd ffe3 	bl	8000524 <__aeabi_i2d>
 800255e:	a31c      	add	r3, pc, #112	; (adr r3, 80025d0 <OS125_Init+0x150>)
 8002560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002564:	f7fe f848 	bl	80005f8 <__aeabi_dmul>
 8002568:	4603      	mov	r3, r0
 800256a:	460c      	mov	r4, r1
 800256c:	4618      	mov	r0, r3
 800256e:	4621      	mov	r1, r4
 8002570:	f7fe faf2 	bl	8000b58 <__aeabi_d2iz>
 8002574:	4602      	mov	r2, r0
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	63da      	str	r2, [r3, #60]	; 0x3c
	// CALCULATE NUMBER OF CCR STEPS
	OS->CCR_STEPS = OS->CCR_MAX - OS->CCR_MIN;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002582:	1ad2      	subs	r2, r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	641a      	str	r2, [r3, #64]	; 0x40

	// SET ALL OUTPUTS TO 0%
	for (int i = 0; i < 4; i++) { OS->CCR[i] = OS->CCR_MIN; }
 8002588:	2300      	movs	r3, #0
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	e00a      	b.n	80025a4 <OS125_Init+0x124>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	3304      	adds	r3, #4
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	440b      	add	r3, r1
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	3301      	adds	r3, #1
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	ddf1      	ble.n	800258e <OS125_Init+0x10e>
	OS125_UpdateCCR(OS);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 fa32 	bl	8002a14 <OS125_UpdateCCR>

	return OS125_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd90      	pop	{r4, r7, pc}
 80025ba:	bf00      	nop
 80025bc:	f3af 8000 	nop.w
 80025c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80025c4:	3f30624d 	.word	0x3f30624d
 80025c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80025cc:	3f20624d 	.word	0x3f20624d
 80025d0:	9999999a 	.word	0x9999999a
 80025d4:	3ff19999 	.word	0x3ff19999

080025d8 <OS125_CommandFromSetpoint>:
/*
 * ONESHOT125 OUTPUT UPDATE FUNCTION
 * Converts PID controller output to PWM motor commands
 */
OS125_StatusTypeDef OS125_CommandFromSetpoint(ONESHOT125 *OS)
{
 80025d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
	// READ THROTTLE VALUE (MIN_ON - 1 scale)
	OS->throttle = fmin(1.0, fmax(MIN_ON_MULTIPLIER, ((float)OS->IC[0]-1000.0)/1000.0));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	ee07 3a90 	vmov	s15, r3
 80025ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025f2:	ee17 0a90 	vmov	r0, s15
 80025f6:	f7fd ffa7 	bl	8000548 <__aeabi_f2d>
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	4bca      	ldr	r3, [pc, #808]	; (8002928 <OS125_CommandFromSetpoint+0x350>)
 8002600:	f7fd fe42 	bl	8000288 <__aeabi_dsub>
 8002604:	4603      	mov	r3, r0
 8002606:	460c      	mov	r4, r1
 8002608:	4618      	mov	r0, r3
 800260a:	4621      	mov	r1, r4
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	4bc5      	ldr	r3, [pc, #788]	; (8002928 <OS125_CommandFromSetpoint+0x350>)
 8002612:	f7fe f91b 	bl	800084c <__aeabi_ddiv>
 8002616:	4603      	mov	r3, r0
 8002618:	460c      	mov	r4, r1
 800261a:	ec44 3b17 	vmov	d7, r3, r4
 800261e:	eeb0 1a47 	vmov.f32	s2, s14
 8002622:	eef0 1a67 	vmov.f32	s3, s15
 8002626:	ed9f 0bbc 	vldr	d0, [pc, #752]	; 8002918 <OS125_CommandFromSetpoint+0x340>
 800262a:	f00a feb1 	bl	800d390 <fmax>
 800262e:	eeb0 7a40 	vmov.f32	s14, s0
 8002632:	eef0 7a60 	vmov.f32	s15, s1
 8002636:	eeb0 1a47 	vmov.f32	s2, s14
 800263a:	eef0 1a67 	vmov.f32	s3, s15
 800263e:	ed9f 0bb8 	vldr	d0, [pc, #736]	; 8002920 <OS125_CommandFromSetpoint+0x348>
 8002642:	f00a fecc 	bl	800d3de <fmin>
 8002646:	ec54 3b10 	vmov	r3, r4, d0
 800264a:	4618      	mov	r0, r3
 800264c:	4621      	mov	r1, r4
 800264e:	f7fe faab 	bl	8000ba8 <__aeabi_d2f>
 8002652:	4602      	mov	r2, r0
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	611a      	str	r2, [r3, #16]

	// CALCULATE MOTOR SPEEDS AND CONVERT TO CCR
	// MOTOR 1 (TOP RIGHT)
	OS->CCR[0] = fmin(OS->CCR_MAX, fmax(OS->CCR_MIN_ON, OS->CCR_MIN + (int)OS->CCR_STEPS*(OS->throttle - OS->com[0] - OS->com[1] - OS->com[2])));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800265c:	4618      	mov	r0, r3
 800265e:	f7fd ff61 	bl	8000524 <__aeabi_i2d>
 8002662:	4604      	mov	r4, r0
 8002664:	460d      	mov	r5, r1
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266a:	4618      	mov	r0, r3
 800266c:	f7fd ff5a 	bl	8000524 <__aeabi_i2d>
 8002670:	4680      	mov	r8, r0
 8002672:	4689      	mov	r9, r1
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002678:	ee07 3a90 	vmov	s15, r3
 800267c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	ee07 3a90 	vmov	s15, r3
 8002688:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	ed93 6a04 	vldr	s12, [r3, #16]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	edd3 7a00 	vldr	s15, [r3]
 800269a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	3304      	adds	r3, #4
 80026a4:	edd3 7a00 	vldr	s15, [r3]
 80026a8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	3308      	adds	r3, #8
 80026b2:	edd3 7a00 	vldr	s15, [r3]
 80026b6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80026ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026c2:	ee17 0a90 	vmov	r0, s15
 80026c6:	f7fd ff3f 	bl	8000548 <__aeabi_f2d>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	ec43 2b11 	vmov	d1, r2, r3
 80026d2:	ec49 8b10 	vmov	d0, r8, r9
 80026d6:	f00a fe5b 	bl	800d390 <fmax>
 80026da:	eeb0 7a40 	vmov.f32	s14, s0
 80026de:	eef0 7a60 	vmov.f32	s15, s1
 80026e2:	eeb0 1a47 	vmov.f32	s2, s14
 80026e6:	eef0 1a67 	vmov.f32	s3, s15
 80026ea:	ec45 4b10 	vmov	d0, r4, r5
 80026ee:	f00a fe76 	bl	800d3de <fmin>
 80026f2:	ec54 3b10 	vmov	r3, r4, d0
 80026f6:	4618      	mov	r0, r3
 80026f8:	4621      	mov	r1, r4
 80026fa:	f7fe fa2d 	bl	8000b58 <__aeabi_d2iz>
 80026fe:	4602      	mov	r2, r0
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	615a      	str	r2, [r3, #20]
	// MOTOR 2 (TOP LEFT)
	OS->CCR[1] = fmin(OS->CCR_MAX, fmax(OS->CCR_MIN_ON, OS->CCR_MIN + (int)OS->CCR_STEPS*(OS->throttle + OS->com[0] - OS->com[1] + OS->com[2])));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002708:	4618      	mov	r0, r3
 800270a:	f7fd ff0b 	bl	8000524 <__aeabi_i2d>
 800270e:	4604      	mov	r4, r0
 8002710:	460d      	mov	r5, r1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002716:	4618      	mov	r0, r3
 8002718:	f7fd ff04 	bl	8000524 <__aeabi_i2d>
 800271c:	4680      	mov	r8, r0
 800271e:	4689      	mov	r9, r1
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002724:	ee07 3a90 	vmov	s15, r3
 8002728:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	ee07 3a90 	vmov	s15, r3
 8002734:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	ed93 6a04 	vldr	s12, [r3, #16]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	edd3 7a00 	vldr	s15, [r3]
 8002746:	ee36 6a27 	vadd.f32	s12, s12, s15
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	3304      	adds	r3, #4
 8002750:	edd3 7a00 	vldr	s15, [r3]
 8002754:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	3308      	adds	r3, #8
 800275e:	edd3 7a00 	vldr	s15, [r3]
 8002762:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002766:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800276a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800276e:	ee17 0a90 	vmov	r0, s15
 8002772:	f7fd fee9 	bl	8000548 <__aeabi_f2d>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	ec43 2b11 	vmov	d1, r2, r3
 800277e:	ec49 8b10 	vmov	d0, r8, r9
 8002782:	f00a fe05 	bl	800d390 <fmax>
 8002786:	eeb0 7a40 	vmov.f32	s14, s0
 800278a:	eef0 7a60 	vmov.f32	s15, s1
 800278e:	eeb0 1a47 	vmov.f32	s2, s14
 8002792:	eef0 1a67 	vmov.f32	s3, s15
 8002796:	ec45 4b10 	vmov	d0, r4, r5
 800279a:	f00a fe20 	bl	800d3de <fmin>
 800279e:	ec54 3b10 	vmov	r3, r4, d0
 80027a2:	4618      	mov	r0, r3
 80027a4:	4621      	mov	r1, r4
 80027a6:	f7fe f9d7 	bl	8000b58 <__aeabi_d2iz>
 80027aa:	4602      	mov	r2, r0
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	619a      	str	r2, [r3, #24]
	// MOTOR 3 (BOTTOM LEFT)
	OS->CCR[2] = fmin(OS->CCR_MAX, fmax(OS->CCR_MIN_ON, OS->CCR_MIN + (int)OS->CCR_STEPS*(OS->throttle + OS->com[0] + OS->com[1] - OS->com[2])));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fd feb5 	bl	8000524 <__aeabi_i2d>
 80027ba:	4604      	mov	r4, r0
 80027bc:	460d      	mov	r5, r1
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fd feae 	bl	8000524 <__aeabi_i2d>
 80027c8:	4680      	mov	r8, r0
 80027ca:	4689      	mov	r9, r1
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d0:	ee07 3a90 	vmov	s15, r3
 80027d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	ee07 3a90 	vmov	s15, r3
 80027e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	ed93 6a04 	vldr	s12, [r3, #16]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	edd3 7a00 	vldr	s15, [r3]
 80027f2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	3304      	adds	r3, #4
 80027fc:	edd3 7a00 	vldr	s15, [r3]
 8002800:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	3308      	adds	r3, #8
 800280a:	edd3 7a00 	vldr	s15, [r3]
 800280e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002812:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002816:	ee77 7a27 	vadd.f32	s15, s14, s15
 800281a:	ee17 0a90 	vmov	r0, s15
 800281e:	f7fd fe93 	bl	8000548 <__aeabi_f2d>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	ec43 2b11 	vmov	d1, r2, r3
 800282a:	ec49 8b10 	vmov	d0, r8, r9
 800282e:	f00a fdaf 	bl	800d390 <fmax>
 8002832:	eeb0 7a40 	vmov.f32	s14, s0
 8002836:	eef0 7a60 	vmov.f32	s15, s1
 800283a:	eeb0 1a47 	vmov.f32	s2, s14
 800283e:	eef0 1a67 	vmov.f32	s3, s15
 8002842:	ec45 4b10 	vmov	d0, r4, r5
 8002846:	f00a fdca 	bl	800d3de <fmin>
 800284a:	ec54 3b10 	vmov	r3, r4, d0
 800284e:	4618      	mov	r0, r3
 8002850:	4621      	mov	r1, r4
 8002852:	f7fe f981 	bl	8000b58 <__aeabi_d2iz>
 8002856:	4602      	mov	r2, r0
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	61da      	str	r2, [r3, #28]
	// MOTOR 4 (BOTTOM RIGHT)
	OS->CCR[3] = fmin(OS->CCR_MAX, fmax(OS->CCR_MIN_ON, OS->CCR_MIN + (int)OS->CCR_STEPS*(OS->throttle - OS->com[0] + OS->com[1] + OS->com[2])));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002860:	4618      	mov	r0, r3
 8002862:	f7fd fe5f 	bl	8000524 <__aeabi_i2d>
 8002866:	4604      	mov	r4, r0
 8002868:	460d      	mov	r5, r1
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286e:	4618      	mov	r0, r3
 8002870:	f7fd fe58 	bl	8000524 <__aeabi_i2d>
 8002874:	4680      	mov	r8, r0
 8002876:	4689      	mov	r9, r1
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287c:	ee07 3a90 	vmov	s15, r3
 8002880:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	ee07 3a90 	vmov	s15, r3
 800288c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	ed93 6a04 	vldr	s12, [r3, #16]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	edd3 7a00 	vldr	s15, [r3]
 800289e:	ee36 6a67 	vsub.f32	s12, s12, s15
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	3304      	adds	r3, #4
 80028a8:	edd3 7a00 	vldr	s15, [r3]
 80028ac:	ee36 6a27 	vadd.f32	s12, s12, s15
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	3308      	adds	r3, #8
 80028b6:	edd3 7a00 	vldr	s15, [r3]
 80028ba:	ee76 7a27 	vadd.f32	s15, s12, s15
 80028be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028c6:	ee17 0a90 	vmov	r0, s15
 80028ca:	f7fd fe3d 	bl	8000548 <__aeabi_f2d>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	ec43 2b11 	vmov	d1, r2, r3
 80028d6:	ec49 8b10 	vmov	d0, r8, r9
 80028da:	f00a fd59 	bl	800d390 <fmax>
 80028de:	eeb0 7a40 	vmov.f32	s14, s0
 80028e2:	eef0 7a60 	vmov.f32	s15, s1
 80028e6:	eeb0 1a47 	vmov.f32	s2, s14
 80028ea:	eef0 1a67 	vmov.f32	s3, s15
 80028ee:	ec45 4b10 	vmov	d0, r4, r5
 80028f2:	f00a fd74 	bl	800d3de <fmin>
 80028f6:	ec54 3b10 	vmov	r3, r4, d0
 80028fa:	4618      	mov	r0, r3
 80028fc:	4621      	mov	r1, r4
 80028fe:	f7fe f92b 	bl	8000b58 <__aeabi_d2iz>
 8002902:	4602      	mov	r2, r0
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	621a      	str	r2, [r3, #32]

	return OS125_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002914:	f3af 8000 	nop.w
 8002918:	9999999a 	.word	0x9999999a
 800291c:	3fb99999 	.word	0x3fb99999
 8002920:	00000000 	.word	0x00000000
 8002924:	3ff00000 	.word	0x3ff00000
 8002928:	408f4000 	.word	0x408f4000
 800292c:	00000000 	.word	0x00000000

08002930 <OS125_ThrottlePassThrough>:
/*
 * ONESHOT125 THROTTLE PASSTHROUGH FUNCTION
 * Disregards PID controller and just passes through the throttle input
 */
OS125_StatusTypeDef OS125_ThrottlePassThrough(ONESHOT125 *OS)
{
 8002930:	b590      	push	{r4, r7, lr}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
	OS->throttle = fmin(1.0, fmax(0.0, ((float)OS->IC[0]-1000.0))/1000.0);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	b29b      	uxth	r3, r3
 8002940:	ee07 3a90 	vmov	s15, r3
 8002944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002948:	ee17 0a90 	vmov	r0, s15
 800294c:	f7fd fdfc 	bl	8000548 <__aeabi_f2d>
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	4b2e      	ldr	r3, [pc, #184]	; (8002a10 <OS125_ThrottlePassThrough+0xe0>)
 8002956:	f7fd fc97 	bl	8000288 <__aeabi_dsub>
 800295a:	4603      	mov	r3, r0
 800295c:	460c      	mov	r4, r1
 800295e:	ec44 3b17 	vmov	d7, r3, r4
 8002962:	eeb0 1a47 	vmov.f32	s2, s14
 8002966:	eef0 1a67 	vmov.f32	s3, s15
 800296a:	ed9f 0b25 	vldr	d0, [pc, #148]	; 8002a00 <OS125_ThrottlePassThrough+0xd0>
 800296e:	f00a fd0f 	bl	800d390 <fmax>
 8002972:	ec51 0b10 	vmov	r0, r1, d0
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	4b25      	ldr	r3, [pc, #148]	; (8002a10 <OS125_ThrottlePassThrough+0xe0>)
 800297c:	f7fd ff66 	bl	800084c <__aeabi_ddiv>
 8002980:	4603      	mov	r3, r0
 8002982:	460c      	mov	r4, r1
 8002984:	ec44 3b17 	vmov	d7, r3, r4
 8002988:	eeb0 1a47 	vmov.f32	s2, s14
 800298c:	eef0 1a67 	vmov.f32	s3, s15
 8002990:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 8002a08 <OS125_ThrottlePassThrough+0xd8>
 8002994:	f00a fd23 	bl	800d3de <fmin>
 8002998:	ec54 3b10 	vmov	r3, r4, d0
 800299c:	4618      	mov	r0, r3
 800299e:	4621      	mov	r1, r4
 80029a0:	f7fe f902 	bl	8000ba8 <__aeabi_d2f>
 80029a4:	4602      	mov	r2, r0
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	611a      	str	r2, [r3, #16]
	for (int i = 0; i < 4; i++)
 80029aa:	2300      	movs	r3, #0
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	e01f      	b.n	80029f0 <OS125_ThrottlePassThrough+0xc0>
	{
		OS->CCR[i] = OS->CCR_MIN + (int)OS->CCR_STEPS*OS->throttle;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b4:	ee07 3a90 	vmov	s15, r3
 80029b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	ee07 3a90 	vmov	s15, r3
 80029c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	edd3 7a04 	vldr	s15, [r3, #16]
 80029ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029da:	ee17 1a90 	vmov	r1, s15
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	3304      	adds	r3, #4
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	6059      	str	r1, [r3, #4]
	for (int i = 0; i < 4; i++)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	3301      	adds	r3, #1
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	dddc      	ble.n	80029b0 <OS125_ThrottlePassThrough+0x80>
	}

	return OS125_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd90      	pop	{r4, r7, pc}
	...
 8002a0c:	3ff00000 	.word	0x3ff00000
 8002a10:	408f4000 	.word	0x408f4000

08002a14 <OS125_UpdateCCR>:
/*
 * ONESHOT125 SET OUTPUT DIRECT FUNCTION
 * Updates timer CCR registers according to internal CCR array
 */
OS125_StatusTypeDef OS125_UpdateCCR(ONESHOT125 *OS)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
	OS->TIM->CCR1 = OS->CCR[0];
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	695a      	ldr	r2, [r3, #20]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	635a      	str	r2, [r3, #52]	; 0x34
	OS->TIM->CCR2 = OS->CCR[1];
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699a      	ldr	r2, [r3, #24]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	639a      	str	r2, [r3, #56]	; 0x38
	OS->TIM->CCR3 = OS->CCR[2];
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69da      	ldr	r2, [r3, #28]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	63da      	str	r2, [r3, #60]	; 0x3c
	OS->TIM->CCR4 = OS->CCR[3];
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1a      	ldr	r2, [r3, #32]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	641a      	str	r2, [r3, #64]	; 0x40

	return OS125_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <OS125_Disarm>:
/*
 * ONESHOT125 ALL OUTPUTS OFF FUNCTION
 * ENSURES THAT ALL MOTORS ARE OFF
 */
OS125_StatusTypeDef OS125_Disarm(ONESHOT125 *OS)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
	OS->TIM->CCR1 = OS->CCR_MIN;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	635a      	str	r2, [r3, #52]	; 0x34
	OS->TIM->CCR2 = OS->CCR_MIN;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	639a      	str	r2, [r3, #56]	; 0x38
	OS->TIM->CCR3 = OS->CCR_MIN;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	63da      	str	r2, [r3, #60]	; 0x3c
	OS->TIM->CCR4 = OS->CCR_MIN;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	641a      	str	r2, [r3, #64]	; 0x40

	return OS125_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <QUAD_Init>:

#include "quad.h"

/* INITIALIZE QUAD ROTOR STRUCT */
void QUAD_Init(QUAD *quad)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
	// SET DEFAULT RATES
	quad->RATES[0] = X_DEFAULT_RATE; quad->RATES[1] = Y_DEFAULT_RATE; quad->RATES[2] = Z_DEFAULT_RATE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a18      	ldr	r2, [pc, #96]	; (8002afc <QUAD_Init+0x6c>)
 8002a9c:	615a      	str	r2, [r3, #20]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a16      	ldr	r2, [pc, #88]	; (8002afc <QUAD_Init+0x6c>)
 8002aa2:	619a      	str	r2, [r3, #24]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a16      	ldr	r2, [pc, #88]	; (8002b00 <QUAD_Init+0x70>)
 8002aa8:	61da      	str	r2, [r3, #28]

	// CLEAR MEASURED ROTATION
	quad->rot[0] = 0.0; quad->rot[1] = 0.0; quad->rot[2] = 0.0;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	621a      	str	r2, [r3, #32]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f04f 0200 	mov.w	r2, #0
 8002ab8:	625a      	str	r2, [r3, #36]	; 0x24
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	629a      	str	r2, [r3, #40]	; 0x28

	// CLEAR SETPOINT
	quad->set[0] = 0.0; quad->set[1] = 0.0; quad->set[2] = 0.0;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	635a      	str	r2, [r3, #52]	; 0x34

	// SET NORMAL OPERATION MODE
	quad->TEST_MODE = 0x0;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	// GET FIRST TIME MEASUREMENT
	quad->tprev = __HAL_TIM_GET_COUNTER(quad->htim);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	821a      	strh	r2, [r3, #16]
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	40a00000 	.word	0x40a00000
 8002b00:	40400000 	.word	0x40400000

08002b04 <QUAD_Clear>:

/* CLEAR STATE FUNCTION */
void QUAD_Clear(QUAD *quad)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
	// CLEAR MEASURED ROTATION
	quad->rot[0] = 0.0; quad->rot[1] = 0.0; quad->rot[2] = 0.0;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f04f 0200 	mov.w	r2, #0
 8002b12:	621a      	str	r2, [r3, #32]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	625a      	str	r2, [r3, #36]	; 0x24
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f04f 0200 	mov.w	r2, #0
 8002b22:	629a      	str	r2, [r3, #40]	; 0x28

	// CLEAR SETPOINT
	quad->set[0] = 0.0; quad->set[1] = 0.0; quad->set[2] = 0.0;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	631a      	str	r2, [r3, #48]	; 0x30
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f04f 0200 	mov.w	r2, #0
 8002b3a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <QUAD_UPDATE>:

/* UPDATE PROCEDURE */
void QUAD_UPDATE(QUAD *quad, volatile uint16_t *IC)
{
 8002b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b4c:	b085      	sub	sp, #20
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	6039      	str	r1, [r7, #0]
	// UPDATE TIMER
	quad->telapsed = __HAL_TIM_GET_COUNTER(quad->htim) - quad->tprev;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	8a1b      	ldrh	r3, [r3, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	825a      	strh	r2, [r3, #18]
	quad->tprev    = quad->tprev + quad->telapsed;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	8a1a      	ldrh	r2, [r3, #16]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	8a5b      	ldrh	r3, [r3, #18]
 8002b72:	4413      	add	r3, r2
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	821a      	strh	r2, [r3, #16]

	// CHECK IF ARMED
	if (IC[ARM_CHANNEL] > 1500)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	3308      	adds	r3, #8
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002b86:	4293      	cmp	r3, r2
 8002b88:	f240 8169 	bls.w	8002e5e <QUAD_UPDATE+0x316>
	{
		// SET ARM_STATUS FLAG
		quad->ARM_STATUS = 0x1;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

		// READ GYROSCOPE
		if ( BMI088_I2C_Read_Gyro(quad->hi2c, quad->gyro_buf) != HAL_OK ) { Error_Handler(); }
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	333a      	adds	r3, #58	; 0x3a
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	f7fe fa7d 	bl	800109e <BMI088_I2C_Read_Gyro>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <QUAD_UPDATE+0x66>
 8002baa:	f7ff fc3f 	bl	800242c <Error_Handler>

		// CONVERT TO SIGNED INTEGER, SCALE, AND INTEGRATE
		for (int i = 0; i < 3; i++)
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	e086      	b.n	8002cc2 <QUAD_UPDATE+0x17a>
		{
			quad->temp_i       = quad->gyro_buf[2*i + 1] << 8 | quad->gyro_buf[2*i];
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	3301      	adds	r3, #1
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002bc2:	021b      	lsls	r3, r3, #8
 8002bc4:	b21a      	sxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	440b      	add	r3, r1
 8002bce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002bd2:	b21b      	sxth	r3, r3
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	b21a      	sxth	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
			quad->gyro_rate[i] = ((float)quad->temp_i*GYRO_RATE*M_PI)/(32767.0*180.0);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
 8002be4:	ee07 3a90 	vmov	s15, r3
 8002be8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bec:	ee17 0a90 	vmov	r0, s15
 8002bf0:	f7fd fcaa 	bl	8000548 <__aeabi_f2d>
 8002bf4:	f04f 0200 	mov.w	r2, #0
 8002bf8:	4bad      	ldr	r3, [pc, #692]	; (8002eb0 <QUAD_UPDATE+0x368>)
 8002bfa:	f7fd fcfd 	bl	80005f8 <__aeabi_dmul>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	460c      	mov	r4, r1
 8002c02:	4618      	mov	r0, r3
 8002c04:	4621      	mov	r1, r4
 8002c06:	a3a2      	add	r3, pc, #648	; (adr r3, 8002e90 <QUAD_UPDATE+0x348>)
 8002c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0c:	f7fd fcf4 	bl	80005f8 <__aeabi_dmul>
 8002c10:	4603      	mov	r3, r0
 8002c12:	460c      	mov	r4, r1
 8002c14:	4618      	mov	r0, r3
 8002c16:	4621      	mov	r1, r4
 8002c18:	a39f      	add	r3, pc, #636	; (adr r3, 8002e98 <QUAD_UPDATE+0x350>)
 8002c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1e:	f7fd fe15 	bl	800084c <__aeabi_ddiv>
 8002c22:	4603      	mov	r3, r0
 8002c24:	460c      	mov	r4, r1
 8002c26:	4618      	mov	r0, r3
 8002c28:	4621      	mov	r1, r4
 8002c2a:	f7fd ffbd 	bl	8000ba8 <__aeabi_d2f>
 8002c2e:	4601      	mov	r1, r0
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	3320      	adds	r3, #32
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	6019      	str	r1, [r3, #0]
			quad->rot[i]       = quad->rot[i] + 0.000001*(float)quad->telapsed*quad->gyro_rate[i];
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	3308      	adds	r3, #8
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4413      	add	r3, r2
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7fd fc7d 	bl	8000548 <__aeabi_f2d>
 8002c4e:	4604      	mov	r4, r0
 8002c50:	460d      	mov	r5, r1
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	8a5b      	ldrh	r3, [r3, #18]
 8002c56:	ee07 3a90 	vmov	s15, r3
 8002c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c5e:	ee17 0a90 	vmov	r0, s15
 8002c62:	f7fd fc71 	bl	8000548 <__aeabi_f2d>
 8002c66:	a38e      	add	r3, pc, #568	; (adr r3, 8002ea0 <QUAD_UPDATE+0x358>)
 8002c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6c:	f7fd fcc4 	bl	80005f8 <__aeabi_dmul>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4690      	mov	r8, r2
 8002c76:	4699      	mov	r9, r3
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	3320      	adds	r3, #32
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7fd fc5f 	bl	8000548 <__aeabi_f2d>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4640      	mov	r0, r8
 8002c90:	4649      	mov	r1, r9
 8002c92:	f7fd fcb1 	bl	80005f8 <__aeabi_dmul>
 8002c96:	4602      	mov	r2, r0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	4629      	mov	r1, r5
 8002c9e:	f7fd faf5 	bl	800028c <__adddf3>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	460c      	mov	r4, r1
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	4621      	mov	r1, r4
 8002caa:	f7fd ff7d 	bl	8000ba8 <__aeabi_d2f>
 8002cae:	4601      	mov	r1, r0
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	3308      	adds	r3, #8
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	6019      	str	r1, [r3, #0]
		for (int i = 0; i < 3; i++)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	f77f af75 	ble.w	8002bb4 <QUAD_UPDATE+0x6c>
		}

		// UPDATE ROTATION SETPOINT
		for (int i = 0; i < 3; i++)
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	e082      	b.n	8002dd6 <QUAD_UPDATE+0x28e>
		{
			quad->stick_rate[i] = quad->RATES[i]*((float)IC[i+1] - 1500.0)/500.0;
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	3304      	adds	r3, #4
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fd fc32 	bl	8000548 <__aeabi_f2d>
 8002ce4:	4604      	mov	r4, r0
 8002ce6:	460d      	mov	r5, r1
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	3301      	adds	r3, #1
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	881b      	ldrh	r3, [r3, #0]
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	ee07 3a90 	vmov	s15, r3
 8002cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cfe:	ee17 0a90 	vmov	r0, s15
 8002d02:	f7fd fc21 	bl	8000548 <__aeabi_f2d>
 8002d06:	a368      	add	r3, pc, #416	; (adr r3, 8002ea8 <QUAD_UPDATE+0x360>)
 8002d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0c:	f7fd fabc 	bl	8000288 <__aeabi_dsub>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4620      	mov	r0, r4
 8002d16:	4629      	mov	r1, r5
 8002d18:	f7fd fc6e 	bl	80005f8 <__aeabi_dmul>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	460c      	mov	r4, r1
 8002d20:	4618      	mov	r0, r3
 8002d22:	4621      	mov	r1, r4
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	4b62      	ldr	r3, [pc, #392]	; (8002eb4 <QUAD_UPDATE+0x36c>)
 8002d2a:	f7fd fd8f 	bl	800084c <__aeabi_ddiv>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	460c      	mov	r4, r1
 8002d32:	4618      	mov	r0, r3
 8002d34:	4621      	mov	r1, r4
 8002d36:	f7fd ff37 	bl	8000ba8 <__aeabi_d2f>
 8002d3a:	4601      	mov	r1, r0
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	3322      	adds	r3, #34	; 0x22
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	3304      	adds	r3, #4
 8002d48:	6019      	str	r1, [r3, #0]
			quad->set[i]        = quad->set[i] + 0.000001*(float)quad->telapsed*quad->stick_rate[i];
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	330a      	adds	r3, #10
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	3304      	adds	r3, #4
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fd fbf5 	bl	8000548 <__aeabi_f2d>
 8002d5e:	4604      	mov	r4, r0
 8002d60:	460d      	mov	r5, r1
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	8a5b      	ldrh	r3, [r3, #18]
 8002d66:	ee07 3a90 	vmov	s15, r3
 8002d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d6e:	ee17 0a90 	vmov	r0, s15
 8002d72:	f7fd fbe9 	bl	8000548 <__aeabi_f2d>
 8002d76:	a34a      	add	r3, pc, #296	; (adr r3, 8002ea0 <QUAD_UPDATE+0x358>)
 8002d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7c:	f7fd fc3c 	bl	80005f8 <__aeabi_dmul>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4690      	mov	r8, r2
 8002d86:	4699      	mov	r9, r3
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	3322      	adds	r3, #34	; 0x22
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	3304      	adds	r3, #4
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fd fbd6 	bl	8000548 <__aeabi_f2d>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4640      	mov	r0, r8
 8002da2:	4649      	mov	r1, r9
 8002da4:	f7fd fc28 	bl	80005f8 <__aeabi_dmul>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	4620      	mov	r0, r4
 8002dae:	4629      	mov	r1, r5
 8002db0:	f7fd fa6c 	bl	800028c <__adddf3>
 8002db4:	4603      	mov	r3, r0
 8002db6:	460c      	mov	r4, r1
 8002db8:	4618      	mov	r0, r3
 8002dba:	4621      	mov	r1, r4
 8002dbc:	f7fd fef4 	bl	8000ba8 <__aeabi_d2f>
 8002dc0:	4601      	mov	r1, r0
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	330a      	adds	r3, #10
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	3304      	adds	r3, #4
 8002dce:	6019      	str	r1, [r3, #0]
		for (int i = 0; i < 3; i++)
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	60bb      	str	r3, [r7, #8]
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	f77f af79 	ble.w	8002cd0 <QUAD_UPDATE+0x188>
		}

		// ITERATE PID ALGORITHM
		if (PID3_Update(quad->PID, quad->set, quad->rot, 0.000001*(float)quad->telapsed) != PID_OK) { Error_Handler(); }
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68dc      	ldr	r4, [r3, #12]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f103 0620 	add.w	r6, r3, #32
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	8a5b      	ldrh	r3, [r3, #18]
 8002df2:	ee07 3a90 	vmov	s15, r3
 8002df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dfa:	ee17 0a90 	vmov	r0, s15
 8002dfe:	f7fd fba3 	bl	8000548 <__aeabi_f2d>
 8002e02:	a327      	add	r3, pc, #156	; (adr r3, 8002ea0 <QUAD_UPDATE+0x358>)
 8002e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e08:	f7fd fbf6 	bl	80005f8 <__aeabi_dmul>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4610      	mov	r0, r2
 8002e12:	4619      	mov	r1, r3
 8002e14:	f7fd fec8 	bl	8000ba8 <__aeabi_d2f>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	ee00 3a10 	vmov	s0, r3
 8002e1e:	4632      	mov	r2, r6
 8002e20:	4629      	mov	r1, r5
 8002e22:	4620      	mov	r0, r4
 8002e24:	f7fe fabe 	bl	80013a4 <PID3_Update>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <QUAD_UPDATE+0x2ea>
 8002e2e:	f7ff fafd 	bl	800242c <Error_Handler>

		// CHECK IF WE ARE IN TEST MODE
		if (quad->TEST_MODE == 0x1) { OS125_ThrottlePassThrough(quad->OS); }
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d105      	bne.n	8002e48 <QUAD_UPDATE+0x300>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff fd75 	bl	8002930 <OS125_ThrottlePassThrough>
 8002e46:	e004      	b.n	8002e52 <QUAD_UPDATE+0x30a>
		// OTHERWISE CALCULATE COMMAND FROM PID OUTPUT
		else						{ OS125_CommandFromSetpoint(quad->OS); }
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff fbc3 	bl	80025d8 <OS125_CommandFromSetpoint>

		// UPDATE THE MOTOR OUTPUTS
		OS125_UpdateCCR(quad->OS);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff fddc 	bl	8002a14 <OS125_UpdateCCR>
		QUAD_Clear(quad);
		PID3_Clear(quad->PID);
		OS125_Disarm(quad->OS);
	}

}
 8002e5c:	e010      	b.n	8002e80 <QUAD_UPDATE+0x338>
		quad->ARM_STATUS = 0x0;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		QUAD_Clear(quad);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7ff fe4c 	bl	8002b04 <QUAD_Clear>
		PID3_Clear(quad->PID);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7fe f9e1 	bl	8001238 <PID3_Clear>
		OS125_Disarm(quad->OS);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff fde9 	bl	8002a52 <OS125_Disarm>
}
 8002e80:	bf00      	nop
 8002e82:	3714      	adds	r7, #20
 8002e84:	46bd      	mov	sp, r7
 8002e86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e8a:	bf00      	nop
 8002e8c:	f3af 8000 	nop.w
 8002e90:	54442d18 	.word	0x54442d18
 8002e94:	400921fb 	.word	0x400921fb
 8002e98:	00000000 	.word	0x00000000
 8002e9c:	41567fd3 	.word	0x41567fd3
 8002ea0:	a0b5ed8d 	.word	0xa0b5ed8d
 8002ea4:	3eb0c6f7 	.word	0x3eb0c6f7
 8002ea8:	00000000 	.word	0x00000000
 8002eac:	40977000 	.word	0x40977000
 8002eb0:	409f4000 	.word	0x409f4000
 8002eb4:	407f4000 	.word	0x407f4000

08002eb8 <QUAD_SEND_ORIENTATION>:

/* SEND ORIENTATION OVER SERIAL */
void QUAD_SEND_ORIENTATION(QUAD *quad)
{
 8002eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ebc:	b093      	sub	sp, #76	; 0x4c
 8002ebe:	af0c      	add	r7, sp, #48	; 0x30
 8002ec0:	6178      	str	r0, [r7, #20]
	// SEND ORIENTATION DATA OVER VIRTUAL COM PORT
	// DATA FORMAT: [X ANGLE]    [Y ANGLE]    [Z ANGLE]    [OTHER]
	sprintf(quad->tx_buf, "%f\t%f\t%f\t%f\t%f\t%f\t%i\n", quad->set[0], quad->set[1], quad->set[2], quad->PID->out[0], quad->PID->out[1], quad->PID->out[2], quad->TEST_MODE);
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f103 0640 	add.w	r6, r3, #64	; 0x40
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fd fb3b 	bl	8000548 <__aeabi_f2d>
 8002ed2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fd fb34 	bl	8000548 <__aeabi_f2d>
 8002ee0:	4604      	mov	r4, r0
 8002ee2:	460d      	mov	r5, r1
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fd fb2d 	bl	8000548 <__aeabi_f2d>
 8002eee:	4680      	mov	r8, r0
 8002ef0:	4689      	mov	r9, r1
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7fd fb25 	bl	8000548 <__aeabi_f2d>
 8002efe:	4682      	mov	sl, r0
 8002f00:	468b      	mov	fp, r1
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fd fb1d 	bl	8000548 <__aeabi_f2d>
 8002f0e:	e9c7 0100 	strd	r0, r1, [r7]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fd fb15 	bl	8000548 <__aeabi_f2d>
 8002f1e:	460a      	mov	r2, r1
 8002f20:	4601      	mov	r1, r0
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f28:	930a      	str	r3, [sp, #40]	; 0x28
 8002f2a:	e9cd 1208 	strd	r1, r2, [sp, #32]
 8002f2e:	ed97 7b00 	vldr	d7, [r7]
 8002f32:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002f36:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002f3a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002f3e:	e9cd 4500 	strd	r4, r5, [sp]
 8002f42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f46:	4913      	ldr	r1, [pc, #76]	; (8002f94 <QUAD_SEND_ORIENTATION+0xdc>)
 8002f48:	4630      	mov	r0, r6
 8002f4a:	f008 fdfd 	bl	800bb48 <siprintf>
	CDC_Transmit_FS((uint8_t*)(quad->tx_buf), strlen(quad->tx_buf));
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	3340      	adds	r3, #64	; 0x40
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fd f939 	bl	80001d0 <strlen>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	4619      	mov	r1, r3
 8002f64:	4620      	mov	r0, r4
 8002f66:	f007 fc57 	bl	800a818 <CDC_Transmit_FS>

	// ALSO CHECK IF WE NEED TO UPDATE ARM_STATUS LED
	if (quad->ARM_STATUS == 1) { HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET); }
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d105      	bne.n	8002f80 <QUAD_SEND_ORIENTATION+0xc8>
 8002f74:	2201      	movs	r2, #1
 8002f76:	2180      	movs	r1, #128	; 0x80
 8002f78:	4807      	ldr	r0, [pc, #28]	; (8002f98 <QUAD_SEND_ORIENTATION+0xe0>)
 8002f7a:	f000 fdd1 	bl	8003b20 <HAL_GPIO_WritePin>
	else { HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET); }
}
 8002f7e:	e004      	b.n	8002f8a <QUAD_SEND_ORIENTATION+0xd2>
	else { HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET); }
 8002f80:	2200      	movs	r2, #0
 8002f82:	2180      	movs	r1, #128	; 0x80
 8002f84:	4804      	ldr	r0, [pc, #16]	; (8002f98 <QUAD_SEND_ORIENTATION+0xe0>)
 8002f86:	f000 fdcb 	bl	8003b20 <HAL_GPIO_WritePin>
}
 8002f8a:	bf00      	nop
 8002f8c:	371c      	adds	r7, #28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f94:	0800d4a8 	.word	0x0800d4a8
 8002f98:	40020800 	.word	0x40020800

08002f9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	607b      	str	r3, [r7, #4]
 8002fa6:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <HAL_MspInit+0x4c>)
 8002fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002faa:	4a0f      	ldr	r2, [pc, #60]	; (8002fe8 <HAL_MspInit+0x4c>)
 8002fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fb2:	4b0d      	ldr	r3, [pc, #52]	; (8002fe8 <HAL_MspInit+0x4c>)
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fba:	607b      	str	r3, [r7, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	603b      	str	r3, [r7, #0]
 8002fc2:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <HAL_MspInit+0x4c>)
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	4a08      	ldr	r2, [pc, #32]	; (8002fe8 <HAL_MspInit+0x4c>)
 8002fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8002fce:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <HAL_MspInit+0x4c>)
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd6:	603b      	str	r3, [r7, #0]
 8002fd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40023800 	.word	0x40023800

08002fec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b08a      	sub	sp, #40	; 0x28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff4:	f107 0314 	add.w	r3, r7, #20
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	605a      	str	r2, [r3, #4]
 8002ffe:	609a      	str	r2, [r3, #8]
 8003000:	60da      	str	r2, [r3, #12]
 8003002:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a19      	ldr	r2, [pc, #100]	; (8003070 <HAL_I2C_MspInit+0x84>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d12c      	bne.n	8003068 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	4b18      	ldr	r3, [pc, #96]	; (8003074 <HAL_I2C_MspInit+0x88>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	4a17      	ldr	r2, [pc, #92]	; (8003074 <HAL_I2C_MspInit+0x88>)
 8003018:	f043 0302 	orr.w	r3, r3, #2
 800301c:	6313      	str	r3, [r2, #48]	; 0x30
 800301e:	4b15      	ldr	r3, [pc, #84]	; (8003074 <HAL_I2C_MspInit+0x88>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	613b      	str	r3, [r7, #16]
 8003028:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800302a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800302e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003030:	2312      	movs	r3, #18
 8003032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003034:	2301      	movs	r3, #1
 8003036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003038:	2303      	movs	r3, #3
 800303a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800303c:	2304      	movs	r3, #4
 800303e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003040:	f107 0314 	add.w	r3, r7, #20
 8003044:	4619      	mov	r1, r3
 8003046:	480c      	ldr	r0, [pc, #48]	; (8003078 <HAL_I2C_MspInit+0x8c>)
 8003048:	f000 fbd0 	bl	80037ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800304c:	2300      	movs	r3, #0
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	4b08      	ldr	r3, [pc, #32]	; (8003074 <HAL_I2C_MspInit+0x88>)
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	4a07      	ldr	r2, [pc, #28]	; (8003074 <HAL_I2C_MspInit+0x88>)
 8003056:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800305a:	6413      	str	r3, [r2, #64]	; 0x40
 800305c:	4b05      	ldr	r3, [pc, #20]	; (8003074 <HAL_I2C_MspInit+0x88>)
 800305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003068:	bf00      	nop
 800306a:	3728      	adds	r7, #40	; 0x28
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40005400 	.word	0x40005400
 8003074:	40023800 	.word	0x40023800
 8003078:	40020400 	.word	0x40020400

0800307c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800308c:	d10d      	bne.n	80030aa <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800308e:	2300      	movs	r3, #0
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	4b09      	ldr	r3, [pc, #36]	; (80030b8 <HAL_TIM_PWM_MspInit+0x3c>)
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	4a08      	ldr	r2, [pc, #32]	; (80030b8 <HAL_TIM_PWM_MspInit+0x3c>)
 8003098:	f043 0301 	orr.w	r3, r3, #1
 800309c:	6413      	str	r3, [r2, #64]	; 0x40
 800309e:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <HAL_TIM_PWM_MspInit+0x3c>)
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80030aa:	bf00      	nop
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40023800 	.word	0x40023800

080030bc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08c      	sub	sp, #48	; 0x30
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c4:	f107 031c 	add.w	r3, r7, #28
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	605a      	str	r2, [r3, #4]
 80030ce:	609a      	str	r2, [r3, #8]
 80030d0:	60da      	str	r2, [r3, #12]
 80030d2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a49      	ldr	r2, [pc, #292]	; (8003200 <HAL_TIM_IC_MspInit+0x144>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d152      	bne.n	8003184 <HAL_TIM_IC_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	61bb      	str	r3, [r7, #24]
 80030e2:	4b48      	ldr	r3, [pc, #288]	; (8003204 <HAL_TIM_IC_MspInit+0x148>)
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	4a47      	ldr	r2, [pc, #284]	; (8003204 <HAL_TIM_IC_MspInit+0x148>)
 80030e8:	f043 0302 	orr.w	r3, r3, #2
 80030ec:	6413      	str	r3, [r2, #64]	; 0x40
 80030ee:	4b45      	ldr	r3, [pc, #276]	; (8003204 <HAL_TIM_IC_MspInit+0x148>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	61bb      	str	r3, [r7, #24]
 80030f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	617b      	str	r3, [r7, #20]
 80030fe:	4b41      	ldr	r3, [pc, #260]	; (8003204 <HAL_TIM_IC_MspInit+0x148>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	4a40      	ldr	r2, [pc, #256]	; (8003204 <HAL_TIM_IC_MspInit+0x148>)
 8003104:	f043 0301 	orr.w	r3, r3, #1
 8003108:	6313      	str	r3, [r2, #48]	; 0x30
 800310a:	4b3e      	ldr	r3, [pc, #248]	; (8003204 <HAL_TIM_IC_MspInit+0x148>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	617b      	str	r3, [r7, #20]
 8003114:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003116:	2300      	movs	r3, #0
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	4b3a      	ldr	r3, [pc, #232]	; (8003204 <HAL_TIM_IC_MspInit+0x148>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	4a39      	ldr	r2, [pc, #228]	; (8003204 <HAL_TIM_IC_MspInit+0x148>)
 8003120:	f043 0302 	orr.w	r3, r3, #2
 8003124:	6313      	str	r3, [r2, #48]	; 0x30
 8003126:	4b37      	ldr	r3, [pc, #220]	; (8003204 <HAL_TIM_IC_MspInit+0x148>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	613b      	str	r3, [r7, #16]
 8003130:	693b      	ldr	r3, [r7, #16]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003132:	23c0      	movs	r3, #192	; 0xc0
 8003134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003136:	2302      	movs	r3, #2
 8003138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313a:	2300      	movs	r3, #0
 800313c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800313e:	2300      	movs	r3, #0
 8003140:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003142:	2302      	movs	r3, #2
 8003144:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003146:	f107 031c 	add.w	r3, r7, #28
 800314a:	4619      	mov	r1, r3
 800314c:	482e      	ldr	r0, [pc, #184]	; (8003208 <HAL_TIM_IC_MspInit+0x14c>)
 800314e:	f000 fb4d 	bl	80037ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003152:	2303      	movs	r3, #3
 8003154:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003156:	2302      	movs	r3, #2
 8003158:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315a:	2300      	movs	r3, #0
 800315c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315e:	2300      	movs	r3, #0
 8003160:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003162:	2302      	movs	r3, #2
 8003164:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003166:	f107 031c 	add.w	r3, r7, #28
 800316a:	4619      	mov	r1, r3
 800316c:	4827      	ldr	r0, [pc, #156]	; (800320c <HAL_TIM_IC_MspInit+0x150>)
 800316e:	f000 fb3d 	bl	80037ec <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003172:	2200      	movs	r2, #0
 8003174:	2100      	movs	r1, #0
 8003176:	201d      	movs	r0, #29
 8003178:	f000 fb01 	bl	800377e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800317c:	201d      	movs	r0, #29
 800317e:	f000 fb1a 	bl	80037b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003182:	e038      	b.n	80031f6 <HAL_TIM_IC_MspInit+0x13a>
  else if(htim_ic->Instance==TIM4)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a21      	ldr	r2, [pc, #132]	; (8003210 <HAL_TIM_IC_MspInit+0x154>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d133      	bne.n	80031f6 <HAL_TIM_IC_MspInit+0x13a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	4b1c      	ldr	r3, [pc, #112]	; (8003204 <HAL_TIM_IC_MspInit+0x148>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	4a1b      	ldr	r2, [pc, #108]	; (8003204 <HAL_TIM_IC_MspInit+0x148>)
 8003198:	f043 0304 	orr.w	r3, r3, #4
 800319c:	6413      	str	r3, [r2, #64]	; 0x40
 800319e:	4b19      	ldr	r3, [pc, #100]	; (8003204 <HAL_TIM_IC_MspInit+0x148>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031aa:	2300      	movs	r3, #0
 80031ac:	60bb      	str	r3, [r7, #8]
 80031ae:	4b15      	ldr	r3, [pc, #84]	; (8003204 <HAL_TIM_IC_MspInit+0x148>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	4a14      	ldr	r2, [pc, #80]	; (8003204 <HAL_TIM_IC_MspInit+0x148>)
 80031b4:	f043 0302 	orr.w	r3, r3, #2
 80031b8:	6313      	str	r3, [r2, #48]	; 0x30
 80031ba:	4b12      	ldr	r3, [pc, #72]	; (8003204 <HAL_TIM_IC_MspInit+0x148>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	60bb      	str	r3, [r7, #8]
 80031c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80031c6:	23c0      	movs	r3, #192	; 0xc0
 80031c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ca:	2302      	movs	r3, #2
 80031cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ce:	2300      	movs	r3, #0
 80031d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d2:	2300      	movs	r3, #0
 80031d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80031d6:	2302      	movs	r3, #2
 80031d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031da:	f107 031c 	add.w	r3, r7, #28
 80031de:	4619      	mov	r1, r3
 80031e0:	480a      	ldr	r0, [pc, #40]	; (800320c <HAL_TIM_IC_MspInit+0x150>)
 80031e2:	f000 fb03 	bl	80037ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80031e6:	2200      	movs	r2, #0
 80031e8:	2100      	movs	r1, #0
 80031ea:	201e      	movs	r0, #30
 80031ec:	f000 fac7 	bl	800377e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80031f0:	201e      	movs	r0, #30
 80031f2:	f000 fae0 	bl	80037b6 <HAL_NVIC_EnableIRQ>
}
 80031f6:	bf00      	nop
 80031f8:	3730      	adds	r7, #48	; 0x30
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40000400 	.word	0x40000400
 8003204:	40023800 	.word	0x40023800
 8003208:	40020000 	.word	0x40020000
 800320c:	40020400 	.word	0x40020400
 8003210:	40000800 	.word	0x40000800

08003214 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a18      	ldr	r2, [pc, #96]	; (8003284 <HAL_TIM_Base_MspInit+0x70>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d10e      	bne.n	8003244 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	4b17      	ldr	r3, [pc, #92]	; (8003288 <HAL_TIM_Base_MspInit+0x74>)
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	4a16      	ldr	r2, [pc, #88]	; (8003288 <HAL_TIM_Base_MspInit+0x74>)
 8003230:	f043 0310 	orr.w	r3, r3, #16
 8003234:	6413      	str	r3, [r2, #64]	; 0x40
 8003236:	4b14      	ldr	r3, [pc, #80]	; (8003288 <HAL_TIM_Base_MspInit+0x74>)
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	f003 0310 	and.w	r3, r3, #16
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003242:	e01a      	b.n	800327a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a10      	ldr	r2, [pc, #64]	; (800328c <HAL_TIM_Base_MspInit+0x78>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d115      	bne.n	800327a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	60bb      	str	r3, [r7, #8]
 8003252:	4b0d      	ldr	r3, [pc, #52]	; (8003288 <HAL_TIM_Base_MspInit+0x74>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	4a0c      	ldr	r2, [pc, #48]	; (8003288 <HAL_TIM_Base_MspInit+0x74>)
 8003258:	f043 0320 	orr.w	r3, r3, #32
 800325c:	6413      	str	r3, [r2, #64]	; 0x40
 800325e:	4b0a      	ldr	r3, [pc, #40]	; (8003288 <HAL_TIM_Base_MspInit+0x74>)
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	f003 0320 	and.w	r3, r3, #32
 8003266:	60bb      	str	r3, [r7, #8]
 8003268:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 800326a:	2200      	movs	r2, #0
 800326c:	2102      	movs	r1, #2
 800326e:	2037      	movs	r0, #55	; 0x37
 8003270:	f000 fa85 	bl	800377e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003274:	2037      	movs	r0, #55	; 0x37
 8003276:	f000 fa9e 	bl	80037b6 <HAL_NVIC_EnableIRQ>
}
 800327a:	bf00      	nop
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	40001000 	.word	0x40001000
 8003288:	40023800 	.word	0x40023800
 800328c:	40001400 	.word	0x40001400

08003290 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b088      	sub	sp, #32
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003298:	f107 030c 	add.w	r3, r7, #12
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	605a      	str	r2, [r3, #4]
 80032a2:	609a      	str	r2, [r3, #8]
 80032a4:	60da      	str	r2, [r3, #12]
 80032a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b0:	d11d      	bne.n	80032ee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032b2:	2300      	movs	r3, #0
 80032b4:	60bb      	str	r3, [r7, #8]
 80032b6:	4b10      	ldr	r3, [pc, #64]	; (80032f8 <HAL_TIM_MspPostInit+0x68>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	4a0f      	ldr	r2, [pc, #60]	; (80032f8 <HAL_TIM_MspPostInit+0x68>)
 80032bc:	f043 0301 	orr.w	r3, r3, #1
 80032c0:	6313      	str	r3, [r2, #48]	; 0x30
 80032c2:	4b0d      	ldr	r3, [pc, #52]	; (80032f8 <HAL_TIM_MspPostInit+0x68>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	60bb      	str	r3, [r7, #8]
 80032cc:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80032ce:	230f      	movs	r3, #15
 80032d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d2:	2302      	movs	r3, #2
 80032d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d6:	2300      	movs	r3, #0
 80032d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032da:	2300      	movs	r3, #0
 80032dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80032de:	2301      	movs	r3, #1
 80032e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e2:	f107 030c 	add.w	r3, r7, #12
 80032e6:	4619      	mov	r1, r3
 80032e8:	4804      	ldr	r0, [pc, #16]	; (80032fc <HAL_TIM_MspPostInit+0x6c>)
 80032ea:	f000 fa7f 	bl	80037ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80032ee:	bf00      	nop
 80032f0:	3720      	adds	r7, #32
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40023800 	.word	0x40023800
 80032fc:	40020000 	.word	0x40020000

08003300 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003304:	e7fe      	b.n	8003304 <NMI_Handler+0x4>

08003306 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003306:	b480      	push	{r7}
 8003308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800330a:	e7fe      	b.n	800330a <HardFault_Handler+0x4>

0800330c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003310:	e7fe      	b.n	8003310 <MemManage_Handler+0x4>

08003312 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003312:	b480      	push	{r7}
 8003314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003316:	e7fe      	b.n	8003316 <BusFault_Handler+0x4>

08003318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800331c:	e7fe      	b.n	800331c <UsageFault_Handler+0x4>

0800331e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800331e:	b480      	push	{r7}
 8003320:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003322:	bf00      	nop
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003330:	bf00      	nop
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800333a:	b480      	push	{r7}
 800333c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800333e:	bf00      	nop
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800334c:	f000 f8fa 	bl	8003544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003350:	bf00      	nop
 8003352:	bd80      	pop	{r7, pc}

08003354 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003358:	4802      	ldr	r0, [pc, #8]	; (8003364 <TIM3_IRQHandler+0x10>)
 800335a:	f003 fb5d 	bl	8006a18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800335e:	bf00      	nop
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	20000518 	.word	0x20000518

08003368 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800336c:	4802      	ldr	r0, [pc, #8]	; (8003378 <TIM4_IRQHandler+0x10>)
 800336e:	f003 fb53 	bl	8006a18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003372:	bf00      	nop
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	200003f8 	.word	0x200003f8

0800337c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003380:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003384:	f000 fbe6 	bl	8003b54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003388:	bf00      	nop
 800338a:	bd80      	pop	{r7, pc}

0800338c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003390:	4802      	ldr	r0, [pc, #8]	; (800339c <TIM7_IRQHandler+0x10>)
 8003392:	f003 fb41 	bl	8006a18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003396:	bf00      	nop
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	20000674 	.word	0x20000674

080033a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80033a4:	4802      	ldr	r0, [pc, #8]	; (80033b0 <OTG_FS_IRQHandler+0x10>)
 80033a6:	f001 fcf0 	bl	8004d8a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80033aa:	bf00      	nop
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	20001b88 	.word	0x20001b88

080033b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033bc:	4a14      	ldr	r2, [pc, #80]	; (8003410 <_sbrk+0x5c>)
 80033be:	4b15      	ldr	r3, [pc, #84]	; (8003414 <_sbrk+0x60>)
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033c8:	4b13      	ldr	r3, [pc, #76]	; (8003418 <_sbrk+0x64>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d102      	bne.n	80033d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033d0:	4b11      	ldr	r3, [pc, #68]	; (8003418 <_sbrk+0x64>)
 80033d2:	4a12      	ldr	r2, [pc, #72]	; (800341c <_sbrk+0x68>)
 80033d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033d6:	4b10      	ldr	r3, [pc, #64]	; (8003418 <_sbrk+0x64>)
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4413      	add	r3, r2
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d207      	bcs.n	80033f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033e4:	f007 fe5a 	bl	800b09c <__errno>
 80033e8:	4602      	mov	r2, r0
 80033ea:	230c      	movs	r3, #12
 80033ec:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80033ee:	f04f 33ff 	mov.w	r3, #4294967295
 80033f2:	e009      	b.n	8003408 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033f4:	4b08      	ldr	r3, [pc, #32]	; (8003418 <_sbrk+0x64>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033fa:	4b07      	ldr	r3, [pc, #28]	; (8003418 <_sbrk+0x64>)
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4413      	add	r3, r2
 8003402:	4a05      	ldr	r2, [pc, #20]	; (8003418 <_sbrk+0x64>)
 8003404:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003406:	68fb      	ldr	r3, [r7, #12]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	20020000 	.word	0x20020000
 8003414:	00000400 	.word	0x00000400
 8003418:	200003a4 	.word	0x200003a4
 800341c:	20001f98 	.word	0x20001f98

08003420 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003424:	4b08      	ldr	r3, [pc, #32]	; (8003448 <SystemInit+0x28>)
 8003426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342a:	4a07      	ldr	r2, [pc, #28]	; (8003448 <SystemInit+0x28>)
 800342c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003430:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003434:	4b04      	ldr	r3, [pc, #16]	; (8003448 <SystemInit+0x28>)
 8003436:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800343a:	609a      	str	r2, [r3, #8]
#endif
}
 800343c:	bf00      	nop
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	e000ed00 	.word	0xe000ed00

0800344c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800344c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003484 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003450:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003452:	e003      	b.n	800345c <LoopCopyDataInit>

08003454 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003454:	4b0c      	ldr	r3, [pc, #48]	; (8003488 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003456:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003458:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800345a:	3104      	adds	r1, #4

0800345c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800345c:	480b      	ldr	r0, [pc, #44]	; (800348c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800345e:	4b0c      	ldr	r3, [pc, #48]	; (8003490 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003460:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003462:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003464:	d3f6      	bcc.n	8003454 <CopyDataInit>
  ldr  r2, =_sbss
 8003466:	4a0b      	ldr	r2, [pc, #44]	; (8003494 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003468:	e002      	b.n	8003470 <LoopFillZerobss>

0800346a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800346a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800346c:	f842 3b04 	str.w	r3, [r2], #4

08003470 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003470:	4b09      	ldr	r3, [pc, #36]	; (8003498 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003472:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003474:	d3f9      	bcc.n	800346a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003476:	f7ff ffd3 	bl	8003420 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800347a:	f007 fe15 	bl	800b0a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800347e:	f7fe f999 	bl	80017b4 <main>
  bx  lr    
 8003482:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003484:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003488:	0800d7b0 	.word	0x0800d7b0
  ldr  r0, =_sdata
 800348c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003490:	20000358 	.word	0x20000358
  ldr  r2, =_sbss
 8003494:	20000358 	.word	0x20000358
  ldr  r3, = _ebss
 8003498:	20001f94 	.word	0x20001f94

0800349c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800349c:	e7fe      	b.n	800349c <ADC_IRQHandler>
	...

080034a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034a4:	4b0e      	ldr	r3, [pc, #56]	; (80034e0 <HAL_Init+0x40>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a0d      	ldr	r2, [pc, #52]	; (80034e0 <HAL_Init+0x40>)
 80034aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034b0:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <HAL_Init+0x40>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a0a      	ldr	r2, [pc, #40]	; (80034e0 <HAL_Init+0x40>)
 80034b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034bc:	4b08      	ldr	r3, [pc, #32]	; (80034e0 <HAL_Init+0x40>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a07      	ldr	r2, [pc, #28]	; (80034e0 <HAL_Init+0x40>)
 80034c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034c8:	2003      	movs	r0, #3
 80034ca:	f000 f94d 	bl	8003768 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034ce:	2000      	movs	r0, #0
 80034d0:	f000 f808 	bl	80034e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034d4:	f7ff fd62 	bl	8002f9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40023c00 	.word	0x40023c00

080034e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034ec:	4b12      	ldr	r3, [pc, #72]	; (8003538 <HAL_InitTick+0x54>)
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	4b12      	ldr	r3, [pc, #72]	; (800353c <HAL_InitTick+0x58>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	4619      	mov	r1, r3
 80034f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80034fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003502:	4618      	mov	r0, r3
 8003504:	f000 f965 	bl	80037d2 <HAL_SYSTICK_Config>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e00e      	b.n	8003530 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b0f      	cmp	r3, #15
 8003516:	d80a      	bhi.n	800352e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003518:	2200      	movs	r2, #0
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	f04f 30ff 	mov.w	r0, #4294967295
 8003520:	f000 f92d 	bl	800377e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003524:	4a06      	ldr	r2, [pc, #24]	; (8003540 <HAL_InitTick+0x5c>)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800352a:	2300      	movs	r3, #0
 800352c:	e000      	b.n	8003530 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
}
 8003530:	4618      	mov	r0, r3
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	20000000 	.word	0x20000000
 800353c:	20000008 	.word	0x20000008
 8003540:	20000004 	.word	0x20000004

08003544 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003548:	4b06      	ldr	r3, [pc, #24]	; (8003564 <HAL_IncTick+0x20>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	461a      	mov	r2, r3
 800354e:	4b06      	ldr	r3, [pc, #24]	; (8003568 <HAL_IncTick+0x24>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4413      	add	r3, r2
 8003554:	4a04      	ldr	r2, [pc, #16]	; (8003568 <HAL_IncTick+0x24>)
 8003556:	6013      	str	r3, [r2, #0]
}
 8003558:	bf00      	nop
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	20000008 	.word	0x20000008
 8003568:	200006b4 	.word	0x200006b4

0800356c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  return uwTick;
 8003570:	4b03      	ldr	r3, [pc, #12]	; (8003580 <HAL_GetTick+0x14>)
 8003572:	681b      	ldr	r3, [r3, #0]
}
 8003574:	4618      	mov	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	200006b4 	.word	0x200006b4

08003584 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800358c:	f7ff ffee 	bl	800356c <HAL_GetTick>
 8003590:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359c:	d005      	beq.n	80035aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800359e:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <HAL_Delay+0x40>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	461a      	mov	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4413      	add	r3, r2
 80035a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80035aa:	bf00      	nop
 80035ac:	f7ff ffde 	bl	800356c <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d8f7      	bhi.n	80035ac <HAL_Delay+0x28>
  {
  }
}
 80035bc:	bf00      	nop
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	20000008 	.word	0x20000008

080035c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035d8:	4b0c      	ldr	r3, [pc, #48]	; (800360c <__NVIC_SetPriorityGrouping+0x44>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035e4:	4013      	ands	r3, r2
 80035e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035fa:	4a04      	ldr	r2, [pc, #16]	; (800360c <__NVIC_SetPriorityGrouping+0x44>)
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	60d3      	str	r3, [r2, #12]
}
 8003600:	bf00      	nop
 8003602:	3714      	adds	r7, #20
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	e000ed00 	.word	0xe000ed00

08003610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003614:	4b04      	ldr	r3, [pc, #16]	; (8003628 <__NVIC_GetPriorityGrouping+0x18>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	0a1b      	lsrs	r3, r3, #8
 800361a:	f003 0307 	and.w	r3, r3, #7
}
 800361e:	4618      	mov	r0, r3
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	e000ed00 	.word	0xe000ed00

0800362c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	4603      	mov	r3, r0
 8003634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363a:	2b00      	cmp	r3, #0
 800363c:	db0b      	blt.n	8003656 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800363e:	79fb      	ldrb	r3, [r7, #7]
 8003640:	f003 021f 	and.w	r2, r3, #31
 8003644:	4907      	ldr	r1, [pc, #28]	; (8003664 <__NVIC_EnableIRQ+0x38>)
 8003646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364a:	095b      	lsrs	r3, r3, #5
 800364c:	2001      	movs	r0, #1
 800364e:	fa00 f202 	lsl.w	r2, r0, r2
 8003652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	e000e100 	.word	0xe000e100

08003668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	4603      	mov	r3, r0
 8003670:	6039      	str	r1, [r7, #0]
 8003672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003678:	2b00      	cmp	r3, #0
 800367a:	db0a      	blt.n	8003692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	b2da      	uxtb	r2, r3
 8003680:	490c      	ldr	r1, [pc, #48]	; (80036b4 <__NVIC_SetPriority+0x4c>)
 8003682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003686:	0112      	lsls	r2, r2, #4
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	440b      	add	r3, r1
 800368c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003690:	e00a      	b.n	80036a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	b2da      	uxtb	r2, r3
 8003696:	4908      	ldr	r1, [pc, #32]	; (80036b8 <__NVIC_SetPriority+0x50>)
 8003698:	79fb      	ldrb	r3, [r7, #7]
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	3b04      	subs	r3, #4
 80036a0:	0112      	lsls	r2, r2, #4
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	440b      	add	r3, r1
 80036a6:	761a      	strb	r2, [r3, #24]
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	e000e100 	.word	0xe000e100
 80036b8:	e000ed00 	.word	0xe000ed00

080036bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036bc:	b480      	push	{r7}
 80036be:	b089      	sub	sp, #36	; 0x24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f1c3 0307 	rsb	r3, r3, #7
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	bf28      	it	cs
 80036da:	2304      	movcs	r3, #4
 80036dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	3304      	adds	r3, #4
 80036e2:	2b06      	cmp	r3, #6
 80036e4:	d902      	bls.n	80036ec <NVIC_EncodePriority+0x30>
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	3b03      	subs	r3, #3
 80036ea:	e000      	b.n	80036ee <NVIC_EncodePriority+0x32>
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f0:	f04f 32ff 	mov.w	r2, #4294967295
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	43da      	mvns	r2, r3
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	401a      	ands	r2, r3
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003704:	f04f 31ff 	mov.w	r1, #4294967295
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	fa01 f303 	lsl.w	r3, r1, r3
 800370e:	43d9      	mvns	r1, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003714:	4313      	orrs	r3, r2
         );
}
 8003716:	4618      	mov	r0, r3
 8003718:	3724      	adds	r7, #36	; 0x24
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
	...

08003724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3b01      	subs	r3, #1
 8003730:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003734:	d301      	bcc.n	800373a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003736:	2301      	movs	r3, #1
 8003738:	e00f      	b.n	800375a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800373a:	4a0a      	ldr	r2, [pc, #40]	; (8003764 <SysTick_Config+0x40>)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3b01      	subs	r3, #1
 8003740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003742:	210f      	movs	r1, #15
 8003744:	f04f 30ff 	mov.w	r0, #4294967295
 8003748:	f7ff ff8e 	bl	8003668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800374c:	4b05      	ldr	r3, [pc, #20]	; (8003764 <SysTick_Config+0x40>)
 800374e:	2200      	movs	r2, #0
 8003750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003752:	4b04      	ldr	r3, [pc, #16]	; (8003764 <SysTick_Config+0x40>)
 8003754:	2207      	movs	r2, #7
 8003756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	e000e010 	.word	0xe000e010

08003768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f7ff ff29 	bl	80035c8 <__NVIC_SetPriorityGrouping>
}
 8003776:	bf00      	nop
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800377e:	b580      	push	{r7, lr}
 8003780:	b086      	sub	sp, #24
 8003782:	af00      	add	r7, sp, #0
 8003784:	4603      	mov	r3, r0
 8003786:	60b9      	str	r1, [r7, #8]
 8003788:	607a      	str	r2, [r7, #4]
 800378a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800378c:	2300      	movs	r3, #0
 800378e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003790:	f7ff ff3e 	bl	8003610 <__NVIC_GetPriorityGrouping>
 8003794:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	68b9      	ldr	r1, [r7, #8]
 800379a:	6978      	ldr	r0, [r7, #20]
 800379c:	f7ff ff8e 	bl	80036bc <NVIC_EncodePriority>
 80037a0:	4602      	mov	r2, r0
 80037a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037a6:	4611      	mov	r1, r2
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff ff5d 	bl	8003668 <__NVIC_SetPriority>
}
 80037ae:	bf00      	nop
 80037b0:	3718      	adds	r7, #24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b082      	sub	sp, #8
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	4603      	mov	r3, r0
 80037be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff ff31 	bl	800362c <__NVIC_EnableIRQ>
}
 80037ca:	bf00      	nop
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b082      	sub	sp, #8
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7ff ffa2 	bl	8003724 <SysTick_Config>
 80037e0:	4603      	mov	r3, r0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
	...

080037ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b089      	sub	sp, #36	; 0x24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037fe:	2300      	movs	r3, #0
 8003800:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003802:	2300      	movs	r3, #0
 8003804:	61fb      	str	r3, [r7, #28]
 8003806:	e16b      	b.n	8003ae0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003808:	2201      	movs	r2, #1
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	4013      	ands	r3, r2
 800381a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	429a      	cmp	r2, r3
 8003822:	f040 815a 	bne.w	8003ada <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d00b      	beq.n	8003846 <HAL_GPIO_Init+0x5a>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b02      	cmp	r3, #2
 8003834:	d007      	beq.n	8003846 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800383a:	2b11      	cmp	r3, #17
 800383c:	d003      	beq.n	8003846 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b12      	cmp	r3, #18
 8003844:	d130      	bne.n	80038a8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	2203      	movs	r2, #3
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	43db      	mvns	r3, r3
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	4013      	ands	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	68da      	ldr	r2, [r3, #12]
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	4313      	orrs	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800387c:	2201      	movs	r2, #1
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	43db      	mvns	r3, r3
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	4013      	ands	r3, r2
 800388a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	091b      	lsrs	r3, r3, #4
 8003892:	f003 0201 	and.w	r2, r3, #1
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	4313      	orrs	r3, r2
 80038a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	2203      	movs	r2, #3
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	43db      	mvns	r3, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4013      	ands	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d003      	beq.n	80038e8 <HAL_GPIO_Init+0xfc>
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	2b12      	cmp	r3, #18
 80038e6:	d123      	bne.n	8003930 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	08da      	lsrs	r2, r3, #3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	3208      	adds	r2, #8
 80038f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	220f      	movs	r2, #15
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	43db      	mvns	r3, r3
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4013      	ands	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	691a      	ldr	r2, [r3, #16]
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	4313      	orrs	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	08da      	lsrs	r2, r3, #3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	3208      	adds	r2, #8
 800392a:	69b9      	ldr	r1, [r7, #24]
 800392c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	2203      	movs	r2, #3
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	43db      	mvns	r3, r3
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4013      	ands	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f003 0203 	and.w	r2, r3, #3
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	4313      	orrs	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 80b4 	beq.w	8003ada <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	4b5f      	ldr	r3, [pc, #380]	; (8003af4 <HAL_GPIO_Init+0x308>)
 8003978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397a:	4a5e      	ldr	r2, [pc, #376]	; (8003af4 <HAL_GPIO_Init+0x308>)
 800397c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003980:	6453      	str	r3, [r2, #68]	; 0x44
 8003982:	4b5c      	ldr	r3, [pc, #368]	; (8003af4 <HAL_GPIO_Init+0x308>)
 8003984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800398e:	4a5a      	ldr	r2, [pc, #360]	; (8003af8 <HAL_GPIO_Init+0x30c>)
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	089b      	lsrs	r3, r3, #2
 8003994:	3302      	adds	r3, #2
 8003996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800399a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	f003 0303 	and.w	r3, r3, #3
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	220f      	movs	r2, #15
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	43db      	mvns	r3, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4013      	ands	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a51      	ldr	r2, [pc, #324]	; (8003afc <HAL_GPIO_Init+0x310>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d02b      	beq.n	8003a12 <HAL_GPIO_Init+0x226>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a50      	ldr	r2, [pc, #320]	; (8003b00 <HAL_GPIO_Init+0x314>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d025      	beq.n	8003a0e <HAL_GPIO_Init+0x222>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a4f      	ldr	r2, [pc, #316]	; (8003b04 <HAL_GPIO_Init+0x318>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d01f      	beq.n	8003a0a <HAL_GPIO_Init+0x21e>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a4e      	ldr	r2, [pc, #312]	; (8003b08 <HAL_GPIO_Init+0x31c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d019      	beq.n	8003a06 <HAL_GPIO_Init+0x21a>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a4d      	ldr	r2, [pc, #308]	; (8003b0c <HAL_GPIO_Init+0x320>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d013      	beq.n	8003a02 <HAL_GPIO_Init+0x216>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a4c      	ldr	r2, [pc, #304]	; (8003b10 <HAL_GPIO_Init+0x324>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d00d      	beq.n	80039fe <HAL_GPIO_Init+0x212>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a4b      	ldr	r2, [pc, #300]	; (8003b14 <HAL_GPIO_Init+0x328>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d007      	beq.n	80039fa <HAL_GPIO_Init+0x20e>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a4a      	ldr	r2, [pc, #296]	; (8003b18 <HAL_GPIO_Init+0x32c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d101      	bne.n	80039f6 <HAL_GPIO_Init+0x20a>
 80039f2:	2307      	movs	r3, #7
 80039f4:	e00e      	b.n	8003a14 <HAL_GPIO_Init+0x228>
 80039f6:	2308      	movs	r3, #8
 80039f8:	e00c      	b.n	8003a14 <HAL_GPIO_Init+0x228>
 80039fa:	2306      	movs	r3, #6
 80039fc:	e00a      	b.n	8003a14 <HAL_GPIO_Init+0x228>
 80039fe:	2305      	movs	r3, #5
 8003a00:	e008      	b.n	8003a14 <HAL_GPIO_Init+0x228>
 8003a02:	2304      	movs	r3, #4
 8003a04:	e006      	b.n	8003a14 <HAL_GPIO_Init+0x228>
 8003a06:	2303      	movs	r3, #3
 8003a08:	e004      	b.n	8003a14 <HAL_GPIO_Init+0x228>
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	e002      	b.n	8003a14 <HAL_GPIO_Init+0x228>
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e000      	b.n	8003a14 <HAL_GPIO_Init+0x228>
 8003a12:	2300      	movs	r3, #0
 8003a14:	69fa      	ldr	r2, [r7, #28]
 8003a16:	f002 0203 	and.w	r2, r2, #3
 8003a1a:	0092      	lsls	r2, r2, #2
 8003a1c:	4093      	lsls	r3, r2
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a24:	4934      	ldr	r1, [pc, #208]	; (8003af8 <HAL_GPIO_Init+0x30c>)
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	089b      	lsrs	r3, r3, #2
 8003a2a:	3302      	adds	r3, #2
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a32:	4b3a      	ldr	r3, [pc, #232]	; (8003b1c <HAL_GPIO_Init+0x330>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	43db      	mvns	r3, r3
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a56:	4a31      	ldr	r2, [pc, #196]	; (8003b1c <HAL_GPIO_Init+0x330>)
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a5c:	4b2f      	ldr	r3, [pc, #188]	; (8003b1c <HAL_GPIO_Init+0x330>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	43db      	mvns	r3, r3
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d003      	beq.n	8003a80 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a80:	4a26      	ldr	r2, [pc, #152]	; (8003b1c <HAL_GPIO_Init+0x330>)
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a86:	4b25      	ldr	r3, [pc, #148]	; (8003b1c <HAL_GPIO_Init+0x330>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	4013      	ands	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003aaa:	4a1c      	ldr	r2, [pc, #112]	; (8003b1c <HAL_GPIO_Init+0x330>)
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ab0:	4b1a      	ldr	r3, [pc, #104]	; (8003b1c <HAL_GPIO_Init+0x330>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	4013      	ands	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ad4:	4a11      	ldr	r2, [pc, #68]	; (8003b1c <HAL_GPIO_Init+0x330>)
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	3301      	adds	r3, #1
 8003ade:	61fb      	str	r3, [r7, #28]
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	2b0f      	cmp	r3, #15
 8003ae4:	f67f ae90 	bls.w	8003808 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ae8:	bf00      	nop
 8003aea:	3724      	adds	r7, #36	; 0x24
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	40023800 	.word	0x40023800
 8003af8:	40013800 	.word	0x40013800
 8003afc:	40020000 	.word	0x40020000
 8003b00:	40020400 	.word	0x40020400
 8003b04:	40020800 	.word	0x40020800
 8003b08:	40020c00 	.word	0x40020c00
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	40021400 	.word	0x40021400
 8003b14:	40021800 	.word	0x40021800
 8003b18:	40021c00 	.word	0x40021c00
 8003b1c:	40013c00 	.word	0x40013c00

08003b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	807b      	strh	r3, [r7, #2]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b30:	787b      	ldrb	r3, [r7, #1]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b36:	887a      	ldrh	r2, [r7, #2]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b3c:	e003      	b.n	8003b46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b3e:	887b      	ldrh	r3, [r7, #2]
 8003b40:	041a      	lsls	r2, r3, #16
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	619a      	str	r2, [r3, #24]
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
	...

08003b54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b5e:	4b08      	ldr	r3, [pc, #32]	; (8003b80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b60:	695a      	ldr	r2, [r3, #20]
 8003b62:	88fb      	ldrh	r3, [r7, #6]
 8003b64:	4013      	ands	r3, r2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d006      	beq.n	8003b78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b6a:	4a05      	ldr	r2, [pc, #20]	; (8003b80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b6c:	88fb      	ldrh	r3, [r7, #6]
 8003b6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b70:	88fb      	ldrh	r3, [r7, #6]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fe f938 	bl	8001de8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b78:	bf00      	nop
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40013c00 	.word	0x40013c00

08003b84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e11f      	b.n	8003dd6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d106      	bne.n	8003bb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7ff fa1e 	bl	8002fec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2224      	movs	r2, #36	; 0x24
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 0201 	bic.w	r2, r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003be6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003be8:	f002 fd3a 	bl	8006660 <HAL_RCC_GetPCLK1Freq>
 8003bec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	4a7b      	ldr	r2, [pc, #492]	; (8003de0 <HAL_I2C_Init+0x25c>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d807      	bhi.n	8003c08 <HAL_I2C_Init+0x84>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4a7a      	ldr	r2, [pc, #488]	; (8003de4 <HAL_I2C_Init+0x260>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	bf94      	ite	ls
 8003c00:	2301      	movls	r3, #1
 8003c02:	2300      	movhi	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	e006      	b.n	8003c16 <HAL_I2C_Init+0x92>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4a77      	ldr	r2, [pc, #476]	; (8003de8 <HAL_I2C_Init+0x264>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	bf94      	ite	ls
 8003c10:	2301      	movls	r3, #1
 8003c12:	2300      	movhi	r3, #0
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e0db      	b.n	8003dd6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	4a72      	ldr	r2, [pc, #456]	; (8003dec <HAL_I2C_Init+0x268>)
 8003c22:	fba2 2303 	umull	r2, r3, r2, r3
 8003c26:	0c9b      	lsrs	r3, r3, #18
 8003c28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	4a64      	ldr	r2, [pc, #400]	; (8003de0 <HAL_I2C_Init+0x25c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d802      	bhi.n	8003c58 <HAL_I2C_Init+0xd4>
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	3301      	adds	r3, #1
 8003c56:	e009      	b.n	8003c6c <HAL_I2C_Init+0xe8>
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c5e:	fb02 f303 	mul.w	r3, r2, r3
 8003c62:	4a63      	ldr	r2, [pc, #396]	; (8003df0 <HAL_I2C_Init+0x26c>)
 8003c64:	fba2 2303 	umull	r2, r3, r2, r3
 8003c68:	099b      	lsrs	r3, r3, #6
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6812      	ldr	r2, [r2, #0]
 8003c70:	430b      	orrs	r3, r1
 8003c72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	4956      	ldr	r1, [pc, #344]	; (8003de0 <HAL_I2C_Init+0x25c>)
 8003c88:	428b      	cmp	r3, r1
 8003c8a:	d80d      	bhi.n	8003ca8 <HAL_I2C_Init+0x124>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	1e59      	subs	r1, r3, #1
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	bf38      	it	cc
 8003ca4:	2304      	movcc	r3, #4
 8003ca6:	e04f      	b.n	8003d48 <HAL_I2C_Init+0x1c4>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d111      	bne.n	8003cd4 <HAL_I2C_Init+0x150>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	1e58      	subs	r0, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6859      	ldr	r1, [r3, #4]
 8003cb8:	460b      	mov	r3, r1
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	440b      	add	r3, r1
 8003cbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	bf0c      	ite	eq
 8003ccc:	2301      	moveq	r3, #1
 8003cce:	2300      	movne	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	e012      	b.n	8003cfa <HAL_I2C_Init+0x176>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	1e58      	subs	r0, r3, #1
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6859      	ldr	r1, [r3, #4]
 8003cdc:	460b      	mov	r3, r1
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	0099      	lsls	r1, r3, #2
 8003ce4:	440b      	add	r3, r1
 8003ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cea:	3301      	adds	r3, #1
 8003cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	bf0c      	ite	eq
 8003cf4:	2301      	moveq	r3, #1
 8003cf6:	2300      	movne	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_I2C_Init+0x17e>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e022      	b.n	8003d48 <HAL_I2C_Init+0x1c4>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10e      	bne.n	8003d28 <HAL_I2C_Init+0x1a4>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	1e58      	subs	r0, r3, #1
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6859      	ldr	r1, [r3, #4]
 8003d12:	460b      	mov	r3, r1
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	440b      	add	r3, r1
 8003d18:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d26:	e00f      	b.n	8003d48 <HAL_I2C_Init+0x1c4>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	1e58      	subs	r0, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6859      	ldr	r1, [r3, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	440b      	add	r3, r1
 8003d36:	0099      	lsls	r1, r3, #2
 8003d38:	440b      	add	r3, r1
 8003d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d3e:	3301      	adds	r3, #1
 8003d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	6809      	ldr	r1, [r1, #0]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69da      	ldr	r2, [r3, #28]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	6911      	ldr	r1, [r2, #16]
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	68d2      	ldr	r2, [r2, #12]
 8003d82:	4311      	orrs	r1, r2
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	430b      	orrs	r3, r1
 8003d8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	695a      	ldr	r2, [r3, #20]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0201 	orr.w	r2, r2, #1
 8003db6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	000186a0 	.word	0x000186a0
 8003de4:	001e847f 	.word	0x001e847f
 8003de8:	003d08ff 	.word	0x003d08ff
 8003dec:	431bde83 	.word	0x431bde83
 8003df0:	10624dd3 	.word	0x10624dd3

08003df4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b088      	sub	sp, #32
 8003df8:	af02      	add	r7, sp, #8
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	4608      	mov	r0, r1
 8003dfe:	4611      	mov	r1, r2
 8003e00:	461a      	mov	r2, r3
 8003e02:	4603      	mov	r3, r0
 8003e04:	817b      	strh	r3, [r7, #10]
 8003e06:	460b      	mov	r3, r1
 8003e08:	813b      	strh	r3, [r7, #8]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e0e:	f7ff fbad 	bl	800356c <HAL_GetTick>
 8003e12:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b20      	cmp	r3, #32
 8003e1e:	f040 80d9 	bne.w	8003fd4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	2319      	movs	r3, #25
 8003e28:	2201      	movs	r2, #1
 8003e2a:	496d      	ldr	r1, [pc, #436]	; (8003fe0 <HAL_I2C_Mem_Write+0x1ec>)
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 fc7f 	bl	8004730 <I2C_WaitOnFlagUntilTimeout>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e38:	2302      	movs	r3, #2
 8003e3a:	e0cc      	b.n	8003fd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d101      	bne.n	8003e4a <HAL_I2C_Mem_Write+0x56>
 8003e46:	2302      	movs	r3, #2
 8003e48:	e0c5      	b.n	8003fd6 <HAL_I2C_Mem_Write+0x1e2>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d007      	beq.n	8003e70 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0201 	orr.w	r2, r2, #1
 8003e6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2221      	movs	r2, #33	; 0x21
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2240      	movs	r2, #64	; 0x40
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6a3a      	ldr	r2, [r7, #32]
 8003e9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ea0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4a4d      	ldr	r2, [pc, #308]	; (8003fe4 <HAL_I2C_Mem_Write+0x1f0>)
 8003eb0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003eb2:	88f8      	ldrh	r0, [r7, #6]
 8003eb4:	893a      	ldrh	r2, [r7, #8]
 8003eb6:	8979      	ldrh	r1, [r7, #10]
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	9301      	str	r3, [sp, #4]
 8003ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 fab6 	bl	8004434 <I2C_RequestMemoryWrite>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d052      	beq.n	8003f74 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e081      	b.n	8003fd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 fd00 	bl	80048dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00d      	beq.n	8003efe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	d107      	bne.n	8003efa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e06b      	b.n	8003fd6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	781a      	ldrb	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0e:	1c5a      	adds	r2, r3, #1
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	3b01      	subs	r3, #1
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	d11b      	bne.n	8003f74 <HAL_I2C_Mem_Write+0x180>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d017      	beq.n	8003f74 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	781a      	ldrb	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1aa      	bne.n	8003ed2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 fcec 	bl	800495e <I2C_WaitOnBTFFlagUntilTimeout>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00d      	beq.n	8003fa8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f90:	2b04      	cmp	r3, #4
 8003f92:	d107      	bne.n	8003fa4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fa2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e016      	b.n	8003fd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	e000      	b.n	8003fd6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003fd4:	2302      	movs	r3, #2
  }
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	00100002 	.word	0x00100002
 8003fe4:	ffff0000 	.word	0xffff0000

08003fe8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b08c      	sub	sp, #48	; 0x30
 8003fec:	af02      	add	r7, sp, #8
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	4608      	mov	r0, r1
 8003ff2:	4611      	mov	r1, r2
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	817b      	strh	r3, [r7, #10]
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	813b      	strh	r3, [r7, #8]
 8003ffe:	4613      	mov	r3, r2
 8004000:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004002:	f7ff fab3 	bl	800356c <HAL_GetTick>
 8004006:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b20      	cmp	r3, #32
 8004012:	f040 8208 	bne.w	8004426 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	2319      	movs	r3, #25
 800401c:	2201      	movs	r2, #1
 800401e:	497b      	ldr	r1, [pc, #492]	; (800420c <HAL_I2C_Mem_Read+0x224>)
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 fb85 	bl	8004730 <I2C_WaitOnFlagUntilTimeout>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800402c:	2302      	movs	r3, #2
 800402e:	e1fb      	b.n	8004428 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004036:	2b01      	cmp	r3, #1
 8004038:	d101      	bne.n	800403e <HAL_I2C_Mem_Read+0x56>
 800403a:	2302      	movs	r3, #2
 800403c:	e1f4      	b.n	8004428 <HAL_I2C_Mem_Read+0x440>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b01      	cmp	r3, #1
 8004052:	d007      	beq.n	8004064 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f042 0201 	orr.w	r2, r2, #1
 8004062:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004072:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2222      	movs	r2, #34	; 0x22
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2240      	movs	r2, #64	; 0x40
 8004080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800408e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004094:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409a:	b29a      	uxth	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4a5b      	ldr	r2, [pc, #364]	; (8004210 <HAL_I2C_Mem_Read+0x228>)
 80040a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040a6:	88f8      	ldrh	r0, [r7, #6]
 80040a8:	893a      	ldrh	r2, [r7, #8]
 80040aa:	8979      	ldrh	r1, [r7, #10]
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	9301      	str	r3, [sp, #4]
 80040b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	4603      	mov	r3, r0
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 fa52 	bl	8004560 <I2C_RequestMemoryRead>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e1b0      	b.n	8004428 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d113      	bne.n	80040f6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ce:	2300      	movs	r3, #0
 80040d0:	623b      	str	r3, [r7, #32]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	623b      	str	r3, [r7, #32]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	623b      	str	r3, [r7, #32]
 80040e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	e184      	b.n	8004400 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d11b      	bne.n	8004136 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800410c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800410e:	2300      	movs	r3, #0
 8004110:	61fb      	str	r3, [r7, #28]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	61fb      	str	r3, [r7, #28]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	61fb      	str	r3, [r7, #28]
 8004122:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	e164      	b.n	8004400 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413a:	2b02      	cmp	r3, #2
 800413c:	d11b      	bne.n	8004176 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800414c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800415c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800415e:	2300      	movs	r3, #0
 8004160:	61bb      	str	r3, [r7, #24]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	61bb      	str	r3, [r7, #24]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	61bb      	str	r3, [r7, #24]
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	e144      	b.n	8004400 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004176:	2300      	movs	r3, #0
 8004178:	617b      	str	r3, [r7, #20]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	617b      	str	r3, [r7, #20]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	617b      	str	r3, [r7, #20]
 800418a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800418c:	e138      	b.n	8004400 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004192:	2b03      	cmp	r3, #3
 8004194:	f200 80f1 	bhi.w	800437a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419c:	2b01      	cmp	r3, #1
 800419e:	d123      	bne.n	80041e8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 fc1b 	bl	80049e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e139      	b.n	8004428 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	691a      	ldr	r2, [r3, #16]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041dc:	b29b      	uxth	r3, r3
 80041de:	3b01      	subs	r3, #1
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041e6:	e10b      	b.n	8004400 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d14e      	bne.n	800428e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f6:	2200      	movs	r2, #0
 80041f8:	4906      	ldr	r1, [pc, #24]	; (8004214 <HAL_I2C_Mem_Read+0x22c>)
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f000 fa98 	bl	8004730 <I2C_WaitOnFlagUntilTimeout>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d008      	beq.n	8004218 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e10e      	b.n	8004428 <HAL_I2C_Mem_Read+0x440>
 800420a:	bf00      	nop
 800420c:	00100002 	.word	0x00100002
 8004210:	ffff0000 	.word	0xffff0000
 8004214:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004226:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	691a      	ldr	r2, [r3, #16]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423a:	1c5a      	adds	r2, r3, #1
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004250:	b29b      	uxth	r3, r3
 8004252:	3b01      	subs	r3, #1
 8004254:	b29a      	uxth	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	691a      	ldr	r2, [r3, #16]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	1c5a      	adds	r2, r3, #1
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004276:	3b01      	subs	r3, #1
 8004278:	b29a      	uxth	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004282:	b29b      	uxth	r3, r3
 8004284:	3b01      	subs	r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800428c:	e0b8      	b.n	8004400 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004294:	2200      	movs	r2, #0
 8004296:	4966      	ldr	r1, [pc, #408]	; (8004430 <HAL_I2C_Mem_Read+0x448>)
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 fa49 	bl	8004730 <I2C_WaitOnFlagUntilTimeout>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e0bf      	b.n	8004428 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	691a      	ldr	r2, [r3, #16]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	b2d2      	uxtb	r2, r2
 80042c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	1c5a      	adds	r2, r3, #1
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	3b01      	subs	r3, #1
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f0:	2200      	movs	r2, #0
 80042f2:	494f      	ldr	r1, [pc, #316]	; (8004430 <HAL_I2C_Mem_Read+0x448>)
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f000 fa1b 	bl	8004730 <I2C_WaitOnFlagUntilTimeout>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e091      	b.n	8004428 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004312:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	691a      	ldr	r2, [r3, #16]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004326:	1c5a      	adds	r2, r3, #1
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004330:	3b01      	subs	r3, #1
 8004332:	b29a      	uxth	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433c:	b29b      	uxth	r3, r3
 800433e:	3b01      	subs	r3, #1
 8004340:	b29a      	uxth	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	691a      	ldr	r2, [r3, #16]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	b2d2      	uxtb	r2, r2
 8004352:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	1c5a      	adds	r2, r3, #1
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004362:	3b01      	subs	r3, #1
 8004364:	b29a      	uxth	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436e:	b29b      	uxth	r3, r3
 8004370:	3b01      	subs	r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004378:	e042      	b.n	8004400 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800437a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800437c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 fb2e 	bl	80049e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e04c      	b.n	8004428 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	691a      	ldr	r2, [r3, #16]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043aa:	3b01      	subs	r3, #1
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	f003 0304 	and.w	r3, r3, #4
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	d118      	bne.n	8004400 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004404:	2b00      	cmp	r3, #0
 8004406:	f47f aec2 	bne.w	800418e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2220      	movs	r2, #32
 800440e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004422:	2300      	movs	r3, #0
 8004424:	e000      	b.n	8004428 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004426:	2302      	movs	r3, #2
  }
}
 8004428:	4618      	mov	r0, r3
 800442a:	3728      	adds	r7, #40	; 0x28
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	00010004 	.word	0x00010004

08004434 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b088      	sub	sp, #32
 8004438:	af02      	add	r7, sp, #8
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	4608      	mov	r0, r1
 800443e:	4611      	mov	r1, r2
 8004440:	461a      	mov	r2, r3
 8004442:	4603      	mov	r3, r0
 8004444:	817b      	strh	r3, [r7, #10]
 8004446:	460b      	mov	r3, r1
 8004448:	813b      	strh	r3, [r7, #8]
 800444a:	4613      	mov	r3, r2
 800444c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800445c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	2200      	movs	r2, #0
 8004466:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 f960 	bl	8004730 <I2C_WaitOnFlagUntilTimeout>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00d      	beq.n	8004492 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004484:	d103      	bne.n	800448e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f44f 7200 	mov.w	r2, #512	; 0x200
 800448c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e05f      	b.n	8004552 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004492:	897b      	ldrh	r3, [r7, #10]
 8004494:	b2db      	uxtb	r3, r3
 8004496:	461a      	mov	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	6a3a      	ldr	r2, [r7, #32]
 80044a6:	492d      	ldr	r1, [pc, #180]	; (800455c <I2C_RequestMemoryWrite+0x128>)
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 f998 	bl	80047de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e04c      	b.n	8004552 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044b8:	2300      	movs	r3, #0
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	617b      	str	r3, [r7, #20]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	617b      	str	r3, [r7, #20]
 80044cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d0:	6a39      	ldr	r1, [r7, #32]
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f000 fa02 	bl	80048dc <I2C_WaitOnTXEFlagUntilTimeout>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00d      	beq.n	80044fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	d107      	bne.n	80044f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e02b      	b.n	8004552 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044fa:	88fb      	ldrh	r3, [r7, #6]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d105      	bne.n	800450c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004500:	893b      	ldrh	r3, [r7, #8]
 8004502:	b2da      	uxtb	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	611a      	str	r2, [r3, #16]
 800450a:	e021      	b.n	8004550 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800450c:	893b      	ldrh	r3, [r7, #8]
 800450e:	0a1b      	lsrs	r3, r3, #8
 8004510:	b29b      	uxth	r3, r3
 8004512:	b2da      	uxtb	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800451a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800451c:	6a39      	ldr	r1, [r7, #32]
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f000 f9dc 	bl	80048dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00d      	beq.n	8004546 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	2b04      	cmp	r3, #4
 8004530:	d107      	bne.n	8004542 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004540:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e005      	b.n	8004552 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004546:	893b      	ldrh	r3, [r7, #8]
 8004548:	b2da      	uxtb	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3718      	adds	r7, #24
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	00010002 	.word	0x00010002

08004560 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b088      	sub	sp, #32
 8004564:	af02      	add	r7, sp, #8
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	4608      	mov	r0, r1
 800456a:	4611      	mov	r1, r2
 800456c:	461a      	mov	r2, r3
 800456e:	4603      	mov	r3, r0
 8004570:	817b      	strh	r3, [r7, #10]
 8004572:	460b      	mov	r3, r1
 8004574:	813b      	strh	r3, [r7, #8]
 8004576:	4613      	mov	r3, r2
 8004578:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004588:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004598:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	9300      	str	r3, [sp, #0]
 800459e:	6a3b      	ldr	r3, [r7, #32]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 f8c2 	bl	8004730 <I2C_WaitOnFlagUntilTimeout>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00d      	beq.n	80045ce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045c0:	d103      	bne.n	80045ca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e0aa      	b.n	8004724 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045ce:	897b      	ldrh	r3, [r7, #10]
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	461a      	mov	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e0:	6a3a      	ldr	r2, [r7, #32]
 80045e2:	4952      	ldr	r1, [pc, #328]	; (800472c <I2C_RequestMemoryRead+0x1cc>)
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 f8fa 	bl	80047de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e097      	b.n	8004724 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045f4:	2300      	movs	r3, #0
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	617b      	str	r3, [r7, #20]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	617b      	str	r3, [r7, #20]
 8004608:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800460a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800460c:	6a39      	ldr	r1, [r7, #32]
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 f964 	bl	80048dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00d      	beq.n	8004636 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	2b04      	cmp	r3, #4
 8004620:	d107      	bne.n	8004632 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004630:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e076      	b.n	8004724 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004636:	88fb      	ldrh	r3, [r7, #6]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d105      	bne.n	8004648 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800463c:	893b      	ldrh	r3, [r7, #8]
 800463e:	b2da      	uxtb	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	611a      	str	r2, [r3, #16]
 8004646:	e021      	b.n	800468c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004648:	893b      	ldrh	r3, [r7, #8]
 800464a:	0a1b      	lsrs	r3, r3, #8
 800464c:	b29b      	uxth	r3, r3
 800464e:	b2da      	uxtb	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004658:	6a39      	ldr	r1, [r7, #32]
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 f93e 	bl	80048dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00d      	beq.n	8004682 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	2b04      	cmp	r3, #4
 800466c:	d107      	bne.n	800467e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800467c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e050      	b.n	8004724 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004682:	893b      	ldrh	r3, [r7, #8]
 8004684:	b2da      	uxtb	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800468c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800468e:	6a39      	ldr	r1, [r7, #32]
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 f923 	bl	80048dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00d      	beq.n	80046b8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d107      	bne.n	80046b4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e035      	b.n	8004724 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046c6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f000 f82b 	bl	8004730 <I2C_WaitOnFlagUntilTimeout>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00d      	beq.n	80046fc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ee:	d103      	bne.n	80046f8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e013      	b.n	8004724 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046fc:	897b      	ldrh	r3, [r7, #10]
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	f043 0301 	orr.w	r3, r3, #1
 8004704:	b2da      	uxtb	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	6a3a      	ldr	r2, [r7, #32]
 8004710:	4906      	ldr	r1, [pc, #24]	; (800472c <I2C_RequestMemoryRead+0x1cc>)
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f000 f863 	bl	80047de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e000      	b.n	8004724 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3718      	adds	r7, #24
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	00010002 	.word	0x00010002

08004730 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	603b      	str	r3, [r7, #0]
 800473c:	4613      	mov	r3, r2
 800473e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004740:	e025      	b.n	800478e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004748:	d021      	beq.n	800478e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800474a:	f7fe ff0f 	bl	800356c <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	429a      	cmp	r2, r3
 8004758:	d302      	bcc.n	8004760 <I2C_WaitOnFlagUntilTimeout+0x30>
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d116      	bne.n	800478e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2220      	movs	r2, #32
 800476a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	f043 0220 	orr.w	r2, r3, #32
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e023      	b.n	80047d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	0c1b      	lsrs	r3, r3, #16
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b01      	cmp	r3, #1
 8004796:	d10d      	bne.n	80047b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	43da      	mvns	r2, r3
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	4013      	ands	r3, r2
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	bf0c      	ite	eq
 80047aa:	2301      	moveq	r3, #1
 80047ac:	2300      	movne	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	461a      	mov	r2, r3
 80047b2:	e00c      	b.n	80047ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	43da      	mvns	r2, r3
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	4013      	ands	r3, r2
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	bf0c      	ite	eq
 80047c6:	2301      	moveq	r3, #1
 80047c8:	2300      	movne	r3, #0
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	461a      	mov	r2, r3
 80047ce:	79fb      	ldrb	r3, [r7, #7]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d0b6      	beq.n	8004742 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b084      	sub	sp, #16
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	60f8      	str	r0, [r7, #12]
 80047e6:	60b9      	str	r1, [r7, #8]
 80047e8:	607a      	str	r2, [r7, #4]
 80047ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047ec:	e051      	b.n	8004892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047fc:	d123      	bne.n	8004846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800480c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004816:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2220      	movs	r2, #32
 8004822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	f043 0204 	orr.w	r2, r3, #4
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e046      	b.n	80048d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484c:	d021      	beq.n	8004892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800484e:	f7fe fe8d 	bl	800356c <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	429a      	cmp	r2, r3
 800485c:	d302      	bcc.n	8004864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d116      	bne.n	8004892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2220      	movs	r2, #32
 800486e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487e:	f043 0220 	orr.w	r2, r3, #32
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e020      	b.n	80048d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	0c1b      	lsrs	r3, r3, #16
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b01      	cmp	r3, #1
 800489a:	d10c      	bne.n	80048b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	43da      	mvns	r2, r3
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	4013      	ands	r3, r2
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	bf14      	ite	ne
 80048ae:	2301      	movne	r3, #1
 80048b0:	2300      	moveq	r3, #0
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	e00b      	b.n	80048ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	43da      	mvns	r2, r3
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	4013      	ands	r3, r2
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	bf14      	ite	ne
 80048c8:	2301      	movne	r3, #1
 80048ca:	2300      	moveq	r3, #0
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d18d      	bne.n	80047ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048e8:	e02d      	b.n	8004946 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f000 f8ce 	bl	8004a8c <I2C_IsAcknowledgeFailed>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e02d      	b.n	8004956 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004900:	d021      	beq.n	8004946 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004902:	f7fe fe33 	bl	800356c <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	429a      	cmp	r2, r3
 8004910:	d302      	bcc.n	8004918 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d116      	bne.n	8004946 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2220      	movs	r2, #32
 8004922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	f043 0220 	orr.w	r2, r3, #32
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e007      	b.n	8004956 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004950:	2b80      	cmp	r3, #128	; 0x80
 8004952:	d1ca      	bne.n	80048ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b084      	sub	sp, #16
 8004962:	af00      	add	r7, sp, #0
 8004964:	60f8      	str	r0, [r7, #12]
 8004966:	60b9      	str	r1, [r7, #8]
 8004968:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800496a:	e02d      	b.n	80049c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f000 f88d 	bl	8004a8c <I2C_IsAcknowledgeFailed>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d001      	beq.n	800497c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e02d      	b.n	80049d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004982:	d021      	beq.n	80049c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004984:	f7fe fdf2 	bl	800356c <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	429a      	cmp	r2, r3
 8004992:	d302      	bcc.n	800499a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d116      	bne.n	80049c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2220      	movs	r2, #32
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b4:	f043 0220 	orr.w	r2, r3, #32
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e007      	b.n	80049d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	f003 0304 	and.w	r3, r3, #4
 80049d2:	2b04      	cmp	r3, #4
 80049d4:	d1ca      	bne.n	800496c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049ec:	e042      	b.n	8004a74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	f003 0310 	and.w	r3, r3, #16
 80049f8:	2b10      	cmp	r3, #16
 80049fa:	d119      	bne.n	8004a30 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f06f 0210 	mvn.w	r2, #16
 8004a04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e029      	b.n	8004a84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a30:	f7fe fd9c 	bl	800356c <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d302      	bcc.n	8004a46 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d116      	bne.n	8004a74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a60:	f043 0220 	orr.w	r2, r3, #32
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e007      	b.n	8004a84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7e:	2b40      	cmp	r3, #64	; 0x40
 8004a80:	d1b5      	bne.n	80049ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aa2:	d11b      	bne.n	8004adc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004aac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac8:	f043 0204 	orr.w	r2, r3, #4
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e000      	b.n	8004ade <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004aea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aec:	b08f      	sub	sp, #60	; 0x3c
 8004aee:	af0a      	add	r7, sp, #40	; 0x28
 8004af0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e10f      	b.n	8004d1c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d106      	bne.n	8004b1c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f005 ffc4 	bl	800aaa4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2203      	movs	r2, #3
 8004b20:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d102      	bne.n	8004b36 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f002 ff7d 	bl	8007a3a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	603b      	str	r3, [r7, #0]
 8004b46:	687e      	ldr	r6, [r7, #4]
 8004b48:	466d      	mov	r5, sp
 8004b4a:	f106 0410 	add.w	r4, r6, #16
 8004b4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b5e:	1d33      	adds	r3, r6, #4
 8004b60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b62:	6838      	ldr	r0, [r7, #0]
 8004b64:	f002 fe54 	bl	8007810 <USB_CoreInit>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d005      	beq.n	8004b7a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2202      	movs	r2, #2
 8004b72:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e0d0      	b.n	8004d1c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2100      	movs	r1, #0
 8004b80:	4618      	mov	r0, r3
 8004b82:	f002 ff6b 	bl	8007a5c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b86:	2300      	movs	r3, #0
 8004b88:	73fb      	strb	r3, [r7, #15]
 8004b8a:	e04a      	b.n	8004c22 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004b8c:	7bfa      	ldrb	r2, [r7, #15]
 8004b8e:	6879      	ldr	r1, [r7, #4]
 8004b90:	4613      	mov	r3, r2
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	1a9b      	subs	r3, r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	440b      	add	r3, r1
 8004b9a:	333d      	adds	r3, #61	; 0x3d
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004ba0:	7bfa      	ldrb	r2, [r7, #15]
 8004ba2:	6879      	ldr	r1, [r7, #4]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	00db      	lsls	r3, r3, #3
 8004ba8:	1a9b      	subs	r3, r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	440b      	add	r3, r1
 8004bae:	333c      	adds	r3, #60	; 0x3c
 8004bb0:	7bfa      	ldrb	r2, [r7, #15]
 8004bb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004bb4:	7bfa      	ldrb	r2, [r7, #15]
 8004bb6:	7bfb      	ldrb	r3, [r7, #15]
 8004bb8:	b298      	uxth	r0, r3
 8004bba:	6879      	ldr	r1, [r7, #4]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	1a9b      	subs	r3, r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	3342      	adds	r3, #66	; 0x42
 8004bc8:	4602      	mov	r2, r0
 8004bca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004bcc:	7bfa      	ldrb	r2, [r7, #15]
 8004bce:	6879      	ldr	r1, [r7, #4]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	1a9b      	subs	r3, r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	440b      	add	r3, r1
 8004bda:	333f      	adds	r3, #63	; 0x3f
 8004bdc:	2200      	movs	r2, #0
 8004bde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004be0:	7bfa      	ldrb	r2, [r7, #15]
 8004be2:	6879      	ldr	r1, [r7, #4]
 8004be4:	4613      	mov	r3, r2
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	1a9b      	subs	r3, r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	440b      	add	r3, r1
 8004bee:	3344      	adds	r3, #68	; 0x44
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004bf4:	7bfa      	ldrb	r2, [r7, #15]
 8004bf6:	6879      	ldr	r1, [r7, #4]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	1a9b      	subs	r3, r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	440b      	add	r3, r1
 8004c02:	3348      	adds	r3, #72	; 0x48
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c08:	7bfa      	ldrb	r2, [r7, #15]
 8004c0a:	6879      	ldr	r1, [r7, #4]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	1a9b      	subs	r3, r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	440b      	add	r3, r1
 8004c16:	3350      	adds	r3, #80	; 0x50
 8004c18:	2200      	movs	r2, #0
 8004c1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	73fb      	strb	r3, [r7, #15]
 8004c22:	7bfa      	ldrb	r2, [r7, #15]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d3af      	bcc.n	8004b8c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	73fb      	strb	r3, [r7, #15]
 8004c30:	e044      	b.n	8004cbc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004c32:	7bfa      	ldrb	r2, [r7, #15]
 8004c34:	6879      	ldr	r1, [r7, #4]
 8004c36:	4613      	mov	r3, r2
 8004c38:	00db      	lsls	r3, r3, #3
 8004c3a:	1a9b      	subs	r3, r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	440b      	add	r3, r1
 8004c40:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004c44:	2200      	movs	r2, #0
 8004c46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004c48:	7bfa      	ldrb	r2, [r7, #15]
 8004c4a:	6879      	ldr	r1, [r7, #4]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	1a9b      	subs	r3, r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	440b      	add	r3, r1
 8004c56:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004c5a:	7bfa      	ldrb	r2, [r7, #15]
 8004c5c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004c5e:	7bfa      	ldrb	r2, [r7, #15]
 8004c60:	6879      	ldr	r1, [r7, #4]
 8004c62:	4613      	mov	r3, r2
 8004c64:	00db      	lsls	r3, r3, #3
 8004c66:	1a9b      	subs	r3, r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	440b      	add	r3, r1
 8004c6c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004c70:	2200      	movs	r2, #0
 8004c72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004c74:	7bfa      	ldrb	r2, [r7, #15]
 8004c76:	6879      	ldr	r1, [r7, #4]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	1a9b      	subs	r3, r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	440b      	add	r3, r1
 8004c82:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004c86:	2200      	movs	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004c8a:	7bfa      	ldrb	r2, [r7, #15]
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	1a9b      	subs	r3, r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	440b      	add	r3, r1
 8004c98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004ca0:	7bfa      	ldrb	r2, [r7, #15]
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	1a9b      	subs	r3, r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	440b      	add	r3, r1
 8004cae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cb6:	7bfb      	ldrb	r3, [r7, #15]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	73fb      	strb	r3, [r7, #15]
 8004cbc:	7bfa      	ldrb	r2, [r7, #15]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d3b5      	bcc.n	8004c32 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	603b      	str	r3, [r7, #0]
 8004ccc:	687e      	ldr	r6, [r7, #4]
 8004cce:	466d      	mov	r5, sp
 8004cd0:	f106 0410 	add.w	r4, r6, #16
 8004cd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cdc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ce0:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ce4:	1d33      	adds	r3, r6, #4
 8004ce6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ce8:	6838      	ldr	r0, [r7, #0]
 8004cea:	f002 fee1 	bl	8007ab0 <USB_DevInit>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d005      	beq.n	8004d00 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e00d      	b.n	8004d1c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f003 ff29 	bl	8008b6c <USB_DevDisconnect>

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d24 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_PCD_Start+0x1c>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e020      	b.n	8004d82 <HAL_PCD_Start+0x5e>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d109      	bne.n	8004d64 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d005      	beq.n	8004d64 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f002 fe55 	bl	8007a18 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f003 fed9 	bl	8008b2a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004d8a:	b590      	push	{r4, r7, lr}
 8004d8c:	b08d      	sub	sp, #52	; 0x34
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f003 ff97 	bl	8008cd4 <USB_GetMode>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f040 839d 	bne.w	80054e8 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f003 fefb 	bl	8008bae <USB_ReadInterrupts>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f000 8393 	beq.w	80054e6 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f003 fef2 	bl	8008bae <USB_ReadInterrupts>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d107      	bne.n	8004de4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	695a      	ldr	r2, [r3, #20]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f002 0202 	and.w	r2, r2, #2
 8004de2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f003 fee0 	bl	8008bae <USB_ReadInterrupts>
 8004dee:	4603      	mov	r3, r0
 8004df0:	f003 0310 	and.w	r3, r3, #16
 8004df4:	2b10      	cmp	r3, #16
 8004df6:	d161      	bne.n	8004ebc <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	699a      	ldr	r2, [r3, #24]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f022 0210 	bic.w	r2, r2, #16
 8004e06:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	f003 020f 	and.w	r2, r3, #15
 8004e14:	4613      	mov	r3, r2
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	1a9b      	subs	r3, r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	4413      	add	r3, r2
 8004e24:	3304      	adds	r3, #4
 8004e26:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	0c5b      	lsrs	r3, r3, #17
 8004e2c:	f003 030f 	and.w	r3, r3, #15
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d124      	bne.n	8004e7e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d035      	beq.n	8004eac <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	091b      	lsrs	r3, r3, #4
 8004e48:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004e4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	461a      	mov	r2, r3
 8004e52:	6a38      	ldr	r0, [r7, #32]
 8004e54:	f003 fd46 	bl	80088e4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	68da      	ldr	r2, [r3, #12]
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	091b      	lsrs	r3, r3, #4
 8004e60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e64:	441a      	add	r2, r3
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	699a      	ldr	r2, [r3, #24]
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	091b      	lsrs	r3, r3, #4
 8004e72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e76:	441a      	add	r2, r3
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	619a      	str	r2, [r3, #24]
 8004e7c:	e016      	b.n	8004eac <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	0c5b      	lsrs	r3, r3, #17
 8004e82:	f003 030f 	and.w	r3, r3, #15
 8004e86:	2b06      	cmp	r3, #6
 8004e88:	d110      	bne.n	8004eac <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e90:	2208      	movs	r2, #8
 8004e92:	4619      	mov	r1, r3
 8004e94:	6a38      	ldr	r0, [r7, #32]
 8004e96:	f003 fd25 	bl	80088e4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	699a      	ldr	r2, [r3, #24]
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	091b      	lsrs	r3, r3, #4
 8004ea2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ea6:	441a      	add	r2, r3
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	699a      	ldr	r2, [r3, #24]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f042 0210 	orr.w	r2, r2, #16
 8004eba:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f003 fe74 	bl	8008bae <USB_ReadInterrupts>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ecc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ed0:	d16e      	bne.n	8004fb0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f003 fe7a 	bl	8008bd4 <USB_ReadDevAllOutEpInterrupt>
 8004ee0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004ee2:	e062      	b.n	8004faa <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d057      	beq.n	8004f9e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef4:	b2d2      	uxtb	r2, r2
 8004ef6:	4611      	mov	r1, r2
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f003 fe9f 	bl	8008c3c <USB_ReadDevOutEPInterrupt>
 8004efe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00c      	beq.n	8004f24 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f16:	461a      	mov	r2, r3
 8004f18:	2301      	movs	r3, #1
 8004f1a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004f1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 fdb0 	bl	8005a84 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	f003 0308 	and.w	r3, r3, #8
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00c      	beq.n	8004f48 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f30:	015a      	lsls	r2, r3, #5
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	2308      	movs	r3, #8
 8004f3e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004f40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 feaa 	bl	8005c9c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	f003 0310 	and.w	r3, r3, #16
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d008      	beq.n	8004f64 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f5e:	461a      	mov	r2, r3
 8004f60:	2310      	movs	r3, #16
 8004f62:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f003 0320 	and.w	r3, r3, #32
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d008      	beq.n	8004f80 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	015a      	lsls	r2, r3, #5
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	4413      	add	r3, r2
 8004f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	2320      	movs	r3, #32
 8004f7e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d009      	beq.n	8004f9e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	015a      	lsls	r2, r3, #5
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f96:	461a      	mov	r2, r3
 8004f98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f9c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa6:	085b      	lsrs	r3, r3, #1
 8004fa8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d199      	bne.n	8004ee4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f003 fdfa 	bl	8008bae <USB_ReadInterrupts>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fc0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fc4:	f040 80c0 	bne.w	8005148 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f003 fe1b 	bl	8008c08 <USB_ReadDevAllInEpInterrupt>
 8004fd2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004fd8:	e0b2      	b.n	8005140 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 80a7 	beq.w	8005134 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fec:	b2d2      	uxtb	r2, r2
 8004fee:	4611      	mov	r1, r2
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f003 fe41 	bl	8008c78 <USB_ReadDevInEPInterrupt>
 8004ff6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d057      	beq.n	80050b2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	f003 030f 	and.w	r3, r3, #15
 8005008:	2201      	movs	r2, #1
 800500a:	fa02 f303 	lsl.w	r3, r2, r3
 800500e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005016:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	43db      	mvns	r3, r3
 800501c:	69f9      	ldr	r1, [r7, #28]
 800501e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005022:	4013      	ands	r3, r2
 8005024:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	015a      	lsls	r2, r3, #5
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	4413      	add	r3, r2
 800502e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005032:	461a      	mov	r2, r3
 8005034:	2301      	movs	r3, #1
 8005036:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d132      	bne.n	80050a6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005040:	6879      	ldr	r1, [r7, #4]
 8005042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005044:	4613      	mov	r3, r2
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	1a9b      	subs	r3, r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	440b      	add	r3, r1
 800504e:	3348      	adds	r3, #72	; 0x48
 8005050:	6819      	ldr	r1, [r3, #0]
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005056:	4613      	mov	r3, r2
 8005058:	00db      	lsls	r3, r3, #3
 800505a:	1a9b      	subs	r3, r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4403      	add	r3, r0
 8005060:	3344      	adds	r3, #68	; 0x44
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4419      	add	r1, r3
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800506a:	4613      	mov	r3, r2
 800506c:	00db      	lsls	r3, r3, #3
 800506e:	1a9b      	subs	r3, r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4403      	add	r3, r0
 8005074:	3348      	adds	r3, #72	; 0x48
 8005076:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	2b00      	cmp	r3, #0
 800507c:	d113      	bne.n	80050a6 <HAL_PCD_IRQHandler+0x31c>
 800507e:	6879      	ldr	r1, [r7, #4]
 8005080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005082:	4613      	mov	r3, r2
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	1a9b      	subs	r3, r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	440b      	add	r3, r1
 800508c:	3350      	adds	r3, #80	; 0x50
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d108      	bne.n	80050a6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6818      	ldr	r0, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800509e:	461a      	mov	r2, r3
 80050a0:	2101      	movs	r1, #1
 80050a2:	f003 fe49 	bl	8008d38 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80050a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	4619      	mov	r1, r3
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f005 fd7a 	bl	800aba6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f003 0308 	and.w	r3, r3, #8
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d008      	beq.n	80050ce <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c8:	461a      	mov	r2, r3
 80050ca:	2308      	movs	r3, #8
 80050cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	f003 0310 	and.w	r3, r3, #16
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d008      	beq.n	80050ea <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	015a      	lsls	r2, r3, #5
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	4413      	add	r3, r2
 80050e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e4:	461a      	mov	r2, r3
 80050e6:	2310      	movs	r3, #16
 80050e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d008      	beq.n	8005106 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005100:	461a      	mov	r2, r3
 8005102:	2340      	movs	r3, #64	; 0x40
 8005104:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d008      	beq.n	8005122 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	4413      	add	r3, r2
 8005118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800511c:	461a      	mov	r2, r3
 800511e:	2302      	movs	r3, #2
 8005120:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005128:	2b00      	cmp	r3, #0
 800512a:	d003      	beq.n	8005134 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800512c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 fc1b 	bl	800596a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	3301      	adds	r3, #1
 8005138:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800513a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513c:	085b      	lsrs	r3, r3, #1
 800513e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005142:	2b00      	cmp	r3, #0
 8005144:	f47f af49 	bne.w	8004fda <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4618      	mov	r0, r3
 800514e:	f003 fd2e 	bl	8008bae <USB_ReadInterrupts>
 8005152:	4603      	mov	r3, r0
 8005154:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005158:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800515c:	d122      	bne.n	80051a4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	69fa      	ldr	r2, [r7, #28]
 8005168:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800516c:	f023 0301 	bic.w	r3, r3, #1
 8005170:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005178:	2b01      	cmp	r3, #1
 800517a:	d108      	bne.n	800518e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005184:	2100      	movs	r1, #0
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fe26 	bl	8005dd8 <HAL_PCDEx_LPM_Callback>
 800518c:	e002      	b.n	8005194 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f005 fd80 	bl	800ac94 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695a      	ldr	r2, [r3, #20]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80051a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f003 fd00 	bl	8008bae <USB_ReadInterrupts>
 80051ae:	4603      	mov	r3, r0
 80051b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051b8:	d112      	bne.n	80051e0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d102      	bne.n	80051d0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f005 fd3c 	bl	800ac48 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	695a      	ldr	r2, [r3, #20]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80051de:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f003 fce2 	bl	8008bae <USB_ReadInterrupts>
 80051ea:	4603      	mov	r3, r0
 80051ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051f4:	f040 80c7 	bne.w	8005386 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	69fa      	ldr	r2, [r7, #28]
 8005202:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005206:	f023 0301 	bic.w	r3, r3, #1
 800520a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2110      	movs	r1, #16
 8005212:	4618      	mov	r0, r3
 8005214:	f002 fdb0 	bl	8007d78 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005218:	2300      	movs	r3, #0
 800521a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800521c:	e056      	b.n	80052cc <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800521e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	4413      	add	r3, r2
 8005226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800522a:	461a      	mov	r2, r3
 800522c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005230:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005242:	0151      	lsls	r1, r2, #5
 8005244:	69fa      	ldr	r2, [r7, #28]
 8005246:	440a      	add	r2, r1
 8005248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800524c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005250:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005254:	015a      	lsls	r2, r3, #5
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	4413      	add	r3, r2
 800525a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005262:	0151      	lsls	r1, r2, #5
 8005264:	69fa      	ldr	r2, [r7, #28]
 8005266:	440a      	add	r2, r1
 8005268:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800526c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005270:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005274:	015a      	lsls	r2, r3, #5
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	4413      	add	r3, r2
 800527a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800527e:	461a      	mov	r2, r3
 8005280:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005284:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	4413      	add	r3, r2
 800528e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005296:	0151      	lsls	r1, r2, #5
 8005298:	69fa      	ldr	r2, [r7, #28]
 800529a:	440a      	add	r2, r1
 800529c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052a4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80052a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a8:	015a      	lsls	r2, r3, #5
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	4413      	add	r3, r2
 80052ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052b6:	0151      	lsls	r1, r2, #5
 80052b8:	69fa      	ldr	r2, [r7, #28]
 80052ba:	440a      	add	r2, r1
 80052bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052c4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c8:	3301      	adds	r3, #1
 80052ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d3a3      	bcc.n	800521e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	69fa      	ldr	r2, [r7, #28]
 80052e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052e4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80052e8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d016      	beq.n	8005320 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052fc:	69fa      	ldr	r2, [r7, #28]
 80052fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005302:	f043 030b 	orr.w	r3, r3, #11
 8005306:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005312:	69fa      	ldr	r2, [r7, #28]
 8005314:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005318:	f043 030b 	orr.w	r3, r3, #11
 800531c:	6453      	str	r3, [r2, #68]	; 0x44
 800531e:	e015      	b.n	800534c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	69fa      	ldr	r2, [r7, #28]
 800532a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800532e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005332:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005336:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	69fa      	ldr	r2, [r7, #28]
 8005342:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005346:	f043 030b 	orr.w	r3, r3, #11
 800534a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	69fa      	ldr	r2, [r7, #28]
 8005356:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800535a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800535e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6818      	ldr	r0, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005370:	461a      	mov	r2, r3
 8005372:	f003 fce1 	bl	8008d38 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	695a      	ldr	r2, [r3, #20]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005384:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4618      	mov	r0, r3
 800538c:	f003 fc0f 	bl	8008bae <USB_ReadInterrupts>
 8005390:	4603      	mov	r3, r0
 8005392:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800539a:	d124      	bne.n	80053e6 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f003 fca5 	bl	8008cf0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f002 fd45 	bl	8007e3a <USB_GetDevSpeed>
 80053b0:	4603      	mov	r3, r0
 80053b2:	461a      	mov	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681c      	ldr	r4, [r3, #0]
 80053bc:	f001 f944 	bl	8006648 <HAL_RCC_GetHCLKFreq>
 80053c0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	461a      	mov	r2, r3
 80053ca:	4620      	mov	r0, r4
 80053cc:	f002 fa82 	bl	80078d4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f005 fc10 	bl	800abf6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	695a      	ldr	r2, [r3, #20]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80053e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f003 fbdf 	bl	8008bae <USB_ReadInterrupts>
 80053f0:	4603      	mov	r3, r0
 80053f2:	f003 0308 	and.w	r3, r3, #8
 80053f6:	2b08      	cmp	r3, #8
 80053f8:	d10a      	bne.n	8005410 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f005 fbed 	bl	800abda <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	695a      	ldr	r2, [r3, #20]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f002 0208 	and.w	r2, r2, #8
 800540e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4618      	mov	r0, r3
 8005416:	f003 fbca 	bl	8008bae <USB_ReadInterrupts>
 800541a:	4603      	mov	r3, r0
 800541c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005420:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005424:	d10f      	bne.n	8005446 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005426:	2300      	movs	r3, #0
 8005428:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	b2db      	uxtb	r3, r3
 800542e:	4619      	mov	r1, r3
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f005 fc4f 	bl	800acd4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	695a      	ldr	r2, [r3, #20]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005444:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4618      	mov	r0, r3
 800544c:	f003 fbaf 	bl	8008bae <USB_ReadInterrupts>
 8005450:	4603      	mov	r3, r0
 8005452:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005456:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800545a:	d10f      	bne.n	800547c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800545c:	2300      	movs	r3, #0
 800545e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	b2db      	uxtb	r3, r3
 8005464:	4619      	mov	r1, r3
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f005 fc22 	bl	800acb0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	695a      	ldr	r2, [r3, #20]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800547a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4618      	mov	r0, r3
 8005482:	f003 fb94 	bl	8008bae <USB_ReadInterrupts>
 8005486:	4603      	mov	r3, r0
 8005488:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800548c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005490:	d10a      	bne.n	80054a8 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f005 fc30 	bl	800acf8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	695a      	ldr	r2, [r3, #20]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80054a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4618      	mov	r0, r3
 80054ae:	f003 fb7e 	bl	8008bae <USB_ReadInterrupts>
 80054b2:	4603      	mov	r3, r0
 80054b4:	f003 0304 	and.w	r3, r3, #4
 80054b8:	2b04      	cmp	r3, #4
 80054ba:	d115      	bne.n	80054e8 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	f003 0304 	and.w	r3, r3, #4
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d002      	beq.n	80054d4 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f005 fc20 	bl	800ad14 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6859      	ldr	r1, [r3, #4]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	69ba      	ldr	r2, [r7, #24]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	605a      	str	r2, [r3, #4]
 80054e4:	e000      	b.n	80054e8 <HAL_PCD_IRQHandler+0x75e>
      return;
 80054e6:	bf00      	nop
    }
  }
}
 80054e8:	3734      	adds	r7, #52	; 0x34
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd90      	pop	{r4, r7, pc}

080054ee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b082      	sub	sp, #8
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
 80054f6:	460b      	mov	r3, r1
 80054f8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005500:	2b01      	cmp	r3, #1
 8005502:	d101      	bne.n	8005508 <HAL_PCD_SetAddress+0x1a>
 8005504:	2302      	movs	r3, #2
 8005506:	e013      	b.n	8005530 <HAL_PCD_SetAddress+0x42>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	78fa      	ldrb	r2, [r7, #3]
 8005514:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	78fa      	ldrb	r2, [r7, #3]
 800551e:	4611      	mov	r1, r2
 8005520:	4618      	mov	r0, r3
 8005522:	f003 fadc 	bl	8008ade <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	4608      	mov	r0, r1
 8005542:	4611      	mov	r1, r2
 8005544:	461a      	mov	r2, r3
 8005546:	4603      	mov	r3, r0
 8005548:	70fb      	strb	r3, [r7, #3]
 800554a:	460b      	mov	r3, r1
 800554c:	803b      	strh	r3, [r7, #0]
 800554e:	4613      	mov	r3, r2
 8005550:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005552:	2300      	movs	r3, #0
 8005554:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005556:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800555a:	2b00      	cmp	r3, #0
 800555c:	da0f      	bge.n	800557e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800555e:	78fb      	ldrb	r3, [r7, #3]
 8005560:	f003 020f 	and.w	r2, r3, #15
 8005564:	4613      	mov	r3, r2
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	1a9b      	subs	r3, r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	3338      	adds	r3, #56	; 0x38
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	4413      	add	r3, r2
 8005572:	3304      	adds	r3, #4
 8005574:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2201      	movs	r2, #1
 800557a:	705a      	strb	r2, [r3, #1]
 800557c:	e00f      	b.n	800559e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800557e:	78fb      	ldrb	r3, [r7, #3]
 8005580:	f003 020f 	and.w	r2, r3, #15
 8005584:	4613      	mov	r3, r2
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	1a9b      	subs	r3, r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	4413      	add	r3, r2
 8005594:	3304      	adds	r3, #4
 8005596:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800559e:	78fb      	ldrb	r3, [r7, #3]
 80055a0:	f003 030f 	and.w	r3, r3, #15
 80055a4:	b2da      	uxtb	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80055aa:	883a      	ldrh	r2, [r7, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	78ba      	ldrb	r2, [r7, #2]
 80055b4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	785b      	ldrb	r3, [r3, #1]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d004      	beq.n	80055c8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80055c8:	78bb      	ldrb	r3, [r7, #2]
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d102      	bne.n	80055d4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d101      	bne.n	80055e2 <HAL_PCD_EP_Open+0xaa>
 80055de:	2302      	movs	r3, #2
 80055e0:	e00e      	b.n	8005600 <HAL_PCD_EP_Open+0xc8>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68f9      	ldr	r1, [r7, #12]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f002 fc47 	bl	8007e84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80055fe:	7afb      	ldrb	r3, [r7, #11]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	460b      	mov	r3, r1
 8005612:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005614:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005618:	2b00      	cmp	r3, #0
 800561a:	da0f      	bge.n	800563c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800561c:	78fb      	ldrb	r3, [r7, #3]
 800561e:	f003 020f 	and.w	r2, r3, #15
 8005622:	4613      	mov	r3, r2
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	1a9b      	subs	r3, r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	3338      	adds	r3, #56	; 0x38
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	4413      	add	r3, r2
 8005630:	3304      	adds	r3, #4
 8005632:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2201      	movs	r2, #1
 8005638:	705a      	strb	r2, [r3, #1]
 800563a:	e00f      	b.n	800565c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800563c:	78fb      	ldrb	r3, [r7, #3]
 800563e:	f003 020f 	and.w	r2, r3, #15
 8005642:	4613      	mov	r3, r2
 8005644:	00db      	lsls	r3, r3, #3
 8005646:	1a9b      	subs	r3, r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	4413      	add	r3, r2
 8005652:	3304      	adds	r3, #4
 8005654:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800565c:	78fb      	ldrb	r3, [r7, #3]
 800565e:	f003 030f 	and.w	r3, r3, #15
 8005662:	b2da      	uxtb	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800566e:	2b01      	cmp	r3, #1
 8005670:	d101      	bne.n	8005676 <HAL_PCD_EP_Close+0x6e>
 8005672:	2302      	movs	r3, #2
 8005674:	e00e      	b.n	8005694 <HAL_PCD_EP_Close+0x8c>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68f9      	ldr	r1, [r7, #12]
 8005684:	4618      	mov	r0, r3
 8005686:	f002 fc85 	bl	8007f94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	607a      	str	r2, [r7, #4]
 80056a6:	603b      	str	r3, [r7, #0]
 80056a8:	460b      	mov	r3, r1
 80056aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056ac:	7afb      	ldrb	r3, [r7, #11]
 80056ae:	f003 020f 	and.w	r2, r3, #15
 80056b2:	4613      	mov	r3, r2
 80056b4:	00db      	lsls	r3, r3, #3
 80056b6:	1a9b      	subs	r3, r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	4413      	add	r3, r2
 80056c2:	3304      	adds	r3, #4
 80056c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	2200      	movs	r2, #0
 80056d6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	2200      	movs	r2, #0
 80056dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056de:	7afb      	ldrb	r3, [r7, #11]
 80056e0:	f003 030f 	and.w	r3, r3, #15
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d102      	bne.n	80056f8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80056f8:	7afb      	ldrb	r3, [r7, #11]
 80056fa:	f003 030f 	and.w	r3, r3, #15
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d109      	bne.n	8005716 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6818      	ldr	r0, [r3, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	b2db      	uxtb	r3, r3
 800570c:	461a      	mov	r2, r3
 800570e:	6979      	ldr	r1, [r7, #20]
 8005710:	f002 ff60 	bl	80085d4 <USB_EP0StartXfer>
 8005714:	e008      	b.n	8005728 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6818      	ldr	r0, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	b2db      	uxtb	r3, r3
 8005720:	461a      	mov	r2, r3
 8005722:	6979      	ldr	r1, [r7, #20]
 8005724:	f002 fd12 	bl	800814c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3718      	adds	r7, #24
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005732:	b480      	push	{r7}
 8005734:	b083      	sub	sp, #12
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
 800573a:	460b      	mov	r3, r1
 800573c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800573e:	78fb      	ldrb	r3, [r7, #3]
 8005740:	f003 020f 	and.w	r2, r3, #15
 8005744:	6879      	ldr	r1, [r7, #4]
 8005746:	4613      	mov	r3, r2
 8005748:	00db      	lsls	r3, r3, #3
 800574a:	1a9b      	subs	r3, r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	440b      	add	r3, r1
 8005750:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005754:	681b      	ldr	r3, [r3, #0]
}
 8005756:	4618      	mov	r0, r3
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b086      	sub	sp, #24
 8005766:	af00      	add	r7, sp, #0
 8005768:	60f8      	str	r0, [r7, #12]
 800576a:	607a      	str	r2, [r7, #4]
 800576c:	603b      	str	r3, [r7, #0]
 800576e:	460b      	mov	r3, r1
 8005770:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005772:	7afb      	ldrb	r3, [r7, #11]
 8005774:	f003 020f 	and.w	r2, r3, #15
 8005778:	4613      	mov	r3, r2
 800577a:	00db      	lsls	r3, r3, #3
 800577c:	1a9b      	subs	r3, r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	3338      	adds	r3, #56	; 0x38
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	4413      	add	r3, r2
 8005786:	3304      	adds	r3, #4
 8005788:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2200      	movs	r2, #0
 800579a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	2201      	movs	r2, #1
 80057a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057a2:	7afb      	ldrb	r3, [r7, #11]
 80057a4:	f003 030f 	and.w	r3, r3, #15
 80057a8:	b2da      	uxtb	r2, r3
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d102      	bne.n	80057bc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80057bc:	7afb      	ldrb	r3, [r7, #11]
 80057be:	f003 030f 	and.w	r3, r3, #15
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d109      	bne.n	80057da <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6818      	ldr	r0, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	461a      	mov	r2, r3
 80057d2:	6979      	ldr	r1, [r7, #20]
 80057d4:	f002 fefe 	bl	80085d4 <USB_EP0StartXfer>
 80057d8:	e008      	b.n	80057ec <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6818      	ldr	r0, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	461a      	mov	r2, r3
 80057e6:	6979      	ldr	r1, [r7, #20]
 80057e8:	f002 fcb0 	bl	800814c <USB_EPStartXfer>
  }

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3718      	adds	r7, #24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b084      	sub	sp, #16
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	460b      	mov	r3, r1
 8005800:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005802:	78fb      	ldrb	r3, [r7, #3]
 8005804:	f003 020f 	and.w	r2, r3, #15
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	429a      	cmp	r2, r3
 800580e:	d901      	bls.n	8005814 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e050      	b.n	80058b6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005814:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005818:	2b00      	cmp	r3, #0
 800581a:	da0f      	bge.n	800583c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800581c:	78fb      	ldrb	r3, [r7, #3]
 800581e:	f003 020f 	and.w	r2, r3, #15
 8005822:	4613      	mov	r3, r2
 8005824:	00db      	lsls	r3, r3, #3
 8005826:	1a9b      	subs	r3, r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	3338      	adds	r3, #56	; 0x38
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	4413      	add	r3, r2
 8005830:	3304      	adds	r3, #4
 8005832:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2201      	movs	r2, #1
 8005838:	705a      	strb	r2, [r3, #1]
 800583a:	e00d      	b.n	8005858 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800583c:	78fa      	ldrb	r2, [r7, #3]
 800583e:	4613      	mov	r3, r2
 8005840:	00db      	lsls	r3, r3, #3
 8005842:	1a9b      	subs	r3, r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	4413      	add	r3, r2
 800584e:	3304      	adds	r3, #4
 8005850:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2201      	movs	r2, #1
 800585c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800585e:	78fb      	ldrb	r3, [r7, #3]
 8005860:	f003 030f 	and.w	r3, r3, #15
 8005864:	b2da      	uxtb	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005870:	2b01      	cmp	r3, #1
 8005872:	d101      	bne.n	8005878 <HAL_PCD_EP_SetStall+0x82>
 8005874:	2302      	movs	r3, #2
 8005876:	e01e      	b.n	80058b6 <HAL_PCD_EP_SetStall+0xc0>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68f9      	ldr	r1, [r7, #12]
 8005886:	4618      	mov	r0, r3
 8005888:	f003 f855 	bl	8008936 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800588c:	78fb      	ldrb	r3, [r7, #3]
 800588e:	f003 030f 	and.w	r3, r3, #15
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10a      	bne.n	80058ac <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6818      	ldr	r0, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	b2d9      	uxtb	r1, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80058a6:	461a      	mov	r2, r3
 80058a8:	f003 fa46 	bl	8008d38 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b084      	sub	sp, #16
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
 80058c6:	460b      	mov	r3, r1
 80058c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80058ca:	78fb      	ldrb	r3, [r7, #3]
 80058cc:	f003 020f 	and.w	r2, r3, #15
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d901      	bls.n	80058dc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e042      	b.n	8005962 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80058dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	da0f      	bge.n	8005904 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058e4:	78fb      	ldrb	r3, [r7, #3]
 80058e6:	f003 020f 	and.w	r2, r3, #15
 80058ea:	4613      	mov	r3, r2
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	1a9b      	subs	r3, r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	3338      	adds	r3, #56	; 0x38
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	4413      	add	r3, r2
 80058f8:	3304      	adds	r3, #4
 80058fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2201      	movs	r2, #1
 8005900:	705a      	strb	r2, [r3, #1]
 8005902:	e00f      	b.n	8005924 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005904:	78fb      	ldrb	r3, [r7, #3]
 8005906:	f003 020f 	and.w	r2, r3, #15
 800590a:	4613      	mov	r3, r2
 800590c:	00db      	lsls	r3, r3, #3
 800590e:	1a9b      	subs	r3, r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	4413      	add	r3, r2
 800591a:	3304      	adds	r3, #4
 800591c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800592a:	78fb      	ldrb	r3, [r7, #3]
 800592c:	f003 030f 	and.w	r3, r3, #15
 8005930:	b2da      	uxtb	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800593c:	2b01      	cmp	r3, #1
 800593e:	d101      	bne.n	8005944 <HAL_PCD_EP_ClrStall+0x86>
 8005940:	2302      	movs	r3, #2
 8005942:	e00e      	b.n	8005962 <HAL_PCD_EP_ClrStall+0xa4>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68f9      	ldr	r1, [r7, #12]
 8005952:	4618      	mov	r0, r3
 8005954:	f003 f85d 	bl	8008a12 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b08a      	sub	sp, #40	; 0x28
 800596e:	af02      	add	r7, sp, #8
 8005970:	6078      	str	r0, [r7, #4]
 8005972:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	4613      	mov	r3, r2
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	1a9b      	subs	r3, r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	3338      	adds	r3, #56	; 0x38
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	4413      	add	r3, r2
 800598e:	3304      	adds	r3, #4
 8005990:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	699a      	ldr	r2, [r3, #24]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	429a      	cmp	r2, r3
 800599c:	d901      	bls.n	80059a2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e06c      	b.n	8005a7c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	695a      	ldr	r2, [r3, #20]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	69fa      	ldr	r2, [r7, #28]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d902      	bls.n	80059be <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	3303      	adds	r3, #3
 80059c2:	089b      	lsrs	r3, r3, #2
 80059c4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80059c6:	e02b      	b.n	8005a20 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	695a      	ldr	r2, [r3, #20]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	69fa      	ldr	r2, [r7, #28]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d902      	bls.n	80059e4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	3303      	adds	r3, #3
 80059e8:	089b      	lsrs	r3, r3, #2
 80059ea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	68d9      	ldr	r1, [r3, #12]
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	b2da      	uxtb	r2, r3
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	4603      	mov	r3, r0
 8005a02:	6978      	ldr	r0, [r7, #20]
 8005a04:	f002 ff39 	bl	800887a <USB_WritePacket>

    ep->xfer_buff  += len;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	68da      	ldr	r2, [r3, #12]
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	441a      	add	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	699a      	ldr	r2, [r3, #24]
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	441a      	add	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d809      	bhi.n	8005a4a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	699a      	ldr	r2, [r3, #24]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d203      	bcs.n	8005a4a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1be      	bne.n	80059c8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	695a      	ldr	r2, [r3, #20]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d811      	bhi.n	8005a7a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	f003 030f 	and.w	r3, r3, #15
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a62:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	43db      	mvns	r3, r3
 8005a70:	6939      	ldr	r1, [r7, #16]
 8005a72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a76:	4013      	ands	r3, r2
 8005a78:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3720      	adds	r7, #32
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b086      	sub	sp, #24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	333c      	adds	r3, #60	; 0x3c
 8005a9c:	3304      	adds	r3, #4
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	f040 80a0 	bne.w	8005bfc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	f003 0308 	and.w	r3, r3, #8
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d015      	beq.n	8005af2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	4a72      	ldr	r2, [pc, #456]	; (8005c94 <PCD_EP_OutXfrComplete_int+0x210>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	f240 80dd 	bls.w	8005c8a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f000 80d7 	beq.w	8005c8a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae8:	461a      	mov	r2, r3
 8005aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aee:	6093      	str	r3, [r2, #8]
 8005af0:	e0cb      	b.n	8005c8a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	f003 0320 	and.w	r3, r3, #32
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d009      	beq.n	8005b10 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	015a      	lsls	r2, r3, #5
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	4413      	add	r3, r2
 8005b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b08:	461a      	mov	r2, r3
 8005b0a:	2320      	movs	r3, #32
 8005b0c:	6093      	str	r3, [r2, #8]
 8005b0e:	e0bc      	b.n	8005c8a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f040 80b7 	bne.w	8005c8a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4a5d      	ldr	r2, [pc, #372]	; (8005c94 <PCD_EP_OutXfrComplete_int+0x210>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d90f      	bls.n	8005b44 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00a      	beq.n	8005b44 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b40:	6093      	str	r3, [r2, #8]
 8005b42:	e0a2      	b.n	8005c8a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005b44:	6879      	ldr	r1, [r7, #4]
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	00db      	lsls	r3, r3, #3
 8005b4c:	1a9b      	subs	r3, r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	440b      	add	r3, r1
 8005b52:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005b56:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	0159      	lsls	r1, r3, #5
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	440b      	add	r3, r1
 8005b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005b6a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	4613      	mov	r3, r2
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	1a9b      	subs	r3, r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	4403      	add	r3, r0
 8005b7a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005b7e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005b80:	6879      	ldr	r1, [r7, #4]
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	4613      	mov	r3, r2
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	1a9b      	subs	r3, r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	440b      	add	r3, r1
 8005b8e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005b92:	6819      	ldr	r1, [r3, #0]
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	00db      	lsls	r3, r3, #3
 8005b9c:	1a9b      	subs	r3, r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4403      	add	r3, r0
 8005ba2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4419      	add	r1, r3
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	683a      	ldr	r2, [r7, #0]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	00db      	lsls	r3, r3, #3
 8005bb2:	1a9b      	subs	r3, r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4403      	add	r3, r0
 8005bb8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005bbc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d114      	bne.n	8005bee <PCD_EP_OutXfrComplete_int+0x16a>
 8005bc4:	6879      	ldr	r1, [r7, #4]
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	00db      	lsls	r3, r3, #3
 8005bcc:	1a9b      	subs	r3, r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	440b      	add	r3, r1
 8005bd2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d108      	bne.n	8005bee <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6818      	ldr	r0, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005be6:	461a      	mov	r2, r3
 8005be8:	2101      	movs	r1, #1
 8005bea:	f003 f8a5 	bl	8008d38 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f004 ffbb 	bl	800ab70 <HAL_PCD_DataOutStageCallback>
 8005bfa:	e046      	b.n	8005c8a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4a26      	ldr	r2, [pc, #152]	; (8005c98 <PCD_EP_OutXfrComplete_int+0x214>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d124      	bne.n	8005c4e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00a      	beq.n	8005c24 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c20:	6093      	str	r3, [r2, #8]
 8005c22:	e032      	b.n	8005c8a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	f003 0320 	and.w	r3, r3, #32
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d008      	beq.n	8005c40 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	015a      	lsls	r2, r3, #5
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	4413      	add	r3, r2
 8005c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	2320      	movs	r3, #32
 8005c3e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	4619      	mov	r1, r3
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f004 ff92 	bl	800ab70 <HAL_PCD_DataOutStageCallback>
 8005c4c:	e01d      	b.n	8005c8a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d114      	bne.n	8005c7e <PCD_EP_OutXfrComplete_int+0x1fa>
 8005c54:	6879      	ldr	r1, [r7, #4]
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	00db      	lsls	r3, r3, #3
 8005c5c:	1a9b      	subs	r3, r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	440b      	add	r3, r1
 8005c62:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d108      	bne.n	8005c7e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6818      	ldr	r0, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005c76:	461a      	mov	r2, r3
 8005c78:	2100      	movs	r1, #0
 8005c7a:	f003 f85d 	bl	8008d38 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	4619      	mov	r1, r3
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f004 ff73 	bl	800ab70 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3718      	adds	r7, #24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	4f54300a 	.word	0x4f54300a
 8005c98:	4f54310a 	.word	0x4f54310a

08005c9c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	333c      	adds	r3, #60	; 0x3c
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	4a15      	ldr	r2, [pc, #84]	; (8005d24 <PCD_EP_OutSetupPacket_int+0x88>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d90e      	bls.n	8005cf0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d009      	beq.n	8005cf0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce8:	461a      	mov	r2, r3
 8005cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f004 ff2b 	bl	800ab4c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	4a0a      	ldr	r2, [pc, #40]	; (8005d24 <PCD_EP_OutSetupPacket_int+0x88>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d90c      	bls.n	8005d18 <PCD_EP_OutSetupPacket_int+0x7c>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d108      	bne.n	8005d18 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6818      	ldr	r0, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005d10:	461a      	mov	r2, r3
 8005d12:	2101      	movs	r1, #1
 8005d14:	f003 f810 	bl	8008d38 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3718      	adds	r7, #24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	4f54300a 	.word	0x4f54300a

08005d28 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	460b      	mov	r3, r1
 8005d32:	70fb      	strb	r3, [r7, #3]
 8005d34:	4613      	mov	r3, r2
 8005d36:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005d40:	78fb      	ldrb	r3, [r7, #3]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d107      	bne.n	8005d56 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005d46:	883b      	ldrh	r3, [r7, #0]
 8005d48:	0419      	lsls	r1, r3, #16
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	430a      	orrs	r2, r1
 8005d52:	629a      	str	r2, [r3, #40]	; 0x28
 8005d54:	e028      	b.n	8005da8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5c:	0c1b      	lsrs	r3, r3, #16
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	4413      	add	r3, r2
 8005d62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005d64:	2300      	movs	r3, #0
 8005d66:	73fb      	strb	r3, [r7, #15]
 8005d68:	e00d      	b.n	8005d86 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	7bfb      	ldrb	r3, [r7, #15]
 8005d70:	3340      	adds	r3, #64	; 0x40
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	4413      	add	r3, r2
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	0c1b      	lsrs	r3, r3, #16
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005d80:	7bfb      	ldrb	r3, [r7, #15]
 8005d82:	3301      	adds	r3, #1
 8005d84:	73fb      	strb	r3, [r7, #15]
 8005d86:	7bfa      	ldrb	r2, [r7, #15]
 8005d88:	78fb      	ldrb	r3, [r7, #3]
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d3ec      	bcc.n	8005d6a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005d90:	883b      	ldrh	r3, [r7, #0]
 8005d92:	0418      	lsls	r0, r3, #16
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6819      	ldr	r1, [r3, #0]
 8005d98:	78fb      	ldrb	r3, [r7, #3]
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	4302      	orrs	r2, r0
 8005da0:	3340      	adds	r3, #64	; 0x40
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	440b      	add	r3, r1
 8005da6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b083      	sub	sp, #12
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	887a      	ldrh	r2, [r7, #2]
 8005dc8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	460b      	mov	r3, r1
 8005de2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d101      	bne.n	8005e02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e25b      	b.n	80062ba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d075      	beq.n	8005efa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e0e:	4ba3      	ldr	r3, [pc, #652]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f003 030c 	and.w	r3, r3, #12
 8005e16:	2b04      	cmp	r3, #4
 8005e18:	d00c      	beq.n	8005e34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e1a:	4ba0      	ldr	r3, [pc, #640]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e22:	2b08      	cmp	r3, #8
 8005e24:	d112      	bne.n	8005e4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e26:	4b9d      	ldr	r3, [pc, #628]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e32:	d10b      	bne.n	8005e4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e34:	4b99      	ldr	r3, [pc, #612]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d05b      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x108>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d157      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e236      	b.n	80062ba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e54:	d106      	bne.n	8005e64 <HAL_RCC_OscConfig+0x74>
 8005e56:	4b91      	ldr	r3, [pc, #580]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a90      	ldr	r2, [pc, #576]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e60:	6013      	str	r3, [r2, #0]
 8005e62:	e01d      	b.n	8005ea0 <HAL_RCC_OscConfig+0xb0>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e6c:	d10c      	bne.n	8005e88 <HAL_RCC_OscConfig+0x98>
 8005e6e:	4b8b      	ldr	r3, [pc, #556]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a8a      	ldr	r2, [pc, #552]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e78:	6013      	str	r3, [r2, #0]
 8005e7a:	4b88      	ldr	r3, [pc, #544]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a87      	ldr	r2, [pc, #540]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e84:	6013      	str	r3, [r2, #0]
 8005e86:	e00b      	b.n	8005ea0 <HAL_RCC_OscConfig+0xb0>
 8005e88:	4b84      	ldr	r3, [pc, #528]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a83      	ldr	r2, [pc, #524]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e92:	6013      	str	r3, [r2, #0]
 8005e94:	4b81      	ldr	r3, [pc, #516]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a80      	ldr	r2, [pc, #512]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005e9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d013      	beq.n	8005ed0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ea8:	f7fd fb60 	bl	800356c <HAL_GetTick>
 8005eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eae:	e008      	b.n	8005ec2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005eb0:	f7fd fb5c 	bl	800356c <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	2b64      	cmp	r3, #100	; 0x64
 8005ebc:	d901      	bls.n	8005ec2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e1fb      	b.n	80062ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ec2:	4b76      	ldr	r3, [pc, #472]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d0f0      	beq.n	8005eb0 <HAL_RCC_OscConfig+0xc0>
 8005ece:	e014      	b.n	8005efa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ed0:	f7fd fb4c 	bl	800356c <HAL_GetTick>
 8005ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ed6:	e008      	b.n	8005eea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ed8:	f7fd fb48 	bl	800356c <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	2b64      	cmp	r3, #100	; 0x64
 8005ee4:	d901      	bls.n	8005eea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e1e7      	b.n	80062ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eea:	4b6c      	ldr	r3, [pc, #432]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1f0      	bne.n	8005ed8 <HAL_RCC_OscConfig+0xe8>
 8005ef6:	e000      	b.n	8005efa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ef8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0302 	and.w	r3, r3, #2
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d063      	beq.n	8005fce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f06:	4b65      	ldr	r3, [pc, #404]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f003 030c 	and.w	r3, r3, #12
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00b      	beq.n	8005f2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f12:	4b62      	ldr	r3, [pc, #392]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f1a:	2b08      	cmp	r3, #8
 8005f1c:	d11c      	bne.n	8005f58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f1e:	4b5f      	ldr	r3, [pc, #380]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d116      	bne.n	8005f58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f2a:	4b5c      	ldr	r3, [pc, #368]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d005      	beq.n	8005f42 <HAL_RCC_OscConfig+0x152>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d001      	beq.n	8005f42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e1bb      	b.n	80062ba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f42:	4b56      	ldr	r3, [pc, #344]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	00db      	lsls	r3, r3, #3
 8005f50:	4952      	ldr	r1, [pc, #328]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f56:	e03a      	b.n	8005fce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d020      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f60:	4b4f      	ldr	r3, [pc, #316]	; (80060a0 <HAL_RCC_OscConfig+0x2b0>)
 8005f62:	2201      	movs	r2, #1
 8005f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f66:	f7fd fb01 	bl	800356c <HAL_GetTick>
 8005f6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f6c:	e008      	b.n	8005f80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f6e:	f7fd fafd 	bl	800356c <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d901      	bls.n	8005f80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e19c      	b.n	80062ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f80:	4b46      	ldr	r3, [pc, #280]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d0f0      	beq.n	8005f6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f8c:	4b43      	ldr	r3, [pc, #268]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	00db      	lsls	r3, r3, #3
 8005f9a:	4940      	ldr	r1, [pc, #256]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	600b      	str	r3, [r1, #0]
 8005fa0:	e015      	b.n	8005fce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fa2:	4b3f      	ldr	r3, [pc, #252]	; (80060a0 <HAL_RCC_OscConfig+0x2b0>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa8:	f7fd fae0 	bl	800356c <HAL_GetTick>
 8005fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fae:	e008      	b.n	8005fc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fb0:	f7fd fadc 	bl	800356c <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d901      	bls.n	8005fc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e17b      	b.n	80062ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fc2:	4b36      	ldr	r3, [pc, #216]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0302 	and.w	r3, r3, #2
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1f0      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0308 	and.w	r3, r3, #8
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d030      	beq.n	800603c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d016      	beq.n	8006010 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fe2:	4b30      	ldr	r3, [pc, #192]	; (80060a4 <HAL_RCC_OscConfig+0x2b4>)
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fe8:	f7fd fac0 	bl	800356c <HAL_GetTick>
 8005fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fee:	e008      	b.n	8006002 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ff0:	f7fd fabc 	bl	800356c <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e15b      	b.n	80062ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006002:	4b26      	ldr	r3, [pc, #152]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8006004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d0f0      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x200>
 800600e:	e015      	b.n	800603c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006010:	4b24      	ldr	r3, [pc, #144]	; (80060a4 <HAL_RCC_OscConfig+0x2b4>)
 8006012:	2200      	movs	r2, #0
 8006014:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006016:	f7fd faa9 	bl	800356c <HAL_GetTick>
 800601a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800601c:	e008      	b.n	8006030 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800601e:	f7fd faa5 	bl	800356c <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	2b02      	cmp	r3, #2
 800602a:	d901      	bls.n	8006030 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e144      	b.n	80062ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006030:	4b1a      	ldr	r3, [pc, #104]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8006032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006034:	f003 0302 	and.w	r3, r3, #2
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1f0      	bne.n	800601e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0304 	and.w	r3, r3, #4
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 80a0 	beq.w	800618a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800604a:	2300      	movs	r3, #0
 800604c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800604e:	4b13      	ldr	r3, [pc, #76]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8006050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10f      	bne.n	800607a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800605a:	2300      	movs	r3, #0
 800605c:	60bb      	str	r3, [r7, #8]
 800605e:	4b0f      	ldr	r3, [pc, #60]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8006060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006062:	4a0e      	ldr	r2, [pc, #56]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8006064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006068:	6413      	str	r3, [r2, #64]	; 0x40
 800606a:	4b0c      	ldr	r3, [pc, #48]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 800606c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006072:	60bb      	str	r3, [r7, #8]
 8006074:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006076:	2301      	movs	r3, #1
 8006078:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800607a:	4b0b      	ldr	r3, [pc, #44]	; (80060a8 <HAL_RCC_OscConfig+0x2b8>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006082:	2b00      	cmp	r3, #0
 8006084:	d121      	bne.n	80060ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006086:	4b08      	ldr	r3, [pc, #32]	; (80060a8 <HAL_RCC_OscConfig+0x2b8>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a07      	ldr	r2, [pc, #28]	; (80060a8 <HAL_RCC_OscConfig+0x2b8>)
 800608c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006090:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006092:	f7fd fa6b 	bl	800356c <HAL_GetTick>
 8006096:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006098:	e011      	b.n	80060be <HAL_RCC_OscConfig+0x2ce>
 800609a:	bf00      	nop
 800609c:	40023800 	.word	0x40023800
 80060a0:	42470000 	.word	0x42470000
 80060a4:	42470e80 	.word	0x42470e80
 80060a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060ac:	f7fd fa5e 	bl	800356c <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d901      	bls.n	80060be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e0fd      	b.n	80062ba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060be:	4b81      	ldr	r3, [pc, #516]	; (80062c4 <HAL_RCC_OscConfig+0x4d4>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d0f0      	beq.n	80060ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d106      	bne.n	80060e0 <HAL_RCC_OscConfig+0x2f0>
 80060d2:	4b7d      	ldr	r3, [pc, #500]	; (80062c8 <HAL_RCC_OscConfig+0x4d8>)
 80060d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d6:	4a7c      	ldr	r2, [pc, #496]	; (80062c8 <HAL_RCC_OscConfig+0x4d8>)
 80060d8:	f043 0301 	orr.w	r3, r3, #1
 80060dc:	6713      	str	r3, [r2, #112]	; 0x70
 80060de:	e01c      	b.n	800611a <HAL_RCC_OscConfig+0x32a>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	2b05      	cmp	r3, #5
 80060e6:	d10c      	bne.n	8006102 <HAL_RCC_OscConfig+0x312>
 80060e8:	4b77      	ldr	r3, [pc, #476]	; (80062c8 <HAL_RCC_OscConfig+0x4d8>)
 80060ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ec:	4a76      	ldr	r2, [pc, #472]	; (80062c8 <HAL_RCC_OscConfig+0x4d8>)
 80060ee:	f043 0304 	orr.w	r3, r3, #4
 80060f2:	6713      	str	r3, [r2, #112]	; 0x70
 80060f4:	4b74      	ldr	r3, [pc, #464]	; (80062c8 <HAL_RCC_OscConfig+0x4d8>)
 80060f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f8:	4a73      	ldr	r2, [pc, #460]	; (80062c8 <HAL_RCC_OscConfig+0x4d8>)
 80060fa:	f043 0301 	orr.w	r3, r3, #1
 80060fe:	6713      	str	r3, [r2, #112]	; 0x70
 8006100:	e00b      	b.n	800611a <HAL_RCC_OscConfig+0x32a>
 8006102:	4b71      	ldr	r3, [pc, #452]	; (80062c8 <HAL_RCC_OscConfig+0x4d8>)
 8006104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006106:	4a70      	ldr	r2, [pc, #448]	; (80062c8 <HAL_RCC_OscConfig+0x4d8>)
 8006108:	f023 0301 	bic.w	r3, r3, #1
 800610c:	6713      	str	r3, [r2, #112]	; 0x70
 800610e:	4b6e      	ldr	r3, [pc, #440]	; (80062c8 <HAL_RCC_OscConfig+0x4d8>)
 8006110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006112:	4a6d      	ldr	r2, [pc, #436]	; (80062c8 <HAL_RCC_OscConfig+0x4d8>)
 8006114:	f023 0304 	bic.w	r3, r3, #4
 8006118:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d015      	beq.n	800614e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006122:	f7fd fa23 	bl	800356c <HAL_GetTick>
 8006126:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006128:	e00a      	b.n	8006140 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800612a:	f7fd fa1f 	bl	800356c <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	f241 3288 	movw	r2, #5000	; 0x1388
 8006138:	4293      	cmp	r3, r2
 800613a:	d901      	bls.n	8006140 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e0bc      	b.n	80062ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006140:	4b61      	ldr	r3, [pc, #388]	; (80062c8 <HAL_RCC_OscConfig+0x4d8>)
 8006142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006144:	f003 0302 	and.w	r3, r3, #2
 8006148:	2b00      	cmp	r3, #0
 800614a:	d0ee      	beq.n	800612a <HAL_RCC_OscConfig+0x33a>
 800614c:	e014      	b.n	8006178 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800614e:	f7fd fa0d 	bl	800356c <HAL_GetTick>
 8006152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006154:	e00a      	b.n	800616c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006156:	f7fd fa09 	bl	800356c <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	f241 3288 	movw	r2, #5000	; 0x1388
 8006164:	4293      	cmp	r3, r2
 8006166:	d901      	bls.n	800616c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e0a6      	b.n	80062ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800616c:	4b56      	ldr	r3, [pc, #344]	; (80062c8 <HAL_RCC_OscConfig+0x4d8>)
 800616e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006170:	f003 0302 	and.w	r3, r3, #2
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1ee      	bne.n	8006156 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006178:	7dfb      	ldrb	r3, [r7, #23]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d105      	bne.n	800618a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800617e:	4b52      	ldr	r3, [pc, #328]	; (80062c8 <HAL_RCC_OscConfig+0x4d8>)
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	4a51      	ldr	r2, [pc, #324]	; (80062c8 <HAL_RCC_OscConfig+0x4d8>)
 8006184:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006188:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	2b00      	cmp	r3, #0
 8006190:	f000 8092 	beq.w	80062b8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006194:	4b4c      	ldr	r3, [pc, #304]	; (80062c8 <HAL_RCC_OscConfig+0x4d8>)
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f003 030c 	and.w	r3, r3, #12
 800619c:	2b08      	cmp	r3, #8
 800619e:	d05c      	beq.n	800625a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d141      	bne.n	800622c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061a8:	4b48      	ldr	r3, [pc, #288]	; (80062cc <HAL_RCC_OscConfig+0x4dc>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ae:	f7fd f9dd 	bl	800356c <HAL_GetTick>
 80061b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061b4:	e008      	b.n	80061c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061b6:	f7fd f9d9 	bl	800356c <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d901      	bls.n	80061c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e078      	b.n	80062ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061c8:	4b3f      	ldr	r3, [pc, #252]	; (80062c8 <HAL_RCC_OscConfig+0x4d8>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1f0      	bne.n	80061b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	69da      	ldr	r2, [r3, #28]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a1b      	ldr	r3, [r3, #32]
 80061dc:	431a      	orrs	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e2:	019b      	lsls	r3, r3, #6
 80061e4:	431a      	orrs	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ea:	085b      	lsrs	r3, r3, #1
 80061ec:	3b01      	subs	r3, #1
 80061ee:	041b      	lsls	r3, r3, #16
 80061f0:	431a      	orrs	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f6:	061b      	lsls	r3, r3, #24
 80061f8:	4933      	ldr	r1, [pc, #204]	; (80062c8 <HAL_RCC_OscConfig+0x4d8>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061fe:	4b33      	ldr	r3, [pc, #204]	; (80062cc <HAL_RCC_OscConfig+0x4dc>)
 8006200:	2201      	movs	r2, #1
 8006202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006204:	f7fd f9b2 	bl	800356c <HAL_GetTick>
 8006208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800620a:	e008      	b.n	800621e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800620c:	f7fd f9ae 	bl	800356c <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	2b02      	cmp	r3, #2
 8006218:	d901      	bls.n	800621e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e04d      	b.n	80062ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800621e:	4b2a      	ldr	r3, [pc, #168]	; (80062c8 <HAL_RCC_OscConfig+0x4d8>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d0f0      	beq.n	800620c <HAL_RCC_OscConfig+0x41c>
 800622a:	e045      	b.n	80062b8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800622c:	4b27      	ldr	r3, [pc, #156]	; (80062cc <HAL_RCC_OscConfig+0x4dc>)
 800622e:	2200      	movs	r2, #0
 8006230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006232:	f7fd f99b 	bl	800356c <HAL_GetTick>
 8006236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006238:	e008      	b.n	800624c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800623a:	f7fd f997 	bl	800356c <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	2b02      	cmp	r3, #2
 8006246:	d901      	bls.n	800624c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e036      	b.n	80062ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800624c:	4b1e      	ldr	r3, [pc, #120]	; (80062c8 <HAL_RCC_OscConfig+0x4d8>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1f0      	bne.n	800623a <HAL_RCC_OscConfig+0x44a>
 8006258:	e02e      	b.n	80062b8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	2b01      	cmp	r3, #1
 8006260:	d101      	bne.n	8006266 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e029      	b.n	80062ba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006266:	4b18      	ldr	r3, [pc, #96]	; (80062c8 <HAL_RCC_OscConfig+0x4d8>)
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	69db      	ldr	r3, [r3, #28]
 8006276:	429a      	cmp	r2, r3
 8006278:	d11c      	bne.n	80062b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006284:	429a      	cmp	r2, r3
 8006286:	d115      	bne.n	80062b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800628e:	4013      	ands	r3, r2
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006294:	4293      	cmp	r3, r2
 8006296:	d10d      	bne.n	80062b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d106      	bne.n	80062b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d001      	beq.n	80062b8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e000      	b.n	80062ba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3718      	adds	r7, #24
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	40007000 	.word	0x40007000
 80062c8:	40023800 	.word	0x40023800
 80062cc:	42470060 	.word	0x42470060

080062d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e0cc      	b.n	800647e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062e4:	4b68      	ldr	r3, [pc, #416]	; (8006488 <HAL_RCC_ClockConfig+0x1b8>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 030f 	and.w	r3, r3, #15
 80062ec:	683a      	ldr	r2, [r7, #0]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d90c      	bls.n	800630c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062f2:	4b65      	ldr	r3, [pc, #404]	; (8006488 <HAL_RCC_ClockConfig+0x1b8>)
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	b2d2      	uxtb	r2, r2
 80062f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062fa:	4b63      	ldr	r3, [pc, #396]	; (8006488 <HAL_RCC_ClockConfig+0x1b8>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 030f 	and.w	r3, r3, #15
 8006302:	683a      	ldr	r2, [r7, #0]
 8006304:	429a      	cmp	r2, r3
 8006306:	d001      	beq.n	800630c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e0b8      	b.n	800647e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0302 	and.w	r3, r3, #2
 8006314:	2b00      	cmp	r3, #0
 8006316:	d020      	beq.n	800635a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0304 	and.w	r3, r3, #4
 8006320:	2b00      	cmp	r3, #0
 8006322:	d005      	beq.n	8006330 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006324:	4b59      	ldr	r3, [pc, #356]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	4a58      	ldr	r2, [pc, #352]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 800632a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800632e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0308 	and.w	r3, r3, #8
 8006338:	2b00      	cmp	r3, #0
 800633a:	d005      	beq.n	8006348 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800633c:	4b53      	ldr	r3, [pc, #332]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	4a52      	ldr	r2, [pc, #328]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006342:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006346:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006348:	4b50      	ldr	r3, [pc, #320]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	494d      	ldr	r1, [pc, #308]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006356:	4313      	orrs	r3, r2
 8006358:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b00      	cmp	r3, #0
 8006364:	d044      	beq.n	80063f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d107      	bne.n	800637e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800636e:	4b47      	ldr	r3, [pc, #284]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d119      	bne.n	80063ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e07f      	b.n	800647e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	2b02      	cmp	r3, #2
 8006384:	d003      	beq.n	800638e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800638a:	2b03      	cmp	r3, #3
 800638c:	d107      	bne.n	800639e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800638e:	4b3f      	ldr	r3, [pc, #252]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d109      	bne.n	80063ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e06f      	b.n	800647e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800639e:	4b3b      	ldr	r3, [pc, #236]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0302 	and.w	r3, r3, #2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e067      	b.n	800647e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063ae:	4b37      	ldr	r3, [pc, #220]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f023 0203 	bic.w	r2, r3, #3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	4934      	ldr	r1, [pc, #208]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 80063bc:	4313      	orrs	r3, r2
 80063be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063c0:	f7fd f8d4 	bl	800356c <HAL_GetTick>
 80063c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063c6:	e00a      	b.n	80063de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063c8:	f7fd f8d0 	bl	800356c <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d901      	bls.n	80063de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e04f      	b.n	800647e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063de:	4b2b      	ldr	r3, [pc, #172]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f003 020c 	and.w	r2, r3, #12
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d1eb      	bne.n	80063c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063f0:	4b25      	ldr	r3, [pc, #148]	; (8006488 <HAL_RCC_ClockConfig+0x1b8>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 030f 	and.w	r3, r3, #15
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d20c      	bcs.n	8006418 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063fe:	4b22      	ldr	r3, [pc, #136]	; (8006488 <HAL_RCC_ClockConfig+0x1b8>)
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	b2d2      	uxtb	r2, r2
 8006404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006406:	4b20      	ldr	r3, [pc, #128]	; (8006488 <HAL_RCC_ClockConfig+0x1b8>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 030f 	and.w	r3, r3, #15
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	429a      	cmp	r2, r3
 8006412:	d001      	beq.n	8006418 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e032      	b.n	800647e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0304 	and.w	r3, r3, #4
 8006420:	2b00      	cmp	r3, #0
 8006422:	d008      	beq.n	8006436 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006424:	4b19      	ldr	r3, [pc, #100]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	4916      	ldr	r1, [pc, #88]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006432:	4313      	orrs	r3, r2
 8006434:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 0308 	and.w	r3, r3, #8
 800643e:	2b00      	cmp	r3, #0
 8006440:	d009      	beq.n	8006456 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006442:	4b12      	ldr	r3, [pc, #72]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	00db      	lsls	r3, r3, #3
 8006450:	490e      	ldr	r1, [pc, #56]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006452:	4313      	orrs	r3, r2
 8006454:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006456:	f000 f821 	bl	800649c <HAL_RCC_GetSysClockFreq>
 800645a:	4601      	mov	r1, r0
 800645c:	4b0b      	ldr	r3, [pc, #44]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	091b      	lsrs	r3, r3, #4
 8006462:	f003 030f 	and.w	r3, r3, #15
 8006466:	4a0a      	ldr	r2, [pc, #40]	; (8006490 <HAL_RCC_ClockConfig+0x1c0>)
 8006468:	5cd3      	ldrb	r3, [r2, r3]
 800646a:	fa21 f303 	lsr.w	r3, r1, r3
 800646e:	4a09      	ldr	r2, [pc, #36]	; (8006494 <HAL_RCC_ClockConfig+0x1c4>)
 8006470:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006472:	4b09      	ldr	r3, [pc, #36]	; (8006498 <HAL_RCC_ClockConfig+0x1c8>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4618      	mov	r0, r3
 8006478:	f7fd f834 	bl	80034e4 <HAL_InitTick>

  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	40023c00 	.word	0x40023c00
 800648c:	40023800 	.word	0x40023800
 8006490:	0800d52c 	.word	0x0800d52c
 8006494:	20000000 	.word	0x20000000
 8006498:	20000004 	.word	0x20000004

0800649c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800649c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80064a2:	2300      	movs	r3, #0
 80064a4:	607b      	str	r3, [r7, #4]
 80064a6:	2300      	movs	r3, #0
 80064a8:	60fb      	str	r3, [r7, #12]
 80064aa:	2300      	movs	r3, #0
 80064ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80064ae:	2300      	movs	r3, #0
 80064b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064b2:	4b63      	ldr	r3, [pc, #396]	; (8006640 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f003 030c 	and.w	r3, r3, #12
 80064ba:	2b04      	cmp	r3, #4
 80064bc:	d007      	beq.n	80064ce <HAL_RCC_GetSysClockFreq+0x32>
 80064be:	2b08      	cmp	r3, #8
 80064c0:	d008      	beq.n	80064d4 <HAL_RCC_GetSysClockFreq+0x38>
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f040 80b4 	bne.w	8006630 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064c8:	4b5e      	ldr	r3, [pc, #376]	; (8006644 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80064ca:	60bb      	str	r3, [r7, #8]
       break;
 80064cc:	e0b3      	b.n	8006636 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064ce:	4b5d      	ldr	r3, [pc, #372]	; (8006644 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80064d0:	60bb      	str	r3, [r7, #8]
      break;
 80064d2:	e0b0      	b.n	8006636 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064d4:	4b5a      	ldr	r3, [pc, #360]	; (8006640 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064de:	4b58      	ldr	r3, [pc, #352]	; (8006640 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d04a      	beq.n	8006580 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064ea:	4b55      	ldr	r3, [pc, #340]	; (8006640 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	099b      	lsrs	r3, r3, #6
 80064f0:	f04f 0400 	mov.w	r4, #0
 80064f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80064f8:	f04f 0200 	mov.w	r2, #0
 80064fc:	ea03 0501 	and.w	r5, r3, r1
 8006500:	ea04 0602 	and.w	r6, r4, r2
 8006504:	4629      	mov	r1, r5
 8006506:	4632      	mov	r2, r6
 8006508:	f04f 0300 	mov.w	r3, #0
 800650c:	f04f 0400 	mov.w	r4, #0
 8006510:	0154      	lsls	r4, r2, #5
 8006512:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006516:	014b      	lsls	r3, r1, #5
 8006518:	4619      	mov	r1, r3
 800651a:	4622      	mov	r2, r4
 800651c:	1b49      	subs	r1, r1, r5
 800651e:	eb62 0206 	sbc.w	r2, r2, r6
 8006522:	f04f 0300 	mov.w	r3, #0
 8006526:	f04f 0400 	mov.w	r4, #0
 800652a:	0194      	lsls	r4, r2, #6
 800652c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006530:	018b      	lsls	r3, r1, #6
 8006532:	1a5b      	subs	r3, r3, r1
 8006534:	eb64 0402 	sbc.w	r4, r4, r2
 8006538:	f04f 0100 	mov.w	r1, #0
 800653c:	f04f 0200 	mov.w	r2, #0
 8006540:	00e2      	lsls	r2, r4, #3
 8006542:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006546:	00d9      	lsls	r1, r3, #3
 8006548:	460b      	mov	r3, r1
 800654a:	4614      	mov	r4, r2
 800654c:	195b      	adds	r3, r3, r5
 800654e:	eb44 0406 	adc.w	r4, r4, r6
 8006552:	f04f 0100 	mov.w	r1, #0
 8006556:	f04f 0200 	mov.w	r2, #0
 800655a:	02a2      	lsls	r2, r4, #10
 800655c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006560:	0299      	lsls	r1, r3, #10
 8006562:	460b      	mov	r3, r1
 8006564:	4614      	mov	r4, r2
 8006566:	4618      	mov	r0, r3
 8006568:	4621      	mov	r1, r4
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f04f 0400 	mov.w	r4, #0
 8006570:	461a      	mov	r2, r3
 8006572:	4623      	mov	r3, r4
 8006574:	f7fa fb68 	bl	8000c48 <__aeabi_uldivmod>
 8006578:	4603      	mov	r3, r0
 800657a:	460c      	mov	r4, r1
 800657c:	60fb      	str	r3, [r7, #12]
 800657e:	e049      	b.n	8006614 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006580:	4b2f      	ldr	r3, [pc, #188]	; (8006640 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	099b      	lsrs	r3, r3, #6
 8006586:	f04f 0400 	mov.w	r4, #0
 800658a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800658e:	f04f 0200 	mov.w	r2, #0
 8006592:	ea03 0501 	and.w	r5, r3, r1
 8006596:	ea04 0602 	and.w	r6, r4, r2
 800659a:	4629      	mov	r1, r5
 800659c:	4632      	mov	r2, r6
 800659e:	f04f 0300 	mov.w	r3, #0
 80065a2:	f04f 0400 	mov.w	r4, #0
 80065a6:	0154      	lsls	r4, r2, #5
 80065a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80065ac:	014b      	lsls	r3, r1, #5
 80065ae:	4619      	mov	r1, r3
 80065b0:	4622      	mov	r2, r4
 80065b2:	1b49      	subs	r1, r1, r5
 80065b4:	eb62 0206 	sbc.w	r2, r2, r6
 80065b8:	f04f 0300 	mov.w	r3, #0
 80065bc:	f04f 0400 	mov.w	r4, #0
 80065c0:	0194      	lsls	r4, r2, #6
 80065c2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80065c6:	018b      	lsls	r3, r1, #6
 80065c8:	1a5b      	subs	r3, r3, r1
 80065ca:	eb64 0402 	sbc.w	r4, r4, r2
 80065ce:	f04f 0100 	mov.w	r1, #0
 80065d2:	f04f 0200 	mov.w	r2, #0
 80065d6:	00e2      	lsls	r2, r4, #3
 80065d8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80065dc:	00d9      	lsls	r1, r3, #3
 80065de:	460b      	mov	r3, r1
 80065e0:	4614      	mov	r4, r2
 80065e2:	195b      	adds	r3, r3, r5
 80065e4:	eb44 0406 	adc.w	r4, r4, r6
 80065e8:	f04f 0100 	mov.w	r1, #0
 80065ec:	f04f 0200 	mov.w	r2, #0
 80065f0:	02a2      	lsls	r2, r4, #10
 80065f2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80065f6:	0299      	lsls	r1, r3, #10
 80065f8:	460b      	mov	r3, r1
 80065fa:	4614      	mov	r4, r2
 80065fc:	4618      	mov	r0, r3
 80065fe:	4621      	mov	r1, r4
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f04f 0400 	mov.w	r4, #0
 8006606:	461a      	mov	r2, r3
 8006608:	4623      	mov	r3, r4
 800660a:	f7fa fb1d 	bl	8000c48 <__aeabi_uldivmod>
 800660e:	4603      	mov	r3, r0
 8006610:	460c      	mov	r4, r1
 8006612:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006614:	4b0a      	ldr	r3, [pc, #40]	; (8006640 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	0c1b      	lsrs	r3, r3, #16
 800661a:	f003 0303 	and.w	r3, r3, #3
 800661e:	3301      	adds	r3, #1
 8006620:	005b      	lsls	r3, r3, #1
 8006622:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	fbb2 f3f3 	udiv	r3, r2, r3
 800662c:	60bb      	str	r3, [r7, #8]
      break;
 800662e:	e002      	b.n	8006636 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006630:	4b04      	ldr	r3, [pc, #16]	; (8006644 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006632:	60bb      	str	r3, [r7, #8]
      break;
 8006634:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006636:	68bb      	ldr	r3, [r7, #8]
}
 8006638:	4618      	mov	r0, r3
 800663a:	3714      	adds	r7, #20
 800663c:	46bd      	mov	sp, r7
 800663e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006640:	40023800 	.word	0x40023800
 8006644:	00f42400 	.word	0x00f42400

08006648 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006648:	b480      	push	{r7}
 800664a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800664c:	4b03      	ldr	r3, [pc, #12]	; (800665c <HAL_RCC_GetHCLKFreq+0x14>)
 800664e:	681b      	ldr	r3, [r3, #0]
}
 8006650:	4618      	mov	r0, r3
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	20000000 	.word	0x20000000

08006660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006664:	f7ff fff0 	bl	8006648 <HAL_RCC_GetHCLKFreq>
 8006668:	4601      	mov	r1, r0
 800666a:	4b05      	ldr	r3, [pc, #20]	; (8006680 <HAL_RCC_GetPCLK1Freq+0x20>)
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	0a9b      	lsrs	r3, r3, #10
 8006670:	f003 0307 	and.w	r3, r3, #7
 8006674:	4a03      	ldr	r2, [pc, #12]	; (8006684 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006676:	5cd3      	ldrb	r3, [r2, r3]
 8006678:	fa21 f303 	lsr.w	r3, r1, r3
}
 800667c:	4618      	mov	r0, r3
 800667e:	bd80      	pop	{r7, pc}
 8006680:	40023800 	.word	0x40023800
 8006684:	0800d53c 	.word	0x0800d53c

08006688 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d101      	bne.n	800669a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e01d      	b.n	80066d6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d106      	bne.n	80066b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f7fc fdb0 	bl	8003214 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2202      	movs	r2, #2
 80066b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	3304      	adds	r3, #4
 80066c4:	4619      	mov	r1, r3
 80066c6:	4610      	mov	r0, r2
 80066c8:	f000 fc72 	bl	8006fb0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3708      	adds	r7, #8
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80066de:	b480      	push	{r7}
 80066e0:	b085      	sub	sp, #20
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2202      	movs	r2, #2
 80066ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	f003 0307 	and.w	r3, r3, #7
 80066f8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2b06      	cmp	r3, #6
 80066fe:	d007      	beq.n	8006710 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f042 0201 	orr.w	r2, r2, #1
 800670e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3714      	adds	r7, #20
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr

08006726 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006726:	b480      	push	{r7}
 8006728:	b085      	sub	sp, #20
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68da      	ldr	r2, [r3, #12]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f042 0201 	orr.w	r2, r2, #1
 800673c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	f003 0307 	and.w	r3, r3, #7
 8006748:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2b06      	cmp	r3, #6
 800674e:	d007      	beq.n	8006760 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f042 0201 	orr.w	r2, r2, #1
 800675e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3714      	adds	r7, #20
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b082      	sub	sp, #8
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d101      	bne.n	8006780 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e01d      	b.n	80067bc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b00      	cmp	r3, #0
 800678a:	d106      	bne.n	800679a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f7fc fc71 	bl	800307c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2202      	movs	r2, #2
 800679e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	3304      	adds	r3, #4
 80067aa:	4619      	mov	r1, r3
 80067ac:	4610      	mov	r0, r2
 80067ae:	f000 fbff 	bl	8006fb0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2201      	movs	r2, #1
 80067d4:	6839      	ldr	r1, [r7, #0]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f000 ff64 	bl	80076a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a15      	ldr	r2, [pc, #84]	; (8006838 <HAL_TIM_PWM_Start+0x74>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d004      	beq.n	80067f0 <HAL_TIM_PWM_Start+0x2c>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a14      	ldr	r2, [pc, #80]	; (800683c <HAL_TIM_PWM_Start+0x78>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d101      	bne.n	80067f4 <HAL_TIM_PWM_Start+0x30>
 80067f0:	2301      	movs	r3, #1
 80067f2:	e000      	b.n	80067f6 <HAL_TIM_PWM_Start+0x32>
 80067f4:	2300      	movs	r3, #0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d007      	beq.n	800680a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006808:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f003 0307 	and.w	r3, r3, #7
 8006814:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2b06      	cmp	r3, #6
 800681a:	d007      	beq.n	800682c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f042 0201 	orr.w	r2, r2, #1
 800682a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	40010000 	.word	0x40010000
 800683c:	40010400 	.word	0x40010400

08006840 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2200      	movs	r2, #0
 8006850:	6839      	ldr	r1, [r7, #0]
 8006852:	4618      	mov	r0, r3
 8006854:	f000 ff26 	bl	80076a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a22      	ldr	r2, [pc, #136]	; (80068e8 <HAL_TIM_PWM_Stop+0xa8>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d004      	beq.n	800686c <HAL_TIM_PWM_Stop+0x2c>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a21      	ldr	r2, [pc, #132]	; (80068ec <HAL_TIM_PWM_Stop+0xac>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d101      	bne.n	8006870 <HAL_TIM_PWM_Stop+0x30>
 800686c:	2301      	movs	r3, #1
 800686e:	e000      	b.n	8006872 <HAL_TIM_PWM_Stop+0x32>
 8006870:	2300      	movs	r3, #0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d017      	beq.n	80068a6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	6a1a      	ldr	r2, [r3, #32]
 800687c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006880:	4013      	ands	r3, r2
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10f      	bne.n	80068a6 <HAL_TIM_PWM_Stop+0x66>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6a1a      	ldr	r2, [r3, #32]
 800688c:	f240 4344 	movw	r3, #1092	; 0x444
 8006890:	4013      	ands	r3, r2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d107      	bne.n	80068a6 <HAL_TIM_PWM_Stop+0x66>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80068a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	6a1a      	ldr	r2, [r3, #32]
 80068ac:	f241 1311 	movw	r3, #4369	; 0x1111
 80068b0:	4013      	ands	r3, r2
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d10f      	bne.n	80068d6 <HAL_TIM_PWM_Stop+0x96>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	6a1a      	ldr	r2, [r3, #32]
 80068bc:	f240 4344 	movw	r3, #1092	; 0x444
 80068c0:	4013      	ands	r3, r2
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d107      	bne.n	80068d6 <HAL_TIM_PWM_Stop+0x96>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f022 0201 	bic.w	r2, r2, #1
 80068d4:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	40010000 	.word	0x40010000
 80068ec:	40010400 	.word	0x40010400

080068f0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d101      	bne.n	8006902 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e01d      	b.n	800693e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006908:	b2db      	uxtb	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d106      	bne.n	800691c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f7fc fbd0 	bl	80030bc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2202      	movs	r2, #2
 8006920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	3304      	adds	r3, #4
 800692c:	4619      	mov	r1, r3
 800692e:	4610      	mov	r0, r2
 8006930:	f000 fb3e 	bl	8006fb0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3708      	adds	r7, #8
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
	...

08006948 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	2b0c      	cmp	r3, #12
 8006956:	d841      	bhi.n	80069dc <HAL_TIM_IC_Start_IT+0x94>
 8006958:	a201      	add	r2, pc, #4	; (adr r2, 8006960 <HAL_TIM_IC_Start_IT+0x18>)
 800695a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695e:	bf00      	nop
 8006960:	08006995 	.word	0x08006995
 8006964:	080069dd 	.word	0x080069dd
 8006968:	080069dd 	.word	0x080069dd
 800696c:	080069dd 	.word	0x080069dd
 8006970:	080069a7 	.word	0x080069a7
 8006974:	080069dd 	.word	0x080069dd
 8006978:	080069dd 	.word	0x080069dd
 800697c:	080069dd 	.word	0x080069dd
 8006980:	080069b9 	.word	0x080069b9
 8006984:	080069dd 	.word	0x080069dd
 8006988:	080069dd 	.word	0x080069dd
 800698c:	080069dd 	.word	0x080069dd
 8006990:	080069cb 	.word	0x080069cb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68da      	ldr	r2, [r3, #12]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f042 0202 	orr.w	r2, r2, #2
 80069a2:	60da      	str	r2, [r3, #12]
      break;
 80069a4:	e01b      	b.n	80069de <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68da      	ldr	r2, [r3, #12]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f042 0204 	orr.w	r2, r2, #4
 80069b4:	60da      	str	r2, [r3, #12]
      break;
 80069b6:	e012      	b.n	80069de <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68da      	ldr	r2, [r3, #12]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f042 0208 	orr.w	r2, r2, #8
 80069c6:	60da      	str	r2, [r3, #12]
      break;
 80069c8:	e009      	b.n	80069de <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68da      	ldr	r2, [r3, #12]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f042 0210 	orr.w	r2, r2, #16
 80069d8:	60da      	str	r2, [r3, #12]
      break;
 80069da:	e000      	b.n	80069de <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80069dc:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2201      	movs	r2, #1
 80069e4:	6839      	ldr	r1, [r7, #0]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 fe5c 	bl	80076a4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f003 0307 	and.w	r3, r3, #7
 80069f6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2b06      	cmp	r3, #6
 80069fc:	d007      	beq.n	8006a0e <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f042 0201 	orr.w	r2, r2, #1
 8006a0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	f003 0302 	and.w	r3, r3, #2
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d122      	bne.n	8006a74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	f003 0302 	and.w	r3, r3, #2
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d11b      	bne.n	8006a74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f06f 0202 	mvn.w	r2, #2
 8006a44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	f003 0303 	and.w	r3, r3, #3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d003      	beq.n	8006a62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f7fb f9ee 	bl	8001e3c <HAL_TIM_IC_CaptureCallback>
 8006a60:	e005      	b.n	8006a6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 fa86 	bl	8006f74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fa8d 	bl	8006f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	f003 0304 	and.w	r3, r3, #4
 8006a7e:	2b04      	cmp	r3, #4
 8006a80:	d122      	bne.n	8006ac8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	f003 0304 	and.w	r3, r3, #4
 8006a8c:	2b04      	cmp	r3, #4
 8006a8e:	d11b      	bne.n	8006ac8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f06f 0204 	mvn.w	r2, #4
 8006a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	699b      	ldr	r3, [r3, #24]
 8006aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f7fb f9c4 	bl	8001e3c <HAL_TIM_IC_CaptureCallback>
 8006ab4:	e005      	b.n	8006ac2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 fa5c 	bl	8006f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 fa63 	bl	8006f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	f003 0308 	and.w	r3, r3, #8
 8006ad2:	2b08      	cmp	r3, #8
 8006ad4:	d122      	bne.n	8006b1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	f003 0308 	and.w	r3, r3, #8
 8006ae0:	2b08      	cmp	r3, #8
 8006ae2:	d11b      	bne.n	8006b1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f06f 0208 	mvn.w	r2, #8
 8006aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2204      	movs	r2, #4
 8006af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	69db      	ldr	r3, [r3, #28]
 8006afa:	f003 0303 	and.w	r3, r3, #3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d003      	beq.n	8006b0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7fb f99a 	bl	8001e3c <HAL_TIM_IC_CaptureCallback>
 8006b08:	e005      	b.n	8006b16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 fa32 	bl	8006f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fa39 	bl	8006f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	f003 0310 	and.w	r3, r3, #16
 8006b26:	2b10      	cmp	r3, #16
 8006b28:	d122      	bne.n	8006b70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	f003 0310 	and.w	r3, r3, #16
 8006b34:	2b10      	cmp	r3, #16
 8006b36:	d11b      	bne.n	8006b70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f06f 0210 	mvn.w	r2, #16
 8006b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2208      	movs	r2, #8
 8006b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	69db      	ldr	r3, [r3, #28]
 8006b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d003      	beq.n	8006b5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7fb f970 	bl	8001e3c <HAL_TIM_IC_CaptureCallback>
 8006b5c:	e005      	b.n	8006b6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fa08 	bl	8006f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fa0f 	bl	8006f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d10e      	bne.n	8006b9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	f003 0301 	and.w	r3, r3, #1
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d107      	bne.n	8006b9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f06f 0201 	mvn.w	r2, #1
 8006b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7fb f93a 	bl	8001e10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba6:	2b80      	cmp	r3, #128	; 0x80
 8006ba8:	d10e      	bne.n	8006bc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bb4:	2b80      	cmp	r3, #128	; 0x80
 8006bb6:	d107      	bne.n	8006bc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 fe1a 	bl	80077fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd2:	2b40      	cmp	r3, #64	; 0x40
 8006bd4:	d10e      	bne.n	8006bf4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be0:	2b40      	cmp	r3, #64	; 0x40
 8006be2:	d107      	bne.n	8006bf4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f9d4 	bl	8006f9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	f003 0320 	and.w	r3, r3, #32
 8006bfe:	2b20      	cmp	r3, #32
 8006c00:	d10e      	bne.n	8006c20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	f003 0320 	and.w	r3, r3, #32
 8006c0c:	2b20      	cmp	r3, #32
 8006c0e:	d107      	bne.n	8006c20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f06f 0220 	mvn.w	r2, #32
 8006c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 fde4 	bl	80077e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c20:	bf00      	nop
 8006c22:	3708      	adds	r7, #8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d101      	bne.n	8006c42 <HAL_TIM_IC_ConfigChannel+0x1a>
 8006c3e:	2302      	movs	r3, #2
 8006c40:	e08a      	b.n	8006d58 <HAL_TIM_IC_ConfigChannel+0x130>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2202      	movs	r2, #2
 8006c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d11b      	bne.n	8006c90 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6818      	ldr	r0, [r3, #0]
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	6819      	ldr	r1, [r3, #0]
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	f000 fbf2 	bl	8007450 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	699a      	ldr	r2, [r3, #24]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f022 020c 	bic.w	r2, r2, #12
 8006c7a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6999      	ldr	r1, [r3, #24]
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	689a      	ldr	r2, [r3, #8]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	619a      	str	r2, [r3, #24]
 8006c8e:	e05a      	b.n	8006d46 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b04      	cmp	r3, #4
 8006c94:	d11c      	bne.n	8006cd0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6818      	ldr	r0, [r3, #0]
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	6819      	ldr	r1, [r3, #0]
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	685a      	ldr	r2, [r3, #4]
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	f000 fc47 	bl	8007538 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	699a      	ldr	r2, [r3, #24]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006cb8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	6999      	ldr	r1, [r3, #24]
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	021a      	lsls	r2, r3, #8
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	619a      	str	r2, [r3, #24]
 8006cce:	e03a      	b.n	8006d46 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2b08      	cmp	r3, #8
 8006cd4:	d11b      	bne.n	8006d0e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6818      	ldr	r0, [r3, #0]
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	6819      	ldr	r1, [r3, #0]
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	685a      	ldr	r2, [r3, #4]
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	f000 fc64 	bl	80075b2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	69da      	ldr	r2, [r3, #28]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f022 020c 	bic.w	r2, r2, #12
 8006cf8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	69d9      	ldr	r1, [r3, #28]
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	689a      	ldr	r2, [r3, #8]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	61da      	str	r2, [r3, #28]
 8006d0c:	e01b      	b.n	8006d46 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6818      	ldr	r0, [r3, #0]
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	6819      	ldr	r1, [r3, #0]
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	685a      	ldr	r2, [r3, #4]
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	f000 fc84 	bl	800762a <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	69da      	ldr	r2, [r3, #28]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006d30:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	69d9      	ldr	r1, [r3, #28]
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	021a      	lsls	r2, r3, #8
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	430a      	orrs	r2, r1
 8006d44:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d101      	bne.n	8006d7a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006d76:	2302      	movs	r3, #2
 8006d78:	e0b4      	b.n	8006ee4 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2202      	movs	r2, #2
 8006d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2b0c      	cmp	r3, #12
 8006d8e:	f200 809f 	bhi.w	8006ed0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006d92:	a201      	add	r2, pc, #4	; (adr r2, 8006d98 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d98:	08006dcd 	.word	0x08006dcd
 8006d9c:	08006ed1 	.word	0x08006ed1
 8006da0:	08006ed1 	.word	0x08006ed1
 8006da4:	08006ed1 	.word	0x08006ed1
 8006da8:	08006e0d 	.word	0x08006e0d
 8006dac:	08006ed1 	.word	0x08006ed1
 8006db0:	08006ed1 	.word	0x08006ed1
 8006db4:	08006ed1 	.word	0x08006ed1
 8006db8:	08006e4f 	.word	0x08006e4f
 8006dbc:	08006ed1 	.word	0x08006ed1
 8006dc0:	08006ed1 	.word	0x08006ed1
 8006dc4:	08006ed1 	.word	0x08006ed1
 8006dc8:	08006e8f 	.word	0x08006e8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	68b9      	ldr	r1, [r7, #8]
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f000 f98c 	bl	80070f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	699a      	ldr	r2, [r3, #24]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f042 0208 	orr.w	r2, r2, #8
 8006de6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	699a      	ldr	r2, [r3, #24]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f022 0204 	bic.w	r2, r2, #4
 8006df6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	6999      	ldr	r1, [r3, #24]
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	691a      	ldr	r2, [r3, #16]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	430a      	orrs	r2, r1
 8006e08:	619a      	str	r2, [r3, #24]
      break;
 8006e0a:	e062      	b.n	8006ed2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68b9      	ldr	r1, [r7, #8]
 8006e12:	4618      	mov	r0, r3
 8006e14:	f000 f9dc 	bl	80071d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	699a      	ldr	r2, [r3, #24]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	699a      	ldr	r2, [r3, #24]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	6999      	ldr	r1, [r3, #24]
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	021a      	lsls	r2, r3, #8
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	430a      	orrs	r2, r1
 8006e4a:	619a      	str	r2, [r3, #24]
      break;
 8006e4c:	e041      	b.n	8006ed2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68b9      	ldr	r1, [r7, #8]
 8006e54:	4618      	mov	r0, r3
 8006e56:	f000 fa31 	bl	80072bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	69da      	ldr	r2, [r3, #28]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f042 0208 	orr.w	r2, r2, #8
 8006e68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	69da      	ldr	r2, [r3, #28]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f022 0204 	bic.w	r2, r2, #4
 8006e78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	69d9      	ldr	r1, [r3, #28]
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	691a      	ldr	r2, [r3, #16]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	430a      	orrs	r2, r1
 8006e8a:	61da      	str	r2, [r3, #28]
      break;
 8006e8c:	e021      	b.n	8006ed2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68b9      	ldr	r1, [r7, #8]
 8006e94:	4618      	mov	r0, r3
 8006e96:	f000 fa85 	bl	80073a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	69da      	ldr	r2, [r3, #28]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ea8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	69da      	ldr	r2, [r3, #28]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	69d9      	ldr	r1, [r3, #28]
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	021a      	lsls	r2, r3, #8
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	430a      	orrs	r2, r1
 8006ecc:	61da      	str	r2, [r3, #28]
      break;
 8006ece:	e000      	b.n	8006ed2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006ed0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	2b0c      	cmp	r3, #12
 8006efe:	d831      	bhi.n	8006f64 <HAL_TIM_ReadCapturedValue+0x78>
 8006f00:	a201      	add	r2, pc, #4	; (adr r2, 8006f08 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f06:	bf00      	nop
 8006f08:	08006f3d 	.word	0x08006f3d
 8006f0c:	08006f65 	.word	0x08006f65
 8006f10:	08006f65 	.word	0x08006f65
 8006f14:	08006f65 	.word	0x08006f65
 8006f18:	08006f47 	.word	0x08006f47
 8006f1c:	08006f65 	.word	0x08006f65
 8006f20:	08006f65 	.word	0x08006f65
 8006f24:	08006f65 	.word	0x08006f65
 8006f28:	08006f51 	.word	0x08006f51
 8006f2c:	08006f65 	.word	0x08006f65
 8006f30:	08006f65 	.word	0x08006f65
 8006f34:	08006f65 	.word	0x08006f65
 8006f38:	08006f5b 	.word	0x08006f5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f42:	60fb      	str	r3, [r7, #12]

      break;
 8006f44:	e00f      	b.n	8006f66 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4c:	60fb      	str	r3, [r7, #12]

      break;
 8006f4e:	e00a      	b.n	8006f66 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f56:	60fb      	str	r3, [r7, #12]

      break;
 8006f58:	e005      	b.n	8006f66 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f60:	60fb      	str	r3, [r7, #12]

      break;
 8006f62:	e000      	b.n	8006f66 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006f64:	bf00      	nop
  }

  return tmpreg;
 8006f66:	68fb      	ldr	r3, [r7, #12]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3714      	adds	r7, #20
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f7c:	bf00      	nop
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f90:	bf00      	nop
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fa4:	bf00      	nop
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a40      	ldr	r2, [pc, #256]	; (80070c4 <TIM_Base_SetConfig+0x114>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d013      	beq.n	8006ff0 <TIM_Base_SetConfig+0x40>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fce:	d00f      	beq.n	8006ff0 <TIM_Base_SetConfig+0x40>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a3d      	ldr	r2, [pc, #244]	; (80070c8 <TIM_Base_SetConfig+0x118>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d00b      	beq.n	8006ff0 <TIM_Base_SetConfig+0x40>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a3c      	ldr	r2, [pc, #240]	; (80070cc <TIM_Base_SetConfig+0x11c>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d007      	beq.n	8006ff0 <TIM_Base_SetConfig+0x40>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a3b      	ldr	r2, [pc, #236]	; (80070d0 <TIM_Base_SetConfig+0x120>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d003      	beq.n	8006ff0 <TIM_Base_SetConfig+0x40>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a3a      	ldr	r2, [pc, #232]	; (80070d4 <TIM_Base_SetConfig+0x124>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d108      	bne.n	8007002 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a2f      	ldr	r2, [pc, #188]	; (80070c4 <TIM_Base_SetConfig+0x114>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d02b      	beq.n	8007062 <TIM_Base_SetConfig+0xb2>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007010:	d027      	beq.n	8007062 <TIM_Base_SetConfig+0xb2>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a2c      	ldr	r2, [pc, #176]	; (80070c8 <TIM_Base_SetConfig+0x118>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d023      	beq.n	8007062 <TIM_Base_SetConfig+0xb2>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a2b      	ldr	r2, [pc, #172]	; (80070cc <TIM_Base_SetConfig+0x11c>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d01f      	beq.n	8007062 <TIM_Base_SetConfig+0xb2>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a2a      	ldr	r2, [pc, #168]	; (80070d0 <TIM_Base_SetConfig+0x120>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d01b      	beq.n	8007062 <TIM_Base_SetConfig+0xb2>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a29      	ldr	r2, [pc, #164]	; (80070d4 <TIM_Base_SetConfig+0x124>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d017      	beq.n	8007062 <TIM_Base_SetConfig+0xb2>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a28      	ldr	r2, [pc, #160]	; (80070d8 <TIM_Base_SetConfig+0x128>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d013      	beq.n	8007062 <TIM_Base_SetConfig+0xb2>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a27      	ldr	r2, [pc, #156]	; (80070dc <TIM_Base_SetConfig+0x12c>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d00f      	beq.n	8007062 <TIM_Base_SetConfig+0xb2>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a26      	ldr	r2, [pc, #152]	; (80070e0 <TIM_Base_SetConfig+0x130>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d00b      	beq.n	8007062 <TIM_Base_SetConfig+0xb2>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a25      	ldr	r2, [pc, #148]	; (80070e4 <TIM_Base_SetConfig+0x134>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d007      	beq.n	8007062 <TIM_Base_SetConfig+0xb2>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a24      	ldr	r2, [pc, #144]	; (80070e8 <TIM_Base_SetConfig+0x138>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d003      	beq.n	8007062 <TIM_Base_SetConfig+0xb2>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a23      	ldr	r2, [pc, #140]	; (80070ec <TIM_Base_SetConfig+0x13c>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d108      	bne.n	8007074 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007068:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	4313      	orrs	r3, r2
 8007072:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	695b      	ldr	r3, [r3, #20]
 800707e:	4313      	orrs	r3, r2
 8007080:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	689a      	ldr	r2, [r3, #8]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a0a      	ldr	r2, [pc, #40]	; (80070c4 <TIM_Base_SetConfig+0x114>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d003      	beq.n	80070a8 <TIM_Base_SetConfig+0xf8>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a0c      	ldr	r2, [pc, #48]	; (80070d4 <TIM_Base_SetConfig+0x124>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d103      	bne.n	80070b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	691a      	ldr	r2, [r3, #16]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	615a      	str	r2, [r3, #20]
}
 80070b6:	bf00      	nop
 80070b8:	3714      	adds	r7, #20
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	40010000 	.word	0x40010000
 80070c8:	40000400 	.word	0x40000400
 80070cc:	40000800 	.word	0x40000800
 80070d0:	40000c00 	.word	0x40000c00
 80070d4:	40010400 	.word	0x40010400
 80070d8:	40014000 	.word	0x40014000
 80070dc:	40014400 	.word	0x40014400
 80070e0:	40014800 	.word	0x40014800
 80070e4:	40001800 	.word	0x40001800
 80070e8:	40001c00 	.word	0x40001c00
 80070ec:	40002000 	.word	0x40002000

080070f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b087      	sub	sp, #28
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a1b      	ldr	r3, [r3, #32]
 80070fe:	f023 0201 	bic.w	r2, r3, #1
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800711e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f023 0303 	bic.w	r3, r3, #3
 8007126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	4313      	orrs	r3, r2
 8007130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	f023 0302 	bic.w	r3, r3, #2
 8007138:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	4313      	orrs	r3, r2
 8007142:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a20      	ldr	r2, [pc, #128]	; (80071c8 <TIM_OC1_SetConfig+0xd8>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d003      	beq.n	8007154 <TIM_OC1_SetConfig+0x64>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a1f      	ldr	r2, [pc, #124]	; (80071cc <TIM_OC1_SetConfig+0xdc>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d10c      	bne.n	800716e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	f023 0308 	bic.w	r3, r3, #8
 800715a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	4313      	orrs	r3, r2
 8007164:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	f023 0304 	bic.w	r3, r3, #4
 800716c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a15      	ldr	r2, [pc, #84]	; (80071c8 <TIM_OC1_SetConfig+0xd8>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d003      	beq.n	800717e <TIM_OC1_SetConfig+0x8e>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a14      	ldr	r2, [pc, #80]	; (80071cc <TIM_OC1_SetConfig+0xdc>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d111      	bne.n	80071a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007184:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800718c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	693a      	ldr	r2, [r7, #16]
 8007194:	4313      	orrs	r3, r2
 8007196:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	699b      	ldr	r3, [r3, #24]
 800719c:	693a      	ldr	r2, [r7, #16]
 800719e:	4313      	orrs	r3, r2
 80071a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	693a      	ldr	r2, [r7, #16]
 80071a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	685a      	ldr	r2, [r3, #4]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	697a      	ldr	r2, [r7, #20]
 80071ba:	621a      	str	r2, [r3, #32]
}
 80071bc:	bf00      	nop
 80071be:	371c      	adds	r7, #28
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr
 80071c8:	40010000 	.word	0x40010000
 80071cc:	40010400 	.word	0x40010400

080071d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b087      	sub	sp, #28
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	f023 0210 	bic.w	r2, r3, #16
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007206:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	021b      	lsls	r3, r3, #8
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	4313      	orrs	r3, r2
 8007212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	f023 0320 	bic.w	r3, r3, #32
 800721a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	011b      	lsls	r3, r3, #4
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	4313      	orrs	r3, r2
 8007226:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a22      	ldr	r2, [pc, #136]	; (80072b4 <TIM_OC2_SetConfig+0xe4>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d003      	beq.n	8007238 <TIM_OC2_SetConfig+0x68>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a21      	ldr	r2, [pc, #132]	; (80072b8 <TIM_OC2_SetConfig+0xe8>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d10d      	bne.n	8007254 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800723e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	011b      	lsls	r3, r3, #4
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	4313      	orrs	r3, r2
 800724a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007252:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a17      	ldr	r2, [pc, #92]	; (80072b4 <TIM_OC2_SetConfig+0xe4>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d003      	beq.n	8007264 <TIM_OC2_SetConfig+0x94>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a16      	ldr	r2, [pc, #88]	; (80072b8 <TIM_OC2_SetConfig+0xe8>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d113      	bne.n	800728c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800726a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007272:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	695b      	ldr	r3, [r3, #20]
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	693a      	ldr	r2, [r7, #16]
 800727c:	4313      	orrs	r3, r2
 800727e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	693a      	ldr	r2, [r7, #16]
 8007288:	4313      	orrs	r3, r2
 800728a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	621a      	str	r2, [r3, #32]
}
 80072a6:	bf00      	nop
 80072a8:	371c      	adds	r7, #28
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	40010000 	.word	0x40010000
 80072b8:	40010400 	.word	0x40010400

080072bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072bc:	b480      	push	{r7}
 80072be:	b087      	sub	sp, #28
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a1b      	ldr	r3, [r3, #32]
 80072ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	69db      	ldr	r3, [r3, #28]
 80072e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f023 0303 	bic.w	r3, r3, #3
 80072f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007304:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	021b      	lsls	r3, r3, #8
 800730c:	697a      	ldr	r2, [r7, #20]
 800730e:	4313      	orrs	r3, r2
 8007310:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a21      	ldr	r2, [pc, #132]	; (800739c <TIM_OC3_SetConfig+0xe0>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d003      	beq.n	8007322 <TIM_OC3_SetConfig+0x66>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a20      	ldr	r2, [pc, #128]	; (80073a0 <TIM_OC3_SetConfig+0xe4>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d10d      	bne.n	800733e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007328:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	021b      	lsls	r3, r3, #8
 8007330:	697a      	ldr	r2, [r7, #20]
 8007332:	4313      	orrs	r3, r2
 8007334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800733c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a16      	ldr	r2, [pc, #88]	; (800739c <TIM_OC3_SetConfig+0xe0>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d003      	beq.n	800734e <TIM_OC3_SetConfig+0x92>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a15      	ldr	r2, [pc, #84]	; (80073a0 <TIM_OC3_SetConfig+0xe4>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d113      	bne.n	8007376 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007354:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800735c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	695b      	ldr	r3, [r3, #20]
 8007362:	011b      	lsls	r3, r3, #4
 8007364:	693a      	ldr	r2, [r7, #16]
 8007366:	4313      	orrs	r3, r2
 8007368:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	699b      	ldr	r3, [r3, #24]
 800736e:	011b      	lsls	r3, r3, #4
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	4313      	orrs	r3, r2
 8007374:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	693a      	ldr	r2, [r7, #16]
 800737a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	685a      	ldr	r2, [r3, #4]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	621a      	str	r2, [r3, #32]
}
 8007390:	bf00      	nop
 8007392:	371c      	adds	r7, #28
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	40010000 	.word	0x40010000
 80073a0:	40010400 	.word	0x40010400

080073a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b087      	sub	sp, #28
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a1b      	ldr	r3, [r3, #32]
 80073be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	69db      	ldr	r3, [r3, #28]
 80073ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	021b      	lsls	r3, r3, #8
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	031b      	lsls	r3, r3, #12
 80073f6:	693a      	ldr	r2, [r7, #16]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a12      	ldr	r2, [pc, #72]	; (8007448 <TIM_OC4_SetConfig+0xa4>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d003      	beq.n	800740c <TIM_OC4_SetConfig+0x68>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a11      	ldr	r2, [pc, #68]	; (800744c <TIM_OC4_SetConfig+0xa8>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d109      	bne.n	8007420 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007412:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	695b      	ldr	r3, [r3, #20]
 8007418:	019b      	lsls	r3, r3, #6
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	4313      	orrs	r3, r2
 800741e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	685a      	ldr	r2, [r3, #4]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	693a      	ldr	r2, [r7, #16]
 8007438:	621a      	str	r2, [r3, #32]
}
 800743a:	bf00      	nop
 800743c:	371c      	adds	r7, #28
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	40010000 	.word	0x40010000
 800744c:	40010400 	.word	0x40010400

08007450 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007450:	b480      	push	{r7}
 8007452:	b087      	sub	sp, #28
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	607a      	str	r2, [r7, #4]
 800745c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6a1b      	ldr	r3, [r3, #32]
 8007462:	f023 0201 	bic.w	r2, r3, #1
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6a1b      	ldr	r3, [r3, #32]
 8007474:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	4a28      	ldr	r2, [pc, #160]	; (800751c <TIM_TI1_SetConfig+0xcc>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d01b      	beq.n	80074b6 <TIM_TI1_SetConfig+0x66>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007484:	d017      	beq.n	80074b6 <TIM_TI1_SetConfig+0x66>
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	4a25      	ldr	r2, [pc, #148]	; (8007520 <TIM_TI1_SetConfig+0xd0>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d013      	beq.n	80074b6 <TIM_TI1_SetConfig+0x66>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	4a24      	ldr	r2, [pc, #144]	; (8007524 <TIM_TI1_SetConfig+0xd4>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d00f      	beq.n	80074b6 <TIM_TI1_SetConfig+0x66>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	4a23      	ldr	r2, [pc, #140]	; (8007528 <TIM_TI1_SetConfig+0xd8>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d00b      	beq.n	80074b6 <TIM_TI1_SetConfig+0x66>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	4a22      	ldr	r2, [pc, #136]	; (800752c <TIM_TI1_SetConfig+0xdc>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d007      	beq.n	80074b6 <TIM_TI1_SetConfig+0x66>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	4a21      	ldr	r2, [pc, #132]	; (8007530 <TIM_TI1_SetConfig+0xe0>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d003      	beq.n	80074b6 <TIM_TI1_SetConfig+0x66>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	4a20      	ldr	r2, [pc, #128]	; (8007534 <TIM_TI1_SetConfig+0xe4>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d101      	bne.n	80074ba <TIM_TI1_SetConfig+0x6a>
 80074b6:	2301      	movs	r3, #1
 80074b8:	e000      	b.n	80074bc <TIM_TI1_SetConfig+0x6c>
 80074ba:	2300      	movs	r3, #0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d008      	beq.n	80074d2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	f023 0303 	bic.w	r3, r3, #3
 80074c6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80074c8:	697a      	ldr	r2, [r7, #20]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	617b      	str	r3, [r7, #20]
 80074d0:	e003      	b.n	80074da <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	f043 0301 	orr.w	r3, r3, #1
 80074d8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	011b      	lsls	r3, r3, #4
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	f023 030a 	bic.w	r3, r3, #10
 80074f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	f003 030a 	and.w	r3, r3, #10
 80074fc:	693a      	ldr	r2, [r7, #16]
 80074fe:	4313      	orrs	r3, r2
 8007500:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	697a      	ldr	r2, [r7, #20]
 8007506:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	693a      	ldr	r2, [r7, #16]
 800750c:	621a      	str	r2, [r3, #32]
}
 800750e:	bf00      	nop
 8007510:	371c      	adds	r7, #28
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	40010000 	.word	0x40010000
 8007520:	40000400 	.word	0x40000400
 8007524:	40000800 	.word	0x40000800
 8007528:	40000c00 	.word	0x40000c00
 800752c:	40010400 	.word	0x40010400
 8007530:	40014000 	.word	0x40014000
 8007534:	40001800 	.word	0x40001800

08007538 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007538:	b480      	push	{r7}
 800753a:	b087      	sub	sp, #28
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	607a      	str	r2, [r7, #4]
 8007544:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6a1b      	ldr	r3, [r3, #32]
 800754a:	f023 0210 	bic.w	r2, r3, #16
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	699b      	ldr	r3, [r3, #24]
 8007556:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6a1b      	ldr	r3, [r3, #32]
 800755c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007564:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	021b      	lsls	r3, r3, #8
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	4313      	orrs	r3, r2
 800756e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007576:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	031b      	lsls	r3, r3, #12
 800757c:	b29b      	uxth	r3, r3
 800757e:	697a      	ldr	r2, [r7, #20]
 8007580:	4313      	orrs	r3, r2
 8007582:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800758a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	011b      	lsls	r3, r3, #4
 8007590:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	4313      	orrs	r3, r2
 8007598:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	697a      	ldr	r2, [r7, #20]
 800759e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	693a      	ldr	r2, [r7, #16]
 80075a4:	621a      	str	r2, [r3, #32]
}
 80075a6:	bf00      	nop
 80075a8:	371c      	adds	r7, #28
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80075b2:	b480      	push	{r7}
 80075b4:	b087      	sub	sp, #28
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	60f8      	str	r0, [r7, #12]
 80075ba:	60b9      	str	r1, [r7, #8]
 80075bc:	607a      	str	r2, [r7, #4]
 80075be:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6a1b      	ldr	r3, [r3, #32]
 80075c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	69db      	ldr	r3, [r3, #28]
 80075d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6a1b      	ldr	r3, [r3, #32]
 80075d6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	f023 0303 	bic.w	r3, r3, #3
 80075de:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80075e0:	697a      	ldr	r2, [r7, #20]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4313      	orrs	r3, r2
 80075e6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075ee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	011b      	lsls	r3, r3, #4
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	697a      	ldr	r2, [r7, #20]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007602:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	021b      	lsls	r3, r3, #8
 8007608:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800760c:	693a      	ldr	r2, [r7, #16]
 800760e:	4313      	orrs	r3, r2
 8007610:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	697a      	ldr	r2, [r7, #20]
 8007616:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	693a      	ldr	r2, [r7, #16]
 800761c:	621a      	str	r2, [r3, #32]
}
 800761e:	bf00      	nop
 8007620:	371c      	adds	r7, #28
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800762a:	b480      	push	{r7}
 800762c:	b087      	sub	sp, #28
 800762e:	af00      	add	r7, sp, #0
 8007630:	60f8      	str	r0, [r7, #12]
 8007632:	60b9      	str	r1, [r7, #8]
 8007634:	607a      	str	r2, [r7, #4]
 8007636:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6a1b      	ldr	r3, [r3, #32]
 800763c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	69db      	ldr	r3, [r3, #28]
 8007648:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6a1b      	ldr	r3, [r3, #32]
 800764e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007656:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	021b      	lsls	r3, r3, #8
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	4313      	orrs	r3, r2
 8007660:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007668:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	031b      	lsls	r3, r3, #12
 800766e:	b29b      	uxth	r3, r3
 8007670:	697a      	ldr	r2, [r7, #20]
 8007672:	4313      	orrs	r3, r2
 8007674:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800767c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	031b      	lsls	r3, r3, #12
 8007682:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007686:	693a      	ldr	r2, [r7, #16]
 8007688:	4313      	orrs	r3, r2
 800768a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	693a      	ldr	r2, [r7, #16]
 8007696:	621a      	str	r2, [r3, #32]
}
 8007698:	bf00      	nop
 800769a:	371c      	adds	r7, #28
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b087      	sub	sp, #28
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	f003 031f 	and.w	r3, r3, #31
 80076b6:	2201      	movs	r2, #1
 80076b8:	fa02 f303 	lsl.w	r3, r2, r3
 80076bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6a1a      	ldr	r2, [r3, #32]
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	43db      	mvns	r3, r3
 80076c6:	401a      	ands	r2, r3
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6a1a      	ldr	r2, [r3, #32]
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	f003 031f 	and.w	r3, r3, #31
 80076d6:	6879      	ldr	r1, [r7, #4]
 80076d8:	fa01 f303 	lsl.w	r3, r1, r3
 80076dc:	431a      	orrs	r2, r3
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	621a      	str	r2, [r3, #32]
}
 80076e2:	bf00      	nop
 80076e4:	371c      	adds	r7, #28
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
	...

080076f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007700:	2b01      	cmp	r3, #1
 8007702:	d101      	bne.n	8007708 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007704:	2302      	movs	r3, #2
 8007706:	e05a      	b.n	80077be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2202      	movs	r2, #2
 8007714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800772e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	4313      	orrs	r3, r2
 8007738:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a21      	ldr	r2, [pc, #132]	; (80077cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d022      	beq.n	8007792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007754:	d01d      	beq.n	8007792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a1d      	ldr	r2, [pc, #116]	; (80077d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d018      	beq.n	8007792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a1b      	ldr	r2, [pc, #108]	; (80077d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d013      	beq.n	8007792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a1a      	ldr	r2, [pc, #104]	; (80077d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d00e      	beq.n	8007792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a18      	ldr	r2, [pc, #96]	; (80077dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d009      	beq.n	8007792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a17      	ldr	r2, [pc, #92]	; (80077e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d004      	beq.n	8007792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a15      	ldr	r2, [pc, #84]	; (80077e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d10c      	bne.n	80077ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007798:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	68ba      	ldr	r2, [r7, #8]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3714      	adds	r7, #20
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	40010000 	.word	0x40010000
 80077d0:	40000400 	.word	0x40000400
 80077d4:	40000800 	.word	0x40000800
 80077d8:	40000c00 	.word	0x40000c00
 80077dc:	40010400 	.word	0x40010400
 80077e0:	40014000 	.word	0x40014000
 80077e4:	40001800 	.word	0x40001800

080077e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077f0:	bf00      	nop
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007804:	bf00      	nop
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007810:	b084      	sub	sp, #16
 8007812:	b580      	push	{r7, lr}
 8007814:	b084      	sub	sp, #16
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
 800781a:	f107 001c 	add.w	r0, r7, #28
 800781e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007824:	2b01      	cmp	r3, #1
 8007826:	d122      	bne.n	800786e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800783c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007852:	2b01      	cmp	r3, #1
 8007854:	d105      	bne.n	8007862 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f001 fac6 	bl	8008df4 <USB_CoreReset>
 8007868:	4603      	mov	r3, r0
 800786a:	73fb      	strb	r3, [r7, #15]
 800786c:	e01a      	b.n	80078a4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f001 faba 	bl	8008df4 <USB_CoreReset>
 8007880:	4603      	mov	r3, r0
 8007882:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007886:	2b00      	cmp	r3, #0
 8007888:	d106      	bne.n	8007898 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800788e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	639a      	str	r2, [r3, #56]	; 0x38
 8007896:	e005      	b.n	80078a4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80078a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d10b      	bne.n	80078c2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f043 0206 	orr.w	r2, r3, #6
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	f043 0220 	orr.w	r2, r3, #32
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80078c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3710      	adds	r7, #16
 80078c8:	46bd      	mov	sp, r7
 80078ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078ce:	b004      	add	sp, #16
 80078d0:	4770      	bx	lr
	...

080078d4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b087      	sub	sp, #28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	4613      	mov	r3, r2
 80078e0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80078e2:	79fb      	ldrb	r3, [r7, #7]
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d165      	bne.n	80079b4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	4a41      	ldr	r2, [pc, #260]	; (80079f0 <USB_SetTurnaroundTime+0x11c>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d906      	bls.n	80078fe <USB_SetTurnaroundTime+0x2a>
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	4a40      	ldr	r2, [pc, #256]	; (80079f4 <USB_SetTurnaroundTime+0x120>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d802      	bhi.n	80078fe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80078f8:	230f      	movs	r3, #15
 80078fa:	617b      	str	r3, [r7, #20]
 80078fc:	e062      	b.n	80079c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	4a3c      	ldr	r2, [pc, #240]	; (80079f4 <USB_SetTurnaroundTime+0x120>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d906      	bls.n	8007914 <USB_SetTurnaroundTime+0x40>
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	4a3b      	ldr	r2, [pc, #236]	; (80079f8 <USB_SetTurnaroundTime+0x124>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d802      	bhi.n	8007914 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800790e:	230e      	movs	r3, #14
 8007910:	617b      	str	r3, [r7, #20]
 8007912:	e057      	b.n	80079c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	4a38      	ldr	r2, [pc, #224]	; (80079f8 <USB_SetTurnaroundTime+0x124>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d906      	bls.n	800792a <USB_SetTurnaroundTime+0x56>
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	4a37      	ldr	r2, [pc, #220]	; (80079fc <USB_SetTurnaroundTime+0x128>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d802      	bhi.n	800792a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007924:	230d      	movs	r3, #13
 8007926:	617b      	str	r3, [r7, #20]
 8007928:	e04c      	b.n	80079c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	4a33      	ldr	r2, [pc, #204]	; (80079fc <USB_SetTurnaroundTime+0x128>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d906      	bls.n	8007940 <USB_SetTurnaroundTime+0x6c>
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	4a32      	ldr	r2, [pc, #200]	; (8007a00 <USB_SetTurnaroundTime+0x12c>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d802      	bhi.n	8007940 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800793a:	230c      	movs	r3, #12
 800793c:	617b      	str	r3, [r7, #20]
 800793e:	e041      	b.n	80079c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	4a2f      	ldr	r2, [pc, #188]	; (8007a00 <USB_SetTurnaroundTime+0x12c>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d906      	bls.n	8007956 <USB_SetTurnaroundTime+0x82>
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	4a2e      	ldr	r2, [pc, #184]	; (8007a04 <USB_SetTurnaroundTime+0x130>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d802      	bhi.n	8007956 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007950:	230b      	movs	r3, #11
 8007952:	617b      	str	r3, [r7, #20]
 8007954:	e036      	b.n	80079c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	4a2a      	ldr	r2, [pc, #168]	; (8007a04 <USB_SetTurnaroundTime+0x130>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d906      	bls.n	800796c <USB_SetTurnaroundTime+0x98>
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	4a29      	ldr	r2, [pc, #164]	; (8007a08 <USB_SetTurnaroundTime+0x134>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d802      	bhi.n	800796c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007966:	230a      	movs	r3, #10
 8007968:	617b      	str	r3, [r7, #20]
 800796a:	e02b      	b.n	80079c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	4a26      	ldr	r2, [pc, #152]	; (8007a08 <USB_SetTurnaroundTime+0x134>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d906      	bls.n	8007982 <USB_SetTurnaroundTime+0xae>
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	4a25      	ldr	r2, [pc, #148]	; (8007a0c <USB_SetTurnaroundTime+0x138>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d802      	bhi.n	8007982 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800797c:	2309      	movs	r3, #9
 800797e:	617b      	str	r3, [r7, #20]
 8007980:	e020      	b.n	80079c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	4a21      	ldr	r2, [pc, #132]	; (8007a0c <USB_SetTurnaroundTime+0x138>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d906      	bls.n	8007998 <USB_SetTurnaroundTime+0xc4>
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	4a20      	ldr	r2, [pc, #128]	; (8007a10 <USB_SetTurnaroundTime+0x13c>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d802      	bhi.n	8007998 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007992:	2308      	movs	r3, #8
 8007994:	617b      	str	r3, [r7, #20]
 8007996:	e015      	b.n	80079c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	4a1d      	ldr	r2, [pc, #116]	; (8007a10 <USB_SetTurnaroundTime+0x13c>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d906      	bls.n	80079ae <USB_SetTurnaroundTime+0xda>
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	4a1c      	ldr	r2, [pc, #112]	; (8007a14 <USB_SetTurnaroundTime+0x140>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d802      	bhi.n	80079ae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80079a8:	2307      	movs	r3, #7
 80079aa:	617b      	str	r3, [r7, #20]
 80079ac:	e00a      	b.n	80079c4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80079ae:	2306      	movs	r3, #6
 80079b0:	617b      	str	r3, [r7, #20]
 80079b2:	e007      	b.n	80079c4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80079b4:	79fb      	ldrb	r3, [r7, #7]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d102      	bne.n	80079c0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80079ba:	2309      	movs	r3, #9
 80079bc:	617b      	str	r3, [r7, #20]
 80079be:	e001      	b.n	80079c4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80079c0:	2309      	movs	r3, #9
 80079c2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	68da      	ldr	r2, [r3, #12]
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	029b      	lsls	r3, r3, #10
 80079d8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80079dc:	431a      	orrs	r2, r3
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	371c      	adds	r7, #28
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr
 80079f0:	00d8acbf 	.word	0x00d8acbf
 80079f4:	00e4e1bf 	.word	0x00e4e1bf
 80079f8:	00f423ff 	.word	0x00f423ff
 80079fc:	0106737f 	.word	0x0106737f
 8007a00:	011a499f 	.word	0x011a499f
 8007a04:	01312cff 	.word	0x01312cff
 8007a08:	014ca43f 	.word	0x014ca43f
 8007a0c:	016e35ff 	.word	0x016e35ff
 8007a10:	01a6ab1f 	.word	0x01a6ab1f
 8007a14:	01e847ff 	.word	0x01e847ff

08007a18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	f043 0201 	orr.w	r2, r3, #1
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	370c      	adds	r7, #12
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a3a:	b480      	push	{r7}
 8007a3c:	b083      	sub	sp, #12
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	f023 0201 	bic.w	r2, r3, #1
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	460b      	mov	r3, r1
 8007a66:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007a74:	78fb      	ldrb	r3, [r7, #3]
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d106      	bne.n	8007a88 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	60da      	str	r2, [r3, #12]
 8007a86:	e00b      	b.n	8007aa0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007a88:	78fb      	ldrb	r3, [r7, #3]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d106      	bne.n	8007a9c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	60da      	str	r2, [r3, #12]
 8007a9a:	e001      	b.n	8007aa0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e003      	b.n	8007aa8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007aa0:	2032      	movs	r0, #50	; 0x32
 8007aa2:	f7fb fd6f 	bl	8003584 <HAL_Delay>

  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3708      	adds	r7, #8
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ab0:	b084      	sub	sp, #16
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b086      	sub	sp, #24
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
 8007aba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007abe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007aca:	2300      	movs	r3, #0
 8007acc:	613b      	str	r3, [r7, #16]
 8007ace:	e009      	b.n	8007ae4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	3340      	adds	r3, #64	; 0x40
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	4413      	add	r3, r2
 8007ada:	2200      	movs	r2, #0
 8007adc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	613b      	str	r3, [r7, #16]
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	2b0e      	cmp	r3, #14
 8007ae8:	d9f2      	bls.n	8007ad0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d11c      	bne.n	8007b2a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007afe:	f043 0302 	orr.w	r3, r3, #2
 8007b02:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b08:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b14:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b20:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	639a      	str	r2, [r3, #56]	; 0x38
 8007b28:	e00b      	b.n	8007b42 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b3a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b48:	461a      	mov	r2, r3
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b54:	4619      	mov	r1, r3
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	680b      	ldr	r3, [r1, #0]
 8007b60:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d10c      	bne.n	8007b82 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d104      	bne.n	8007b78 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007b6e:	2100      	movs	r1, #0
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 f949 	bl	8007e08 <USB_SetDevSpeed>
 8007b76:	e008      	b.n	8007b8a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007b78:	2101      	movs	r1, #1
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f944 	bl	8007e08 <USB_SetDevSpeed>
 8007b80:	e003      	b.n	8007b8a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007b82:	2103      	movs	r1, #3
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f93f 	bl	8007e08 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007b8a:	2110      	movs	r1, #16
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 f8f3 	bl	8007d78 <USB_FlushTxFifo>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d001      	beq.n	8007b9c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 f911 	bl	8007dc4 <USB_FlushRxFifo>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d001      	beq.n	8007bac <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bca:	461a      	mov	r2, r3
 8007bcc:	2300      	movs	r3, #0
 8007bce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	613b      	str	r3, [r7, #16]
 8007bd4:	e043      	b.n	8007c5e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	015a      	lsls	r2, r3, #5
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	4413      	add	r3, r2
 8007bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007be8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bec:	d118      	bne.n	8007c20 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d10a      	bne.n	8007c0a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	015a      	lsls	r2, r3, #5
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c00:	461a      	mov	r2, r3
 8007c02:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c06:	6013      	str	r3, [r2, #0]
 8007c08:	e013      	b.n	8007c32 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	015a      	lsls	r2, r3, #5
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	4413      	add	r3, r2
 8007c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c16:	461a      	mov	r2, r3
 8007c18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c1c:	6013      	str	r3, [r2, #0]
 8007c1e:	e008      	b.n	8007c32 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	015a      	lsls	r2, r3, #5
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	4413      	add	r3, r2
 8007c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	2300      	movs	r3, #0
 8007c30:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	015a      	lsls	r2, r3, #5
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	4413      	add	r3, r2
 8007c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c3e:	461a      	mov	r2, r3
 8007c40:	2300      	movs	r3, #0
 8007c42:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	015a      	lsls	r2, r3, #5
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c50:	461a      	mov	r2, r3
 8007c52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c56:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	613b      	str	r3, [r7, #16]
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c60:	693a      	ldr	r2, [r7, #16]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d3b7      	bcc.n	8007bd6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c66:	2300      	movs	r3, #0
 8007c68:	613b      	str	r3, [r7, #16]
 8007c6a:	e043      	b.n	8007cf4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	015a      	lsls	r2, r3, #5
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	4413      	add	r3, r2
 8007c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c82:	d118      	bne.n	8007cb6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10a      	bne.n	8007ca0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	015a      	lsls	r2, r3, #5
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	4413      	add	r3, r2
 8007c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c96:	461a      	mov	r2, r3
 8007c98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c9c:	6013      	str	r3, [r2, #0]
 8007c9e:	e013      	b.n	8007cc8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	015a      	lsls	r2, r3, #5
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cac:	461a      	mov	r2, r3
 8007cae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007cb2:	6013      	str	r3, [r2, #0]
 8007cb4:	e008      	b.n	8007cc8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	015a      	lsls	r2, r3, #5
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	015a      	lsls	r2, r3, #5
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	015a      	lsls	r2, r3, #5
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007cec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	613b      	str	r3, [r7, #16]
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf6:	693a      	ldr	r2, [r7, #16]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d3b7      	bcc.n	8007c6c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d0e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007d1c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d105      	bne.n	8007d30 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	699b      	ldr	r3, [r3, #24]
 8007d28:	f043 0210 	orr.w	r2, r3, #16
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	699a      	ldr	r2, [r3, #24]
 8007d34:	4b0f      	ldr	r3, [pc, #60]	; (8007d74 <USB_DevInit+0x2c4>)
 8007d36:	4313      	orrs	r3, r2
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d005      	beq.n	8007d4e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	699b      	ldr	r3, [r3, #24]
 8007d46:	f043 0208 	orr.w	r2, r3, #8
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d107      	bne.n	8007d64 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	699b      	ldr	r3, [r3, #24]
 8007d58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d5c:	f043 0304 	orr.w	r3, r3, #4
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3718      	adds	r7, #24
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d70:	b004      	add	sp, #16
 8007d72:	4770      	bx	lr
 8007d74:	803c3800 	.word	0x803c3800

08007d78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007d82:	2300      	movs	r3, #0
 8007d84:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	019b      	lsls	r3, r3, #6
 8007d8a:	f043 0220 	orr.w	r2, r3, #32
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	3301      	adds	r3, #1
 8007d96:	60fb      	str	r3, [r7, #12]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	4a09      	ldr	r2, [pc, #36]	; (8007dc0 <USB_FlushTxFifo+0x48>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d901      	bls.n	8007da4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007da0:	2303      	movs	r3, #3
 8007da2:	e006      	b.n	8007db2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	f003 0320 	and.w	r3, r3, #32
 8007dac:	2b20      	cmp	r3, #32
 8007dae:	d0f0      	beq.n	8007d92 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3714      	adds	r7, #20
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	00030d40 	.word	0x00030d40

08007dc4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2210      	movs	r2, #16
 8007dd4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	60fb      	str	r3, [r7, #12]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	4a09      	ldr	r2, [pc, #36]	; (8007e04 <USB_FlushRxFifo+0x40>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d901      	bls.n	8007de8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007de4:	2303      	movs	r3, #3
 8007de6:	e006      	b.n	8007df6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	f003 0310 	and.w	r3, r3, #16
 8007df0:	2b10      	cmp	r3, #16
 8007df2:	d0f0      	beq.n	8007dd6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3714      	adds	r7, #20
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	00030d40 	.word	0x00030d40

08007e08 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	460b      	mov	r3, r1
 8007e12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	78fb      	ldrb	r3, [r7, #3]
 8007e22:	68f9      	ldr	r1, [r7, #12]
 8007e24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3714      	adds	r7, #20
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr

08007e3a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007e3a:	b480      	push	{r7}
 8007e3c:	b087      	sub	sp, #28
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	f003 0306 	and.w	r3, r3, #6
 8007e52:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d102      	bne.n	8007e60 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	75fb      	strb	r3, [r7, #23]
 8007e5e:	e00a      	b.n	8007e76 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	d002      	beq.n	8007e6c <USB_GetDevSpeed+0x32>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2b06      	cmp	r3, #6
 8007e6a:	d102      	bne.n	8007e72 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	75fb      	strb	r3, [r7, #23]
 8007e70:	e001      	b.n	8007e76 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007e72:	230f      	movs	r3, #15
 8007e74:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	371c      	adds	r7, #28
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	785b      	ldrb	r3, [r3, #1]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d13a      	bne.n	8007f16 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ea6:	69da      	ldr	r2, [r3, #28]
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	f003 030f 	and.w	r3, r3, #15
 8007eb0:	2101      	movs	r1, #1
 8007eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	68f9      	ldr	r1, [r7, #12]
 8007eba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	015a      	lsls	r2, r3, #5
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	4413      	add	r3, r2
 8007eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d155      	bne.n	8007f84 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	015a      	lsls	r2, r3, #5
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	4413      	add	r3, r2
 8007ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	78db      	ldrb	r3, [r3, #3]
 8007ef2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007ef4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	059b      	lsls	r3, r3, #22
 8007efa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007efc:	4313      	orrs	r3, r2
 8007efe:	68ba      	ldr	r2, [r7, #8]
 8007f00:	0151      	lsls	r1, r2, #5
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	440a      	add	r2, r1
 8007f06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f12:	6013      	str	r3, [r2, #0]
 8007f14:	e036      	b.n	8007f84 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f1c:	69da      	ldr	r2, [r3, #28]
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	f003 030f 	and.w	r3, r3, #15
 8007f26:	2101      	movs	r1, #1
 8007f28:	fa01 f303 	lsl.w	r3, r1, r3
 8007f2c:	041b      	lsls	r3, r3, #16
 8007f2e:	68f9      	ldr	r1, [r7, #12]
 8007f30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f34:	4313      	orrs	r3, r2
 8007f36:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	015a      	lsls	r2, r3, #5
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	4413      	add	r3, r2
 8007f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d11a      	bne.n	8007f84 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	015a      	lsls	r2, r3, #5
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	4413      	add	r3, r2
 8007f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	78db      	ldrb	r3, [r3, #3]
 8007f68:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007f6a:	430b      	orrs	r3, r1
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	0151      	lsls	r1, r2, #5
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	440a      	add	r2, r1
 8007f76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f82:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3714      	adds	r7, #20
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr
	...

08007f94 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	785b      	ldrb	r3, [r3, #1]
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d161      	bne.n	8008074 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	015a      	lsls	r2, r3, #5
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fc6:	d11f      	bne.n	8008008 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	015a      	lsls	r2, r3, #5
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	4413      	add	r3, r2
 8007fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	0151      	lsls	r1, r2, #5
 8007fda:	68fa      	ldr	r2, [r7, #12]
 8007fdc:	440a      	add	r2, r1
 8007fde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fe2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007fe6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	015a      	lsls	r2, r3, #5
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	4413      	add	r3, r2
 8007ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	0151      	lsls	r1, r2, #5
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	440a      	add	r2, r1
 8007ffe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008002:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008006:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800800e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	f003 030f 	and.w	r3, r3, #15
 8008018:	2101      	movs	r1, #1
 800801a:	fa01 f303 	lsl.w	r3, r1, r3
 800801e:	b29b      	uxth	r3, r3
 8008020:	43db      	mvns	r3, r3
 8008022:	68f9      	ldr	r1, [r7, #12]
 8008024:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008028:	4013      	ands	r3, r2
 800802a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008032:	69da      	ldr	r2, [r3, #28]
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	f003 030f 	and.w	r3, r3, #15
 800803c:	2101      	movs	r1, #1
 800803e:	fa01 f303 	lsl.w	r3, r1, r3
 8008042:	b29b      	uxth	r3, r3
 8008044:	43db      	mvns	r3, r3
 8008046:	68f9      	ldr	r1, [r7, #12]
 8008048:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800804c:	4013      	ands	r3, r2
 800804e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	015a      	lsls	r2, r3, #5
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	4413      	add	r3, r2
 8008058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	0159      	lsls	r1, r3, #5
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	440b      	add	r3, r1
 8008066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800806a:	4619      	mov	r1, r3
 800806c:	4b35      	ldr	r3, [pc, #212]	; (8008144 <USB_DeactivateEndpoint+0x1b0>)
 800806e:	4013      	ands	r3, r2
 8008070:	600b      	str	r3, [r1, #0]
 8008072:	e060      	b.n	8008136 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	015a      	lsls	r2, r3, #5
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	4413      	add	r3, r2
 800807c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008086:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800808a:	d11f      	bne.n	80080cc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	015a      	lsls	r2, r3, #5
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	4413      	add	r3, r2
 8008094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	0151      	lsls	r1, r2, #5
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	440a      	add	r2, r1
 80080a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80080aa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	015a      	lsls	r2, r3, #5
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	4413      	add	r3, r2
 80080b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	68ba      	ldr	r2, [r7, #8]
 80080bc:	0151      	lsls	r1, r2, #5
 80080be:	68fa      	ldr	r2, [r7, #12]
 80080c0:	440a      	add	r2, r1
 80080c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	f003 030f 	and.w	r3, r3, #15
 80080dc:	2101      	movs	r1, #1
 80080de:	fa01 f303 	lsl.w	r3, r1, r3
 80080e2:	041b      	lsls	r3, r3, #16
 80080e4:	43db      	mvns	r3, r3
 80080e6:	68f9      	ldr	r1, [r7, #12]
 80080e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080ec:	4013      	ands	r3, r2
 80080ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080f6:	69da      	ldr	r2, [r3, #28]
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	f003 030f 	and.w	r3, r3, #15
 8008100:	2101      	movs	r1, #1
 8008102:	fa01 f303 	lsl.w	r3, r1, r3
 8008106:	041b      	lsls	r3, r3, #16
 8008108:	43db      	mvns	r3, r3
 800810a:	68f9      	ldr	r1, [r7, #12]
 800810c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008110:	4013      	ands	r3, r2
 8008112:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	015a      	lsls	r2, r3, #5
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	4413      	add	r3, r2
 800811c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	0159      	lsls	r1, r3, #5
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	440b      	add	r3, r1
 800812a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800812e:	4619      	mov	r1, r3
 8008130:	4b05      	ldr	r3, [pc, #20]	; (8008148 <USB_DeactivateEndpoint+0x1b4>)
 8008132:	4013      	ands	r3, r2
 8008134:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	3714      	adds	r7, #20
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr
 8008144:	ec337800 	.word	0xec337800
 8008148:	eff37800 	.word	0xeff37800

0800814c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b08a      	sub	sp, #40	; 0x28
 8008150:	af02      	add	r7, sp, #8
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	4613      	mov	r3, r2
 8008158:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	785b      	ldrb	r3, [r3, #1]
 8008168:	2b01      	cmp	r3, #1
 800816a:	f040 815c 	bne.w	8008426 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	695b      	ldr	r3, [r3, #20]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d132      	bne.n	80081dc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	015a      	lsls	r2, r3, #5
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	4413      	add	r3, r2
 800817e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	69ba      	ldr	r2, [r7, #24]
 8008186:	0151      	lsls	r1, r2, #5
 8008188:	69fa      	ldr	r2, [r7, #28]
 800818a:	440a      	add	r2, r1
 800818c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008190:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008194:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008198:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	015a      	lsls	r2, r3, #5
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	4413      	add	r3, r2
 80081a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	69ba      	ldr	r2, [r7, #24]
 80081aa:	0151      	lsls	r1, r2, #5
 80081ac:	69fa      	ldr	r2, [r7, #28]
 80081ae:	440a      	add	r2, r1
 80081b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80081b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	015a      	lsls	r2, r3, #5
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	4413      	add	r3, r2
 80081c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	69ba      	ldr	r2, [r7, #24]
 80081ca:	0151      	lsls	r1, r2, #5
 80081cc:	69fa      	ldr	r2, [r7, #28]
 80081ce:	440a      	add	r2, r1
 80081d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081d4:	0cdb      	lsrs	r3, r3, #19
 80081d6:	04db      	lsls	r3, r3, #19
 80081d8:	6113      	str	r3, [r2, #16]
 80081da:	e074      	b.n	80082c6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	015a      	lsls	r2, r3, #5
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	4413      	add	r3, r2
 80081e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	69ba      	ldr	r2, [r7, #24]
 80081ec:	0151      	lsls	r1, r2, #5
 80081ee:	69fa      	ldr	r2, [r7, #28]
 80081f0:	440a      	add	r2, r1
 80081f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081f6:	0cdb      	lsrs	r3, r3, #19
 80081f8:	04db      	lsls	r3, r3, #19
 80081fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	015a      	lsls	r2, r3, #5
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	4413      	add	r3, r2
 8008204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	69ba      	ldr	r2, [r7, #24]
 800820c:	0151      	lsls	r1, r2, #5
 800820e:	69fa      	ldr	r2, [r7, #28]
 8008210:	440a      	add	r2, r1
 8008212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008216:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800821a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800821e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	015a      	lsls	r2, r3, #5
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	4413      	add	r3, r2
 8008228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800822c:	691a      	ldr	r2, [r3, #16]
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	6959      	ldr	r1, [r3, #20]
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	440b      	add	r3, r1
 8008238:	1e59      	subs	r1, r3, #1
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008242:	04d9      	lsls	r1, r3, #19
 8008244:	4b9d      	ldr	r3, [pc, #628]	; (80084bc <USB_EPStartXfer+0x370>)
 8008246:	400b      	ands	r3, r1
 8008248:	69b9      	ldr	r1, [r7, #24]
 800824a:	0148      	lsls	r0, r1, #5
 800824c:	69f9      	ldr	r1, [r7, #28]
 800824e:	4401      	add	r1, r0
 8008250:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008254:	4313      	orrs	r3, r2
 8008256:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	015a      	lsls	r2, r3, #5
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	4413      	add	r3, r2
 8008260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008264:	691a      	ldr	r2, [r3, #16]
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	695b      	ldr	r3, [r3, #20]
 800826a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800826e:	69b9      	ldr	r1, [r7, #24]
 8008270:	0148      	lsls	r0, r1, #5
 8008272:	69f9      	ldr	r1, [r7, #28]
 8008274:	4401      	add	r1, r0
 8008276:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800827a:	4313      	orrs	r3, r2
 800827c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	78db      	ldrb	r3, [r3, #3]
 8008282:	2b01      	cmp	r3, #1
 8008284:	d11f      	bne.n	80082c6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	015a      	lsls	r2, r3, #5
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	4413      	add	r3, r2
 800828e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008292:	691b      	ldr	r3, [r3, #16]
 8008294:	69ba      	ldr	r2, [r7, #24]
 8008296:	0151      	lsls	r1, r2, #5
 8008298:	69fa      	ldr	r2, [r7, #28]
 800829a:	440a      	add	r2, r1
 800829c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082a0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80082a4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	015a      	lsls	r2, r3, #5
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	4413      	add	r3, r2
 80082ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	69ba      	ldr	r2, [r7, #24]
 80082b6:	0151      	lsls	r1, r2, #5
 80082b8:	69fa      	ldr	r2, [r7, #28]
 80082ba:	440a      	add	r2, r1
 80082bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80082c4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80082c6:	79fb      	ldrb	r3, [r7, #7]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d14b      	bne.n	8008364 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d009      	beq.n	80082e8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80082d4:	69bb      	ldr	r3, [r7, #24]
 80082d6:	015a      	lsls	r2, r3, #5
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	4413      	add	r3, r2
 80082dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082e0:	461a      	mov	r2, r3
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	78db      	ldrb	r3, [r3, #3]
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d128      	bne.n	8008342 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d110      	bne.n	8008322 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	015a      	lsls	r2, r3, #5
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	4413      	add	r3, r2
 8008308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	69ba      	ldr	r2, [r7, #24]
 8008310:	0151      	lsls	r1, r2, #5
 8008312:	69fa      	ldr	r2, [r7, #28]
 8008314:	440a      	add	r2, r1
 8008316:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800831a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800831e:	6013      	str	r3, [r2, #0]
 8008320:	e00f      	b.n	8008342 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	015a      	lsls	r2, r3, #5
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	4413      	add	r3, r2
 800832a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	69ba      	ldr	r2, [r7, #24]
 8008332:	0151      	lsls	r1, r2, #5
 8008334:	69fa      	ldr	r2, [r7, #28]
 8008336:	440a      	add	r2, r1
 8008338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800833c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008340:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	015a      	lsls	r2, r3, #5
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	4413      	add	r3, r2
 800834a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	69ba      	ldr	r2, [r7, #24]
 8008352:	0151      	lsls	r1, r2, #5
 8008354:	69fa      	ldr	r2, [r7, #28]
 8008356:	440a      	add	r2, r1
 8008358:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800835c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008360:	6013      	str	r3, [r2, #0]
 8008362:	e12f      	b.n	80085c4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	015a      	lsls	r2, r3, #5
 8008368:	69fb      	ldr	r3, [r7, #28]
 800836a:	4413      	add	r3, r2
 800836c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	69ba      	ldr	r2, [r7, #24]
 8008374:	0151      	lsls	r1, r2, #5
 8008376:	69fa      	ldr	r2, [r7, #28]
 8008378:	440a      	add	r2, r1
 800837a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800837e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008382:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	78db      	ldrb	r3, [r3, #3]
 8008388:	2b01      	cmp	r3, #1
 800838a:	d015      	beq.n	80083b8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	695b      	ldr	r3, [r3, #20]
 8008390:	2b00      	cmp	r3, #0
 8008392:	f000 8117 	beq.w	80085c4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800839c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	f003 030f 	and.w	r3, r3, #15
 80083a6:	2101      	movs	r1, #1
 80083a8:	fa01 f303 	lsl.w	r3, r1, r3
 80083ac:	69f9      	ldr	r1, [r7, #28]
 80083ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083b2:	4313      	orrs	r3, r2
 80083b4:	634b      	str	r3, [r1, #52]	; 0x34
 80083b6:	e105      	b.n	80085c4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d110      	bne.n	80083ea <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	015a      	lsls	r2, r3, #5
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	4413      	add	r3, r2
 80083d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	69ba      	ldr	r2, [r7, #24]
 80083d8:	0151      	lsls	r1, r2, #5
 80083da:	69fa      	ldr	r2, [r7, #28]
 80083dc:	440a      	add	r2, r1
 80083de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80083e6:	6013      	str	r3, [r2, #0]
 80083e8:	e00f      	b.n	800840a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	015a      	lsls	r2, r3, #5
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	4413      	add	r3, r2
 80083f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	69ba      	ldr	r2, [r7, #24]
 80083fa:	0151      	lsls	r1, r2, #5
 80083fc:	69fa      	ldr	r2, [r7, #28]
 80083fe:	440a      	add	r2, r1
 8008400:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008408:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	68d9      	ldr	r1, [r3, #12]
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	781a      	ldrb	r2, [r3, #0]
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	695b      	ldr	r3, [r3, #20]
 8008416:	b298      	uxth	r0, r3
 8008418:	79fb      	ldrb	r3, [r7, #7]
 800841a:	9300      	str	r3, [sp, #0]
 800841c:	4603      	mov	r3, r0
 800841e:	68f8      	ldr	r0, [r7, #12]
 8008420:	f000 fa2b 	bl	800887a <USB_WritePacket>
 8008424:	e0ce      	b.n	80085c4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	015a      	lsls	r2, r3, #5
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	4413      	add	r3, r2
 800842e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	69ba      	ldr	r2, [r7, #24]
 8008436:	0151      	lsls	r1, r2, #5
 8008438:	69fa      	ldr	r2, [r7, #28]
 800843a:	440a      	add	r2, r1
 800843c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008440:	0cdb      	lsrs	r3, r3, #19
 8008442:	04db      	lsls	r3, r3, #19
 8008444:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	015a      	lsls	r2, r3, #5
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	4413      	add	r3, r2
 800844e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	69ba      	ldr	r2, [r7, #24]
 8008456:	0151      	lsls	r1, r2, #5
 8008458:	69fa      	ldr	r2, [r7, #28]
 800845a:	440a      	add	r2, r1
 800845c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008460:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008464:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008468:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	695b      	ldr	r3, [r3, #20]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d126      	bne.n	80084c0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008472:	69bb      	ldr	r3, [r7, #24]
 8008474:	015a      	lsls	r2, r3, #5
 8008476:	69fb      	ldr	r3, [r7, #28]
 8008478:	4413      	add	r3, r2
 800847a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800847e:	691a      	ldr	r2, [r3, #16]
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008488:	69b9      	ldr	r1, [r7, #24]
 800848a:	0148      	lsls	r0, r1, #5
 800848c:	69f9      	ldr	r1, [r7, #28]
 800848e:	4401      	add	r1, r0
 8008490:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008494:	4313      	orrs	r3, r2
 8008496:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	015a      	lsls	r2, r3, #5
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	4413      	add	r3, r2
 80084a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084a4:	691b      	ldr	r3, [r3, #16]
 80084a6:	69ba      	ldr	r2, [r7, #24]
 80084a8:	0151      	lsls	r1, r2, #5
 80084aa:	69fa      	ldr	r2, [r7, #28]
 80084ac:	440a      	add	r2, r1
 80084ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80084b6:	6113      	str	r3, [r2, #16]
 80084b8:	e036      	b.n	8008528 <USB_EPStartXfer+0x3dc>
 80084ba:	bf00      	nop
 80084bc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	695a      	ldr	r2, [r3, #20]
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	4413      	add	r3, r2
 80084ca:	1e5a      	subs	r2, r3, #1
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80084d4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	015a      	lsls	r2, r3, #5
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	4413      	add	r3, r2
 80084de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084e2:	691a      	ldr	r2, [r3, #16]
 80084e4:	8afb      	ldrh	r3, [r7, #22]
 80084e6:	04d9      	lsls	r1, r3, #19
 80084e8:	4b39      	ldr	r3, [pc, #228]	; (80085d0 <USB_EPStartXfer+0x484>)
 80084ea:	400b      	ands	r3, r1
 80084ec:	69b9      	ldr	r1, [r7, #24]
 80084ee:	0148      	lsls	r0, r1, #5
 80084f0:	69f9      	ldr	r1, [r7, #28]
 80084f2:	4401      	add	r1, r0
 80084f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80084f8:	4313      	orrs	r3, r2
 80084fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	015a      	lsls	r2, r3, #5
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	4413      	add	r3, r2
 8008504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008508:	691a      	ldr	r2, [r3, #16]
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	8af9      	ldrh	r1, [r7, #22]
 8008510:	fb01 f303 	mul.w	r3, r1, r3
 8008514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008518:	69b9      	ldr	r1, [r7, #24]
 800851a:	0148      	lsls	r0, r1, #5
 800851c:	69f9      	ldr	r1, [r7, #28]
 800851e:	4401      	add	r1, r0
 8008520:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008524:	4313      	orrs	r3, r2
 8008526:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008528:	79fb      	ldrb	r3, [r7, #7]
 800852a:	2b01      	cmp	r3, #1
 800852c:	d10d      	bne.n	800854a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d009      	beq.n	800854a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	68d9      	ldr	r1, [r3, #12]
 800853a:	69bb      	ldr	r3, [r7, #24]
 800853c:	015a      	lsls	r2, r3, #5
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	4413      	add	r3, r2
 8008542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008546:	460a      	mov	r2, r1
 8008548:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	78db      	ldrb	r3, [r3, #3]
 800854e:	2b01      	cmp	r3, #1
 8008550:	d128      	bne.n	80085a4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800855e:	2b00      	cmp	r3, #0
 8008560:	d110      	bne.n	8008584 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	015a      	lsls	r2, r3, #5
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	4413      	add	r3, r2
 800856a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	69ba      	ldr	r2, [r7, #24]
 8008572:	0151      	lsls	r1, r2, #5
 8008574:	69fa      	ldr	r2, [r7, #28]
 8008576:	440a      	add	r2, r1
 8008578:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800857c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008580:	6013      	str	r3, [r2, #0]
 8008582:	e00f      	b.n	80085a4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008584:	69bb      	ldr	r3, [r7, #24]
 8008586:	015a      	lsls	r2, r3, #5
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	4413      	add	r3, r2
 800858c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	69ba      	ldr	r2, [r7, #24]
 8008594:	0151      	lsls	r1, r2, #5
 8008596:	69fa      	ldr	r2, [r7, #28]
 8008598:	440a      	add	r2, r1
 800859a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800859e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085a2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	015a      	lsls	r2, r3, #5
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	4413      	add	r3, r2
 80085ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	69ba      	ldr	r2, [r7, #24]
 80085b4:	0151      	lsls	r1, r2, #5
 80085b6:	69fa      	ldr	r2, [r7, #28]
 80085b8:	440a      	add	r2, r1
 80085ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80085c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3720      	adds	r7, #32
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	1ff80000 	.word	0x1ff80000

080085d4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b087      	sub	sp, #28
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	4613      	mov	r3, r2
 80085e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	785b      	ldrb	r3, [r3, #1]
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	f040 80cd 	bne.w	8008790 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	695b      	ldr	r3, [r3, #20]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d132      	bne.n	8008664 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	015a      	lsls	r2, r3, #5
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	4413      	add	r3, r2
 8008606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	693a      	ldr	r2, [r7, #16]
 800860e:	0151      	lsls	r1, r2, #5
 8008610:	697a      	ldr	r2, [r7, #20]
 8008612:	440a      	add	r2, r1
 8008614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008618:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800861c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008620:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	015a      	lsls	r2, r3, #5
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	4413      	add	r3, r2
 800862a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800862e:	691b      	ldr	r3, [r3, #16]
 8008630:	693a      	ldr	r2, [r7, #16]
 8008632:	0151      	lsls	r1, r2, #5
 8008634:	697a      	ldr	r2, [r7, #20]
 8008636:	440a      	add	r2, r1
 8008638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800863c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008640:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	015a      	lsls	r2, r3, #5
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	4413      	add	r3, r2
 800864a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	693a      	ldr	r2, [r7, #16]
 8008652:	0151      	lsls	r1, r2, #5
 8008654:	697a      	ldr	r2, [r7, #20]
 8008656:	440a      	add	r2, r1
 8008658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800865c:	0cdb      	lsrs	r3, r3, #19
 800865e:	04db      	lsls	r3, r3, #19
 8008660:	6113      	str	r3, [r2, #16]
 8008662:	e04e      	b.n	8008702 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	015a      	lsls	r2, r3, #5
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	4413      	add	r3, r2
 800866c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	693a      	ldr	r2, [r7, #16]
 8008674:	0151      	lsls	r1, r2, #5
 8008676:	697a      	ldr	r2, [r7, #20]
 8008678:	440a      	add	r2, r1
 800867a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800867e:	0cdb      	lsrs	r3, r3, #19
 8008680:	04db      	lsls	r3, r3, #19
 8008682:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	015a      	lsls	r2, r3, #5
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	4413      	add	r3, r2
 800868c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	693a      	ldr	r2, [r7, #16]
 8008694:	0151      	lsls	r1, r2, #5
 8008696:	697a      	ldr	r2, [r7, #20]
 8008698:	440a      	add	r2, r1
 800869a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800869e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80086a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80086a6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	695a      	ldr	r2, [r3, #20]
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d903      	bls.n	80086bc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	689a      	ldr	r2, [r3, #8]
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	015a      	lsls	r2, r3, #5
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	4413      	add	r3, r2
 80086c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	693a      	ldr	r2, [r7, #16]
 80086cc:	0151      	lsls	r1, r2, #5
 80086ce:	697a      	ldr	r2, [r7, #20]
 80086d0:	440a      	add	r2, r1
 80086d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	015a      	lsls	r2, r3, #5
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	4413      	add	r3, r2
 80086e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086e8:	691a      	ldr	r2, [r3, #16]
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	695b      	ldr	r3, [r3, #20]
 80086ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086f2:	6939      	ldr	r1, [r7, #16]
 80086f4:	0148      	lsls	r0, r1, #5
 80086f6:	6979      	ldr	r1, [r7, #20]
 80086f8:	4401      	add	r1, r0
 80086fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80086fe:	4313      	orrs	r3, r2
 8008700:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008702:	79fb      	ldrb	r3, [r7, #7]
 8008704:	2b01      	cmp	r3, #1
 8008706:	d11e      	bne.n	8008746 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d009      	beq.n	8008724 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	015a      	lsls	r2, r3, #5
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	4413      	add	r3, r2
 8008718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800871c:	461a      	mov	r2, r3
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	015a      	lsls	r2, r3, #5
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	4413      	add	r3, r2
 800872c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	693a      	ldr	r2, [r7, #16]
 8008734:	0151      	lsls	r1, r2, #5
 8008736:	697a      	ldr	r2, [r7, #20]
 8008738:	440a      	add	r2, r1
 800873a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800873e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008742:	6013      	str	r3, [r2, #0]
 8008744:	e092      	b.n	800886c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	015a      	lsls	r2, r3, #5
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	4413      	add	r3, r2
 800874e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	693a      	ldr	r2, [r7, #16]
 8008756:	0151      	lsls	r1, r2, #5
 8008758:	697a      	ldr	r2, [r7, #20]
 800875a:	440a      	add	r2, r1
 800875c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008760:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008764:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	695b      	ldr	r3, [r3, #20]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d07e      	beq.n	800886c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008774:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	f003 030f 	and.w	r3, r3, #15
 800877e:	2101      	movs	r1, #1
 8008780:	fa01 f303 	lsl.w	r3, r1, r3
 8008784:	6979      	ldr	r1, [r7, #20]
 8008786:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800878a:	4313      	orrs	r3, r2
 800878c:	634b      	str	r3, [r1, #52]	; 0x34
 800878e:	e06d      	b.n	800886c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	015a      	lsls	r2, r3, #5
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	4413      	add	r3, r2
 8008798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	693a      	ldr	r2, [r7, #16]
 80087a0:	0151      	lsls	r1, r2, #5
 80087a2:	697a      	ldr	r2, [r7, #20]
 80087a4:	440a      	add	r2, r1
 80087a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087aa:	0cdb      	lsrs	r3, r3, #19
 80087ac:	04db      	lsls	r3, r3, #19
 80087ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	015a      	lsls	r2, r3, #5
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	4413      	add	r3, r2
 80087b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087bc:	691b      	ldr	r3, [r3, #16]
 80087be:	693a      	ldr	r2, [r7, #16]
 80087c0:	0151      	lsls	r1, r2, #5
 80087c2:	697a      	ldr	r2, [r7, #20]
 80087c4:	440a      	add	r2, r1
 80087c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80087ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80087d2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	695b      	ldr	r3, [r3, #20]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d003      	beq.n	80087e4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	689a      	ldr	r2, [r3, #8]
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	015a      	lsls	r2, r3, #5
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	4413      	add	r3, r2
 80087ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	693a      	ldr	r2, [r7, #16]
 80087f4:	0151      	lsls	r1, r2, #5
 80087f6:	697a      	ldr	r2, [r7, #20]
 80087f8:	440a      	add	r2, r1
 80087fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008802:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	015a      	lsls	r2, r3, #5
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	4413      	add	r3, r2
 800880c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008810:	691a      	ldr	r2, [r3, #16]
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800881a:	6939      	ldr	r1, [r7, #16]
 800881c:	0148      	lsls	r0, r1, #5
 800881e:	6979      	ldr	r1, [r7, #20]
 8008820:	4401      	add	r1, r0
 8008822:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008826:	4313      	orrs	r3, r2
 8008828:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800882a:	79fb      	ldrb	r3, [r7, #7]
 800882c:	2b01      	cmp	r3, #1
 800882e:	d10d      	bne.n	800884c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d009      	beq.n	800884c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	68d9      	ldr	r1, [r3, #12]
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	015a      	lsls	r2, r3, #5
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	4413      	add	r3, r2
 8008844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008848:	460a      	mov	r2, r1
 800884a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	015a      	lsls	r2, r3, #5
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	4413      	add	r3, r2
 8008854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	693a      	ldr	r2, [r7, #16]
 800885c:	0151      	lsls	r1, r2, #5
 800885e:	697a      	ldr	r2, [r7, #20]
 8008860:	440a      	add	r2, r1
 8008862:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008866:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800886a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	371c      	adds	r7, #28
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr

0800887a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800887a:	b480      	push	{r7}
 800887c:	b089      	sub	sp, #36	; 0x24
 800887e:	af00      	add	r7, sp, #0
 8008880:	60f8      	str	r0, [r7, #12]
 8008882:	60b9      	str	r1, [r7, #8]
 8008884:	4611      	mov	r1, r2
 8008886:	461a      	mov	r2, r3
 8008888:	460b      	mov	r3, r1
 800888a:	71fb      	strb	r3, [r7, #7]
 800888c:	4613      	mov	r3, r2
 800888e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008898:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800889c:	2b00      	cmp	r3, #0
 800889e:	d11a      	bne.n	80088d6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80088a0:	88bb      	ldrh	r3, [r7, #4]
 80088a2:	3303      	adds	r3, #3
 80088a4:	089b      	lsrs	r3, r3, #2
 80088a6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80088a8:	2300      	movs	r3, #0
 80088aa:	61bb      	str	r3, [r7, #24]
 80088ac:	e00f      	b.n	80088ce <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80088ae:	79fb      	ldrb	r3, [r7, #7]
 80088b0:	031a      	lsls	r2, r3, #12
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	4413      	add	r3, r2
 80088b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088ba:	461a      	mov	r2, r3
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	3304      	adds	r3, #4
 80088c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	3301      	adds	r3, #1
 80088cc:	61bb      	str	r3, [r7, #24]
 80088ce:	69ba      	ldr	r2, [r7, #24]
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d3eb      	bcc.n	80088ae <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80088d6:	2300      	movs	r3, #0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3724      	adds	r7, #36	; 0x24
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b089      	sub	sp, #36	; 0x24
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	4613      	mov	r3, r2
 80088f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80088fa:	88fb      	ldrh	r3, [r7, #6]
 80088fc:	3303      	adds	r3, #3
 80088fe:	089b      	lsrs	r3, r3, #2
 8008900:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008902:	2300      	movs	r3, #0
 8008904:	61bb      	str	r3, [r7, #24]
 8008906:	e00b      	b.n	8008920 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	601a      	str	r2, [r3, #0]
    pDest++;
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	3304      	adds	r3, #4
 8008918:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	3301      	adds	r3, #1
 800891e:	61bb      	str	r3, [r7, #24]
 8008920:	69ba      	ldr	r2, [r7, #24]
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	429a      	cmp	r2, r3
 8008926:	d3ef      	bcc.n	8008908 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008928:	69fb      	ldr	r3, [r7, #28]
}
 800892a:	4618      	mov	r0, r3
 800892c:	3724      	adds	r7, #36	; 0x24
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr

08008936 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008936:	b480      	push	{r7}
 8008938:	b085      	sub	sp, #20
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
 800893e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	785b      	ldrb	r3, [r3, #1]
 800894e:	2b01      	cmp	r3, #1
 8008950:	d12c      	bne.n	80089ac <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	015a      	lsls	r2, r3, #5
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	4413      	add	r3, r2
 800895a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	db12      	blt.n	800898a <USB_EPSetStall+0x54>
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d00f      	beq.n	800898a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	015a      	lsls	r2, r3, #5
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	4413      	add	r3, r2
 8008972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	68ba      	ldr	r2, [r7, #8]
 800897a:	0151      	lsls	r1, r2, #5
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	440a      	add	r2, r1
 8008980:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008984:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008988:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	015a      	lsls	r2, r3, #5
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	4413      	add	r3, r2
 8008992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68ba      	ldr	r2, [r7, #8]
 800899a:	0151      	lsls	r1, r2, #5
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	440a      	add	r2, r1
 80089a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80089a8:	6013      	str	r3, [r2, #0]
 80089aa:	e02b      	b.n	8008a04 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	015a      	lsls	r2, r3, #5
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	4413      	add	r3, r2
 80089b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	db12      	blt.n	80089e4 <USB_EPSetStall+0xae>
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d00f      	beq.n	80089e4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	015a      	lsls	r2, r3, #5
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	4413      	add	r3, r2
 80089cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	68ba      	ldr	r2, [r7, #8]
 80089d4:	0151      	lsls	r1, r2, #5
 80089d6:	68fa      	ldr	r2, [r7, #12]
 80089d8:	440a      	add	r2, r1
 80089da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80089e2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	015a      	lsls	r2, r3, #5
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	4413      	add	r3, r2
 80089ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	68ba      	ldr	r2, [r7, #8]
 80089f4:	0151      	lsls	r1, r2, #5
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	440a      	add	r2, r1
 80089fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008a02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3714      	adds	r7, #20
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr

08008a12 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a12:	b480      	push	{r7}
 8008a14:	b085      	sub	sp, #20
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
 8008a1a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	785b      	ldrb	r3, [r3, #1]
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d128      	bne.n	8008a80 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	015a      	lsls	r2, r3, #5
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	4413      	add	r3, r2
 8008a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	68ba      	ldr	r2, [r7, #8]
 8008a3e:	0151      	lsls	r1, r2, #5
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	440a      	add	r2, r1
 8008a44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008a4c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	78db      	ldrb	r3, [r3, #3]
 8008a52:	2b03      	cmp	r3, #3
 8008a54:	d003      	beq.n	8008a5e <USB_EPClearStall+0x4c>
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	78db      	ldrb	r3, [r3, #3]
 8008a5a:	2b02      	cmp	r3, #2
 8008a5c:	d138      	bne.n	8008ad0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	015a      	lsls	r2, r3, #5
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	4413      	add	r3, r2
 8008a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	68ba      	ldr	r2, [r7, #8]
 8008a6e:	0151      	lsls	r1, r2, #5
 8008a70:	68fa      	ldr	r2, [r7, #12]
 8008a72:	440a      	add	r2, r1
 8008a74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a7c:	6013      	str	r3, [r2, #0]
 8008a7e:	e027      	b.n	8008ad0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	015a      	lsls	r2, r3, #5
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	4413      	add	r3, r2
 8008a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	0151      	lsls	r1, r2, #5
 8008a92:	68fa      	ldr	r2, [r7, #12]
 8008a94:	440a      	add	r2, r1
 8008a96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008a9e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	78db      	ldrb	r3, [r3, #3]
 8008aa4:	2b03      	cmp	r3, #3
 8008aa6:	d003      	beq.n	8008ab0 <USB_EPClearStall+0x9e>
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	78db      	ldrb	r3, [r3, #3]
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	d10f      	bne.n	8008ad0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	015a      	lsls	r2, r3, #5
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	68ba      	ldr	r2, [r7, #8]
 8008ac0:	0151      	lsls	r1, r2, #5
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	440a      	add	r2, r1
 8008ac6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ace:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3714      	adds	r7, #20
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr

08008ade <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008ade:	b480      	push	{r7}
 8008ae0:	b085      	sub	sp, #20
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
 8008ae6:	460b      	mov	r3, r1
 8008ae8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008afc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008b00:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	78fb      	ldrb	r3, [r7, #3]
 8008b0c:	011b      	lsls	r3, r3, #4
 8008b0e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008b12:	68f9      	ldr	r1, [r7, #12]
 8008b14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008b1c:	2300      	movs	r3, #0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3714      	adds	r7, #20
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr

08008b2a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008b2a:	b480      	push	{r7}
 8008b2c:	b085      	sub	sp, #20
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b44:	f023 0303 	bic.w	r3, r3, #3
 8008b48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b58:	f023 0302 	bic.w	r3, r3, #2
 8008b5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3714      	adds	r7, #20
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b085      	sub	sp, #20
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b86:	f023 0303 	bic.w	r3, r3, #3
 8008b8a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	68fa      	ldr	r2, [r7, #12]
 8008b96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b9a:	f043 0302 	orr.w	r3, r3, #2
 8008b9e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3714      	adds	r7, #20
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr

08008bae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008bae:	b480      	push	{r7}
 8008bb0:	b085      	sub	sp, #20
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	695b      	ldr	r3, [r3, #20]
 8008bba:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	699b      	ldr	r3, [r3, #24]
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	4013      	ands	r3, r2
 8008bc4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3714      	adds	r7, #20
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b085      	sub	sp, #20
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008be6:	699b      	ldr	r3, [r3, #24]
 8008be8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bf0:	69db      	ldr	r3, [r3, #28]
 8008bf2:	68ba      	ldr	r2, [r7, #8]
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	0c1b      	lsrs	r3, r3, #16
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3714      	adds	r7, #20
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b085      	sub	sp, #20
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c1a:	699b      	ldr	r3, [r3, #24]
 8008c1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c24:	69db      	ldr	r3, [r3, #28]
 8008c26:	68ba      	ldr	r2, [r7, #8]
 8008c28:	4013      	ands	r3, r2
 8008c2a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	b29b      	uxth	r3, r3
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3714      	adds	r7, #20
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b085      	sub	sp, #20
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	460b      	mov	r3, r1
 8008c46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008c4c:	78fb      	ldrb	r3, [r7, #3]
 8008c4e:	015a      	lsls	r2, r3, #5
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	4413      	add	r3, r2
 8008c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c62:	695b      	ldr	r3, [r3, #20]
 8008c64:	68ba      	ldr	r2, [r7, #8]
 8008c66:	4013      	ands	r3, r2
 8008c68:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008c6a:	68bb      	ldr	r3, [r7, #8]
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3714      	adds	r7, #20
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b087      	sub	sp, #28
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	460b      	mov	r3, r1
 8008c82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c9a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008c9c:	78fb      	ldrb	r3, [r7, #3]
 8008c9e:	f003 030f 	and.w	r3, r3, #15
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ca8:	01db      	lsls	r3, r3, #7
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	693a      	ldr	r2, [r7, #16]
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008cb2:	78fb      	ldrb	r3, [r7, #3]
 8008cb4:	015a      	lsls	r2, r3, #5
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	4413      	add	r3, r2
 8008cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	693a      	ldr	r2, [r7, #16]
 8008cc2:	4013      	ands	r3, r2
 8008cc4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008cc6:	68bb      	ldr	r3, [r7, #8]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	371c      	adds	r7, #28
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	695b      	ldr	r3, [r3, #20]
 8008ce0:	f003 0301 	and.w	r3, r3, #1
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b085      	sub	sp, #20
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	68fa      	ldr	r2, [r7, #12]
 8008d06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d0a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008d0e:	f023 0307 	bic.w	r3, r3, #7
 8008d12:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d26:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3714      	adds	r7, #20
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr
	...

08008d38 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b087      	sub	sp, #28
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	460b      	mov	r3, r1
 8008d42:	607a      	str	r2, [r7, #4]
 8008d44:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	333c      	adds	r3, #60	; 0x3c
 8008d4e:	3304      	adds	r3, #4
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	4a26      	ldr	r2, [pc, #152]	; (8008df0 <USB_EP0_OutStart+0xb8>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d90a      	bls.n	8008d72 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d6c:	d101      	bne.n	8008d72 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	e037      	b.n	8008de2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d78:	461a      	mov	r2, r3
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d84:	691b      	ldr	r3, [r3, #16]
 8008d86:	697a      	ldr	r2, [r7, #20]
 8008d88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	697a      	ldr	r2, [r7, #20]
 8008d9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008da0:	f043 0318 	orr.w	r3, r3, #24
 8008da4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dac:	691b      	ldr	r3, [r3, #16]
 8008dae:	697a      	ldr	r2, [r7, #20]
 8008db0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008db4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008db8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008dba:	7afb      	ldrb	r3, [r7, #11]
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d10f      	bne.n	8008de0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	697a      	ldr	r2, [r7, #20]
 8008dd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dda:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008dde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	371c      	adds	r7, #28
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	4f54300a 	.word	0x4f54300a

08008df4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b085      	sub	sp, #20
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	3301      	adds	r3, #1
 8008e04:	60fb      	str	r3, [r7, #12]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	4a13      	ldr	r2, [pc, #76]	; (8008e58 <USB_CoreReset+0x64>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d901      	bls.n	8008e12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008e0e:	2303      	movs	r3, #3
 8008e10:	e01b      	b.n	8008e4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	daf2      	bge.n	8008e00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	f043 0201 	orr.w	r2, r3, #1
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	60fb      	str	r3, [r7, #12]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	4a09      	ldr	r2, [pc, #36]	; (8008e58 <USB_CoreReset+0x64>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d901      	bls.n	8008e3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008e38:	2303      	movs	r3, #3
 8008e3a:	e006      	b.n	8008e4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	691b      	ldr	r3, [r3, #16]
 8008e40:	f003 0301 	and.w	r3, r3, #1
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d0f0      	beq.n	8008e2a <USB_CoreReset+0x36>

  return HAL_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3714      	adds	r7, #20
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	00030d40 	.word	0x00030d40

08008e5c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	460b      	mov	r3, r1
 8008e66:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008e68:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008e6c:	f002 f940 	bl	800b0f0 <malloc>
 8008e70:	4603      	mov	r3, r0
 8008e72:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d105      	bne.n	8008e86 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008e82:	2302      	movs	r3, #2
 8008e84:	e066      	b.n	8008f54 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	7c1b      	ldrb	r3, [r3, #16]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d119      	bne.n	8008eca <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008e96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e9a:	2202      	movs	r2, #2
 8008e9c:	2181      	movs	r1, #129	; 0x81
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f001 ffad 	bl	800adfe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008eaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008eae:	2202      	movs	r2, #2
 8008eb0:	2101      	movs	r1, #1
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f001 ffa3 	bl	800adfe <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2210      	movs	r2, #16
 8008ec4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008ec8:	e016      	b.n	8008ef8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008eca:	2340      	movs	r3, #64	; 0x40
 8008ecc:	2202      	movs	r2, #2
 8008ece:	2181      	movs	r1, #129	; 0x81
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f001 ff94 	bl	800adfe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008edc:	2340      	movs	r3, #64	; 0x40
 8008ede:	2202      	movs	r2, #2
 8008ee0:	2101      	movs	r1, #1
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f001 ff8b 	bl	800adfe <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2210      	movs	r2, #16
 8008ef4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008ef8:	2308      	movs	r3, #8
 8008efa:	2203      	movs	r2, #3
 8008efc:	2182      	movs	r1, #130	; 0x82
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f001 ff7d 	bl	800adfe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2201      	movs	r2, #1
 8008f08:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	7c1b      	ldrb	r3, [r3, #16]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d109      	bne.n	8008f42 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f38:	2101      	movs	r1, #1
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f002 f84e 	bl	800afdc <USBD_LL_PrepareReceive>
 8008f40:	e007      	b.n	8008f52 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f48:	2340      	movs	r3, #64	; 0x40
 8008f4a:	2101      	movs	r1, #1
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f002 f845 	bl	800afdc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008f52:	2300      	movs	r3, #0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	460b      	mov	r3, r1
 8008f66:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008f6c:	2181      	movs	r1, #129	; 0x81
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f001 ff6b 	bl	800ae4a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008f7a:	2101      	movs	r1, #1
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f001 ff64 	bl	800ae4a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008f8a:	2182      	movs	r1, #130	; 0x82
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f001 ff5c 	bl	800ae4a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00e      	beq.n	8008fca <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f002 f89f 	bl	800b100 <free>
    pdev->pClassData = NULL;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8008fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3710      	adds	r7, #16
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b086      	sub	sp, #24
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fe4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008fea:	2300      	movs	r3, #0
 8008fec:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d03a      	beq.n	8009074 <USBD_CDC_Setup+0xa0>
 8008ffe:	2b20      	cmp	r3, #32
 8009000:	f040 8097 	bne.w	8009132 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	88db      	ldrh	r3, [r3, #6]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d029      	beq.n	8009060 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	b25b      	sxtb	r3, r3
 8009012:	2b00      	cmp	r3, #0
 8009014:	da11      	bge.n	800903a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	683a      	ldr	r2, [r7, #0]
 8009020:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8009022:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009024:	683a      	ldr	r2, [r7, #0]
 8009026:	88d2      	ldrh	r2, [r2, #6]
 8009028:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800902a:	6939      	ldr	r1, [r7, #16]
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	88db      	ldrh	r3, [r3, #6]
 8009030:	461a      	mov	r2, r3
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f001 fa9d 	bl	800a572 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8009038:	e082      	b.n	8009140 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	785a      	ldrb	r2, [r3, #1]
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	88db      	ldrh	r3, [r3, #6]
 8009048:	b2da      	uxtb	r2, r3
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009050:	6939      	ldr	r1, [r7, #16]
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	88db      	ldrh	r3, [r3, #6]
 8009056:	461a      	mov	r2, r3
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f001 fab6 	bl	800a5ca <USBD_CtlPrepareRx>
    break;
 800905e:	e06f      	b.n	8009140 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	683a      	ldr	r2, [r7, #0]
 800906a:	7850      	ldrb	r0, [r2, #1]
 800906c:	2200      	movs	r2, #0
 800906e:	6839      	ldr	r1, [r7, #0]
 8009070:	4798      	blx	r3
    break;
 8009072:	e065      	b.n	8009140 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	785b      	ldrb	r3, [r3, #1]
 8009078:	2b0b      	cmp	r3, #11
 800907a:	d84f      	bhi.n	800911c <USBD_CDC_Setup+0x148>
 800907c:	a201      	add	r2, pc, #4	; (adr r2, 8009084 <USBD_CDC_Setup+0xb0>)
 800907e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009082:	bf00      	nop
 8009084:	080090b5 	.word	0x080090b5
 8009088:	0800912b 	.word	0x0800912b
 800908c:	0800911d 	.word	0x0800911d
 8009090:	0800911d 	.word	0x0800911d
 8009094:	0800911d 	.word	0x0800911d
 8009098:	0800911d 	.word	0x0800911d
 800909c:	0800911d 	.word	0x0800911d
 80090a0:	0800911d 	.word	0x0800911d
 80090a4:	0800911d 	.word	0x0800911d
 80090a8:	0800911d 	.word	0x0800911d
 80090ac:	080090dd 	.word	0x080090dd
 80090b0:	08009105 	.word	0x08009105
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090ba:	2b03      	cmp	r3, #3
 80090bc:	d107      	bne.n	80090ce <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80090be:	f107 030c 	add.w	r3, r7, #12
 80090c2:	2202      	movs	r2, #2
 80090c4:	4619      	mov	r1, r3
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f001 fa53 	bl	800a572 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80090cc:	e030      	b.n	8009130 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80090ce:	6839      	ldr	r1, [r7, #0]
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f001 f9dd 	bl	800a490 <USBD_CtlError>
        ret = USBD_FAIL;
 80090d6:	2303      	movs	r3, #3
 80090d8:	75fb      	strb	r3, [r7, #23]
      break;
 80090da:	e029      	b.n	8009130 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090e2:	2b03      	cmp	r3, #3
 80090e4:	d107      	bne.n	80090f6 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80090e6:	f107 030f 	add.w	r3, r7, #15
 80090ea:	2201      	movs	r2, #1
 80090ec:	4619      	mov	r1, r3
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f001 fa3f 	bl	800a572 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80090f4:	e01c      	b.n	8009130 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80090f6:	6839      	ldr	r1, [r7, #0]
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f001 f9c9 	bl	800a490 <USBD_CtlError>
        ret = USBD_FAIL;
 80090fe:	2303      	movs	r3, #3
 8009100:	75fb      	strb	r3, [r7, #23]
      break;
 8009102:	e015      	b.n	8009130 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800910a:	2b03      	cmp	r3, #3
 800910c:	d00f      	beq.n	800912e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800910e:	6839      	ldr	r1, [r7, #0]
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f001 f9bd 	bl	800a490 <USBD_CtlError>
        ret = USBD_FAIL;
 8009116:	2303      	movs	r3, #3
 8009118:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800911a:	e008      	b.n	800912e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800911c:	6839      	ldr	r1, [r7, #0]
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f001 f9b6 	bl	800a490 <USBD_CtlError>
      ret = USBD_FAIL;
 8009124:	2303      	movs	r3, #3
 8009126:	75fb      	strb	r3, [r7, #23]
      break;
 8009128:	e002      	b.n	8009130 <USBD_CDC_Setup+0x15c>
      break;
 800912a:	bf00      	nop
 800912c:	e008      	b.n	8009140 <USBD_CDC_Setup+0x16c>
      break;
 800912e:	bf00      	nop
    }
    break;
 8009130:	e006      	b.n	8009140 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8009132:	6839      	ldr	r1, [r7, #0]
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f001 f9ab 	bl	800a490 <USBD_CtlError>
    ret = USBD_FAIL;
 800913a:	2303      	movs	r3, #3
 800913c:	75fb      	strb	r3, [r7, #23]
    break;
 800913e:	bf00      	nop
  }

  return (uint8_t)ret;
 8009140:	7dfb      	ldrb	r3, [r7, #23]
}
 8009142:	4618      	mov	r0, r3
 8009144:	3718      	adds	r7, #24
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop

0800914c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	460b      	mov	r3, r1
 8009156:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800915e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009166:	2b00      	cmp	r3, #0
 8009168:	d101      	bne.n	800916e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800916a:	2303      	movs	r3, #3
 800916c:	e049      	b.n	8009202 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009174:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009176:	78fa      	ldrb	r2, [r7, #3]
 8009178:	6879      	ldr	r1, [r7, #4]
 800917a:	4613      	mov	r3, r2
 800917c:	009b      	lsls	r3, r3, #2
 800917e:	4413      	add	r3, r2
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	440b      	add	r3, r1
 8009184:	3318      	adds	r3, #24
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d029      	beq.n	80091e0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800918c:	78fa      	ldrb	r2, [r7, #3]
 800918e:	6879      	ldr	r1, [r7, #4]
 8009190:	4613      	mov	r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	4413      	add	r3, r2
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	440b      	add	r3, r1
 800919a:	3318      	adds	r3, #24
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	78f9      	ldrb	r1, [r7, #3]
 80091a0:	68f8      	ldr	r0, [r7, #12]
 80091a2:	460b      	mov	r3, r1
 80091a4:	00db      	lsls	r3, r3, #3
 80091a6:	1a5b      	subs	r3, r3, r1
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	4403      	add	r3, r0
 80091ac:	3344      	adds	r3, #68	; 0x44
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	fbb2 f1f3 	udiv	r1, r2, r3
 80091b4:	fb03 f301 	mul.w	r3, r3, r1
 80091b8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d110      	bne.n	80091e0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80091be:	78fa      	ldrb	r2, [r7, #3]
 80091c0:	6879      	ldr	r1, [r7, #4]
 80091c2:	4613      	mov	r3, r2
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	4413      	add	r3, r2
 80091c8:	009b      	lsls	r3, r3, #2
 80091ca:	440b      	add	r3, r1
 80091cc:	3318      	adds	r3, #24
 80091ce:	2200      	movs	r2, #0
 80091d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80091d2:	78f9      	ldrb	r1, [r7, #3]
 80091d4:	2300      	movs	r3, #0
 80091d6:	2200      	movs	r2, #0
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f001 fede 	bl	800af9a <USBD_LL_Transmit>
 80091de:	e00f      	b.n	8009200 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	2200      	movs	r2, #0
 80091e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091ee:	691b      	ldr	r3, [r3, #16]
 80091f0:	68ba      	ldr	r2, [r7, #8]
 80091f2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80091f6:	68ba      	ldr	r2, [r7, #8]
 80091f8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80091fc:	78fa      	ldrb	r2, [r7, #3]
 80091fe:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b084      	sub	sp, #16
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
 8009212:	460b      	mov	r3, r1
 8009214:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800921c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009224:	2b00      	cmp	r3, #0
 8009226:	d101      	bne.n	800922c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009228:	2303      	movs	r3, #3
 800922a:	e015      	b.n	8009258 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800922c:	78fb      	ldrb	r3, [r7, #3]
 800922e:	4619      	mov	r1, r3
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f001 fef4 	bl	800b01e <USBD_LL_GetRxDataSize>
 8009236:	4602      	mov	r2, r0
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	68fa      	ldr	r2, [r7, #12]
 8009248:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009252:	4611      	mov	r1, r2
 8009254:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009256:	2300      	movs	r3, #0
}
 8009258:	4618      	mov	r0, r3
 800925a:	3710      	adds	r7, #16
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800926e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009276:	2b00      	cmp	r3, #0
 8009278:	d015      	beq.n	80092a6 <USBD_CDC_EP0_RxReady+0x46>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009280:	2bff      	cmp	r3, #255	; 0xff
 8009282:	d010      	beq.n	80092a6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	68fa      	ldr	r2, [r7, #12]
 800928e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009292:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009294:	68fa      	ldr	r2, [r7, #12]
 8009296:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800929a:	b292      	uxth	r2, r2
 800929c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	22ff      	movs	r2, #255	; 0xff
 80092a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80092a6:	2300      	movs	r3, #0
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3710      	adds	r7, #16
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2243      	movs	r2, #67	; 0x43
 80092bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80092be:	4b03      	ldr	r3, [pc, #12]	; (80092cc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	370c      	adds	r7, #12
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr
 80092cc:	20000094 	.word	0x20000094

080092d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2243      	movs	r2, #67	; 0x43
 80092dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80092de:	4b03      	ldr	r3, [pc, #12]	; (80092ec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	370c      	adds	r7, #12
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr
 80092ec:	20000050 	.word	0x20000050

080092f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2243      	movs	r2, #67	; 0x43
 80092fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80092fe:	4b03      	ldr	r3, [pc, #12]	; (800930c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009300:	4618      	mov	r0, r3
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr
 800930c:	200000d8 	.word	0x200000d8

08009310 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009310:	b480      	push	{r7}
 8009312:	b083      	sub	sp, #12
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	220a      	movs	r2, #10
 800931c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800931e:	4b03      	ldr	r3, [pc, #12]	; (800932c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009320:	4618      	mov	r0, r3
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr
 800932c:	2000000c 	.word	0x2000000c

08009330 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d101      	bne.n	8009344 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009340:	2303      	movs	r3, #3
 8009342:	e004      	b.n	800934e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	683a      	ldr	r2, [r7, #0]
 8009348:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800934c:	2300      	movs	r3, #0
}
 800934e:	4618      	mov	r0, r3
 8009350:	370c      	adds	r7, #12
 8009352:	46bd      	mov	sp, r7
 8009354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009358:	4770      	bx	lr

0800935a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800935a:	b480      	push	{r7}
 800935c:	b087      	sub	sp, #28
 800935e:	af00      	add	r7, sp, #0
 8009360:	60f8      	str	r0, [r7, #12]
 8009362:	60b9      	str	r1, [r7, #8]
 8009364:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800936c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	68ba      	ldr	r2, [r7, #8]
 8009372:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800937e:	2300      	movs	r3, #0
}
 8009380:	4618      	mov	r0, r3
 8009382:	371c      	adds	r7, #28
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800938c:	b480      	push	{r7}
 800938e:	b085      	sub	sp, #20
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800939c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	683a      	ldr	r2, [r7, #0]
 80093a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3714      	adds	r7, #20
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093c2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80093c4:	2301      	movs	r3, #1
 80093c6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d101      	bne.n	80093d6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80093d2:	2303      	movs	r3, #3
 80093d4:	e01a      	b.n	800940c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d114      	bne.n	800940a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80093fe:	2181      	movs	r1, #129	; 0x81
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f001 fdca 	bl	800af9a <USBD_LL_Transmit>

    ret = USBD_OK;
 8009406:	2300      	movs	r3, #0
 8009408:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800940a:	7bfb      	ldrb	r3, [r7, #15]
}
 800940c:	4618      	mov	r0, r3
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009422:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800942a:	2b00      	cmp	r3, #0
 800942c:	d101      	bne.n	8009432 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800942e:	2303      	movs	r3, #3
 8009430:	e016      	b.n	8009460 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	7c1b      	ldrb	r3, [r3, #16]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d109      	bne.n	800944e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009440:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009444:	2101      	movs	r1, #1
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f001 fdc8 	bl	800afdc <USBD_LL_PrepareReceive>
 800944c:	e007      	b.n	800945e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009454:	2340      	movs	r3, #64	; 0x40
 8009456:	2101      	movs	r1, #1
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f001 fdbf 	bl	800afdc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	3710      	adds	r7, #16
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b086      	sub	sp, #24
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	4613      	mov	r3, r2
 8009474:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d101      	bne.n	8009480 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800947c:	2303      	movs	r3, #3
 800947e:	e025      	b.n	80094cc <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009486:	2b00      	cmp	r3, #0
 8009488:	d003      	beq.n	8009492 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8009498:	2b00      	cmp	r3, #0
 800949a:	d003      	beq.n	80094a4 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2200      	movs	r2, #0
 80094a0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d003      	beq.n	80094b2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	68ba      	ldr	r2, [r7, #8]
 80094ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2201      	movs	r2, #1
 80094b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	79fa      	ldrb	r2, [r7, #7]
 80094be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80094c0:	68f8      	ldr	r0, [r7, #12]
 80094c2:	f001 fc35 	bl	800ad30 <USBD_LL_Init>
 80094c6:	4603      	mov	r3, r0
 80094c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80094ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3718      	adds	r7, #24
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80094de:	2300      	movs	r3, #0
 80094e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d101      	bne.n	80094ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80094e8:	2303      	movs	r3, #3
 80094ea:	e010      	b.n	800950e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	683a      	ldr	r2, [r7, #0]
 80094f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094fc:	f107 020e 	add.w	r2, r7, #14
 8009500:	4610      	mov	r0, r2
 8009502:	4798      	blx	r3
 8009504:	4602      	mov	r2, r0
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b082      	sub	sp, #8
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f001 fc52 	bl	800adc8 <USBD_LL_Start>
 8009524:	4603      	mov	r3, r0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3708      	adds	r7, #8
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800952e:	b480      	push	{r7}
 8009530:	b083      	sub	sp, #12
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009536:	2300      	movs	r3, #0
}
 8009538:	4618      	mov	r0, r3
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	460b      	mov	r3, r1
 800954e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009550:	2303      	movs	r3, #3
 8009552:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800955a:	2b00      	cmp	r3, #0
 800955c:	d009      	beq.n	8009572 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	78fa      	ldrb	r2, [r7, #3]
 8009568:	4611      	mov	r1, r2
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	4798      	blx	r3
 800956e:	4603      	mov	r3, r0
 8009570:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009572:	7bfb      	ldrb	r3, [r7, #15]
}
 8009574:	4618      	mov	r0, r3
 8009576:	3710      	adds	r7, #16
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	460b      	mov	r3, r1
 8009586:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800958e:	2b00      	cmp	r3, #0
 8009590:	d007      	beq.n	80095a2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	78fa      	ldrb	r2, [r7, #3]
 800959c:	4611      	mov	r1, r2
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	4798      	blx	r3
  }

  return USBD_OK;
 80095a2:	2300      	movs	r3, #0
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3708      	adds	r7, #8
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80095bc:	6839      	ldr	r1, [r7, #0]
 80095be:	4618      	mov	r0, r3
 80095c0:	f000 ff2c 	bl	800a41c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80095d2:	461a      	mov	r2, r3
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80095e0:	f003 031f 	and.w	r3, r3, #31
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d00e      	beq.n	8009606 <USBD_LL_SetupStage+0x5a>
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d302      	bcc.n	80095f2 <USBD_LL_SetupStage+0x46>
 80095ec:	2b02      	cmp	r3, #2
 80095ee:	d014      	beq.n	800961a <USBD_LL_SetupStage+0x6e>
 80095f0:	e01d      	b.n	800962e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80095f8:	4619      	mov	r1, r3
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 fa18 	bl	8009a30 <USBD_StdDevReq>
 8009600:	4603      	mov	r3, r0
 8009602:	73fb      	strb	r3, [r7, #15]
      break;
 8009604:	e020      	b.n	8009648 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800960c:	4619      	mov	r1, r3
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 fa7c 	bl	8009b0c <USBD_StdItfReq>
 8009614:	4603      	mov	r3, r0
 8009616:	73fb      	strb	r3, [r7, #15]
      break;
 8009618:	e016      	b.n	8009648 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009620:	4619      	mov	r1, r3
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 fab8 	bl	8009b98 <USBD_StdEPReq>
 8009628:	4603      	mov	r3, r0
 800962a:	73fb      	strb	r3, [r7, #15]
      break;
 800962c:	e00c      	b.n	8009648 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009634:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009638:	b2db      	uxtb	r3, r3
 800963a:	4619      	mov	r1, r3
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f001 fc23 	bl	800ae88 <USBD_LL_StallEP>
 8009642:	4603      	mov	r3, r0
 8009644:	73fb      	strb	r3, [r7, #15]
      break;
 8009646:	bf00      	nop
  }

  return ret;
 8009648:	7bfb      	ldrb	r3, [r7, #15]
}
 800964a:	4618      	mov	r0, r3
 800964c:	3710      	adds	r7, #16
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b086      	sub	sp, #24
 8009656:	af00      	add	r7, sp, #0
 8009658:	60f8      	str	r0, [r7, #12]
 800965a:	460b      	mov	r3, r1
 800965c:	607a      	str	r2, [r7, #4]
 800965e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009660:	7afb      	ldrb	r3, [r7, #11]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d137      	bne.n	80096d6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800966c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009674:	2b03      	cmp	r3, #3
 8009676:	d14a      	bne.n	800970e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	689a      	ldr	r2, [r3, #8]
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	429a      	cmp	r2, r3
 8009682:	d913      	bls.n	80096ac <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	689a      	ldr	r2, [r3, #8]
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	68db      	ldr	r3, [r3, #12]
 800968c:	1ad2      	subs	r2, r2, r3
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	68da      	ldr	r2, [r3, #12]
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	4293      	cmp	r3, r2
 800969c:	bf28      	it	cs
 800969e:	4613      	movcs	r3, r2
 80096a0:	461a      	mov	r2, r3
 80096a2:	6879      	ldr	r1, [r7, #4]
 80096a4:	68f8      	ldr	r0, [r7, #12]
 80096a6:	f000 ffad 	bl	800a604 <USBD_CtlContinueRx>
 80096aa:	e030      	b.n	800970e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096b2:	691b      	ldr	r3, [r3, #16]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d00a      	beq.n	80096ce <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80096be:	2b03      	cmp	r3, #3
 80096c0:	d105      	bne.n	80096ce <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096c8:	691b      	ldr	r3, [r3, #16]
 80096ca:	68f8      	ldr	r0, [r7, #12]
 80096cc:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f000 ffa9 	bl	800a626 <USBD_CtlSendStatus>
 80096d4:	e01b      	b.n	800970e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096dc:	699b      	ldr	r3, [r3, #24]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d013      	beq.n	800970a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80096e8:	2b03      	cmp	r3, #3
 80096ea:	d10e      	bne.n	800970a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096f2:	699b      	ldr	r3, [r3, #24]
 80096f4:	7afa      	ldrb	r2, [r7, #11]
 80096f6:	4611      	mov	r1, r2
 80096f8:	68f8      	ldr	r0, [r7, #12]
 80096fa:	4798      	blx	r3
 80096fc:	4603      	mov	r3, r0
 80096fe:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8009700:	7dfb      	ldrb	r3, [r7, #23]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d003      	beq.n	800970e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8009706:	7dfb      	ldrb	r3, [r7, #23]
 8009708:	e002      	b.n	8009710 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800970a:	2303      	movs	r3, #3
 800970c:	e000      	b.n	8009710 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800970e:	2300      	movs	r3, #0
}
 8009710:	4618      	mov	r0, r3
 8009712:	3718      	adds	r7, #24
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b086      	sub	sp, #24
 800971c:	af00      	add	r7, sp, #0
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	460b      	mov	r3, r1
 8009722:	607a      	str	r2, [r7, #4]
 8009724:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009726:	7afb      	ldrb	r3, [r7, #11]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d16a      	bne.n	8009802 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	3314      	adds	r3, #20
 8009730:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009738:	2b02      	cmp	r3, #2
 800973a:	d155      	bne.n	80097e8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	689a      	ldr	r2, [r3, #8]
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	429a      	cmp	r2, r3
 8009746:	d914      	bls.n	8009772 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	689a      	ldr	r2, [r3, #8]
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	1ad2      	subs	r2, r2, r3
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	461a      	mov	r2, r3
 800975c:	6879      	ldr	r1, [r7, #4]
 800975e:	68f8      	ldr	r0, [r7, #12]
 8009760:	f000 ff22 	bl	800a5a8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009764:	2300      	movs	r3, #0
 8009766:	2200      	movs	r2, #0
 8009768:	2100      	movs	r1, #0
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f001 fc36 	bl	800afdc <USBD_LL_PrepareReceive>
 8009770:	e03a      	b.n	80097e8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	68da      	ldr	r2, [r3, #12]
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	429a      	cmp	r2, r3
 800977c:	d11c      	bne.n	80097b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	685a      	ldr	r2, [r3, #4]
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009786:	429a      	cmp	r2, r3
 8009788:	d316      	bcc.n	80097b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	685a      	ldr	r2, [r3, #4]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009794:	429a      	cmp	r2, r3
 8009796:	d20f      	bcs.n	80097b8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009798:	2200      	movs	r2, #0
 800979a:	2100      	movs	r1, #0
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	f000 ff03 	bl	800a5a8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2200      	movs	r2, #0
 80097a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80097aa:	2300      	movs	r3, #0
 80097ac:	2200      	movs	r2, #0
 80097ae:	2100      	movs	r1, #0
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f001 fc13 	bl	800afdc <USBD_LL_PrepareReceive>
 80097b6:	e017      	b.n	80097e8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d00a      	beq.n	80097da <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80097ca:	2b03      	cmp	r3, #3
 80097cc:	d105      	bne.n	80097da <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	68f8      	ldr	r0, [r7, #12]
 80097d8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80097da:	2180      	movs	r1, #128	; 0x80
 80097dc:	68f8      	ldr	r0, [r7, #12]
 80097de:	f001 fb53 	bl	800ae88 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80097e2:	68f8      	ldr	r0, [r7, #12]
 80097e4:	f000 ff32 	bl	800a64c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d123      	bne.n	800983a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80097f2:	68f8      	ldr	r0, [r7, #12]
 80097f4:	f7ff fe9b 	bl	800952e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2200      	movs	r2, #0
 80097fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009800:	e01b      	b.n	800983a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009808:	695b      	ldr	r3, [r3, #20]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d013      	beq.n	8009836 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009814:	2b03      	cmp	r3, #3
 8009816:	d10e      	bne.n	8009836 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800981e:	695b      	ldr	r3, [r3, #20]
 8009820:	7afa      	ldrb	r2, [r7, #11]
 8009822:	4611      	mov	r1, r2
 8009824:	68f8      	ldr	r0, [r7, #12]
 8009826:	4798      	blx	r3
 8009828:	4603      	mov	r3, r0
 800982a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800982c:	7dfb      	ldrb	r3, [r7, #23]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d003      	beq.n	800983a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8009832:	7dfb      	ldrb	r3, [r7, #23]
 8009834:	e002      	b.n	800983c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009836:	2303      	movs	r3, #3
 8009838:	e000      	b.n	800983c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800983a:	2300      	movs	r3, #0
}
 800983c:	4618      	mov	r0, r3
 800983e:	3718      	adds	r7, #24
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2201      	movs	r2, #1
 8009850:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2200      	movs	r2, #0
 8009860:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2200      	movs	r2, #0
 8009866:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009870:	2b00      	cmp	r3, #0
 8009872:	d009      	beq.n	8009888 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	6852      	ldr	r2, [r2, #4]
 8009880:	b2d2      	uxtb	r2, r2
 8009882:	4611      	mov	r1, r2
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009888:	2340      	movs	r3, #64	; 0x40
 800988a:	2200      	movs	r2, #0
 800988c:	2100      	movs	r1, #0
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f001 fab5 	bl	800adfe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2201      	movs	r2, #1
 8009898:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2240      	movs	r2, #64	; 0x40
 80098a0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80098a4:	2340      	movs	r3, #64	; 0x40
 80098a6:	2200      	movs	r2, #0
 80098a8:	2180      	movs	r1, #128	; 0x80
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f001 faa7 	bl	800adfe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2240      	movs	r2, #64	; 0x40
 80098ba:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80098bc:	2300      	movs	r3, #0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3708      	adds	r7, #8
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80098c6:	b480      	push	{r7}
 80098c8:	b083      	sub	sp, #12
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
 80098ce:	460b      	mov	r3, r1
 80098d0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	78fa      	ldrb	r2, [r7, #3]
 80098d6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80098d8:	2300      	movs	r3, #0
}
 80098da:	4618      	mov	r0, r3
 80098dc:	370c      	adds	r7, #12
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr

080098e6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80098e6:	b480      	push	{r7}
 80098e8:	b083      	sub	sp, #12
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2204      	movs	r2, #4
 80098fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009902:	2300      	movs	r3, #0
}
 8009904:	4618      	mov	r0, r3
 8009906:	370c      	adds	r7, #12
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009910:	b480      	push	{r7}
 8009912:	b083      	sub	sp, #12
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800991e:	2b04      	cmp	r3, #4
 8009920:	d105      	bne.n	800992e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800992e:	2300      	movs	r3, #0
}
 8009930:	4618      	mov	r0, r3
 8009932:	370c      	adds	r7, #12
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr

0800993c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800994a:	2b03      	cmp	r3, #3
 800994c:	d10b      	bne.n	8009966 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009954:	69db      	ldr	r3, [r3, #28]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d005      	beq.n	8009966 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009960:	69db      	ldr	r3, [r3, #28]
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009966:	2300      	movs	r3, #0
}
 8009968:	4618      	mov	r0, r3
 800996a:	3708      	adds	r7, #8
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	460b      	mov	r3, r1
 800997a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800997c:	2300      	movs	r3, #0
}
 800997e:	4618      	mov	r0, r3
 8009980:	370c      	adds	r7, #12
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr

0800998a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800998a:	b480      	push	{r7}
 800998c:	b083      	sub	sp, #12
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
 8009992:	460b      	mov	r3, r1
 8009994:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009996:	2300      	movs	r3, #0
}
 8009998:	4618      	mov	r0, r3
 800999a:	370c      	adds	r7, #12
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80099ac:	2300      	movs	r3, #0
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	370c      	adds	r7, #12
 80099b2:	46bd      	mov	sp, r7
 80099b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b8:	4770      	bx	lr

080099ba <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b082      	sub	sp, #8
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2201      	movs	r2, #1
 80099c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d009      	beq.n	80099e8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	6852      	ldr	r2, [r2, #4]
 80099e0:	b2d2      	uxtb	r2, r2
 80099e2:	4611      	mov	r1, r2
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	4798      	blx	r3
  }

  return USBD_OK;
 80099e8:	2300      	movs	r3, #0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3708      	adds	r7, #8
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80099f2:	b480      	push	{r7}
 80099f4:	b087      	sub	sp, #28
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	3301      	adds	r3, #1
 8009a08:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009a10:	8a3b      	ldrh	r3, [r7, #16]
 8009a12:	021b      	lsls	r3, r3, #8
 8009a14:	b21a      	sxth	r2, r3
 8009a16:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	b21b      	sxth	r3, r3
 8009a1e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009a20:	89fb      	ldrh	r3, [r7, #14]
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	371c      	adds	r7, #28
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr
	...

08009a30 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b084      	sub	sp, #16
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a46:	2b20      	cmp	r3, #32
 8009a48:	d004      	beq.n	8009a54 <USBD_StdDevReq+0x24>
 8009a4a:	2b40      	cmp	r3, #64	; 0x40
 8009a4c:	d002      	beq.n	8009a54 <USBD_StdDevReq+0x24>
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d00a      	beq.n	8009a68 <USBD_StdDevReq+0x38>
 8009a52:	e050      	b.n	8009af6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a5a:	689b      	ldr	r3, [r3, #8]
 8009a5c:	6839      	ldr	r1, [r7, #0]
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	4798      	blx	r3
 8009a62:	4603      	mov	r3, r0
 8009a64:	73fb      	strb	r3, [r7, #15]
    break;
 8009a66:	e04b      	b.n	8009b00 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	785b      	ldrb	r3, [r3, #1]
 8009a6c:	2b09      	cmp	r3, #9
 8009a6e:	d83c      	bhi.n	8009aea <USBD_StdDevReq+0xba>
 8009a70:	a201      	add	r2, pc, #4	; (adr r2, 8009a78 <USBD_StdDevReq+0x48>)
 8009a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a76:	bf00      	nop
 8009a78:	08009acd 	.word	0x08009acd
 8009a7c:	08009ae1 	.word	0x08009ae1
 8009a80:	08009aeb 	.word	0x08009aeb
 8009a84:	08009ad7 	.word	0x08009ad7
 8009a88:	08009aeb 	.word	0x08009aeb
 8009a8c:	08009aab 	.word	0x08009aab
 8009a90:	08009aa1 	.word	0x08009aa1
 8009a94:	08009aeb 	.word	0x08009aeb
 8009a98:	08009ac3 	.word	0x08009ac3
 8009a9c:	08009ab5 	.word	0x08009ab5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8009aa0:	6839      	ldr	r1, [r7, #0]
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 f9ce 	bl	8009e44 <USBD_GetDescriptor>
      break;
 8009aa8:	e024      	b.n	8009af4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8009aaa:	6839      	ldr	r1, [r7, #0]
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 fb33 	bl	800a118 <USBD_SetAddress>
      break;
 8009ab2:	e01f      	b.n	8009af4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8009ab4:	6839      	ldr	r1, [r7, #0]
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 fb70 	bl	800a19c <USBD_SetConfig>
 8009abc:	4603      	mov	r3, r0
 8009abe:	73fb      	strb	r3, [r7, #15]
      break;
 8009ac0:	e018      	b.n	8009af4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8009ac2:	6839      	ldr	r1, [r7, #0]
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 fc0d 	bl	800a2e4 <USBD_GetConfig>
      break;
 8009aca:	e013      	b.n	8009af4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8009acc:	6839      	ldr	r1, [r7, #0]
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 fc3c 	bl	800a34c <USBD_GetStatus>
      break;
 8009ad4:	e00e      	b.n	8009af4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8009ad6:	6839      	ldr	r1, [r7, #0]
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 fc6a 	bl	800a3b2 <USBD_SetFeature>
      break;
 8009ade:	e009      	b.n	8009af4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8009ae0:	6839      	ldr	r1, [r7, #0]
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 fc79 	bl	800a3da <USBD_ClrFeature>
      break;
 8009ae8:	e004      	b.n	8009af4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8009aea:	6839      	ldr	r1, [r7, #0]
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 fccf 	bl	800a490 <USBD_CtlError>
      break;
 8009af2:	bf00      	nop
    }
    break;
 8009af4:	e004      	b.n	8009b00 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8009af6:	6839      	ldr	r1, [r7, #0]
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f000 fcc9 	bl	800a490 <USBD_CtlError>
    break;
 8009afe:	bf00      	nop
  }

  return ret;
 8009b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop

08009b0c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b16:	2300      	movs	r3, #0
 8009b18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b22:	2b20      	cmp	r3, #32
 8009b24:	d003      	beq.n	8009b2e <USBD_StdItfReq+0x22>
 8009b26:	2b40      	cmp	r3, #64	; 0x40
 8009b28:	d001      	beq.n	8009b2e <USBD_StdItfReq+0x22>
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d12a      	bne.n	8009b84 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b34:	3b01      	subs	r3, #1
 8009b36:	2b02      	cmp	r3, #2
 8009b38:	d81d      	bhi.n	8009b76 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	889b      	ldrh	r3, [r3, #4]
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d813      	bhi.n	8009b6c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	6839      	ldr	r1, [r7, #0]
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	4798      	blx	r3
 8009b52:	4603      	mov	r3, r0
 8009b54:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	88db      	ldrh	r3, [r3, #6]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d110      	bne.n	8009b80 <USBD_StdItfReq+0x74>
 8009b5e:	7bfb      	ldrb	r3, [r7, #15]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d10d      	bne.n	8009b80 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 fd5e 	bl	800a626 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8009b6a:	e009      	b.n	8009b80 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8009b6c:	6839      	ldr	r1, [r7, #0]
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 fc8e 	bl	800a490 <USBD_CtlError>
      break;
 8009b74:	e004      	b.n	8009b80 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8009b76:	6839      	ldr	r1, [r7, #0]
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 fc89 	bl	800a490 <USBD_CtlError>
      break;
 8009b7e:	e000      	b.n	8009b82 <USBD_StdItfReq+0x76>
      break;
 8009b80:	bf00      	nop
    }
    break;
 8009b82:	e004      	b.n	8009b8e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8009b84:	6839      	ldr	r1, [r7, #0]
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 fc82 	bl	800a490 <USBD_CtlError>
    break;
 8009b8c:	bf00      	nop
  }

  return ret;
 8009b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3710      	adds	r7, #16
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	889b      	ldrh	r3, [r3, #4]
 8009baa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009bb4:	2b20      	cmp	r3, #32
 8009bb6:	d004      	beq.n	8009bc2 <USBD_StdEPReq+0x2a>
 8009bb8:	2b40      	cmp	r3, #64	; 0x40
 8009bba:	d002      	beq.n	8009bc2 <USBD_StdEPReq+0x2a>
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d00a      	beq.n	8009bd6 <USBD_StdEPReq+0x3e>
 8009bc0:	e135      	b.n	8009e2e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bc8:	689b      	ldr	r3, [r3, #8]
 8009bca:	6839      	ldr	r1, [r7, #0]
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	4798      	blx	r3
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	73fb      	strb	r3, [r7, #15]
    break;
 8009bd4:	e130      	b.n	8009e38 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	785b      	ldrb	r3, [r3, #1]
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d03e      	beq.n	8009c5c <USBD_StdEPReq+0xc4>
 8009bde:	2b03      	cmp	r3, #3
 8009be0:	d002      	beq.n	8009be8 <USBD_StdEPReq+0x50>
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d077      	beq.n	8009cd6 <USBD_StdEPReq+0x13e>
 8009be6:	e11c      	b.n	8009e22 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bee:	2b02      	cmp	r3, #2
 8009bf0:	d002      	beq.n	8009bf8 <USBD_StdEPReq+0x60>
 8009bf2:	2b03      	cmp	r3, #3
 8009bf4:	d015      	beq.n	8009c22 <USBD_StdEPReq+0x8a>
 8009bf6:	e02b      	b.n	8009c50 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009bf8:	7bbb      	ldrb	r3, [r7, #14]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d00c      	beq.n	8009c18 <USBD_StdEPReq+0x80>
 8009bfe:	7bbb      	ldrb	r3, [r7, #14]
 8009c00:	2b80      	cmp	r3, #128	; 0x80
 8009c02:	d009      	beq.n	8009c18 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c04:	7bbb      	ldrb	r3, [r7, #14]
 8009c06:	4619      	mov	r1, r3
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f001 f93d 	bl	800ae88 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c0e:	2180      	movs	r1, #128	; 0x80
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f001 f939 	bl	800ae88 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009c16:	e020      	b.n	8009c5a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8009c18:	6839      	ldr	r1, [r7, #0]
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f000 fc38 	bl	800a490 <USBD_CtlError>
        break;
 8009c20:	e01b      	b.n	8009c5a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	885b      	ldrh	r3, [r3, #2]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d10e      	bne.n	8009c48 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009c2a:	7bbb      	ldrb	r3, [r7, #14]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d00b      	beq.n	8009c48 <USBD_StdEPReq+0xb0>
 8009c30:	7bbb      	ldrb	r3, [r7, #14]
 8009c32:	2b80      	cmp	r3, #128	; 0x80
 8009c34:	d008      	beq.n	8009c48 <USBD_StdEPReq+0xb0>
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	88db      	ldrh	r3, [r3, #6]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d104      	bne.n	8009c48 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c3e:	7bbb      	ldrb	r3, [r7, #14]
 8009c40:	4619      	mov	r1, r3
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f001 f920 	bl	800ae88 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 fcec 	bl	800a626 <USBD_CtlSendStatus>

        break;
 8009c4e:	e004      	b.n	8009c5a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8009c50:	6839      	ldr	r1, [r7, #0]
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 fc1c 	bl	800a490 <USBD_CtlError>
        break;
 8009c58:	bf00      	nop
      }
      break;
 8009c5a:	e0e7      	b.n	8009e2c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c62:	2b02      	cmp	r3, #2
 8009c64:	d002      	beq.n	8009c6c <USBD_StdEPReq+0xd4>
 8009c66:	2b03      	cmp	r3, #3
 8009c68:	d015      	beq.n	8009c96 <USBD_StdEPReq+0xfe>
 8009c6a:	e02d      	b.n	8009cc8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c6c:	7bbb      	ldrb	r3, [r7, #14]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d00c      	beq.n	8009c8c <USBD_StdEPReq+0xf4>
 8009c72:	7bbb      	ldrb	r3, [r7, #14]
 8009c74:	2b80      	cmp	r3, #128	; 0x80
 8009c76:	d009      	beq.n	8009c8c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c78:	7bbb      	ldrb	r3, [r7, #14]
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f001 f903 	bl	800ae88 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c82:	2180      	movs	r1, #128	; 0x80
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f001 f8ff 	bl	800ae88 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009c8a:	e023      	b.n	8009cd4 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8009c8c:	6839      	ldr	r1, [r7, #0]
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 fbfe 	bl	800a490 <USBD_CtlError>
        break;
 8009c94:	e01e      	b.n	8009cd4 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	885b      	ldrh	r3, [r3, #2]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d119      	bne.n	8009cd2 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8009c9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d004      	beq.n	8009cb2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009ca8:	7bbb      	ldrb	r3, [r7, #14]
 8009caa:	4619      	mov	r1, r3
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f001 f90a 	bl	800aec6 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 fcb7 	bl	800a626 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	6839      	ldr	r1, [r7, #0]
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	4798      	blx	r3
        }
        break;
 8009cc6:	e004      	b.n	8009cd2 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8009cc8:	6839      	ldr	r1, [r7, #0]
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 fbe0 	bl	800a490 <USBD_CtlError>
        break;
 8009cd0:	e000      	b.n	8009cd4 <USBD_StdEPReq+0x13c>
        break;
 8009cd2:	bf00      	nop
      }
      break;
 8009cd4:	e0aa      	b.n	8009e2c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cdc:	2b02      	cmp	r3, #2
 8009cde:	d002      	beq.n	8009ce6 <USBD_StdEPReq+0x14e>
 8009ce0:	2b03      	cmp	r3, #3
 8009ce2:	d032      	beq.n	8009d4a <USBD_StdEPReq+0x1b2>
 8009ce4:	e097      	b.n	8009e16 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ce6:	7bbb      	ldrb	r3, [r7, #14]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d007      	beq.n	8009cfc <USBD_StdEPReq+0x164>
 8009cec:	7bbb      	ldrb	r3, [r7, #14]
 8009cee:	2b80      	cmp	r3, #128	; 0x80
 8009cf0:	d004      	beq.n	8009cfc <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8009cf2:	6839      	ldr	r1, [r7, #0]
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 fbcb 	bl	800a490 <USBD_CtlError>
          break;
 8009cfa:	e091      	b.n	8009e20 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	da0b      	bge.n	8009d1c <USBD_StdEPReq+0x184>
 8009d04:	7bbb      	ldrb	r3, [r7, #14]
 8009d06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d0a:	4613      	mov	r3, r2
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	4413      	add	r3, r2
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	3310      	adds	r3, #16
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	4413      	add	r3, r2
 8009d18:	3304      	adds	r3, #4
 8009d1a:	e00b      	b.n	8009d34 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009d1c:	7bbb      	ldrb	r3, [r7, #14]
 8009d1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d22:	4613      	mov	r3, r2
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	4413      	add	r3, r2
 8009d28:	009b      	lsls	r3, r3, #2
 8009d2a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	4413      	add	r3, r2
 8009d32:	3304      	adds	r3, #4
 8009d34:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	2202      	movs	r2, #2
 8009d40:	4619      	mov	r1, r3
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 fc15 	bl	800a572 <USBD_CtlSendData>
        break;
 8009d48:	e06a      	b.n	8009e20 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8009d4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	da11      	bge.n	8009d76 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009d52:	7bbb      	ldrb	r3, [r7, #14]
 8009d54:	f003 020f 	and.w	r2, r3, #15
 8009d58:	6879      	ldr	r1, [r7, #4]
 8009d5a:	4613      	mov	r3, r2
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	4413      	add	r3, r2
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	440b      	add	r3, r1
 8009d64:	3324      	adds	r3, #36	; 0x24
 8009d66:	881b      	ldrh	r3, [r3, #0]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d117      	bne.n	8009d9c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8009d6c:	6839      	ldr	r1, [r7, #0]
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 fb8e 	bl	800a490 <USBD_CtlError>
            break;
 8009d74:	e054      	b.n	8009e20 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009d76:	7bbb      	ldrb	r3, [r7, #14]
 8009d78:	f003 020f 	and.w	r2, r3, #15
 8009d7c:	6879      	ldr	r1, [r7, #4]
 8009d7e:	4613      	mov	r3, r2
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	4413      	add	r3, r2
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	440b      	add	r3, r1
 8009d88:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009d8c:	881b      	ldrh	r3, [r3, #0]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d104      	bne.n	8009d9c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8009d92:	6839      	ldr	r1, [r7, #0]
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 fb7b 	bl	800a490 <USBD_CtlError>
            break;
 8009d9a:	e041      	b.n	8009e20 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	da0b      	bge.n	8009dbc <USBD_StdEPReq+0x224>
 8009da4:	7bbb      	ldrb	r3, [r7, #14]
 8009da6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009daa:	4613      	mov	r3, r2
 8009dac:	009b      	lsls	r3, r3, #2
 8009dae:	4413      	add	r3, r2
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	3310      	adds	r3, #16
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	4413      	add	r3, r2
 8009db8:	3304      	adds	r3, #4
 8009dba:	e00b      	b.n	8009dd4 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009dbc:	7bbb      	ldrb	r3, [r7, #14]
 8009dbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009dc2:	4613      	mov	r3, r2
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	4413      	add	r3, r2
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	3304      	adds	r3, #4
 8009dd4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009dd6:	7bbb      	ldrb	r3, [r7, #14]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d002      	beq.n	8009de2 <USBD_StdEPReq+0x24a>
 8009ddc:	7bbb      	ldrb	r3, [r7, #14]
 8009dde:	2b80      	cmp	r3, #128	; 0x80
 8009de0:	d103      	bne.n	8009dea <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	2200      	movs	r2, #0
 8009de6:	601a      	str	r2, [r3, #0]
 8009de8:	e00e      	b.n	8009e08 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009dea:	7bbb      	ldrb	r3, [r7, #14]
 8009dec:	4619      	mov	r1, r3
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f001 f888 	bl	800af04 <USBD_LL_IsStallEP>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d003      	beq.n	8009e02 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	601a      	str	r2, [r3, #0]
 8009e00:	e002      	b.n	8009e08 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	2200      	movs	r2, #0
 8009e06:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	2202      	movs	r2, #2
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 fbaf 	bl	800a572 <USBD_CtlSendData>
          break;
 8009e14:	e004      	b.n	8009e20 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8009e16:	6839      	ldr	r1, [r7, #0]
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 fb39 	bl	800a490 <USBD_CtlError>
        break;
 8009e1e:	bf00      	nop
      }
      break;
 8009e20:	e004      	b.n	8009e2c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8009e22:	6839      	ldr	r1, [r7, #0]
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 fb33 	bl	800a490 <USBD_CtlError>
      break;
 8009e2a:	bf00      	nop
    }
    break;
 8009e2c:	e004      	b.n	8009e38 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8009e2e:	6839      	ldr	r1, [r7, #0]
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 fb2d 	bl	800a490 <USBD_CtlError>
    break;
 8009e36:	bf00      	nop
  }

  return ret;
 8009e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3710      	adds	r7, #16
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
	...

08009e44 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009e52:	2300      	movs	r3, #0
 8009e54:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009e56:	2300      	movs	r3, #0
 8009e58:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	885b      	ldrh	r3, [r3, #2]
 8009e5e:	0a1b      	lsrs	r3, r3, #8
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	3b01      	subs	r3, #1
 8009e64:	2b06      	cmp	r3, #6
 8009e66:	f200 8128 	bhi.w	800a0ba <USBD_GetDescriptor+0x276>
 8009e6a:	a201      	add	r2, pc, #4	; (adr r2, 8009e70 <USBD_GetDescriptor+0x2c>)
 8009e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e70:	08009e8d 	.word	0x08009e8d
 8009e74:	08009ea5 	.word	0x08009ea5
 8009e78:	08009ee5 	.word	0x08009ee5
 8009e7c:	0800a0bb 	.word	0x0800a0bb
 8009e80:	0800a0bb 	.word	0x0800a0bb
 8009e84:	0800a05b 	.word	0x0800a05b
 8009e88:	0800a087 	.word	0x0800a087
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	7c12      	ldrb	r2, [r2, #16]
 8009e98:	f107 0108 	add.w	r1, r7, #8
 8009e9c:	4610      	mov	r0, r2
 8009e9e:	4798      	blx	r3
 8009ea0:	60f8      	str	r0, [r7, #12]
    break;
 8009ea2:	e112      	b.n	800a0ca <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	7c1b      	ldrb	r3, [r3, #16]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d10d      	bne.n	8009ec8 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eb4:	f107 0208 	add.w	r2, r7, #8
 8009eb8:	4610      	mov	r0, r2
 8009eba:	4798      	blx	r3
 8009ebc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	2202      	movs	r2, #2
 8009ec4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8009ec6:	e100      	b.n	800a0ca <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed0:	f107 0208 	add.w	r2, r7, #8
 8009ed4:	4610      	mov	r0, r2
 8009ed6:	4798      	blx	r3
 8009ed8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	3301      	adds	r3, #1
 8009ede:	2202      	movs	r2, #2
 8009ee0:	701a      	strb	r2, [r3, #0]
    break;
 8009ee2:	e0f2      	b.n	800a0ca <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	885b      	ldrh	r3, [r3, #2]
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	2b05      	cmp	r3, #5
 8009eec:	f200 80ac 	bhi.w	800a048 <USBD_GetDescriptor+0x204>
 8009ef0:	a201      	add	r2, pc, #4	; (adr r2, 8009ef8 <USBD_GetDescriptor+0xb4>)
 8009ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef6:	bf00      	nop
 8009ef8:	08009f11 	.word	0x08009f11
 8009efc:	08009f45 	.word	0x08009f45
 8009f00:	08009f79 	.word	0x08009f79
 8009f04:	08009fad 	.word	0x08009fad
 8009f08:	08009fe1 	.word	0x08009fe1
 8009f0c:	0800a015 	.word	0x0800a015
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d00b      	beq.n	8009f34 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	7c12      	ldrb	r2, [r2, #16]
 8009f28:	f107 0108 	add.w	r1, r7, #8
 8009f2c:	4610      	mov	r0, r2
 8009f2e:	4798      	blx	r3
 8009f30:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f32:	e091      	b.n	800a058 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009f34:	6839      	ldr	r1, [r7, #0]
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 faaa 	bl	800a490 <USBD_CtlError>
        err++;
 8009f3c:	7afb      	ldrb	r3, [r7, #11]
 8009f3e:	3301      	adds	r3, #1
 8009f40:	72fb      	strb	r3, [r7, #11]
      break;
 8009f42:	e089      	b.n	800a058 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d00b      	beq.n	8009f68 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	687a      	ldr	r2, [r7, #4]
 8009f5a:	7c12      	ldrb	r2, [r2, #16]
 8009f5c:	f107 0108 	add.w	r1, r7, #8
 8009f60:	4610      	mov	r0, r2
 8009f62:	4798      	blx	r3
 8009f64:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f66:	e077      	b.n	800a058 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009f68:	6839      	ldr	r1, [r7, #0]
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 fa90 	bl	800a490 <USBD_CtlError>
        err++;
 8009f70:	7afb      	ldrb	r3, [r7, #11]
 8009f72:	3301      	adds	r3, #1
 8009f74:	72fb      	strb	r3, [r7, #11]
      break;
 8009f76:	e06f      	b.n	800a058 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f7e:	68db      	ldr	r3, [r3, #12]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d00b      	beq.n	8009f9c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f8a:	68db      	ldr	r3, [r3, #12]
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	7c12      	ldrb	r2, [r2, #16]
 8009f90:	f107 0108 	add.w	r1, r7, #8
 8009f94:	4610      	mov	r0, r2
 8009f96:	4798      	blx	r3
 8009f98:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f9a:	e05d      	b.n	800a058 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009f9c:	6839      	ldr	r1, [r7, #0]
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 fa76 	bl	800a490 <USBD_CtlError>
        err++;
 8009fa4:	7afb      	ldrb	r3, [r7, #11]
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	72fb      	strb	r3, [r7, #11]
      break;
 8009faa:	e055      	b.n	800a058 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fb2:	691b      	ldr	r3, [r3, #16]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d00b      	beq.n	8009fd0 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fbe:	691b      	ldr	r3, [r3, #16]
 8009fc0:	687a      	ldr	r2, [r7, #4]
 8009fc2:	7c12      	ldrb	r2, [r2, #16]
 8009fc4:	f107 0108 	add.w	r1, r7, #8
 8009fc8:	4610      	mov	r0, r2
 8009fca:	4798      	blx	r3
 8009fcc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009fce:	e043      	b.n	800a058 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009fd0:	6839      	ldr	r1, [r7, #0]
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 fa5c 	bl	800a490 <USBD_CtlError>
        err++;
 8009fd8:	7afb      	ldrb	r3, [r7, #11]
 8009fda:	3301      	adds	r3, #1
 8009fdc:	72fb      	strb	r3, [r7, #11]
      break;
 8009fde:	e03b      	b.n	800a058 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fe6:	695b      	ldr	r3, [r3, #20]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d00b      	beq.n	800a004 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ff2:	695b      	ldr	r3, [r3, #20]
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	7c12      	ldrb	r2, [r2, #16]
 8009ff8:	f107 0108 	add.w	r1, r7, #8
 8009ffc:	4610      	mov	r0, r2
 8009ffe:	4798      	blx	r3
 800a000:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a002:	e029      	b.n	800a058 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a004:	6839      	ldr	r1, [r7, #0]
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 fa42 	bl	800a490 <USBD_CtlError>
        err++;
 800a00c:	7afb      	ldrb	r3, [r7, #11]
 800a00e:	3301      	adds	r3, #1
 800a010:	72fb      	strb	r3, [r7, #11]
      break;
 800a012:	e021      	b.n	800a058 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a01a:	699b      	ldr	r3, [r3, #24]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d00b      	beq.n	800a038 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a026:	699b      	ldr	r3, [r3, #24]
 800a028:	687a      	ldr	r2, [r7, #4]
 800a02a:	7c12      	ldrb	r2, [r2, #16]
 800a02c:	f107 0108 	add.w	r1, r7, #8
 800a030:	4610      	mov	r0, r2
 800a032:	4798      	blx	r3
 800a034:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a036:	e00f      	b.n	800a058 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a038:	6839      	ldr	r1, [r7, #0]
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 fa28 	bl	800a490 <USBD_CtlError>
        err++;
 800a040:	7afb      	ldrb	r3, [r7, #11]
 800a042:	3301      	adds	r3, #1
 800a044:	72fb      	strb	r3, [r7, #11]
      break;
 800a046:	e007      	b.n	800a058 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800a048:	6839      	ldr	r1, [r7, #0]
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 fa20 	bl	800a490 <USBD_CtlError>
      err++;
 800a050:	7afb      	ldrb	r3, [r7, #11]
 800a052:	3301      	adds	r3, #1
 800a054:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800a056:	bf00      	nop
    }
    break;
 800a058:	e037      	b.n	800a0ca <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	7c1b      	ldrb	r3, [r3, #16]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d109      	bne.n	800a076 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a06a:	f107 0208 	add.w	r2, r7, #8
 800a06e:	4610      	mov	r0, r2
 800a070:	4798      	blx	r3
 800a072:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800a074:	e029      	b.n	800a0ca <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800a076:	6839      	ldr	r1, [r7, #0]
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 fa09 	bl	800a490 <USBD_CtlError>
      err++;
 800a07e:	7afb      	ldrb	r3, [r7, #11]
 800a080:	3301      	adds	r3, #1
 800a082:	72fb      	strb	r3, [r7, #11]
    break;
 800a084:	e021      	b.n	800a0ca <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	7c1b      	ldrb	r3, [r3, #16]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d10d      	bne.n	800a0aa <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a096:	f107 0208 	add.w	r2, r7, #8
 800a09a:	4610      	mov	r0, r2
 800a09c:	4798      	blx	r3
 800a09e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	2207      	movs	r2, #7
 800a0a6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800a0a8:	e00f      	b.n	800a0ca <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800a0aa:	6839      	ldr	r1, [r7, #0]
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f000 f9ef 	bl	800a490 <USBD_CtlError>
      err++;
 800a0b2:	7afb      	ldrb	r3, [r7, #11]
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	72fb      	strb	r3, [r7, #11]
    break;
 800a0b8:	e007      	b.n	800a0ca <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800a0ba:	6839      	ldr	r1, [r7, #0]
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f000 f9e7 	bl	800a490 <USBD_CtlError>
    err++;
 800a0c2:	7afb      	ldrb	r3, [r7, #11]
 800a0c4:	3301      	adds	r3, #1
 800a0c6:	72fb      	strb	r3, [r7, #11]
    break;
 800a0c8:	bf00      	nop
  }

  if (err != 0U)
 800a0ca:	7afb      	ldrb	r3, [r7, #11]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d11e      	bne.n	800a10e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	88db      	ldrh	r3, [r3, #6]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d016      	beq.n	800a106 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800a0d8:	893b      	ldrh	r3, [r7, #8]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d00e      	beq.n	800a0fc <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	88da      	ldrh	r2, [r3, #6]
 800a0e2:	893b      	ldrh	r3, [r7, #8]
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	bf28      	it	cs
 800a0e8:	4613      	movcs	r3, r2
 800a0ea:	b29b      	uxth	r3, r3
 800a0ec:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800a0ee:	893b      	ldrh	r3, [r7, #8]
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	68f9      	ldr	r1, [r7, #12]
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f000 fa3c 	bl	800a572 <USBD_CtlSendData>
 800a0fa:	e009      	b.n	800a110 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800a0fc:	6839      	ldr	r1, [r7, #0]
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 f9c6 	bl	800a490 <USBD_CtlError>
 800a104:	e004      	b.n	800a110 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 fa8d 	bl	800a626 <USBD_CtlSendStatus>
 800a10c:	e000      	b.n	800a110 <USBD_GetDescriptor+0x2cc>
    return;
 800a10e:	bf00      	nop
    }
  }
}
 800a110:	3710      	adds	r7, #16
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop

0800a118 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	889b      	ldrh	r3, [r3, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d130      	bne.n	800a18c <USBD_SetAddress+0x74>
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	88db      	ldrh	r3, [r3, #6]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d12c      	bne.n	800a18c <USBD_SetAddress+0x74>
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	885b      	ldrh	r3, [r3, #2]
 800a136:	2b7f      	cmp	r3, #127	; 0x7f
 800a138:	d828      	bhi.n	800a18c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	885b      	ldrh	r3, [r3, #2]
 800a13e:	b2db      	uxtb	r3, r3
 800a140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a144:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a14c:	2b03      	cmp	r3, #3
 800a14e:	d104      	bne.n	800a15a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a150:	6839      	ldr	r1, [r7, #0]
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 f99c 	bl	800a490 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a158:	e01c      	b.n	800a194 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	7bfa      	ldrb	r2, [r7, #15]
 800a15e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a162:	7bfb      	ldrb	r3, [r7, #15]
 800a164:	4619      	mov	r1, r3
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 fef8 	bl	800af5c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f000 fa5a 	bl	800a626 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a172:	7bfb      	ldrb	r3, [r7, #15]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d004      	beq.n	800a182 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2202      	movs	r2, #2
 800a17c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a180:	e008      	b.n	800a194 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2201      	movs	r2, #1
 800a186:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a18a:	e003      	b.n	800a194 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a18c:	6839      	ldr	r1, [r7, #0]
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 f97e 	bl	800a490 <USBD_CtlError>
  }
}
 800a194:	bf00      	nop
 800a196:	3710      	adds	r7, #16
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	885b      	ldrh	r3, [r3, #2]
 800a1ae:	b2da      	uxtb	r2, r3
 800a1b0:	4b4b      	ldr	r3, [pc, #300]	; (800a2e0 <USBD_SetConfig+0x144>)
 800a1b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a1b4:	4b4a      	ldr	r3, [pc, #296]	; (800a2e0 <USBD_SetConfig+0x144>)
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d905      	bls.n	800a1c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a1bc:	6839      	ldr	r1, [r7, #0]
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 f966 	bl	800a490 <USBD_CtlError>
    return USBD_FAIL;
 800a1c4:	2303      	movs	r3, #3
 800a1c6:	e087      	b.n	800a2d8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	d002      	beq.n	800a1d8 <USBD_SetConfig+0x3c>
 800a1d2:	2b03      	cmp	r3, #3
 800a1d4:	d025      	beq.n	800a222 <USBD_SetConfig+0x86>
 800a1d6:	e071      	b.n	800a2bc <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800a1d8:	4b41      	ldr	r3, [pc, #260]	; (800a2e0 <USBD_SetConfig+0x144>)
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d01c      	beq.n	800a21a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800a1e0:	4b3f      	ldr	r3, [pc, #252]	; (800a2e0 <USBD_SetConfig+0x144>)
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800a1ea:	4b3d      	ldr	r3, [pc, #244]	; (800a2e0 <USBD_SetConfig+0x144>)
 800a1ec:	781b      	ldrb	r3, [r3, #0]
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f7ff f9a7 	bl	8009544 <USBD_SetClassConfig>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800a1fa:	7bfb      	ldrb	r3, [r7, #15]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d004      	beq.n	800a20a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800a200:	6839      	ldr	r1, [r7, #0]
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 f944 	bl	800a490 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800a208:	e065      	b.n	800a2d6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f000 fa0b 	bl	800a626 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2203      	movs	r2, #3
 800a214:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800a218:	e05d      	b.n	800a2d6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 fa03 	bl	800a626 <USBD_CtlSendStatus>
    break;
 800a220:	e059      	b.n	800a2d6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800a222:	4b2f      	ldr	r3, [pc, #188]	; (800a2e0 <USBD_SetConfig+0x144>)
 800a224:	781b      	ldrb	r3, [r3, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d112      	bne.n	800a250 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2202      	movs	r2, #2
 800a22e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800a232:	4b2b      	ldr	r3, [pc, #172]	; (800a2e0 <USBD_SetConfig+0x144>)
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	461a      	mov	r2, r3
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a23c:	4b28      	ldr	r3, [pc, #160]	; (800a2e0 <USBD_SetConfig+0x144>)
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	4619      	mov	r1, r3
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f7ff f99a 	bl	800957c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f000 f9ec 	bl	800a626 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800a24e:	e042      	b.n	800a2d6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800a250:	4b23      	ldr	r3, [pc, #140]	; (800a2e0 <USBD_SetConfig+0x144>)
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	461a      	mov	r2, r3
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d02a      	beq.n	800a2b4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	b2db      	uxtb	r3, r3
 800a264:	4619      	mov	r1, r3
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f7ff f988 	bl	800957c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800a26c:	4b1c      	ldr	r3, [pc, #112]	; (800a2e0 <USBD_SetConfig+0x144>)
 800a26e:	781b      	ldrb	r3, [r3, #0]
 800a270:	461a      	mov	r2, r3
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800a276:	4b1a      	ldr	r3, [pc, #104]	; (800a2e0 <USBD_SetConfig+0x144>)
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	4619      	mov	r1, r3
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f7ff f961 	bl	8009544 <USBD_SetClassConfig>
 800a282:	4603      	mov	r3, r0
 800a284:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800a286:	7bfb      	ldrb	r3, [r7, #15]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d00f      	beq.n	800a2ac <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800a28c:	6839      	ldr	r1, [r7, #0]
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f000 f8fe 	bl	800a490 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	b2db      	uxtb	r3, r3
 800a29a:	4619      	mov	r1, r3
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f7ff f96d 	bl	800957c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2202      	movs	r2, #2
 800a2a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800a2aa:	e014      	b.n	800a2d6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 f9ba 	bl	800a626 <USBD_CtlSendStatus>
    break;
 800a2b2:	e010      	b.n	800a2d6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f000 f9b6 	bl	800a626 <USBD_CtlSendStatus>
    break;
 800a2ba:	e00c      	b.n	800a2d6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800a2bc:	6839      	ldr	r1, [r7, #0]
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 f8e6 	bl	800a490 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a2c4:	4b06      	ldr	r3, [pc, #24]	; (800a2e0 <USBD_SetConfig+0x144>)
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f7ff f956 	bl	800957c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800a2d0:	2303      	movs	r3, #3
 800a2d2:	73fb      	strb	r3, [r7, #15]
    break;
 800a2d4:	bf00      	nop
  }

  return ret;
 800a2d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3710      	adds	r7, #16
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	200003a8 	.word	0x200003a8

0800a2e4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	88db      	ldrh	r3, [r3, #6]
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d004      	beq.n	800a300 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a2f6:	6839      	ldr	r1, [r7, #0]
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 f8c9 	bl	800a490 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800a2fe:	e021      	b.n	800a344 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a306:	2b01      	cmp	r3, #1
 800a308:	db17      	blt.n	800a33a <USBD_GetConfig+0x56>
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	dd02      	ble.n	800a314 <USBD_GetConfig+0x30>
 800a30e:	2b03      	cmp	r3, #3
 800a310:	d00b      	beq.n	800a32a <USBD_GetConfig+0x46>
 800a312:	e012      	b.n	800a33a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	3308      	adds	r3, #8
 800a31e:	2201      	movs	r2, #1
 800a320:	4619      	mov	r1, r3
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 f925 	bl	800a572 <USBD_CtlSendData>
      break;
 800a328:	e00c      	b.n	800a344 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	3304      	adds	r3, #4
 800a32e:	2201      	movs	r2, #1
 800a330:	4619      	mov	r1, r3
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 f91d 	bl	800a572 <USBD_CtlSendData>
      break;
 800a338:	e004      	b.n	800a344 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800a33a:	6839      	ldr	r1, [r7, #0]
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f000 f8a7 	bl	800a490 <USBD_CtlError>
      break;
 800a342:	bf00      	nop
}
 800a344:	bf00      	nop
 800a346:	3708      	adds	r7, #8
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b082      	sub	sp, #8
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a35c:	3b01      	subs	r3, #1
 800a35e:	2b02      	cmp	r3, #2
 800a360:	d81e      	bhi.n	800a3a0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	88db      	ldrh	r3, [r3, #6]
 800a366:	2b02      	cmp	r3, #2
 800a368:	d004      	beq.n	800a374 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800a36a:	6839      	ldr	r1, [r7, #0]
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 f88f 	bl	800a490 <USBD_CtlError>
      break;
 800a372:	e01a      	b.n	800a3aa <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2201      	movs	r2, #1
 800a378:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a380:	2b00      	cmp	r3, #0
 800a382:	d005      	beq.n	800a390 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	f043 0202 	orr.w	r2, r3, #2
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	330c      	adds	r3, #12
 800a394:	2202      	movs	r2, #2
 800a396:	4619      	mov	r1, r3
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 f8ea 	bl	800a572 <USBD_CtlSendData>
    break;
 800a39e:	e004      	b.n	800a3aa <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800a3a0:	6839      	ldr	r1, [r7, #0]
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 f874 	bl	800a490 <USBD_CtlError>
    break;
 800a3a8:	bf00      	nop
  }
}
 800a3aa:	bf00      	nop
 800a3ac:	3708      	adds	r7, #8
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}

0800a3b2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b082      	sub	sp, #8
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
 800a3ba:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	885b      	ldrh	r3, [r3, #2]
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	d106      	bne.n	800a3d2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f000 f92a 	bl	800a626 <USBD_CtlSendStatus>
  }
}
 800a3d2:	bf00      	nop
 800a3d4:	3708      	adds	r7, #8
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}

0800a3da <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3da:	b580      	push	{r7, lr}
 800a3dc:	b082      	sub	sp, #8
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
 800a3e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3ea:	3b01      	subs	r3, #1
 800a3ec:	2b02      	cmp	r3, #2
 800a3ee:	d80b      	bhi.n	800a408 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	885b      	ldrh	r3, [r3, #2]
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d10c      	bne.n	800a412 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 f910 	bl	800a626 <USBD_CtlSendStatus>
      }
      break;
 800a406:	e004      	b.n	800a412 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a408:	6839      	ldr	r1, [r7, #0]
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 f840 	bl	800a490 <USBD_CtlError>
      break;
 800a410:	e000      	b.n	800a414 <USBD_ClrFeature+0x3a>
      break;
 800a412:	bf00      	nop
  }
}
 800a414:	bf00      	nop
 800a416:	3708      	adds	r7, #8
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	781a      	ldrb	r2, [r3, #0]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	3301      	adds	r3, #1
 800a436:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	781a      	ldrb	r2, [r3, #0]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	3301      	adds	r3, #1
 800a444:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a446:	68f8      	ldr	r0, [r7, #12]
 800a448:	f7ff fad3 	bl	80099f2 <SWAPBYTE>
 800a44c:	4603      	mov	r3, r0
 800a44e:	461a      	mov	r2, r3
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	3301      	adds	r3, #1
 800a458:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	3301      	adds	r3, #1
 800a45e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a460:	68f8      	ldr	r0, [r7, #12]
 800a462:	f7ff fac6 	bl	80099f2 <SWAPBYTE>
 800a466:	4603      	mov	r3, r0
 800a468:	461a      	mov	r2, r3
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	3301      	adds	r3, #1
 800a472:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	3301      	adds	r3, #1
 800a478:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a47a:	68f8      	ldr	r0, [r7, #12]
 800a47c:	f7ff fab9 	bl	80099f2 <SWAPBYTE>
 800a480:	4603      	mov	r3, r0
 800a482:	461a      	mov	r2, r3
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	80da      	strh	r2, [r3, #6]
}
 800a488:	bf00      	nop
 800a48a:	3710      	adds	r7, #16
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b082      	sub	sp, #8
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a49a:	2180      	movs	r1, #128	; 0x80
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f000 fcf3 	bl	800ae88 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a4a2:	2100      	movs	r1, #0
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 fcef 	bl	800ae88 <USBD_LL_StallEP>
}
 800a4aa:	bf00      	nop
 800a4ac:	3708      	adds	r7, #8
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}

0800a4b2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a4b2:	b580      	push	{r7, lr}
 800a4b4:	b086      	sub	sp, #24
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	60f8      	str	r0, [r7, #12]
 800a4ba:	60b9      	str	r1, [r7, #8]
 800a4bc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d036      	beq.n	800a536 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a4cc:	6938      	ldr	r0, [r7, #16]
 800a4ce:	f000 f836 	bl	800a53e <USBD_GetLen>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	3301      	adds	r3, #1
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	005b      	lsls	r3, r3, #1
 800a4da:	b29a      	uxth	r2, r3
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a4e0:	7dfb      	ldrb	r3, [r7, #23]
 800a4e2:	68ba      	ldr	r2, [r7, #8]
 800a4e4:	4413      	add	r3, r2
 800a4e6:	687a      	ldr	r2, [r7, #4]
 800a4e8:	7812      	ldrb	r2, [r2, #0]
 800a4ea:	701a      	strb	r2, [r3, #0]
  idx++;
 800a4ec:	7dfb      	ldrb	r3, [r7, #23]
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a4f2:	7dfb      	ldrb	r3, [r7, #23]
 800a4f4:	68ba      	ldr	r2, [r7, #8]
 800a4f6:	4413      	add	r3, r2
 800a4f8:	2203      	movs	r2, #3
 800a4fa:	701a      	strb	r2, [r3, #0]
  idx++;
 800a4fc:	7dfb      	ldrb	r3, [r7, #23]
 800a4fe:	3301      	adds	r3, #1
 800a500:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a502:	e013      	b.n	800a52c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a504:	7dfb      	ldrb	r3, [r7, #23]
 800a506:	68ba      	ldr	r2, [r7, #8]
 800a508:	4413      	add	r3, r2
 800a50a:	693a      	ldr	r2, [r7, #16]
 800a50c:	7812      	ldrb	r2, [r2, #0]
 800a50e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	3301      	adds	r3, #1
 800a514:	613b      	str	r3, [r7, #16]
    idx++;
 800a516:	7dfb      	ldrb	r3, [r7, #23]
 800a518:	3301      	adds	r3, #1
 800a51a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a51c:	7dfb      	ldrb	r3, [r7, #23]
 800a51e:	68ba      	ldr	r2, [r7, #8]
 800a520:	4413      	add	r3, r2
 800a522:	2200      	movs	r2, #0
 800a524:	701a      	strb	r2, [r3, #0]
    idx++;
 800a526:	7dfb      	ldrb	r3, [r7, #23]
 800a528:	3301      	adds	r3, #1
 800a52a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d1e7      	bne.n	800a504 <USBD_GetString+0x52>
 800a534:	e000      	b.n	800a538 <USBD_GetString+0x86>
    return;
 800a536:	bf00      	nop
  }
}
 800a538:	3718      	adds	r7, #24
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a53e:	b480      	push	{r7}
 800a540:	b085      	sub	sp, #20
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a546:	2300      	movs	r3, #0
 800a548:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a54e:	e005      	b.n	800a55c <USBD_GetLen+0x1e>
  {
    len++;
 800a550:	7bfb      	ldrb	r3, [r7, #15]
 800a552:	3301      	adds	r3, #1
 800a554:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	3301      	adds	r3, #1
 800a55a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d1f5      	bne.n	800a550 <USBD_GetLen+0x12>
  }

  return len;
 800a564:	7bfb      	ldrb	r3, [r7, #15]
}
 800a566:	4618      	mov	r0, r3
 800a568:	3714      	adds	r7, #20
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr

0800a572 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b084      	sub	sp, #16
 800a576:	af00      	add	r7, sp, #0
 800a578:	60f8      	str	r0, [r7, #12]
 800a57a:	60b9      	str	r1, [r7, #8]
 800a57c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2202      	movs	r2, #2
 800a582:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	687a      	ldr	r2, [r7, #4]
 800a58a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	68ba      	ldr	r2, [r7, #8]
 800a596:	2100      	movs	r1, #0
 800a598:	68f8      	ldr	r0, [r7, #12]
 800a59a:	f000 fcfe 	bl	800af9a <USBD_LL_Transmit>

  return USBD_OK;
 800a59e:	2300      	movs	r3, #0
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3710      	adds	r7, #16
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b084      	sub	sp, #16
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	60f8      	str	r0, [r7, #12]
 800a5b0:	60b9      	str	r1, [r7, #8]
 800a5b2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	68ba      	ldr	r2, [r7, #8]
 800a5b8:	2100      	movs	r1, #0
 800a5ba:	68f8      	ldr	r0, [r7, #12]
 800a5bc:	f000 fced 	bl	800af9a <USBD_LL_Transmit>

  return USBD_OK;
 800a5c0:	2300      	movs	r3, #0
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3710      	adds	r7, #16
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b084      	sub	sp, #16
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	60f8      	str	r0, [r7, #12]
 800a5d2:	60b9      	str	r1, [r7, #8]
 800a5d4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2203      	movs	r2, #3
 800a5da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	687a      	ldr	r2, [r7, #4]
 800a5ea:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	68ba      	ldr	r2, [r7, #8]
 800a5f2:	2100      	movs	r1, #0
 800a5f4:	68f8      	ldr	r0, [r7, #12]
 800a5f6:	f000 fcf1 	bl	800afdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5fa:	2300      	movs	r3, #0
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3710      	adds	r7, #16
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b084      	sub	sp, #16
 800a608:	af00      	add	r7, sp, #0
 800a60a:	60f8      	str	r0, [r7, #12]
 800a60c:	60b9      	str	r1, [r7, #8]
 800a60e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	68ba      	ldr	r2, [r7, #8]
 800a614:	2100      	movs	r1, #0
 800a616:	68f8      	ldr	r0, [r7, #12]
 800a618:	f000 fce0 	bl	800afdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3710      	adds	r7, #16
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}

0800a626 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a626:	b580      	push	{r7, lr}
 800a628:	b082      	sub	sp, #8
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2204      	movs	r2, #4
 800a632:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a636:	2300      	movs	r3, #0
 800a638:	2200      	movs	r2, #0
 800a63a:	2100      	movs	r1, #0
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f000 fcac 	bl	800af9a <USBD_LL_Transmit>

  return USBD_OK;
 800a642:	2300      	movs	r3, #0
}
 800a644:	4618      	mov	r0, r3
 800a646:	3708      	adds	r7, #8
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2205      	movs	r2, #5
 800a658:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a65c:	2300      	movs	r3, #0
 800a65e:	2200      	movs	r2, #0
 800a660:	2100      	movs	r1, #0
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 fcba 	bl	800afdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a668:	2300      	movs	r3, #0
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3708      	adds	r7, #8
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
	...

0800a674 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a678:	2200      	movs	r2, #0
 800a67a:	4912      	ldr	r1, [pc, #72]	; (800a6c4 <MX_USB_DEVICE_Init+0x50>)
 800a67c:	4812      	ldr	r0, [pc, #72]	; (800a6c8 <MX_USB_DEVICE_Init+0x54>)
 800a67e:	f7fe fef3 	bl	8009468 <USBD_Init>
 800a682:	4603      	mov	r3, r0
 800a684:	2b00      	cmp	r3, #0
 800a686:	d001      	beq.n	800a68c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a688:	f7f7 fed0 	bl	800242c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a68c:	490f      	ldr	r1, [pc, #60]	; (800a6cc <MX_USB_DEVICE_Init+0x58>)
 800a68e:	480e      	ldr	r0, [pc, #56]	; (800a6c8 <MX_USB_DEVICE_Init+0x54>)
 800a690:	f7fe ff20 	bl	80094d4 <USBD_RegisterClass>
 800a694:	4603      	mov	r3, r0
 800a696:	2b00      	cmp	r3, #0
 800a698:	d001      	beq.n	800a69e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a69a:	f7f7 fec7 	bl	800242c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a69e:	490c      	ldr	r1, [pc, #48]	; (800a6d0 <MX_USB_DEVICE_Init+0x5c>)
 800a6a0:	4809      	ldr	r0, [pc, #36]	; (800a6c8 <MX_USB_DEVICE_Init+0x54>)
 800a6a2:	f7fe fe45 	bl	8009330 <USBD_CDC_RegisterInterface>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d001      	beq.n	800a6b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a6ac:	f7f7 febe 	bl	800242c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a6b0:	4805      	ldr	r0, [pc, #20]	; (800a6c8 <MX_USB_DEVICE_Init+0x54>)
 800a6b2:	f7fe ff30 	bl	8009516 <USBD_Start>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d001      	beq.n	800a6c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a6bc:	f7f7 feb6 	bl	800242c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a6c0:	bf00      	nop
 800a6c2:	bd80      	pop	{r7, pc}
 800a6c4:	20000138 	.word	0x20000138
 800a6c8:	200006b8 	.word	0x200006b8
 800a6cc:	20000018 	.word	0x20000018
 800a6d0:	20000124 	.word	0x20000124

0800a6d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a6d8:	2200      	movs	r2, #0
 800a6da:	4905      	ldr	r1, [pc, #20]	; (800a6f0 <CDC_Init_FS+0x1c>)
 800a6dc:	4805      	ldr	r0, [pc, #20]	; (800a6f4 <CDC_Init_FS+0x20>)
 800a6de:	f7fe fe3c 	bl	800935a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a6e2:	4905      	ldr	r1, [pc, #20]	; (800a6f8 <CDC_Init_FS+0x24>)
 800a6e4:	4803      	ldr	r0, [pc, #12]	; (800a6f4 <CDC_Init_FS+0x20>)
 800a6e6:	f7fe fe51 	bl	800938c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a6ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	bd80      	pop	{r7, pc}
 800a6f0:	20001188 	.word	0x20001188
 800a6f4:	200006b8 	.word	0x200006b8
 800a6f8:	20000988 	.word	0x20000988

0800a6fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a700:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a702:	4618      	mov	r0, r3
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b083      	sub	sp, #12
 800a710:	af00      	add	r7, sp, #0
 800a712:	4603      	mov	r3, r0
 800a714:	6039      	str	r1, [r7, #0]
 800a716:	71fb      	strb	r3, [r7, #7]
 800a718:	4613      	mov	r3, r2
 800a71a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a71c:	79fb      	ldrb	r3, [r7, #7]
 800a71e:	2b23      	cmp	r3, #35	; 0x23
 800a720:	d85c      	bhi.n	800a7dc <CDC_Control_FS+0xd0>
 800a722:	a201      	add	r2, pc, #4	; (adr r2, 800a728 <CDC_Control_FS+0x1c>)
 800a724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a728:	0800a7dd 	.word	0x0800a7dd
 800a72c:	0800a7dd 	.word	0x0800a7dd
 800a730:	0800a7dd 	.word	0x0800a7dd
 800a734:	0800a7dd 	.word	0x0800a7dd
 800a738:	0800a7dd 	.word	0x0800a7dd
 800a73c:	0800a7dd 	.word	0x0800a7dd
 800a740:	0800a7dd 	.word	0x0800a7dd
 800a744:	0800a7dd 	.word	0x0800a7dd
 800a748:	0800a7dd 	.word	0x0800a7dd
 800a74c:	0800a7dd 	.word	0x0800a7dd
 800a750:	0800a7dd 	.word	0x0800a7dd
 800a754:	0800a7dd 	.word	0x0800a7dd
 800a758:	0800a7dd 	.word	0x0800a7dd
 800a75c:	0800a7dd 	.word	0x0800a7dd
 800a760:	0800a7dd 	.word	0x0800a7dd
 800a764:	0800a7dd 	.word	0x0800a7dd
 800a768:	0800a7dd 	.word	0x0800a7dd
 800a76c:	0800a7dd 	.word	0x0800a7dd
 800a770:	0800a7dd 	.word	0x0800a7dd
 800a774:	0800a7dd 	.word	0x0800a7dd
 800a778:	0800a7dd 	.word	0x0800a7dd
 800a77c:	0800a7dd 	.word	0x0800a7dd
 800a780:	0800a7dd 	.word	0x0800a7dd
 800a784:	0800a7dd 	.word	0x0800a7dd
 800a788:	0800a7dd 	.word	0x0800a7dd
 800a78c:	0800a7dd 	.word	0x0800a7dd
 800a790:	0800a7dd 	.word	0x0800a7dd
 800a794:	0800a7dd 	.word	0x0800a7dd
 800a798:	0800a7dd 	.word	0x0800a7dd
 800a79c:	0800a7dd 	.word	0x0800a7dd
 800a7a0:	0800a7dd 	.word	0x0800a7dd
 800a7a4:	0800a7dd 	.word	0x0800a7dd
 800a7a8:	0800a7b9 	.word	0x0800a7b9
 800a7ac:	0800a7cb 	.word	0x0800a7cb
 800a7b0:	0800a7dd 	.word	0x0800a7dd
 800a7b4:	0800a7dd 	.word	0x0800a7dd
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800a7b8:	4b0c      	ldr	r3, [pc, #48]	; (800a7ec <CDC_Control_FS+0xe0>)
 800a7ba:	683a      	ldr	r2, [r7, #0]
 800a7bc:	6810      	ldr	r0, [r2, #0]
 800a7be:	6018      	str	r0, [r3, #0]
 800a7c0:	8891      	ldrh	r1, [r2, #4]
 800a7c2:	7992      	ldrb	r2, [r2, #6]
 800a7c4:	8099      	strh	r1, [r3, #4]
 800a7c6:	719a      	strb	r2, [r3, #6]
    break;
 800a7c8:	e009      	b.n	800a7de <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	4a07      	ldr	r2, [pc, #28]	; (800a7ec <CDC_Control_FS+0xe0>)
 800a7ce:	6810      	ldr	r0, [r2, #0]
 800a7d0:	6018      	str	r0, [r3, #0]
 800a7d2:	8891      	ldrh	r1, [r2, #4]
 800a7d4:	7992      	ldrb	r2, [r2, #6]
 800a7d6:	8099      	strh	r1, [r3, #4]
 800a7d8:	719a      	strb	r2, [r3, #6]
    break;
 800a7da:	e000      	b.n	800a7de <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a7dc:	bf00      	nop
  }

  return (USBD_OK);
 800a7de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	370c      	adds	r7, #12
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr
 800a7ec:	2000011c 	.word	0x2000011c

0800a7f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a7fa:	6879      	ldr	r1, [r7, #4]
 800a7fc:	4805      	ldr	r0, [pc, #20]	; (800a814 <CDC_Receive_FS+0x24>)
 800a7fe:	f7fe fdc5 	bl	800938c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a802:	4804      	ldr	r0, [pc, #16]	; (800a814 <CDC_Receive_FS+0x24>)
 800a804:	f7fe fe06 	bl	8009414 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a808:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3708      	adds	r7, #8
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	200006b8 	.word	0x200006b8

0800a818 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	460b      	mov	r3, r1
 800a822:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a824:	2300      	movs	r3, #0
 800a826:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a828:	4b0d      	ldr	r3, [pc, #52]	; (800a860 <CDC_Transmit_FS+0x48>)
 800a82a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a82e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a836:	2b00      	cmp	r3, #0
 800a838:	d001      	beq.n	800a83e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a83a:	2301      	movs	r3, #1
 800a83c:	e00b      	b.n	800a856 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a83e:	887b      	ldrh	r3, [r7, #2]
 800a840:	461a      	mov	r2, r3
 800a842:	6879      	ldr	r1, [r7, #4]
 800a844:	4806      	ldr	r0, [pc, #24]	; (800a860 <CDC_Transmit_FS+0x48>)
 800a846:	f7fe fd88 	bl	800935a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a84a:	4805      	ldr	r0, [pc, #20]	; (800a860 <CDC_Transmit_FS+0x48>)
 800a84c:	f7fe fdb2 	bl	80093b4 <USBD_CDC_TransmitPacket>
 800a850:	4603      	mov	r3, r0
 800a852:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a854:	7bfb      	ldrb	r3, [r7, #15]
}
 800a856:	4618      	mov	r0, r3
 800a858:	3710      	adds	r7, #16
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}
 800a85e:	bf00      	nop
 800a860:	200006b8 	.word	0x200006b8

0800a864 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a864:	b480      	push	{r7}
 800a866:	b087      	sub	sp, #28
 800a868:	af00      	add	r7, sp, #0
 800a86a:	60f8      	str	r0, [r7, #12]
 800a86c:	60b9      	str	r1, [r7, #8]
 800a86e:	4613      	mov	r3, r2
 800a870:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a872:	2300      	movs	r3, #0
 800a874:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a876:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	371c      	adds	r7, #28
 800a87e:	46bd      	mov	sp, r7
 800a880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a884:	4770      	bx	lr
	...

0800a888 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a888:	b480      	push	{r7}
 800a88a:	b083      	sub	sp, #12
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	4603      	mov	r3, r0
 800a890:	6039      	str	r1, [r7, #0]
 800a892:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	2212      	movs	r2, #18
 800a898:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a89a:	4b03      	ldr	r3, [pc, #12]	; (800a8a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	370c      	adds	r7, #12
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr
 800a8a8:	20000154 	.word	0x20000154

0800a8ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	6039      	str	r1, [r7, #0]
 800a8b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	2204      	movs	r2, #4
 800a8bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a8be:	4b03      	ldr	r3, [pc, #12]	; (800a8cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	370c      	adds	r7, #12
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr
 800a8cc:	20000168 	.word	0x20000168

0800a8d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b082      	sub	sp, #8
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	6039      	str	r1, [r7, #0]
 800a8da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a8dc:	79fb      	ldrb	r3, [r7, #7]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d105      	bne.n	800a8ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a8e2:	683a      	ldr	r2, [r7, #0]
 800a8e4:	4907      	ldr	r1, [pc, #28]	; (800a904 <USBD_FS_ProductStrDescriptor+0x34>)
 800a8e6:	4808      	ldr	r0, [pc, #32]	; (800a908 <USBD_FS_ProductStrDescriptor+0x38>)
 800a8e8:	f7ff fde3 	bl	800a4b2 <USBD_GetString>
 800a8ec:	e004      	b.n	800a8f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a8ee:	683a      	ldr	r2, [r7, #0]
 800a8f0:	4904      	ldr	r1, [pc, #16]	; (800a904 <USBD_FS_ProductStrDescriptor+0x34>)
 800a8f2:	4805      	ldr	r0, [pc, #20]	; (800a908 <USBD_FS_ProductStrDescriptor+0x38>)
 800a8f4:	f7ff fddd 	bl	800a4b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8f8:	4b02      	ldr	r3, [pc, #8]	; (800a904 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3708      	adds	r7, #8
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
 800a902:	bf00      	nop
 800a904:	20001988 	.word	0x20001988
 800a908:	0800d4c0 	.word	0x0800d4c0

0800a90c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b082      	sub	sp, #8
 800a910:	af00      	add	r7, sp, #0
 800a912:	4603      	mov	r3, r0
 800a914:	6039      	str	r1, [r7, #0]
 800a916:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a918:	683a      	ldr	r2, [r7, #0]
 800a91a:	4904      	ldr	r1, [pc, #16]	; (800a92c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a91c:	4804      	ldr	r0, [pc, #16]	; (800a930 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a91e:	f7ff fdc8 	bl	800a4b2 <USBD_GetString>
  return USBD_StrDesc;
 800a922:	4b02      	ldr	r3, [pc, #8]	; (800a92c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a924:	4618      	mov	r0, r3
 800a926:	3708      	adds	r7, #8
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}
 800a92c:	20001988 	.word	0x20001988
 800a930:	0800d4d8 	.word	0x0800d4d8

0800a934 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
 800a93a:	4603      	mov	r3, r0
 800a93c:	6039      	str	r1, [r7, #0]
 800a93e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	221a      	movs	r2, #26
 800a944:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a946:	f000 f843 	bl	800a9d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a94a:	4b02      	ldr	r3, [pc, #8]	; (800a954 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3708      	adds	r7, #8
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}
 800a954:	2000016c 	.word	0x2000016c

0800a958 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	4603      	mov	r3, r0
 800a960:	6039      	str	r1, [r7, #0]
 800a962:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a964:	79fb      	ldrb	r3, [r7, #7]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d105      	bne.n	800a976 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a96a:	683a      	ldr	r2, [r7, #0]
 800a96c:	4907      	ldr	r1, [pc, #28]	; (800a98c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a96e:	4808      	ldr	r0, [pc, #32]	; (800a990 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a970:	f7ff fd9f 	bl	800a4b2 <USBD_GetString>
 800a974:	e004      	b.n	800a980 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a976:	683a      	ldr	r2, [r7, #0]
 800a978:	4904      	ldr	r1, [pc, #16]	; (800a98c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a97a:	4805      	ldr	r0, [pc, #20]	; (800a990 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a97c:	f7ff fd99 	bl	800a4b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a980:	4b02      	ldr	r3, [pc, #8]	; (800a98c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a982:	4618      	mov	r0, r3
 800a984:	3708      	adds	r7, #8
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	bf00      	nop
 800a98c:	20001988 	.word	0x20001988
 800a990:	0800d4ec 	.word	0x0800d4ec

0800a994 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b082      	sub	sp, #8
 800a998:	af00      	add	r7, sp, #0
 800a99a:	4603      	mov	r3, r0
 800a99c:	6039      	str	r1, [r7, #0]
 800a99e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a9a0:	79fb      	ldrb	r3, [r7, #7]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d105      	bne.n	800a9b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a9a6:	683a      	ldr	r2, [r7, #0]
 800a9a8:	4907      	ldr	r1, [pc, #28]	; (800a9c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a9aa:	4808      	ldr	r0, [pc, #32]	; (800a9cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a9ac:	f7ff fd81 	bl	800a4b2 <USBD_GetString>
 800a9b0:	e004      	b.n	800a9bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a9b2:	683a      	ldr	r2, [r7, #0]
 800a9b4:	4904      	ldr	r1, [pc, #16]	; (800a9c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a9b6:	4805      	ldr	r0, [pc, #20]	; (800a9cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a9b8:	f7ff fd7b 	bl	800a4b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a9bc:	4b02      	ldr	r3, [pc, #8]	; (800a9c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3708      	adds	r7, #8
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
 800a9c6:	bf00      	nop
 800a9c8:	20001988 	.word	0x20001988
 800a9cc:	0800d4f8 	.word	0x0800d4f8

0800a9d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a9d6:	4b0f      	ldr	r3, [pc, #60]	; (800aa14 <Get_SerialNum+0x44>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a9dc:	4b0e      	ldr	r3, [pc, #56]	; (800aa18 <Get_SerialNum+0x48>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a9e2:	4b0e      	ldr	r3, [pc, #56]	; (800aa1c <Get_SerialNum+0x4c>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a9e8:	68fa      	ldr	r2, [r7, #12]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	4413      	add	r3, r2
 800a9ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d009      	beq.n	800aa0a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a9f6:	2208      	movs	r2, #8
 800a9f8:	4909      	ldr	r1, [pc, #36]	; (800aa20 <Get_SerialNum+0x50>)
 800a9fa:	68f8      	ldr	r0, [r7, #12]
 800a9fc:	f000 f814 	bl	800aa28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aa00:	2204      	movs	r2, #4
 800aa02:	4908      	ldr	r1, [pc, #32]	; (800aa24 <Get_SerialNum+0x54>)
 800aa04:	68b8      	ldr	r0, [r7, #8]
 800aa06:	f000 f80f 	bl	800aa28 <IntToUnicode>
  }
}
 800aa0a:	bf00      	nop
 800aa0c:	3710      	adds	r7, #16
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	bf00      	nop
 800aa14:	1fff7a10 	.word	0x1fff7a10
 800aa18:	1fff7a14 	.word	0x1fff7a14
 800aa1c:	1fff7a18 	.word	0x1fff7a18
 800aa20:	2000016e 	.word	0x2000016e
 800aa24:	2000017e 	.word	0x2000017e

0800aa28 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b087      	sub	sp, #28
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	4613      	mov	r3, r2
 800aa34:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aa36:	2300      	movs	r3, #0
 800aa38:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	75fb      	strb	r3, [r7, #23]
 800aa3e:	e027      	b.n	800aa90 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	0f1b      	lsrs	r3, r3, #28
 800aa44:	2b09      	cmp	r3, #9
 800aa46:	d80b      	bhi.n	800aa60 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	0f1b      	lsrs	r3, r3, #28
 800aa4c:	b2da      	uxtb	r2, r3
 800aa4e:	7dfb      	ldrb	r3, [r7, #23]
 800aa50:	005b      	lsls	r3, r3, #1
 800aa52:	4619      	mov	r1, r3
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	440b      	add	r3, r1
 800aa58:	3230      	adds	r2, #48	; 0x30
 800aa5a:	b2d2      	uxtb	r2, r2
 800aa5c:	701a      	strb	r2, [r3, #0]
 800aa5e:	e00a      	b.n	800aa76 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	0f1b      	lsrs	r3, r3, #28
 800aa64:	b2da      	uxtb	r2, r3
 800aa66:	7dfb      	ldrb	r3, [r7, #23]
 800aa68:	005b      	lsls	r3, r3, #1
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	440b      	add	r3, r1
 800aa70:	3237      	adds	r2, #55	; 0x37
 800aa72:	b2d2      	uxtb	r2, r2
 800aa74:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	011b      	lsls	r3, r3, #4
 800aa7a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aa7c:	7dfb      	ldrb	r3, [r7, #23]
 800aa7e:	005b      	lsls	r3, r3, #1
 800aa80:	3301      	adds	r3, #1
 800aa82:	68ba      	ldr	r2, [r7, #8]
 800aa84:	4413      	add	r3, r2
 800aa86:	2200      	movs	r2, #0
 800aa88:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aa8a:	7dfb      	ldrb	r3, [r7, #23]
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	75fb      	strb	r3, [r7, #23]
 800aa90:	7dfa      	ldrb	r2, [r7, #23]
 800aa92:	79fb      	ldrb	r3, [r7, #7]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d3d3      	bcc.n	800aa40 <IntToUnicode+0x18>
  }
}
 800aa98:	bf00      	nop
 800aa9a:	371c      	adds	r7, #28
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr

0800aaa4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b08a      	sub	sp, #40	; 0x28
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aaac:	f107 0314 	add.w	r3, r7, #20
 800aab0:	2200      	movs	r2, #0
 800aab2:	601a      	str	r2, [r3, #0]
 800aab4:	605a      	str	r2, [r3, #4]
 800aab6:	609a      	str	r2, [r3, #8]
 800aab8:	60da      	str	r2, [r3, #12]
 800aaba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aac4:	d13a      	bne.n	800ab3c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aac6:	2300      	movs	r3, #0
 800aac8:	613b      	str	r3, [r7, #16]
 800aaca:	4b1e      	ldr	r3, [pc, #120]	; (800ab44 <HAL_PCD_MspInit+0xa0>)
 800aacc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aace:	4a1d      	ldr	r2, [pc, #116]	; (800ab44 <HAL_PCD_MspInit+0xa0>)
 800aad0:	f043 0301 	orr.w	r3, r3, #1
 800aad4:	6313      	str	r3, [r2, #48]	; 0x30
 800aad6:	4b1b      	ldr	r3, [pc, #108]	; (800ab44 <HAL_PCD_MspInit+0xa0>)
 800aad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aada:	f003 0301 	and.w	r3, r3, #1
 800aade:	613b      	str	r3, [r7, #16]
 800aae0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800aae2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800aae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aae8:	2302      	movs	r3, #2
 800aaea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aaec:	2300      	movs	r3, #0
 800aaee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aaf0:	2303      	movs	r3, #3
 800aaf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800aaf4:	230a      	movs	r3, #10
 800aaf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aaf8:	f107 0314 	add.w	r3, r7, #20
 800aafc:	4619      	mov	r1, r3
 800aafe:	4812      	ldr	r0, [pc, #72]	; (800ab48 <HAL_PCD_MspInit+0xa4>)
 800ab00:	f7f8 fe74 	bl	80037ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ab04:	4b0f      	ldr	r3, [pc, #60]	; (800ab44 <HAL_PCD_MspInit+0xa0>)
 800ab06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab08:	4a0e      	ldr	r2, [pc, #56]	; (800ab44 <HAL_PCD_MspInit+0xa0>)
 800ab0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab0e:	6353      	str	r3, [r2, #52]	; 0x34
 800ab10:	2300      	movs	r3, #0
 800ab12:	60fb      	str	r3, [r7, #12]
 800ab14:	4b0b      	ldr	r3, [pc, #44]	; (800ab44 <HAL_PCD_MspInit+0xa0>)
 800ab16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab18:	4a0a      	ldr	r2, [pc, #40]	; (800ab44 <HAL_PCD_MspInit+0xa0>)
 800ab1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ab1e:	6453      	str	r3, [r2, #68]	; 0x44
 800ab20:	4b08      	ldr	r3, [pc, #32]	; (800ab44 <HAL_PCD_MspInit+0xa0>)
 800ab22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab28:	60fb      	str	r3, [r7, #12]
 800ab2a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 0);
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	2101      	movs	r1, #1
 800ab30:	2043      	movs	r0, #67	; 0x43
 800ab32:	f7f8 fe24 	bl	800377e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ab36:	2043      	movs	r0, #67	; 0x43
 800ab38:	f7f8 fe3d 	bl	80037b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ab3c:	bf00      	nop
 800ab3e:	3728      	adds	r7, #40	; 0x28
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	40023800 	.word	0x40023800
 800ab48:	40020000 	.word	0x40020000

0800ab4c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ab60:	4619      	mov	r1, r3
 800ab62:	4610      	mov	r0, r2
 800ab64:	f7fe fd22 	bl	80095ac <USBD_LL_SetupStage>
}
 800ab68:	bf00      	nop
 800ab6a:	3708      	adds	r7, #8
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b082      	sub	sp, #8
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	460b      	mov	r3, r1
 800ab7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ab82:	78fa      	ldrb	r2, [r7, #3]
 800ab84:	6879      	ldr	r1, [r7, #4]
 800ab86:	4613      	mov	r3, r2
 800ab88:	00db      	lsls	r3, r3, #3
 800ab8a:	1a9b      	subs	r3, r3, r2
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	440b      	add	r3, r1
 800ab90:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ab94:	681a      	ldr	r2, [r3, #0]
 800ab96:	78fb      	ldrb	r3, [r7, #3]
 800ab98:	4619      	mov	r1, r3
 800ab9a:	f7fe fd5a 	bl	8009652 <USBD_LL_DataOutStage>
}
 800ab9e:	bf00      	nop
 800aba0:	3708      	adds	r7, #8
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}

0800aba6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aba6:	b580      	push	{r7, lr}
 800aba8:	b082      	sub	sp, #8
 800abaa:	af00      	add	r7, sp, #0
 800abac:	6078      	str	r0, [r7, #4]
 800abae:	460b      	mov	r3, r1
 800abb0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800abb8:	78fa      	ldrb	r2, [r7, #3]
 800abba:	6879      	ldr	r1, [r7, #4]
 800abbc:	4613      	mov	r3, r2
 800abbe:	00db      	lsls	r3, r3, #3
 800abc0:	1a9b      	subs	r3, r3, r2
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	440b      	add	r3, r1
 800abc6:	3348      	adds	r3, #72	; 0x48
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	78fb      	ldrb	r3, [r7, #3]
 800abcc:	4619      	mov	r1, r3
 800abce:	f7fe fda3 	bl	8009718 <USBD_LL_DataInStage>
}
 800abd2:	bf00      	nop
 800abd4:	3708      	adds	r7, #8
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}

0800abda <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abda:	b580      	push	{r7, lr}
 800abdc:	b082      	sub	sp, #8
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800abe8:	4618      	mov	r0, r3
 800abea:	f7fe fea7 	bl	800993c <USBD_LL_SOF>
}
 800abee:	bf00      	nop
 800abf0:	3708      	adds	r7, #8
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}

0800abf6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abf6:	b580      	push	{r7, lr}
 800abf8:	b084      	sub	sp, #16
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800abfe:	2301      	movs	r3, #1
 800ac00:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	68db      	ldr	r3, [r3, #12]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d102      	bne.n	800ac10 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	73fb      	strb	r3, [r7, #15]
 800ac0e:	e008      	b.n	800ac22 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	68db      	ldr	r3, [r3, #12]
 800ac14:	2b02      	cmp	r3, #2
 800ac16:	d102      	bne.n	800ac1e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	73fb      	strb	r3, [r7, #15]
 800ac1c:	e001      	b.n	800ac22 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ac1e:	f7f7 fc05 	bl	800242c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ac28:	7bfa      	ldrb	r2, [r7, #15]
 800ac2a:	4611      	mov	r1, r2
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f7fe fe4a 	bl	80098c6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f7fe fe03 	bl	8009844 <USBD_LL_Reset>
}
 800ac3e:	bf00      	nop
 800ac40:	3710      	adds	r7, #16
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
	...

0800ac48 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7fe fe45 	bl	80098e6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	6812      	ldr	r2, [r2, #0]
 800ac6a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ac6e:	f043 0301 	orr.w	r3, r3, #1
 800ac72:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6a1b      	ldr	r3, [r3, #32]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d005      	beq.n	800ac88 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ac7c:	4b04      	ldr	r3, [pc, #16]	; (800ac90 <HAL_PCD_SuspendCallback+0x48>)
 800ac7e:	691b      	ldr	r3, [r3, #16]
 800ac80:	4a03      	ldr	r2, [pc, #12]	; (800ac90 <HAL_PCD_SuspendCallback+0x48>)
 800ac82:	f043 0306 	orr.w	r3, r3, #6
 800ac86:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ac88:	bf00      	nop
 800ac8a:	3708      	adds	r7, #8
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}
 800ac90:	e000ed00 	.word	0xe000ed00

0800ac94 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b082      	sub	sp, #8
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7fe fe34 	bl	8009910 <USBD_LL_Resume>
}
 800aca8:	bf00      	nop
 800acaa:	3708      	adds	r7, #8
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	460b      	mov	r3, r1
 800acba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800acc2:	78fa      	ldrb	r2, [r7, #3]
 800acc4:	4611      	mov	r1, r2
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7fe fe5f 	bl	800998a <USBD_LL_IsoOUTIncomplete>
}
 800accc:	bf00      	nop
 800acce:	3708      	adds	r7, #8
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	460b      	mov	r3, r1
 800acde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ace6:	78fa      	ldrb	r2, [r7, #3]
 800ace8:	4611      	mov	r1, r2
 800acea:	4618      	mov	r0, r3
 800acec:	f7fe fe40 	bl	8009970 <USBD_LL_IsoINIncomplete>
}
 800acf0:	bf00      	nop
 800acf2:	3708      	adds	r7, #8
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b082      	sub	sp, #8
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7fe fe4c 	bl	80099a4 <USBD_LL_DevConnected>
}
 800ad0c:	bf00      	nop
 800ad0e:	3708      	adds	r7, #8
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b082      	sub	sp, #8
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7fe fe49 	bl	80099ba <USBD_LL_DevDisconnected>
}
 800ad28:	bf00      	nop
 800ad2a:	3708      	adds	r7, #8
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d13c      	bne.n	800adba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ad40:	4a20      	ldr	r2, [pc, #128]	; (800adc4 <USBD_LL_Init+0x94>)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	4a1e      	ldr	r2, [pc, #120]	; (800adc4 <USBD_LL_Init+0x94>)
 800ad4c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ad50:	4b1c      	ldr	r3, [pc, #112]	; (800adc4 <USBD_LL_Init+0x94>)
 800ad52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ad56:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ad58:	4b1a      	ldr	r3, [pc, #104]	; (800adc4 <USBD_LL_Init+0x94>)
 800ad5a:	2204      	movs	r2, #4
 800ad5c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ad5e:	4b19      	ldr	r3, [pc, #100]	; (800adc4 <USBD_LL_Init+0x94>)
 800ad60:	2202      	movs	r2, #2
 800ad62:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ad64:	4b17      	ldr	r3, [pc, #92]	; (800adc4 <USBD_LL_Init+0x94>)
 800ad66:	2200      	movs	r2, #0
 800ad68:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ad6a:	4b16      	ldr	r3, [pc, #88]	; (800adc4 <USBD_LL_Init+0x94>)
 800ad6c:	2202      	movs	r2, #2
 800ad6e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ad70:	4b14      	ldr	r3, [pc, #80]	; (800adc4 <USBD_LL_Init+0x94>)
 800ad72:	2200      	movs	r2, #0
 800ad74:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ad76:	4b13      	ldr	r3, [pc, #76]	; (800adc4 <USBD_LL_Init+0x94>)
 800ad78:	2200      	movs	r2, #0
 800ad7a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ad7c:	4b11      	ldr	r3, [pc, #68]	; (800adc4 <USBD_LL_Init+0x94>)
 800ad7e:	2200      	movs	r2, #0
 800ad80:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ad82:	4b10      	ldr	r3, [pc, #64]	; (800adc4 <USBD_LL_Init+0x94>)
 800ad84:	2200      	movs	r2, #0
 800ad86:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ad88:	4b0e      	ldr	r3, [pc, #56]	; (800adc4 <USBD_LL_Init+0x94>)
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ad8e:	480d      	ldr	r0, [pc, #52]	; (800adc4 <USBD_LL_Init+0x94>)
 800ad90:	f7f9 feab 	bl	8004aea <HAL_PCD_Init>
 800ad94:	4603      	mov	r3, r0
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d001      	beq.n	800ad9e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ad9a:	f7f7 fb47 	bl	800242c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ad9e:	2180      	movs	r1, #128	; 0x80
 800ada0:	4808      	ldr	r0, [pc, #32]	; (800adc4 <USBD_LL_Init+0x94>)
 800ada2:	f7fb f808 	bl	8005db6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ada6:	2240      	movs	r2, #64	; 0x40
 800ada8:	2100      	movs	r1, #0
 800adaa:	4806      	ldr	r0, [pc, #24]	; (800adc4 <USBD_LL_Init+0x94>)
 800adac:	f7fa ffbc 	bl	8005d28 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800adb0:	2280      	movs	r2, #128	; 0x80
 800adb2:	2101      	movs	r1, #1
 800adb4:	4803      	ldr	r0, [pc, #12]	; (800adc4 <USBD_LL_Init+0x94>)
 800adb6:	f7fa ffb7 	bl	8005d28 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800adba:	2300      	movs	r3, #0
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3708      	adds	r7, #8
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}
 800adc4:	20001b88 	.word	0x20001b88

0800adc8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800add0:	2300      	movs	r3, #0
 800add2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800add4:	2300      	movs	r3, #0
 800add6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800adde:	4618      	mov	r0, r3
 800ade0:	f7f9 ffa0 	bl	8004d24 <HAL_PCD_Start>
 800ade4:	4603      	mov	r3, r0
 800ade6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ade8:	7bfb      	ldrb	r3, [r7, #15]
 800adea:	4618      	mov	r0, r3
 800adec:	f000 f92a 	bl	800b044 <USBD_Get_USB_Status>
 800adf0:	4603      	mov	r3, r0
 800adf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3710      	adds	r7, #16
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}

0800adfe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800adfe:	b580      	push	{r7, lr}
 800ae00:	b084      	sub	sp, #16
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
 800ae06:	4608      	mov	r0, r1
 800ae08:	4611      	mov	r1, r2
 800ae0a:	461a      	mov	r2, r3
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	70fb      	strb	r3, [r7, #3]
 800ae10:	460b      	mov	r3, r1
 800ae12:	70bb      	strb	r3, [r7, #2]
 800ae14:	4613      	mov	r3, r2
 800ae16:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ae26:	78bb      	ldrb	r3, [r7, #2]
 800ae28:	883a      	ldrh	r2, [r7, #0]
 800ae2a:	78f9      	ldrb	r1, [r7, #3]
 800ae2c:	f7fa fb84 	bl	8005538 <HAL_PCD_EP_Open>
 800ae30:	4603      	mov	r3, r0
 800ae32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae34:	7bfb      	ldrb	r3, [r7, #15]
 800ae36:	4618      	mov	r0, r3
 800ae38:	f000 f904 	bl	800b044 <USBD_Get_USB_Status>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae40:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3710      	adds	r7, #16
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b084      	sub	sp, #16
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
 800ae52:	460b      	mov	r3, r1
 800ae54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae56:	2300      	movs	r3, #0
 800ae58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ae64:	78fa      	ldrb	r2, [r7, #3]
 800ae66:	4611      	mov	r1, r2
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f7fa fbcd 	bl	8005608 <HAL_PCD_EP_Close>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae72:	7bfb      	ldrb	r3, [r7, #15]
 800ae74:	4618      	mov	r0, r3
 800ae76:	f000 f8e5 	bl	800b044 <USBD_Get_USB_Status>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae7e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3710      	adds	r7, #16
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b084      	sub	sp, #16
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	460b      	mov	r3, r1
 800ae92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae94:	2300      	movs	r3, #0
 800ae96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aea2:	78fa      	ldrb	r2, [r7, #3]
 800aea4:	4611      	mov	r1, r2
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7fa fca5 	bl	80057f6 <HAL_PCD_EP_SetStall>
 800aeac:	4603      	mov	r3, r0
 800aeae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aeb0:	7bfb      	ldrb	r3, [r7, #15]
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f000 f8c6 	bl	800b044 <USBD_Get_USB_Status>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aebc:	7bbb      	ldrb	r3, [r7, #14]
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3710      	adds	r7, #16
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}

0800aec6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aec6:	b580      	push	{r7, lr}
 800aec8:	b084      	sub	sp, #16
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
 800aece:	460b      	mov	r3, r1
 800aed0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aed2:	2300      	movs	r3, #0
 800aed4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aed6:	2300      	movs	r3, #0
 800aed8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aee0:	78fa      	ldrb	r2, [r7, #3]
 800aee2:	4611      	mov	r1, r2
 800aee4:	4618      	mov	r0, r3
 800aee6:	f7fa fcea 	bl	80058be <HAL_PCD_EP_ClrStall>
 800aeea:	4603      	mov	r3, r0
 800aeec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aeee:	7bfb      	ldrb	r3, [r7, #15]
 800aef0:	4618      	mov	r0, r3
 800aef2:	f000 f8a7 	bl	800b044 <USBD_Get_USB_Status>
 800aef6:	4603      	mov	r3, r0
 800aef8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aefa:	7bbb      	ldrb	r3, [r7, #14]
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3710      	adds	r7, #16
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af04:	b480      	push	{r7}
 800af06:	b085      	sub	sp, #20
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	460b      	mov	r3, r1
 800af0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800af16:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800af18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	da0b      	bge.n	800af38 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800af20:	78fb      	ldrb	r3, [r7, #3]
 800af22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af26:	68f9      	ldr	r1, [r7, #12]
 800af28:	4613      	mov	r3, r2
 800af2a:	00db      	lsls	r3, r3, #3
 800af2c:	1a9b      	subs	r3, r3, r2
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	440b      	add	r3, r1
 800af32:	333e      	adds	r3, #62	; 0x3e
 800af34:	781b      	ldrb	r3, [r3, #0]
 800af36:	e00b      	b.n	800af50 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800af38:	78fb      	ldrb	r3, [r7, #3]
 800af3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af3e:	68f9      	ldr	r1, [r7, #12]
 800af40:	4613      	mov	r3, r2
 800af42:	00db      	lsls	r3, r3, #3
 800af44:	1a9b      	subs	r3, r3, r2
 800af46:	009b      	lsls	r3, r3, #2
 800af48:	440b      	add	r3, r1
 800af4a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800af4e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800af50:	4618      	mov	r0, r3
 800af52:	3714      	adds	r7, #20
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr

0800af5c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b084      	sub	sp, #16
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	460b      	mov	r3, r1
 800af66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af68:	2300      	movs	r3, #0
 800af6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af6c:	2300      	movs	r3, #0
 800af6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800af76:	78fa      	ldrb	r2, [r7, #3]
 800af78:	4611      	mov	r1, r2
 800af7a:	4618      	mov	r0, r3
 800af7c:	f7fa fab7 	bl	80054ee <HAL_PCD_SetAddress>
 800af80:	4603      	mov	r3, r0
 800af82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af84:	7bfb      	ldrb	r3, [r7, #15]
 800af86:	4618      	mov	r0, r3
 800af88:	f000 f85c 	bl	800b044 <USBD_Get_USB_Status>
 800af8c:	4603      	mov	r3, r0
 800af8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af90:	7bbb      	ldrb	r3, [r7, #14]
}
 800af92:	4618      	mov	r0, r3
 800af94:	3710      	adds	r7, #16
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}

0800af9a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800af9a:	b580      	push	{r7, lr}
 800af9c:	b086      	sub	sp, #24
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	60f8      	str	r0, [r7, #12]
 800afa2:	607a      	str	r2, [r7, #4]
 800afa4:	603b      	str	r3, [r7, #0]
 800afa6:	460b      	mov	r3, r1
 800afa8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afaa:	2300      	movs	r3, #0
 800afac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afae:	2300      	movs	r3, #0
 800afb0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800afb8:	7af9      	ldrb	r1, [r7, #11]
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	687a      	ldr	r2, [r7, #4]
 800afbe:	f7fa fbd0 	bl	8005762 <HAL_PCD_EP_Transmit>
 800afc2:	4603      	mov	r3, r0
 800afc4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afc6:	7dfb      	ldrb	r3, [r7, #23]
 800afc8:	4618      	mov	r0, r3
 800afca:	f000 f83b 	bl	800b044 <USBD_Get_USB_Status>
 800afce:	4603      	mov	r3, r0
 800afd0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800afd2:	7dbb      	ldrb	r3, [r7, #22]
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3718      	adds	r7, #24
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b086      	sub	sp, #24
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	60f8      	str	r0, [r7, #12]
 800afe4:	607a      	str	r2, [r7, #4]
 800afe6:	603b      	str	r3, [r7, #0]
 800afe8:	460b      	mov	r3, r1
 800afea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afec:	2300      	movs	r3, #0
 800afee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aff0:	2300      	movs	r3, #0
 800aff2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800affa:	7af9      	ldrb	r1, [r7, #11]
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	687a      	ldr	r2, [r7, #4]
 800b000:	f7fa fb4c 	bl	800569c <HAL_PCD_EP_Receive>
 800b004:	4603      	mov	r3, r0
 800b006:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b008:	7dfb      	ldrb	r3, [r7, #23]
 800b00a:	4618      	mov	r0, r3
 800b00c:	f000 f81a 	bl	800b044 <USBD_Get_USB_Status>
 800b010:	4603      	mov	r3, r0
 800b012:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b014:	7dbb      	ldrb	r3, [r7, #22]
}
 800b016:	4618      	mov	r0, r3
 800b018:	3718      	adds	r7, #24
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}

0800b01e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b01e:	b580      	push	{r7, lr}
 800b020:	b082      	sub	sp, #8
 800b022:	af00      	add	r7, sp, #0
 800b024:	6078      	str	r0, [r7, #4]
 800b026:	460b      	mov	r3, r1
 800b028:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b030:	78fa      	ldrb	r2, [r7, #3]
 800b032:	4611      	mov	r1, r2
 800b034:	4618      	mov	r0, r3
 800b036:	f7fa fb7c 	bl	8005732 <HAL_PCD_EP_GetRxCount>
 800b03a:	4603      	mov	r3, r0
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3708      	adds	r7, #8
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b044:	b480      	push	{r7}
 800b046:	b085      	sub	sp, #20
 800b048:	af00      	add	r7, sp, #0
 800b04a:	4603      	mov	r3, r0
 800b04c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b04e:	2300      	movs	r3, #0
 800b050:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b052:	79fb      	ldrb	r3, [r7, #7]
 800b054:	2b03      	cmp	r3, #3
 800b056:	d817      	bhi.n	800b088 <USBD_Get_USB_Status+0x44>
 800b058:	a201      	add	r2, pc, #4	; (adr r2, 800b060 <USBD_Get_USB_Status+0x1c>)
 800b05a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b05e:	bf00      	nop
 800b060:	0800b071 	.word	0x0800b071
 800b064:	0800b077 	.word	0x0800b077
 800b068:	0800b07d 	.word	0x0800b07d
 800b06c:	0800b083 	.word	0x0800b083
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b070:	2300      	movs	r3, #0
 800b072:	73fb      	strb	r3, [r7, #15]
    break;
 800b074:	e00b      	b.n	800b08e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b076:	2303      	movs	r3, #3
 800b078:	73fb      	strb	r3, [r7, #15]
    break;
 800b07a:	e008      	b.n	800b08e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b07c:	2301      	movs	r3, #1
 800b07e:	73fb      	strb	r3, [r7, #15]
    break;
 800b080:	e005      	b.n	800b08e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b082:	2303      	movs	r3, #3
 800b084:	73fb      	strb	r3, [r7, #15]
    break;
 800b086:	e002      	b.n	800b08e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b088:	2303      	movs	r3, #3
 800b08a:	73fb      	strb	r3, [r7, #15]
    break;
 800b08c:	bf00      	nop
  }
  return usb_status;
 800b08e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b090:	4618      	mov	r0, r3
 800b092:	3714      	adds	r7, #20
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr

0800b09c <__errno>:
 800b09c:	4b01      	ldr	r3, [pc, #4]	; (800b0a4 <__errno+0x8>)
 800b09e:	6818      	ldr	r0, [r3, #0]
 800b0a0:	4770      	bx	lr
 800b0a2:	bf00      	nop
 800b0a4:	20000188 	.word	0x20000188

0800b0a8 <__libc_init_array>:
 800b0a8:	b570      	push	{r4, r5, r6, lr}
 800b0aa:	4e0d      	ldr	r6, [pc, #52]	; (800b0e0 <__libc_init_array+0x38>)
 800b0ac:	4c0d      	ldr	r4, [pc, #52]	; (800b0e4 <__libc_init_array+0x3c>)
 800b0ae:	1ba4      	subs	r4, r4, r6
 800b0b0:	10a4      	asrs	r4, r4, #2
 800b0b2:	2500      	movs	r5, #0
 800b0b4:	42a5      	cmp	r5, r4
 800b0b6:	d109      	bne.n	800b0cc <__libc_init_array+0x24>
 800b0b8:	4e0b      	ldr	r6, [pc, #44]	; (800b0e8 <__libc_init_array+0x40>)
 800b0ba:	4c0c      	ldr	r4, [pc, #48]	; (800b0ec <__libc_init_array+0x44>)
 800b0bc:	f002 f9e2 	bl	800d484 <_init>
 800b0c0:	1ba4      	subs	r4, r4, r6
 800b0c2:	10a4      	asrs	r4, r4, #2
 800b0c4:	2500      	movs	r5, #0
 800b0c6:	42a5      	cmp	r5, r4
 800b0c8:	d105      	bne.n	800b0d6 <__libc_init_array+0x2e>
 800b0ca:	bd70      	pop	{r4, r5, r6, pc}
 800b0cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b0d0:	4798      	blx	r3
 800b0d2:	3501      	adds	r5, #1
 800b0d4:	e7ee      	b.n	800b0b4 <__libc_init_array+0xc>
 800b0d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b0da:	4798      	blx	r3
 800b0dc:	3501      	adds	r5, #1
 800b0de:	e7f2      	b.n	800b0c6 <__libc_init_array+0x1e>
 800b0e0:	0800d7a8 	.word	0x0800d7a8
 800b0e4:	0800d7a8 	.word	0x0800d7a8
 800b0e8:	0800d7a8 	.word	0x0800d7a8
 800b0ec:	0800d7ac 	.word	0x0800d7ac

0800b0f0 <malloc>:
 800b0f0:	4b02      	ldr	r3, [pc, #8]	; (800b0fc <malloc+0xc>)
 800b0f2:	4601      	mov	r1, r0
 800b0f4:	6818      	ldr	r0, [r3, #0]
 800b0f6:	f000 b861 	b.w	800b1bc <_malloc_r>
 800b0fa:	bf00      	nop
 800b0fc:	20000188 	.word	0x20000188

0800b100 <free>:
 800b100:	4b02      	ldr	r3, [pc, #8]	; (800b10c <free+0xc>)
 800b102:	4601      	mov	r1, r0
 800b104:	6818      	ldr	r0, [r3, #0]
 800b106:	f000 b80b 	b.w	800b120 <_free_r>
 800b10a:	bf00      	nop
 800b10c:	20000188 	.word	0x20000188

0800b110 <memset>:
 800b110:	4402      	add	r2, r0
 800b112:	4603      	mov	r3, r0
 800b114:	4293      	cmp	r3, r2
 800b116:	d100      	bne.n	800b11a <memset+0xa>
 800b118:	4770      	bx	lr
 800b11a:	f803 1b01 	strb.w	r1, [r3], #1
 800b11e:	e7f9      	b.n	800b114 <memset+0x4>

0800b120 <_free_r>:
 800b120:	b538      	push	{r3, r4, r5, lr}
 800b122:	4605      	mov	r5, r0
 800b124:	2900      	cmp	r1, #0
 800b126:	d045      	beq.n	800b1b4 <_free_r+0x94>
 800b128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b12c:	1f0c      	subs	r4, r1, #4
 800b12e:	2b00      	cmp	r3, #0
 800b130:	bfb8      	it	lt
 800b132:	18e4      	addlt	r4, r4, r3
 800b134:	f001 fb85 	bl	800c842 <__malloc_lock>
 800b138:	4a1f      	ldr	r2, [pc, #124]	; (800b1b8 <_free_r+0x98>)
 800b13a:	6813      	ldr	r3, [r2, #0]
 800b13c:	4610      	mov	r0, r2
 800b13e:	b933      	cbnz	r3, 800b14e <_free_r+0x2e>
 800b140:	6063      	str	r3, [r4, #4]
 800b142:	6014      	str	r4, [r2, #0]
 800b144:	4628      	mov	r0, r5
 800b146:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b14a:	f001 bb7b 	b.w	800c844 <__malloc_unlock>
 800b14e:	42a3      	cmp	r3, r4
 800b150:	d90c      	bls.n	800b16c <_free_r+0x4c>
 800b152:	6821      	ldr	r1, [r4, #0]
 800b154:	1862      	adds	r2, r4, r1
 800b156:	4293      	cmp	r3, r2
 800b158:	bf04      	itt	eq
 800b15a:	681a      	ldreq	r2, [r3, #0]
 800b15c:	685b      	ldreq	r3, [r3, #4]
 800b15e:	6063      	str	r3, [r4, #4]
 800b160:	bf04      	itt	eq
 800b162:	1852      	addeq	r2, r2, r1
 800b164:	6022      	streq	r2, [r4, #0]
 800b166:	6004      	str	r4, [r0, #0]
 800b168:	e7ec      	b.n	800b144 <_free_r+0x24>
 800b16a:	4613      	mov	r3, r2
 800b16c:	685a      	ldr	r2, [r3, #4]
 800b16e:	b10a      	cbz	r2, 800b174 <_free_r+0x54>
 800b170:	42a2      	cmp	r2, r4
 800b172:	d9fa      	bls.n	800b16a <_free_r+0x4a>
 800b174:	6819      	ldr	r1, [r3, #0]
 800b176:	1858      	adds	r0, r3, r1
 800b178:	42a0      	cmp	r0, r4
 800b17a:	d10b      	bne.n	800b194 <_free_r+0x74>
 800b17c:	6820      	ldr	r0, [r4, #0]
 800b17e:	4401      	add	r1, r0
 800b180:	1858      	adds	r0, r3, r1
 800b182:	4282      	cmp	r2, r0
 800b184:	6019      	str	r1, [r3, #0]
 800b186:	d1dd      	bne.n	800b144 <_free_r+0x24>
 800b188:	6810      	ldr	r0, [r2, #0]
 800b18a:	6852      	ldr	r2, [r2, #4]
 800b18c:	605a      	str	r2, [r3, #4]
 800b18e:	4401      	add	r1, r0
 800b190:	6019      	str	r1, [r3, #0]
 800b192:	e7d7      	b.n	800b144 <_free_r+0x24>
 800b194:	d902      	bls.n	800b19c <_free_r+0x7c>
 800b196:	230c      	movs	r3, #12
 800b198:	602b      	str	r3, [r5, #0]
 800b19a:	e7d3      	b.n	800b144 <_free_r+0x24>
 800b19c:	6820      	ldr	r0, [r4, #0]
 800b19e:	1821      	adds	r1, r4, r0
 800b1a0:	428a      	cmp	r2, r1
 800b1a2:	bf04      	itt	eq
 800b1a4:	6811      	ldreq	r1, [r2, #0]
 800b1a6:	6852      	ldreq	r2, [r2, #4]
 800b1a8:	6062      	str	r2, [r4, #4]
 800b1aa:	bf04      	itt	eq
 800b1ac:	1809      	addeq	r1, r1, r0
 800b1ae:	6021      	streq	r1, [r4, #0]
 800b1b0:	605c      	str	r4, [r3, #4]
 800b1b2:	e7c7      	b.n	800b144 <_free_r+0x24>
 800b1b4:	bd38      	pop	{r3, r4, r5, pc}
 800b1b6:	bf00      	nop
 800b1b8:	200003ac 	.word	0x200003ac

0800b1bc <_malloc_r>:
 800b1bc:	b570      	push	{r4, r5, r6, lr}
 800b1be:	1ccd      	adds	r5, r1, #3
 800b1c0:	f025 0503 	bic.w	r5, r5, #3
 800b1c4:	3508      	adds	r5, #8
 800b1c6:	2d0c      	cmp	r5, #12
 800b1c8:	bf38      	it	cc
 800b1ca:	250c      	movcc	r5, #12
 800b1cc:	2d00      	cmp	r5, #0
 800b1ce:	4606      	mov	r6, r0
 800b1d0:	db01      	blt.n	800b1d6 <_malloc_r+0x1a>
 800b1d2:	42a9      	cmp	r1, r5
 800b1d4:	d903      	bls.n	800b1de <_malloc_r+0x22>
 800b1d6:	230c      	movs	r3, #12
 800b1d8:	6033      	str	r3, [r6, #0]
 800b1da:	2000      	movs	r0, #0
 800b1dc:	bd70      	pop	{r4, r5, r6, pc}
 800b1de:	f001 fb30 	bl	800c842 <__malloc_lock>
 800b1e2:	4a21      	ldr	r2, [pc, #132]	; (800b268 <_malloc_r+0xac>)
 800b1e4:	6814      	ldr	r4, [r2, #0]
 800b1e6:	4621      	mov	r1, r4
 800b1e8:	b991      	cbnz	r1, 800b210 <_malloc_r+0x54>
 800b1ea:	4c20      	ldr	r4, [pc, #128]	; (800b26c <_malloc_r+0xb0>)
 800b1ec:	6823      	ldr	r3, [r4, #0]
 800b1ee:	b91b      	cbnz	r3, 800b1f8 <_malloc_r+0x3c>
 800b1f0:	4630      	mov	r0, r6
 800b1f2:	f000 fc99 	bl	800bb28 <_sbrk_r>
 800b1f6:	6020      	str	r0, [r4, #0]
 800b1f8:	4629      	mov	r1, r5
 800b1fa:	4630      	mov	r0, r6
 800b1fc:	f000 fc94 	bl	800bb28 <_sbrk_r>
 800b200:	1c43      	adds	r3, r0, #1
 800b202:	d124      	bne.n	800b24e <_malloc_r+0x92>
 800b204:	230c      	movs	r3, #12
 800b206:	6033      	str	r3, [r6, #0]
 800b208:	4630      	mov	r0, r6
 800b20a:	f001 fb1b 	bl	800c844 <__malloc_unlock>
 800b20e:	e7e4      	b.n	800b1da <_malloc_r+0x1e>
 800b210:	680b      	ldr	r3, [r1, #0]
 800b212:	1b5b      	subs	r3, r3, r5
 800b214:	d418      	bmi.n	800b248 <_malloc_r+0x8c>
 800b216:	2b0b      	cmp	r3, #11
 800b218:	d90f      	bls.n	800b23a <_malloc_r+0x7e>
 800b21a:	600b      	str	r3, [r1, #0]
 800b21c:	50cd      	str	r5, [r1, r3]
 800b21e:	18cc      	adds	r4, r1, r3
 800b220:	4630      	mov	r0, r6
 800b222:	f001 fb0f 	bl	800c844 <__malloc_unlock>
 800b226:	f104 000b 	add.w	r0, r4, #11
 800b22a:	1d23      	adds	r3, r4, #4
 800b22c:	f020 0007 	bic.w	r0, r0, #7
 800b230:	1ac3      	subs	r3, r0, r3
 800b232:	d0d3      	beq.n	800b1dc <_malloc_r+0x20>
 800b234:	425a      	negs	r2, r3
 800b236:	50e2      	str	r2, [r4, r3]
 800b238:	e7d0      	b.n	800b1dc <_malloc_r+0x20>
 800b23a:	428c      	cmp	r4, r1
 800b23c:	684b      	ldr	r3, [r1, #4]
 800b23e:	bf16      	itet	ne
 800b240:	6063      	strne	r3, [r4, #4]
 800b242:	6013      	streq	r3, [r2, #0]
 800b244:	460c      	movne	r4, r1
 800b246:	e7eb      	b.n	800b220 <_malloc_r+0x64>
 800b248:	460c      	mov	r4, r1
 800b24a:	6849      	ldr	r1, [r1, #4]
 800b24c:	e7cc      	b.n	800b1e8 <_malloc_r+0x2c>
 800b24e:	1cc4      	adds	r4, r0, #3
 800b250:	f024 0403 	bic.w	r4, r4, #3
 800b254:	42a0      	cmp	r0, r4
 800b256:	d005      	beq.n	800b264 <_malloc_r+0xa8>
 800b258:	1a21      	subs	r1, r4, r0
 800b25a:	4630      	mov	r0, r6
 800b25c:	f000 fc64 	bl	800bb28 <_sbrk_r>
 800b260:	3001      	adds	r0, #1
 800b262:	d0cf      	beq.n	800b204 <_malloc_r+0x48>
 800b264:	6025      	str	r5, [r4, #0]
 800b266:	e7db      	b.n	800b220 <_malloc_r+0x64>
 800b268:	200003ac 	.word	0x200003ac
 800b26c:	200003b0 	.word	0x200003b0

0800b270 <__cvt>:
 800b270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b274:	ec55 4b10 	vmov	r4, r5, d0
 800b278:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b27a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b27e:	2d00      	cmp	r5, #0
 800b280:	460e      	mov	r6, r1
 800b282:	4691      	mov	r9, r2
 800b284:	4619      	mov	r1, r3
 800b286:	bfb8      	it	lt
 800b288:	4622      	movlt	r2, r4
 800b28a:	462b      	mov	r3, r5
 800b28c:	f027 0720 	bic.w	r7, r7, #32
 800b290:	bfbb      	ittet	lt
 800b292:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b296:	461d      	movlt	r5, r3
 800b298:	2300      	movge	r3, #0
 800b29a:	232d      	movlt	r3, #45	; 0x2d
 800b29c:	bfb8      	it	lt
 800b29e:	4614      	movlt	r4, r2
 800b2a0:	2f46      	cmp	r7, #70	; 0x46
 800b2a2:	700b      	strb	r3, [r1, #0]
 800b2a4:	d004      	beq.n	800b2b0 <__cvt+0x40>
 800b2a6:	2f45      	cmp	r7, #69	; 0x45
 800b2a8:	d100      	bne.n	800b2ac <__cvt+0x3c>
 800b2aa:	3601      	adds	r6, #1
 800b2ac:	2102      	movs	r1, #2
 800b2ae:	e000      	b.n	800b2b2 <__cvt+0x42>
 800b2b0:	2103      	movs	r1, #3
 800b2b2:	ab03      	add	r3, sp, #12
 800b2b4:	9301      	str	r3, [sp, #4]
 800b2b6:	ab02      	add	r3, sp, #8
 800b2b8:	9300      	str	r3, [sp, #0]
 800b2ba:	4632      	mov	r2, r6
 800b2bc:	4653      	mov	r3, sl
 800b2be:	ec45 4b10 	vmov	d0, r4, r5
 800b2c2:	f000 fced 	bl	800bca0 <_dtoa_r>
 800b2c6:	2f47      	cmp	r7, #71	; 0x47
 800b2c8:	4680      	mov	r8, r0
 800b2ca:	d102      	bne.n	800b2d2 <__cvt+0x62>
 800b2cc:	f019 0f01 	tst.w	r9, #1
 800b2d0:	d026      	beq.n	800b320 <__cvt+0xb0>
 800b2d2:	2f46      	cmp	r7, #70	; 0x46
 800b2d4:	eb08 0906 	add.w	r9, r8, r6
 800b2d8:	d111      	bne.n	800b2fe <__cvt+0x8e>
 800b2da:	f898 3000 	ldrb.w	r3, [r8]
 800b2de:	2b30      	cmp	r3, #48	; 0x30
 800b2e0:	d10a      	bne.n	800b2f8 <__cvt+0x88>
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	4629      	mov	r1, r5
 800b2ea:	f7f5 fbed 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2ee:	b918      	cbnz	r0, 800b2f8 <__cvt+0x88>
 800b2f0:	f1c6 0601 	rsb	r6, r6, #1
 800b2f4:	f8ca 6000 	str.w	r6, [sl]
 800b2f8:	f8da 3000 	ldr.w	r3, [sl]
 800b2fc:	4499      	add	r9, r3
 800b2fe:	2200      	movs	r2, #0
 800b300:	2300      	movs	r3, #0
 800b302:	4620      	mov	r0, r4
 800b304:	4629      	mov	r1, r5
 800b306:	f7f5 fbdf 	bl	8000ac8 <__aeabi_dcmpeq>
 800b30a:	b938      	cbnz	r0, 800b31c <__cvt+0xac>
 800b30c:	2230      	movs	r2, #48	; 0x30
 800b30e:	9b03      	ldr	r3, [sp, #12]
 800b310:	454b      	cmp	r3, r9
 800b312:	d205      	bcs.n	800b320 <__cvt+0xb0>
 800b314:	1c59      	adds	r1, r3, #1
 800b316:	9103      	str	r1, [sp, #12]
 800b318:	701a      	strb	r2, [r3, #0]
 800b31a:	e7f8      	b.n	800b30e <__cvt+0x9e>
 800b31c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b320:	9b03      	ldr	r3, [sp, #12]
 800b322:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b324:	eba3 0308 	sub.w	r3, r3, r8
 800b328:	4640      	mov	r0, r8
 800b32a:	6013      	str	r3, [r2, #0]
 800b32c:	b004      	add	sp, #16
 800b32e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b332 <__exponent>:
 800b332:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b334:	2900      	cmp	r1, #0
 800b336:	4604      	mov	r4, r0
 800b338:	bfba      	itte	lt
 800b33a:	4249      	neglt	r1, r1
 800b33c:	232d      	movlt	r3, #45	; 0x2d
 800b33e:	232b      	movge	r3, #43	; 0x2b
 800b340:	2909      	cmp	r1, #9
 800b342:	f804 2b02 	strb.w	r2, [r4], #2
 800b346:	7043      	strb	r3, [r0, #1]
 800b348:	dd20      	ble.n	800b38c <__exponent+0x5a>
 800b34a:	f10d 0307 	add.w	r3, sp, #7
 800b34e:	461f      	mov	r7, r3
 800b350:	260a      	movs	r6, #10
 800b352:	fb91 f5f6 	sdiv	r5, r1, r6
 800b356:	fb06 1115 	mls	r1, r6, r5, r1
 800b35a:	3130      	adds	r1, #48	; 0x30
 800b35c:	2d09      	cmp	r5, #9
 800b35e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b362:	f103 32ff 	add.w	r2, r3, #4294967295
 800b366:	4629      	mov	r1, r5
 800b368:	dc09      	bgt.n	800b37e <__exponent+0x4c>
 800b36a:	3130      	adds	r1, #48	; 0x30
 800b36c:	3b02      	subs	r3, #2
 800b36e:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b372:	42bb      	cmp	r3, r7
 800b374:	4622      	mov	r2, r4
 800b376:	d304      	bcc.n	800b382 <__exponent+0x50>
 800b378:	1a10      	subs	r0, r2, r0
 800b37a:	b003      	add	sp, #12
 800b37c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b37e:	4613      	mov	r3, r2
 800b380:	e7e7      	b.n	800b352 <__exponent+0x20>
 800b382:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b386:	f804 2b01 	strb.w	r2, [r4], #1
 800b38a:	e7f2      	b.n	800b372 <__exponent+0x40>
 800b38c:	2330      	movs	r3, #48	; 0x30
 800b38e:	4419      	add	r1, r3
 800b390:	7083      	strb	r3, [r0, #2]
 800b392:	1d02      	adds	r2, r0, #4
 800b394:	70c1      	strb	r1, [r0, #3]
 800b396:	e7ef      	b.n	800b378 <__exponent+0x46>

0800b398 <_printf_float>:
 800b398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b39c:	b08d      	sub	sp, #52	; 0x34
 800b39e:	460c      	mov	r4, r1
 800b3a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b3a4:	4616      	mov	r6, r2
 800b3a6:	461f      	mov	r7, r3
 800b3a8:	4605      	mov	r5, r0
 800b3aa:	f001 fa31 	bl	800c810 <_localeconv_r>
 800b3ae:	6803      	ldr	r3, [r0, #0]
 800b3b0:	9304      	str	r3, [sp, #16]
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f7f4 ff0c 	bl	80001d0 <strlen>
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	930a      	str	r3, [sp, #40]	; 0x28
 800b3bc:	f8d8 3000 	ldr.w	r3, [r8]
 800b3c0:	9005      	str	r0, [sp, #20]
 800b3c2:	3307      	adds	r3, #7
 800b3c4:	f023 0307 	bic.w	r3, r3, #7
 800b3c8:	f103 0208 	add.w	r2, r3, #8
 800b3cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b3d0:	f8d4 b000 	ldr.w	fp, [r4]
 800b3d4:	f8c8 2000 	str.w	r2, [r8]
 800b3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3dc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b3e0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b3e4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b3e8:	9307      	str	r3, [sp, #28]
 800b3ea:	f8cd 8018 	str.w	r8, [sp, #24]
 800b3ee:	f04f 32ff 	mov.w	r2, #4294967295
 800b3f2:	4ba7      	ldr	r3, [pc, #668]	; (800b690 <_printf_float+0x2f8>)
 800b3f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b3f8:	f7f5 fb98 	bl	8000b2c <__aeabi_dcmpun>
 800b3fc:	bb70      	cbnz	r0, 800b45c <_printf_float+0xc4>
 800b3fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b402:	4ba3      	ldr	r3, [pc, #652]	; (800b690 <_printf_float+0x2f8>)
 800b404:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b408:	f7f5 fb72 	bl	8000af0 <__aeabi_dcmple>
 800b40c:	bb30      	cbnz	r0, 800b45c <_printf_float+0xc4>
 800b40e:	2200      	movs	r2, #0
 800b410:	2300      	movs	r3, #0
 800b412:	4640      	mov	r0, r8
 800b414:	4649      	mov	r1, r9
 800b416:	f7f5 fb61 	bl	8000adc <__aeabi_dcmplt>
 800b41a:	b110      	cbz	r0, 800b422 <_printf_float+0x8a>
 800b41c:	232d      	movs	r3, #45	; 0x2d
 800b41e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b422:	4a9c      	ldr	r2, [pc, #624]	; (800b694 <_printf_float+0x2fc>)
 800b424:	4b9c      	ldr	r3, [pc, #624]	; (800b698 <_printf_float+0x300>)
 800b426:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b42a:	bf8c      	ite	hi
 800b42c:	4690      	movhi	r8, r2
 800b42e:	4698      	movls	r8, r3
 800b430:	2303      	movs	r3, #3
 800b432:	f02b 0204 	bic.w	r2, fp, #4
 800b436:	6123      	str	r3, [r4, #16]
 800b438:	6022      	str	r2, [r4, #0]
 800b43a:	f04f 0900 	mov.w	r9, #0
 800b43e:	9700      	str	r7, [sp, #0]
 800b440:	4633      	mov	r3, r6
 800b442:	aa0b      	add	r2, sp, #44	; 0x2c
 800b444:	4621      	mov	r1, r4
 800b446:	4628      	mov	r0, r5
 800b448:	f000 f9e6 	bl	800b818 <_printf_common>
 800b44c:	3001      	adds	r0, #1
 800b44e:	f040 808d 	bne.w	800b56c <_printf_float+0x1d4>
 800b452:	f04f 30ff 	mov.w	r0, #4294967295
 800b456:	b00d      	add	sp, #52	; 0x34
 800b458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b45c:	4642      	mov	r2, r8
 800b45e:	464b      	mov	r3, r9
 800b460:	4640      	mov	r0, r8
 800b462:	4649      	mov	r1, r9
 800b464:	f7f5 fb62 	bl	8000b2c <__aeabi_dcmpun>
 800b468:	b110      	cbz	r0, 800b470 <_printf_float+0xd8>
 800b46a:	4a8c      	ldr	r2, [pc, #560]	; (800b69c <_printf_float+0x304>)
 800b46c:	4b8c      	ldr	r3, [pc, #560]	; (800b6a0 <_printf_float+0x308>)
 800b46e:	e7da      	b.n	800b426 <_printf_float+0x8e>
 800b470:	6861      	ldr	r1, [r4, #4]
 800b472:	1c4b      	adds	r3, r1, #1
 800b474:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800b478:	a80a      	add	r0, sp, #40	; 0x28
 800b47a:	d13e      	bne.n	800b4fa <_printf_float+0x162>
 800b47c:	2306      	movs	r3, #6
 800b47e:	6063      	str	r3, [r4, #4]
 800b480:	2300      	movs	r3, #0
 800b482:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b486:	ab09      	add	r3, sp, #36	; 0x24
 800b488:	9300      	str	r3, [sp, #0]
 800b48a:	ec49 8b10 	vmov	d0, r8, r9
 800b48e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b492:	6022      	str	r2, [r4, #0]
 800b494:	f8cd a004 	str.w	sl, [sp, #4]
 800b498:	6861      	ldr	r1, [r4, #4]
 800b49a:	4628      	mov	r0, r5
 800b49c:	f7ff fee8 	bl	800b270 <__cvt>
 800b4a0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800b4a4:	2b47      	cmp	r3, #71	; 0x47
 800b4a6:	4680      	mov	r8, r0
 800b4a8:	d109      	bne.n	800b4be <_printf_float+0x126>
 800b4aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4ac:	1cd8      	adds	r0, r3, #3
 800b4ae:	db02      	blt.n	800b4b6 <_printf_float+0x11e>
 800b4b0:	6862      	ldr	r2, [r4, #4]
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	dd47      	ble.n	800b546 <_printf_float+0x1ae>
 800b4b6:	f1aa 0a02 	sub.w	sl, sl, #2
 800b4ba:	fa5f fa8a 	uxtb.w	sl, sl
 800b4be:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b4c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4c4:	d824      	bhi.n	800b510 <_printf_float+0x178>
 800b4c6:	3901      	subs	r1, #1
 800b4c8:	4652      	mov	r2, sl
 800b4ca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b4ce:	9109      	str	r1, [sp, #36]	; 0x24
 800b4d0:	f7ff ff2f 	bl	800b332 <__exponent>
 800b4d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4d6:	1813      	adds	r3, r2, r0
 800b4d8:	2a01      	cmp	r2, #1
 800b4da:	4681      	mov	r9, r0
 800b4dc:	6123      	str	r3, [r4, #16]
 800b4de:	dc02      	bgt.n	800b4e6 <_printf_float+0x14e>
 800b4e0:	6822      	ldr	r2, [r4, #0]
 800b4e2:	07d1      	lsls	r1, r2, #31
 800b4e4:	d501      	bpl.n	800b4ea <_printf_float+0x152>
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	6123      	str	r3, [r4, #16]
 800b4ea:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d0a5      	beq.n	800b43e <_printf_float+0xa6>
 800b4f2:	232d      	movs	r3, #45	; 0x2d
 800b4f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4f8:	e7a1      	b.n	800b43e <_printf_float+0xa6>
 800b4fa:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800b4fe:	f000 8177 	beq.w	800b7f0 <_printf_float+0x458>
 800b502:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b506:	d1bb      	bne.n	800b480 <_printf_float+0xe8>
 800b508:	2900      	cmp	r1, #0
 800b50a:	d1b9      	bne.n	800b480 <_printf_float+0xe8>
 800b50c:	2301      	movs	r3, #1
 800b50e:	e7b6      	b.n	800b47e <_printf_float+0xe6>
 800b510:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800b514:	d119      	bne.n	800b54a <_printf_float+0x1b2>
 800b516:	2900      	cmp	r1, #0
 800b518:	6863      	ldr	r3, [r4, #4]
 800b51a:	dd0c      	ble.n	800b536 <_printf_float+0x19e>
 800b51c:	6121      	str	r1, [r4, #16]
 800b51e:	b913      	cbnz	r3, 800b526 <_printf_float+0x18e>
 800b520:	6822      	ldr	r2, [r4, #0]
 800b522:	07d2      	lsls	r2, r2, #31
 800b524:	d502      	bpl.n	800b52c <_printf_float+0x194>
 800b526:	3301      	adds	r3, #1
 800b528:	440b      	add	r3, r1
 800b52a:	6123      	str	r3, [r4, #16]
 800b52c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b52e:	65a3      	str	r3, [r4, #88]	; 0x58
 800b530:	f04f 0900 	mov.w	r9, #0
 800b534:	e7d9      	b.n	800b4ea <_printf_float+0x152>
 800b536:	b913      	cbnz	r3, 800b53e <_printf_float+0x1a6>
 800b538:	6822      	ldr	r2, [r4, #0]
 800b53a:	07d0      	lsls	r0, r2, #31
 800b53c:	d501      	bpl.n	800b542 <_printf_float+0x1aa>
 800b53e:	3302      	adds	r3, #2
 800b540:	e7f3      	b.n	800b52a <_printf_float+0x192>
 800b542:	2301      	movs	r3, #1
 800b544:	e7f1      	b.n	800b52a <_printf_float+0x192>
 800b546:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800b54a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b54e:	4293      	cmp	r3, r2
 800b550:	db05      	blt.n	800b55e <_printf_float+0x1c6>
 800b552:	6822      	ldr	r2, [r4, #0]
 800b554:	6123      	str	r3, [r4, #16]
 800b556:	07d1      	lsls	r1, r2, #31
 800b558:	d5e8      	bpl.n	800b52c <_printf_float+0x194>
 800b55a:	3301      	adds	r3, #1
 800b55c:	e7e5      	b.n	800b52a <_printf_float+0x192>
 800b55e:	2b00      	cmp	r3, #0
 800b560:	bfd4      	ite	le
 800b562:	f1c3 0302 	rsble	r3, r3, #2
 800b566:	2301      	movgt	r3, #1
 800b568:	4413      	add	r3, r2
 800b56a:	e7de      	b.n	800b52a <_printf_float+0x192>
 800b56c:	6823      	ldr	r3, [r4, #0]
 800b56e:	055a      	lsls	r2, r3, #21
 800b570:	d407      	bmi.n	800b582 <_printf_float+0x1ea>
 800b572:	6923      	ldr	r3, [r4, #16]
 800b574:	4642      	mov	r2, r8
 800b576:	4631      	mov	r1, r6
 800b578:	4628      	mov	r0, r5
 800b57a:	47b8      	blx	r7
 800b57c:	3001      	adds	r0, #1
 800b57e:	d12b      	bne.n	800b5d8 <_printf_float+0x240>
 800b580:	e767      	b.n	800b452 <_printf_float+0xba>
 800b582:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b586:	f240 80dc 	bls.w	800b742 <_printf_float+0x3aa>
 800b58a:	2200      	movs	r2, #0
 800b58c:	2300      	movs	r3, #0
 800b58e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b592:	f7f5 fa99 	bl	8000ac8 <__aeabi_dcmpeq>
 800b596:	2800      	cmp	r0, #0
 800b598:	d033      	beq.n	800b602 <_printf_float+0x26a>
 800b59a:	2301      	movs	r3, #1
 800b59c:	4a41      	ldr	r2, [pc, #260]	; (800b6a4 <_printf_float+0x30c>)
 800b59e:	4631      	mov	r1, r6
 800b5a0:	4628      	mov	r0, r5
 800b5a2:	47b8      	blx	r7
 800b5a4:	3001      	adds	r0, #1
 800b5a6:	f43f af54 	beq.w	800b452 <_printf_float+0xba>
 800b5aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	db02      	blt.n	800b5b8 <_printf_float+0x220>
 800b5b2:	6823      	ldr	r3, [r4, #0]
 800b5b4:	07d8      	lsls	r0, r3, #31
 800b5b6:	d50f      	bpl.n	800b5d8 <_printf_float+0x240>
 800b5b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5bc:	4631      	mov	r1, r6
 800b5be:	4628      	mov	r0, r5
 800b5c0:	47b8      	blx	r7
 800b5c2:	3001      	adds	r0, #1
 800b5c4:	f43f af45 	beq.w	800b452 <_printf_float+0xba>
 800b5c8:	f04f 0800 	mov.w	r8, #0
 800b5cc:	f104 091a 	add.w	r9, r4, #26
 800b5d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5d2:	3b01      	subs	r3, #1
 800b5d4:	4543      	cmp	r3, r8
 800b5d6:	dc09      	bgt.n	800b5ec <_printf_float+0x254>
 800b5d8:	6823      	ldr	r3, [r4, #0]
 800b5da:	079b      	lsls	r3, r3, #30
 800b5dc:	f100 8103 	bmi.w	800b7e6 <_printf_float+0x44e>
 800b5e0:	68e0      	ldr	r0, [r4, #12]
 800b5e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5e4:	4298      	cmp	r0, r3
 800b5e6:	bfb8      	it	lt
 800b5e8:	4618      	movlt	r0, r3
 800b5ea:	e734      	b.n	800b456 <_printf_float+0xbe>
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	464a      	mov	r2, r9
 800b5f0:	4631      	mov	r1, r6
 800b5f2:	4628      	mov	r0, r5
 800b5f4:	47b8      	blx	r7
 800b5f6:	3001      	adds	r0, #1
 800b5f8:	f43f af2b 	beq.w	800b452 <_printf_float+0xba>
 800b5fc:	f108 0801 	add.w	r8, r8, #1
 800b600:	e7e6      	b.n	800b5d0 <_printf_float+0x238>
 800b602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b604:	2b00      	cmp	r3, #0
 800b606:	dc2b      	bgt.n	800b660 <_printf_float+0x2c8>
 800b608:	2301      	movs	r3, #1
 800b60a:	4a26      	ldr	r2, [pc, #152]	; (800b6a4 <_printf_float+0x30c>)
 800b60c:	4631      	mov	r1, r6
 800b60e:	4628      	mov	r0, r5
 800b610:	47b8      	blx	r7
 800b612:	3001      	adds	r0, #1
 800b614:	f43f af1d 	beq.w	800b452 <_printf_float+0xba>
 800b618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b61a:	b923      	cbnz	r3, 800b626 <_printf_float+0x28e>
 800b61c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b61e:	b913      	cbnz	r3, 800b626 <_printf_float+0x28e>
 800b620:	6823      	ldr	r3, [r4, #0]
 800b622:	07d9      	lsls	r1, r3, #31
 800b624:	d5d8      	bpl.n	800b5d8 <_printf_float+0x240>
 800b626:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b62a:	4631      	mov	r1, r6
 800b62c:	4628      	mov	r0, r5
 800b62e:	47b8      	blx	r7
 800b630:	3001      	adds	r0, #1
 800b632:	f43f af0e 	beq.w	800b452 <_printf_float+0xba>
 800b636:	f04f 0900 	mov.w	r9, #0
 800b63a:	f104 0a1a 	add.w	sl, r4, #26
 800b63e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b640:	425b      	negs	r3, r3
 800b642:	454b      	cmp	r3, r9
 800b644:	dc01      	bgt.n	800b64a <_printf_float+0x2b2>
 800b646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b648:	e794      	b.n	800b574 <_printf_float+0x1dc>
 800b64a:	2301      	movs	r3, #1
 800b64c:	4652      	mov	r2, sl
 800b64e:	4631      	mov	r1, r6
 800b650:	4628      	mov	r0, r5
 800b652:	47b8      	blx	r7
 800b654:	3001      	adds	r0, #1
 800b656:	f43f aefc 	beq.w	800b452 <_printf_float+0xba>
 800b65a:	f109 0901 	add.w	r9, r9, #1
 800b65e:	e7ee      	b.n	800b63e <_printf_float+0x2a6>
 800b660:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b662:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b664:	429a      	cmp	r2, r3
 800b666:	bfa8      	it	ge
 800b668:	461a      	movge	r2, r3
 800b66a:	2a00      	cmp	r2, #0
 800b66c:	4691      	mov	r9, r2
 800b66e:	dd07      	ble.n	800b680 <_printf_float+0x2e8>
 800b670:	4613      	mov	r3, r2
 800b672:	4631      	mov	r1, r6
 800b674:	4642      	mov	r2, r8
 800b676:	4628      	mov	r0, r5
 800b678:	47b8      	blx	r7
 800b67a:	3001      	adds	r0, #1
 800b67c:	f43f aee9 	beq.w	800b452 <_printf_float+0xba>
 800b680:	f104 031a 	add.w	r3, r4, #26
 800b684:	f04f 0b00 	mov.w	fp, #0
 800b688:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b68c:	9306      	str	r3, [sp, #24]
 800b68e:	e015      	b.n	800b6bc <_printf_float+0x324>
 800b690:	7fefffff 	.word	0x7fefffff
 800b694:	0800d548 	.word	0x0800d548
 800b698:	0800d544 	.word	0x0800d544
 800b69c:	0800d550 	.word	0x0800d550
 800b6a0:	0800d54c 	.word	0x0800d54c
 800b6a4:	0800d554 	.word	0x0800d554
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	9a06      	ldr	r2, [sp, #24]
 800b6ac:	4631      	mov	r1, r6
 800b6ae:	4628      	mov	r0, r5
 800b6b0:	47b8      	blx	r7
 800b6b2:	3001      	adds	r0, #1
 800b6b4:	f43f aecd 	beq.w	800b452 <_printf_float+0xba>
 800b6b8:	f10b 0b01 	add.w	fp, fp, #1
 800b6bc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b6c0:	ebaa 0309 	sub.w	r3, sl, r9
 800b6c4:	455b      	cmp	r3, fp
 800b6c6:	dcef      	bgt.n	800b6a8 <_printf_float+0x310>
 800b6c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	44d0      	add	r8, sl
 800b6d0:	db15      	blt.n	800b6fe <_printf_float+0x366>
 800b6d2:	6823      	ldr	r3, [r4, #0]
 800b6d4:	07da      	lsls	r2, r3, #31
 800b6d6:	d412      	bmi.n	800b6fe <_printf_float+0x366>
 800b6d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6da:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b6dc:	eba3 020a 	sub.w	r2, r3, sl
 800b6e0:	eba3 0a01 	sub.w	sl, r3, r1
 800b6e4:	4592      	cmp	sl, r2
 800b6e6:	bfa8      	it	ge
 800b6e8:	4692      	movge	sl, r2
 800b6ea:	f1ba 0f00 	cmp.w	sl, #0
 800b6ee:	dc0e      	bgt.n	800b70e <_printf_float+0x376>
 800b6f0:	f04f 0800 	mov.w	r8, #0
 800b6f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b6f8:	f104 091a 	add.w	r9, r4, #26
 800b6fc:	e019      	b.n	800b732 <_printf_float+0x39a>
 800b6fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b702:	4631      	mov	r1, r6
 800b704:	4628      	mov	r0, r5
 800b706:	47b8      	blx	r7
 800b708:	3001      	adds	r0, #1
 800b70a:	d1e5      	bne.n	800b6d8 <_printf_float+0x340>
 800b70c:	e6a1      	b.n	800b452 <_printf_float+0xba>
 800b70e:	4653      	mov	r3, sl
 800b710:	4642      	mov	r2, r8
 800b712:	4631      	mov	r1, r6
 800b714:	4628      	mov	r0, r5
 800b716:	47b8      	blx	r7
 800b718:	3001      	adds	r0, #1
 800b71a:	d1e9      	bne.n	800b6f0 <_printf_float+0x358>
 800b71c:	e699      	b.n	800b452 <_printf_float+0xba>
 800b71e:	2301      	movs	r3, #1
 800b720:	464a      	mov	r2, r9
 800b722:	4631      	mov	r1, r6
 800b724:	4628      	mov	r0, r5
 800b726:	47b8      	blx	r7
 800b728:	3001      	adds	r0, #1
 800b72a:	f43f ae92 	beq.w	800b452 <_printf_float+0xba>
 800b72e:	f108 0801 	add.w	r8, r8, #1
 800b732:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b736:	1a9b      	subs	r3, r3, r2
 800b738:	eba3 030a 	sub.w	r3, r3, sl
 800b73c:	4543      	cmp	r3, r8
 800b73e:	dcee      	bgt.n	800b71e <_printf_float+0x386>
 800b740:	e74a      	b.n	800b5d8 <_printf_float+0x240>
 800b742:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b744:	2a01      	cmp	r2, #1
 800b746:	dc01      	bgt.n	800b74c <_printf_float+0x3b4>
 800b748:	07db      	lsls	r3, r3, #31
 800b74a:	d53a      	bpl.n	800b7c2 <_printf_float+0x42a>
 800b74c:	2301      	movs	r3, #1
 800b74e:	4642      	mov	r2, r8
 800b750:	4631      	mov	r1, r6
 800b752:	4628      	mov	r0, r5
 800b754:	47b8      	blx	r7
 800b756:	3001      	adds	r0, #1
 800b758:	f43f ae7b 	beq.w	800b452 <_printf_float+0xba>
 800b75c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b760:	4631      	mov	r1, r6
 800b762:	4628      	mov	r0, r5
 800b764:	47b8      	blx	r7
 800b766:	3001      	adds	r0, #1
 800b768:	f108 0801 	add.w	r8, r8, #1
 800b76c:	f43f ae71 	beq.w	800b452 <_printf_float+0xba>
 800b770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b772:	2200      	movs	r2, #0
 800b774:	f103 3aff 	add.w	sl, r3, #4294967295
 800b778:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b77c:	2300      	movs	r3, #0
 800b77e:	f7f5 f9a3 	bl	8000ac8 <__aeabi_dcmpeq>
 800b782:	b9c8      	cbnz	r0, 800b7b8 <_printf_float+0x420>
 800b784:	4653      	mov	r3, sl
 800b786:	4642      	mov	r2, r8
 800b788:	4631      	mov	r1, r6
 800b78a:	4628      	mov	r0, r5
 800b78c:	47b8      	blx	r7
 800b78e:	3001      	adds	r0, #1
 800b790:	d10e      	bne.n	800b7b0 <_printf_float+0x418>
 800b792:	e65e      	b.n	800b452 <_printf_float+0xba>
 800b794:	2301      	movs	r3, #1
 800b796:	4652      	mov	r2, sl
 800b798:	4631      	mov	r1, r6
 800b79a:	4628      	mov	r0, r5
 800b79c:	47b8      	blx	r7
 800b79e:	3001      	adds	r0, #1
 800b7a0:	f43f ae57 	beq.w	800b452 <_printf_float+0xba>
 800b7a4:	f108 0801 	add.w	r8, r8, #1
 800b7a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7aa:	3b01      	subs	r3, #1
 800b7ac:	4543      	cmp	r3, r8
 800b7ae:	dcf1      	bgt.n	800b794 <_printf_float+0x3fc>
 800b7b0:	464b      	mov	r3, r9
 800b7b2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b7b6:	e6de      	b.n	800b576 <_printf_float+0x1de>
 800b7b8:	f04f 0800 	mov.w	r8, #0
 800b7bc:	f104 0a1a 	add.w	sl, r4, #26
 800b7c0:	e7f2      	b.n	800b7a8 <_printf_float+0x410>
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e7df      	b.n	800b786 <_printf_float+0x3ee>
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	464a      	mov	r2, r9
 800b7ca:	4631      	mov	r1, r6
 800b7cc:	4628      	mov	r0, r5
 800b7ce:	47b8      	blx	r7
 800b7d0:	3001      	adds	r0, #1
 800b7d2:	f43f ae3e 	beq.w	800b452 <_printf_float+0xba>
 800b7d6:	f108 0801 	add.w	r8, r8, #1
 800b7da:	68e3      	ldr	r3, [r4, #12]
 800b7dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b7de:	1a9b      	subs	r3, r3, r2
 800b7e0:	4543      	cmp	r3, r8
 800b7e2:	dcf0      	bgt.n	800b7c6 <_printf_float+0x42e>
 800b7e4:	e6fc      	b.n	800b5e0 <_printf_float+0x248>
 800b7e6:	f04f 0800 	mov.w	r8, #0
 800b7ea:	f104 0919 	add.w	r9, r4, #25
 800b7ee:	e7f4      	b.n	800b7da <_printf_float+0x442>
 800b7f0:	2900      	cmp	r1, #0
 800b7f2:	f43f ae8b 	beq.w	800b50c <_printf_float+0x174>
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b7fc:	ab09      	add	r3, sp, #36	; 0x24
 800b7fe:	9300      	str	r3, [sp, #0]
 800b800:	ec49 8b10 	vmov	d0, r8, r9
 800b804:	6022      	str	r2, [r4, #0]
 800b806:	f8cd a004 	str.w	sl, [sp, #4]
 800b80a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b80e:	4628      	mov	r0, r5
 800b810:	f7ff fd2e 	bl	800b270 <__cvt>
 800b814:	4680      	mov	r8, r0
 800b816:	e648      	b.n	800b4aa <_printf_float+0x112>

0800b818 <_printf_common>:
 800b818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b81c:	4691      	mov	r9, r2
 800b81e:	461f      	mov	r7, r3
 800b820:	688a      	ldr	r2, [r1, #8]
 800b822:	690b      	ldr	r3, [r1, #16]
 800b824:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b828:	4293      	cmp	r3, r2
 800b82a:	bfb8      	it	lt
 800b82c:	4613      	movlt	r3, r2
 800b82e:	f8c9 3000 	str.w	r3, [r9]
 800b832:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b836:	4606      	mov	r6, r0
 800b838:	460c      	mov	r4, r1
 800b83a:	b112      	cbz	r2, 800b842 <_printf_common+0x2a>
 800b83c:	3301      	adds	r3, #1
 800b83e:	f8c9 3000 	str.w	r3, [r9]
 800b842:	6823      	ldr	r3, [r4, #0]
 800b844:	0699      	lsls	r1, r3, #26
 800b846:	bf42      	ittt	mi
 800b848:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b84c:	3302      	addmi	r3, #2
 800b84e:	f8c9 3000 	strmi.w	r3, [r9]
 800b852:	6825      	ldr	r5, [r4, #0]
 800b854:	f015 0506 	ands.w	r5, r5, #6
 800b858:	d107      	bne.n	800b86a <_printf_common+0x52>
 800b85a:	f104 0a19 	add.w	sl, r4, #25
 800b85e:	68e3      	ldr	r3, [r4, #12]
 800b860:	f8d9 2000 	ldr.w	r2, [r9]
 800b864:	1a9b      	subs	r3, r3, r2
 800b866:	42ab      	cmp	r3, r5
 800b868:	dc28      	bgt.n	800b8bc <_printf_common+0xa4>
 800b86a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b86e:	6822      	ldr	r2, [r4, #0]
 800b870:	3300      	adds	r3, #0
 800b872:	bf18      	it	ne
 800b874:	2301      	movne	r3, #1
 800b876:	0692      	lsls	r2, r2, #26
 800b878:	d42d      	bmi.n	800b8d6 <_printf_common+0xbe>
 800b87a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b87e:	4639      	mov	r1, r7
 800b880:	4630      	mov	r0, r6
 800b882:	47c0      	blx	r8
 800b884:	3001      	adds	r0, #1
 800b886:	d020      	beq.n	800b8ca <_printf_common+0xb2>
 800b888:	6823      	ldr	r3, [r4, #0]
 800b88a:	68e5      	ldr	r5, [r4, #12]
 800b88c:	f8d9 2000 	ldr.w	r2, [r9]
 800b890:	f003 0306 	and.w	r3, r3, #6
 800b894:	2b04      	cmp	r3, #4
 800b896:	bf08      	it	eq
 800b898:	1aad      	subeq	r5, r5, r2
 800b89a:	68a3      	ldr	r3, [r4, #8]
 800b89c:	6922      	ldr	r2, [r4, #16]
 800b89e:	bf0c      	ite	eq
 800b8a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b8a4:	2500      	movne	r5, #0
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	bfc4      	itt	gt
 800b8aa:	1a9b      	subgt	r3, r3, r2
 800b8ac:	18ed      	addgt	r5, r5, r3
 800b8ae:	f04f 0900 	mov.w	r9, #0
 800b8b2:	341a      	adds	r4, #26
 800b8b4:	454d      	cmp	r5, r9
 800b8b6:	d11a      	bne.n	800b8ee <_printf_common+0xd6>
 800b8b8:	2000      	movs	r0, #0
 800b8ba:	e008      	b.n	800b8ce <_printf_common+0xb6>
 800b8bc:	2301      	movs	r3, #1
 800b8be:	4652      	mov	r2, sl
 800b8c0:	4639      	mov	r1, r7
 800b8c2:	4630      	mov	r0, r6
 800b8c4:	47c0      	blx	r8
 800b8c6:	3001      	adds	r0, #1
 800b8c8:	d103      	bne.n	800b8d2 <_printf_common+0xba>
 800b8ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8d2:	3501      	adds	r5, #1
 800b8d4:	e7c3      	b.n	800b85e <_printf_common+0x46>
 800b8d6:	18e1      	adds	r1, r4, r3
 800b8d8:	1c5a      	adds	r2, r3, #1
 800b8da:	2030      	movs	r0, #48	; 0x30
 800b8dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b8e0:	4422      	add	r2, r4
 800b8e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b8e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b8ea:	3302      	adds	r3, #2
 800b8ec:	e7c5      	b.n	800b87a <_printf_common+0x62>
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	4622      	mov	r2, r4
 800b8f2:	4639      	mov	r1, r7
 800b8f4:	4630      	mov	r0, r6
 800b8f6:	47c0      	blx	r8
 800b8f8:	3001      	adds	r0, #1
 800b8fa:	d0e6      	beq.n	800b8ca <_printf_common+0xb2>
 800b8fc:	f109 0901 	add.w	r9, r9, #1
 800b900:	e7d8      	b.n	800b8b4 <_printf_common+0x9c>
	...

0800b904 <_printf_i>:
 800b904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b908:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b90c:	460c      	mov	r4, r1
 800b90e:	7e09      	ldrb	r1, [r1, #24]
 800b910:	b085      	sub	sp, #20
 800b912:	296e      	cmp	r1, #110	; 0x6e
 800b914:	4617      	mov	r7, r2
 800b916:	4606      	mov	r6, r0
 800b918:	4698      	mov	r8, r3
 800b91a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b91c:	f000 80b3 	beq.w	800ba86 <_printf_i+0x182>
 800b920:	d822      	bhi.n	800b968 <_printf_i+0x64>
 800b922:	2963      	cmp	r1, #99	; 0x63
 800b924:	d036      	beq.n	800b994 <_printf_i+0x90>
 800b926:	d80a      	bhi.n	800b93e <_printf_i+0x3a>
 800b928:	2900      	cmp	r1, #0
 800b92a:	f000 80b9 	beq.w	800baa0 <_printf_i+0x19c>
 800b92e:	2958      	cmp	r1, #88	; 0x58
 800b930:	f000 8083 	beq.w	800ba3a <_printf_i+0x136>
 800b934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b938:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b93c:	e032      	b.n	800b9a4 <_printf_i+0xa0>
 800b93e:	2964      	cmp	r1, #100	; 0x64
 800b940:	d001      	beq.n	800b946 <_printf_i+0x42>
 800b942:	2969      	cmp	r1, #105	; 0x69
 800b944:	d1f6      	bne.n	800b934 <_printf_i+0x30>
 800b946:	6820      	ldr	r0, [r4, #0]
 800b948:	6813      	ldr	r3, [r2, #0]
 800b94a:	0605      	lsls	r5, r0, #24
 800b94c:	f103 0104 	add.w	r1, r3, #4
 800b950:	d52a      	bpl.n	800b9a8 <_printf_i+0xa4>
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	6011      	str	r1, [r2, #0]
 800b956:	2b00      	cmp	r3, #0
 800b958:	da03      	bge.n	800b962 <_printf_i+0x5e>
 800b95a:	222d      	movs	r2, #45	; 0x2d
 800b95c:	425b      	negs	r3, r3
 800b95e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b962:	486f      	ldr	r0, [pc, #444]	; (800bb20 <_printf_i+0x21c>)
 800b964:	220a      	movs	r2, #10
 800b966:	e039      	b.n	800b9dc <_printf_i+0xd8>
 800b968:	2973      	cmp	r1, #115	; 0x73
 800b96a:	f000 809d 	beq.w	800baa8 <_printf_i+0x1a4>
 800b96e:	d808      	bhi.n	800b982 <_printf_i+0x7e>
 800b970:	296f      	cmp	r1, #111	; 0x6f
 800b972:	d020      	beq.n	800b9b6 <_printf_i+0xb2>
 800b974:	2970      	cmp	r1, #112	; 0x70
 800b976:	d1dd      	bne.n	800b934 <_printf_i+0x30>
 800b978:	6823      	ldr	r3, [r4, #0]
 800b97a:	f043 0320 	orr.w	r3, r3, #32
 800b97e:	6023      	str	r3, [r4, #0]
 800b980:	e003      	b.n	800b98a <_printf_i+0x86>
 800b982:	2975      	cmp	r1, #117	; 0x75
 800b984:	d017      	beq.n	800b9b6 <_printf_i+0xb2>
 800b986:	2978      	cmp	r1, #120	; 0x78
 800b988:	d1d4      	bne.n	800b934 <_printf_i+0x30>
 800b98a:	2378      	movs	r3, #120	; 0x78
 800b98c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b990:	4864      	ldr	r0, [pc, #400]	; (800bb24 <_printf_i+0x220>)
 800b992:	e055      	b.n	800ba40 <_printf_i+0x13c>
 800b994:	6813      	ldr	r3, [r2, #0]
 800b996:	1d19      	adds	r1, r3, #4
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	6011      	str	r1, [r2, #0]
 800b99c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	e08c      	b.n	800bac2 <_printf_i+0x1be>
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	6011      	str	r1, [r2, #0]
 800b9ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b9b0:	bf18      	it	ne
 800b9b2:	b21b      	sxthne	r3, r3
 800b9b4:	e7cf      	b.n	800b956 <_printf_i+0x52>
 800b9b6:	6813      	ldr	r3, [r2, #0]
 800b9b8:	6825      	ldr	r5, [r4, #0]
 800b9ba:	1d18      	adds	r0, r3, #4
 800b9bc:	6010      	str	r0, [r2, #0]
 800b9be:	0628      	lsls	r0, r5, #24
 800b9c0:	d501      	bpl.n	800b9c6 <_printf_i+0xc2>
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	e002      	b.n	800b9cc <_printf_i+0xc8>
 800b9c6:	0668      	lsls	r0, r5, #25
 800b9c8:	d5fb      	bpl.n	800b9c2 <_printf_i+0xbe>
 800b9ca:	881b      	ldrh	r3, [r3, #0]
 800b9cc:	4854      	ldr	r0, [pc, #336]	; (800bb20 <_printf_i+0x21c>)
 800b9ce:	296f      	cmp	r1, #111	; 0x6f
 800b9d0:	bf14      	ite	ne
 800b9d2:	220a      	movne	r2, #10
 800b9d4:	2208      	moveq	r2, #8
 800b9d6:	2100      	movs	r1, #0
 800b9d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b9dc:	6865      	ldr	r5, [r4, #4]
 800b9de:	60a5      	str	r5, [r4, #8]
 800b9e0:	2d00      	cmp	r5, #0
 800b9e2:	f2c0 8095 	blt.w	800bb10 <_printf_i+0x20c>
 800b9e6:	6821      	ldr	r1, [r4, #0]
 800b9e8:	f021 0104 	bic.w	r1, r1, #4
 800b9ec:	6021      	str	r1, [r4, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d13d      	bne.n	800ba6e <_printf_i+0x16a>
 800b9f2:	2d00      	cmp	r5, #0
 800b9f4:	f040 808e 	bne.w	800bb14 <_printf_i+0x210>
 800b9f8:	4665      	mov	r5, ip
 800b9fa:	2a08      	cmp	r2, #8
 800b9fc:	d10b      	bne.n	800ba16 <_printf_i+0x112>
 800b9fe:	6823      	ldr	r3, [r4, #0]
 800ba00:	07db      	lsls	r3, r3, #31
 800ba02:	d508      	bpl.n	800ba16 <_printf_i+0x112>
 800ba04:	6923      	ldr	r3, [r4, #16]
 800ba06:	6862      	ldr	r2, [r4, #4]
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	bfde      	ittt	le
 800ba0c:	2330      	movle	r3, #48	; 0x30
 800ba0e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ba12:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ba16:	ebac 0305 	sub.w	r3, ip, r5
 800ba1a:	6123      	str	r3, [r4, #16]
 800ba1c:	f8cd 8000 	str.w	r8, [sp]
 800ba20:	463b      	mov	r3, r7
 800ba22:	aa03      	add	r2, sp, #12
 800ba24:	4621      	mov	r1, r4
 800ba26:	4630      	mov	r0, r6
 800ba28:	f7ff fef6 	bl	800b818 <_printf_common>
 800ba2c:	3001      	adds	r0, #1
 800ba2e:	d14d      	bne.n	800bacc <_printf_i+0x1c8>
 800ba30:	f04f 30ff 	mov.w	r0, #4294967295
 800ba34:	b005      	add	sp, #20
 800ba36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba3a:	4839      	ldr	r0, [pc, #228]	; (800bb20 <_printf_i+0x21c>)
 800ba3c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ba40:	6813      	ldr	r3, [r2, #0]
 800ba42:	6821      	ldr	r1, [r4, #0]
 800ba44:	1d1d      	adds	r5, r3, #4
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	6015      	str	r5, [r2, #0]
 800ba4a:	060a      	lsls	r2, r1, #24
 800ba4c:	d50b      	bpl.n	800ba66 <_printf_i+0x162>
 800ba4e:	07ca      	lsls	r2, r1, #31
 800ba50:	bf44      	itt	mi
 800ba52:	f041 0120 	orrmi.w	r1, r1, #32
 800ba56:	6021      	strmi	r1, [r4, #0]
 800ba58:	b91b      	cbnz	r3, 800ba62 <_printf_i+0x15e>
 800ba5a:	6822      	ldr	r2, [r4, #0]
 800ba5c:	f022 0220 	bic.w	r2, r2, #32
 800ba60:	6022      	str	r2, [r4, #0]
 800ba62:	2210      	movs	r2, #16
 800ba64:	e7b7      	b.n	800b9d6 <_printf_i+0xd2>
 800ba66:	064d      	lsls	r5, r1, #25
 800ba68:	bf48      	it	mi
 800ba6a:	b29b      	uxthmi	r3, r3
 800ba6c:	e7ef      	b.n	800ba4e <_printf_i+0x14a>
 800ba6e:	4665      	mov	r5, ip
 800ba70:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba74:	fb02 3311 	mls	r3, r2, r1, r3
 800ba78:	5cc3      	ldrb	r3, [r0, r3]
 800ba7a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ba7e:	460b      	mov	r3, r1
 800ba80:	2900      	cmp	r1, #0
 800ba82:	d1f5      	bne.n	800ba70 <_printf_i+0x16c>
 800ba84:	e7b9      	b.n	800b9fa <_printf_i+0xf6>
 800ba86:	6813      	ldr	r3, [r2, #0]
 800ba88:	6825      	ldr	r5, [r4, #0]
 800ba8a:	6961      	ldr	r1, [r4, #20]
 800ba8c:	1d18      	adds	r0, r3, #4
 800ba8e:	6010      	str	r0, [r2, #0]
 800ba90:	0628      	lsls	r0, r5, #24
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	d501      	bpl.n	800ba9a <_printf_i+0x196>
 800ba96:	6019      	str	r1, [r3, #0]
 800ba98:	e002      	b.n	800baa0 <_printf_i+0x19c>
 800ba9a:	066a      	lsls	r2, r5, #25
 800ba9c:	d5fb      	bpl.n	800ba96 <_printf_i+0x192>
 800ba9e:	8019      	strh	r1, [r3, #0]
 800baa0:	2300      	movs	r3, #0
 800baa2:	6123      	str	r3, [r4, #16]
 800baa4:	4665      	mov	r5, ip
 800baa6:	e7b9      	b.n	800ba1c <_printf_i+0x118>
 800baa8:	6813      	ldr	r3, [r2, #0]
 800baaa:	1d19      	adds	r1, r3, #4
 800baac:	6011      	str	r1, [r2, #0]
 800baae:	681d      	ldr	r5, [r3, #0]
 800bab0:	6862      	ldr	r2, [r4, #4]
 800bab2:	2100      	movs	r1, #0
 800bab4:	4628      	mov	r0, r5
 800bab6:	f7f4 fb93 	bl	80001e0 <memchr>
 800baba:	b108      	cbz	r0, 800bac0 <_printf_i+0x1bc>
 800babc:	1b40      	subs	r0, r0, r5
 800babe:	6060      	str	r0, [r4, #4]
 800bac0:	6863      	ldr	r3, [r4, #4]
 800bac2:	6123      	str	r3, [r4, #16]
 800bac4:	2300      	movs	r3, #0
 800bac6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800baca:	e7a7      	b.n	800ba1c <_printf_i+0x118>
 800bacc:	6923      	ldr	r3, [r4, #16]
 800bace:	462a      	mov	r2, r5
 800bad0:	4639      	mov	r1, r7
 800bad2:	4630      	mov	r0, r6
 800bad4:	47c0      	blx	r8
 800bad6:	3001      	adds	r0, #1
 800bad8:	d0aa      	beq.n	800ba30 <_printf_i+0x12c>
 800bada:	6823      	ldr	r3, [r4, #0]
 800badc:	079b      	lsls	r3, r3, #30
 800bade:	d413      	bmi.n	800bb08 <_printf_i+0x204>
 800bae0:	68e0      	ldr	r0, [r4, #12]
 800bae2:	9b03      	ldr	r3, [sp, #12]
 800bae4:	4298      	cmp	r0, r3
 800bae6:	bfb8      	it	lt
 800bae8:	4618      	movlt	r0, r3
 800baea:	e7a3      	b.n	800ba34 <_printf_i+0x130>
 800baec:	2301      	movs	r3, #1
 800baee:	464a      	mov	r2, r9
 800baf0:	4639      	mov	r1, r7
 800baf2:	4630      	mov	r0, r6
 800baf4:	47c0      	blx	r8
 800baf6:	3001      	adds	r0, #1
 800baf8:	d09a      	beq.n	800ba30 <_printf_i+0x12c>
 800bafa:	3501      	adds	r5, #1
 800bafc:	68e3      	ldr	r3, [r4, #12]
 800bafe:	9a03      	ldr	r2, [sp, #12]
 800bb00:	1a9b      	subs	r3, r3, r2
 800bb02:	42ab      	cmp	r3, r5
 800bb04:	dcf2      	bgt.n	800baec <_printf_i+0x1e8>
 800bb06:	e7eb      	b.n	800bae0 <_printf_i+0x1dc>
 800bb08:	2500      	movs	r5, #0
 800bb0a:	f104 0919 	add.w	r9, r4, #25
 800bb0e:	e7f5      	b.n	800bafc <_printf_i+0x1f8>
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d1ac      	bne.n	800ba6e <_printf_i+0x16a>
 800bb14:	7803      	ldrb	r3, [r0, #0]
 800bb16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bb1a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb1e:	e76c      	b.n	800b9fa <_printf_i+0xf6>
 800bb20:	0800d556 	.word	0x0800d556
 800bb24:	0800d567 	.word	0x0800d567

0800bb28 <_sbrk_r>:
 800bb28:	b538      	push	{r3, r4, r5, lr}
 800bb2a:	4c06      	ldr	r4, [pc, #24]	; (800bb44 <_sbrk_r+0x1c>)
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	4605      	mov	r5, r0
 800bb30:	4608      	mov	r0, r1
 800bb32:	6023      	str	r3, [r4, #0]
 800bb34:	f7f7 fc3e 	bl	80033b4 <_sbrk>
 800bb38:	1c43      	adds	r3, r0, #1
 800bb3a:	d102      	bne.n	800bb42 <_sbrk_r+0x1a>
 800bb3c:	6823      	ldr	r3, [r4, #0]
 800bb3e:	b103      	cbz	r3, 800bb42 <_sbrk_r+0x1a>
 800bb40:	602b      	str	r3, [r5, #0]
 800bb42:	bd38      	pop	{r3, r4, r5, pc}
 800bb44:	20001f90 	.word	0x20001f90

0800bb48 <siprintf>:
 800bb48:	b40e      	push	{r1, r2, r3}
 800bb4a:	b500      	push	{lr}
 800bb4c:	b09c      	sub	sp, #112	; 0x70
 800bb4e:	ab1d      	add	r3, sp, #116	; 0x74
 800bb50:	9002      	str	r0, [sp, #8]
 800bb52:	9006      	str	r0, [sp, #24]
 800bb54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bb58:	4809      	ldr	r0, [pc, #36]	; (800bb80 <siprintf+0x38>)
 800bb5a:	9107      	str	r1, [sp, #28]
 800bb5c:	9104      	str	r1, [sp, #16]
 800bb5e:	4909      	ldr	r1, [pc, #36]	; (800bb84 <siprintf+0x3c>)
 800bb60:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb64:	9105      	str	r1, [sp, #20]
 800bb66:	6800      	ldr	r0, [r0, #0]
 800bb68:	9301      	str	r3, [sp, #4]
 800bb6a:	a902      	add	r1, sp, #8
 800bb6c:	f001 f9ae 	bl	800cecc <_svfiprintf_r>
 800bb70:	9b02      	ldr	r3, [sp, #8]
 800bb72:	2200      	movs	r2, #0
 800bb74:	701a      	strb	r2, [r3, #0]
 800bb76:	b01c      	add	sp, #112	; 0x70
 800bb78:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb7c:	b003      	add	sp, #12
 800bb7e:	4770      	bx	lr
 800bb80:	20000188 	.word	0x20000188
 800bb84:	ffff0208 	.word	0xffff0208

0800bb88 <quorem>:
 800bb88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb8c:	6903      	ldr	r3, [r0, #16]
 800bb8e:	690c      	ldr	r4, [r1, #16]
 800bb90:	42a3      	cmp	r3, r4
 800bb92:	4680      	mov	r8, r0
 800bb94:	f2c0 8082 	blt.w	800bc9c <quorem+0x114>
 800bb98:	3c01      	subs	r4, #1
 800bb9a:	f101 0714 	add.w	r7, r1, #20
 800bb9e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800bba2:	f100 0614 	add.w	r6, r0, #20
 800bba6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800bbaa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800bbae:	eb06 030c 	add.w	r3, r6, ip
 800bbb2:	3501      	adds	r5, #1
 800bbb4:	eb07 090c 	add.w	r9, r7, ip
 800bbb8:	9301      	str	r3, [sp, #4]
 800bbba:	fbb0 f5f5 	udiv	r5, r0, r5
 800bbbe:	b395      	cbz	r5, 800bc26 <quorem+0x9e>
 800bbc0:	f04f 0a00 	mov.w	sl, #0
 800bbc4:	4638      	mov	r0, r7
 800bbc6:	46b6      	mov	lr, r6
 800bbc8:	46d3      	mov	fp, sl
 800bbca:	f850 2b04 	ldr.w	r2, [r0], #4
 800bbce:	b293      	uxth	r3, r2
 800bbd0:	fb05 a303 	mla	r3, r5, r3, sl
 800bbd4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bbd8:	b29b      	uxth	r3, r3
 800bbda:	ebab 0303 	sub.w	r3, fp, r3
 800bbde:	0c12      	lsrs	r2, r2, #16
 800bbe0:	f8de b000 	ldr.w	fp, [lr]
 800bbe4:	fb05 a202 	mla	r2, r5, r2, sl
 800bbe8:	fa13 f38b 	uxtah	r3, r3, fp
 800bbec:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800bbf0:	fa1f fb82 	uxth.w	fp, r2
 800bbf4:	f8de 2000 	ldr.w	r2, [lr]
 800bbf8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800bbfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc06:	4581      	cmp	r9, r0
 800bc08:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800bc0c:	f84e 3b04 	str.w	r3, [lr], #4
 800bc10:	d2db      	bcs.n	800bbca <quorem+0x42>
 800bc12:	f856 300c 	ldr.w	r3, [r6, ip]
 800bc16:	b933      	cbnz	r3, 800bc26 <quorem+0x9e>
 800bc18:	9b01      	ldr	r3, [sp, #4]
 800bc1a:	3b04      	subs	r3, #4
 800bc1c:	429e      	cmp	r6, r3
 800bc1e:	461a      	mov	r2, r3
 800bc20:	d330      	bcc.n	800bc84 <quorem+0xfc>
 800bc22:	f8c8 4010 	str.w	r4, [r8, #16]
 800bc26:	4640      	mov	r0, r8
 800bc28:	f001 f822 	bl	800cc70 <__mcmp>
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	db25      	blt.n	800bc7c <quorem+0xf4>
 800bc30:	3501      	adds	r5, #1
 800bc32:	4630      	mov	r0, r6
 800bc34:	f04f 0c00 	mov.w	ip, #0
 800bc38:	f857 2b04 	ldr.w	r2, [r7], #4
 800bc3c:	f8d0 e000 	ldr.w	lr, [r0]
 800bc40:	b293      	uxth	r3, r2
 800bc42:	ebac 0303 	sub.w	r3, ip, r3
 800bc46:	0c12      	lsrs	r2, r2, #16
 800bc48:	fa13 f38e 	uxtah	r3, r3, lr
 800bc4c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bc50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc5a:	45b9      	cmp	r9, r7
 800bc5c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bc60:	f840 3b04 	str.w	r3, [r0], #4
 800bc64:	d2e8      	bcs.n	800bc38 <quorem+0xb0>
 800bc66:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800bc6a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800bc6e:	b92a      	cbnz	r2, 800bc7c <quorem+0xf4>
 800bc70:	3b04      	subs	r3, #4
 800bc72:	429e      	cmp	r6, r3
 800bc74:	461a      	mov	r2, r3
 800bc76:	d30b      	bcc.n	800bc90 <quorem+0x108>
 800bc78:	f8c8 4010 	str.w	r4, [r8, #16]
 800bc7c:	4628      	mov	r0, r5
 800bc7e:	b003      	add	sp, #12
 800bc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc84:	6812      	ldr	r2, [r2, #0]
 800bc86:	3b04      	subs	r3, #4
 800bc88:	2a00      	cmp	r2, #0
 800bc8a:	d1ca      	bne.n	800bc22 <quorem+0x9a>
 800bc8c:	3c01      	subs	r4, #1
 800bc8e:	e7c5      	b.n	800bc1c <quorem+0x94>
 800bc90:	6812      	ldr	r2, [r2, #0]
 800bc92:	3b04      	subs	r3, #4
 800bc94:	2a00      	cmp	r2, #0
 800bc96:	d1ef      	bne.n	800bc78 <quorem+0xf0>
 800bc98:	3c01      	subs	r4, #1
 800bc9a:	e7ea      	b.n	800bc72 <quorem+0xea>
 800bc9c:	2000      	movs	r0, #0
 800bc9e:	e7ee      	b.n	800bc7e <quorem+0xf6>

0800bca0 <_dtoa_r>:
 800bca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca4:	ec57 6b10 	vmov	r6, r7, d0
 800bca8:	b097      	sub	sp, #92	; 0x5c
 800bcaa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bcac:	9106      	str	r1, [sp, #24]
 800bcae:	4604      	mov	r4, r0
 800bcb0:	920b      	str	r2, [sp, #44]	; 0x2c
 800bcb2:	9312      	str	r3, [sp, #72]	; 0x48
 800bcb4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bcb8:	e9cd 6700 	strd	r6, r7, [sp]
 800bcbc:	b93d      	cbnz	r5, 800bcce <_dtoa_r+0x2e>
 800bcbe:	2010      	movs	r0, #16
 800bcc0:	f7ff fa16 	bl	800b0f0 <malloc>
 800bcc4:	6260      	str	r0, [r4, #36]	; 0x24
 800bcc6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bcca:	6005      	str	r5, [r0, #0]
 800bccc:	60c5      	str	r5, [r0, #12]
 800bcce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcd0:	6819      	ldr	r1, [r3, #0]
 800bcd2:	b151      	cbz	r1, 800bcea <_dtoa_r+0x4a>
 800bcd4:	685a      	ldr	r2, [r3, #4]
 800bcd6:	604a      	str	r2, [r1, #4]
 800bcd8:	2301      	movs	r3, #1
 800bcda:	4093      	lsls	r3, r2
 800bcdc:	608b      	str	r3, [r1, #8]
 800bcde:	4620      	mov	r0, r4
 800bce0:	f000 fde5 	bl	800c8ae <_Bfree>
 800bce4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bce6:	2200      	movs	r2, #0
 800bce8:	601a      	str	r2, [r3, #0]
 800bcea:	1e3b      	subs	r3, r7, #0
 800bcec:	bfbb      	ittet	lt
 800bcee:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bcf2:	9301      	strlt	r3, [sp, #4]
 800bcf4:	2300      	movge	r3, #0
 800bcf6:	2201      	movlt	r2, #1
 800bcf8:	bfac      	ite	ge
 800bcfa:	f8c8 3000 	strge.w	r3, [r8]
 800bcfe:	f8c8 2000 	strlt.w	r2, [r8]
 800bd02:	4baf      	ldr	r3, [pc, #700]	; (800bfc0 <_dtoa_r+0x320>)
 800bd04:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bd08:	ea33 0308 	bics.w	r3, r3, r8
 800bd0c:	d114      	bne.n	800bd38 <_dtoa_r+0x98>
 800bd0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bd10:	f242 730f 	movw	r3, #9999	; 0x270f
 800bd14:	6013      	str	r3, [r2, #0]
 800bd16:	9b00      	ldr	r3, [sp, #0]
 800bd18:	b923      	cbnz	r3, 800bd24 <_dtoa_r+0x84>
 800bd1a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800bd1e:	2800      	cmp	r0, #0
 800bd20:	f000 8542 	beq.w	800c7a8 <_dtoa_r+0xb08>
 800bd24:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd26:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800bfd4 <_dtoa_r+0x334>
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	f000 8544 	beq.w	800c7b8 <_dtoa_r+0xb18>
 800bd30:	f10b 0303 	add.w	r3, fp, #3
 800bd34:	f000 bd3e 	b.w	800c7b4 <_dtoa_r+0xb14>
 800bd38:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	2300      	movs	r3, #0
 800bd40:	4630      	mov	r0, r6
 800bd42:	4639      	mov	r1, r7
 800bd44:	f7f4 fec0 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd48:	4681      	mov	r9, r0
 800bd4a:	b168      	cbz	r0, 800bd68 <_dtoa_r+0xc8>
 800bd4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bd4e:	2301      	movs	r3, #1
 800bd50:	6013      	str	r3, [r2, #0]
 800bd52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	f000 8524 	beq.w	800c7a2 <_dtoa_r+0xb02>
 800bd5a:	4b9a      	ldr	r3, [pc, #616]	; (800bfc4 <_dtoa_r+0x324>)
 800bd5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bd5e:	f103 3bff 	add.w	fp, r3, #4294967295
 800bd62:	6013      	str	r3, [r2, #0]
 800bd64:	f000 bd28 	b.w	800c7b8 <_dtoa_r+0xb18>
 800bd68:	aa14      	add	r2, sp, #80	; 0x50
 800bd6a:	a915      	add	r1, sp, #84	; 0x54
 800bd6c:	ec47 6b10 	vmov	d0, r6, r7
 800bd70:	4620      	mov	r0, r4
 800bd72:	f000 fff4 	bl	800cd5e <__d2b>
 800bd76:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800bd7a:	9004      	str	r0, [sp, #16]
 800bd7c:	2d00      	cmp	r5, #0
 800bd7e:	d07c      	beq.n	800be7a <_dtoa_r+0x1da>
 800bd80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bd84:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800bd88:	46b2      	mov	sl, r6
 800bd8a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800bd8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bd92:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800bd96:	2200      	movs	r2, #0
 800bd98:	4b8b      	ldr	r3, [pc, #556]	; (800bfc8 <_dtoa_r+0x328>)
 800bd9a:	4650      	mov	r0, sl
 800bd9c:	4659      	mov	r1, fp
 800bd9e:	f7f4 fa73 	bl	8000288 <__aeabi_dsub>
 800bda2:	a381      	add	r3, pc, #516	; (adr r3, 800bfa8 <_dtoa_r+0x308>)
 800bda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda8:	f7f4 fc26 	bl	80005f8 <__aeabi_dmul>
 800bdac:	a380      	add	r3, pc, #512	; (adr r3, 800bfb0 <_dtoa_r+0x310>)
 800bdae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb2:	f7f4 fa6b 	bl	800028c <__adddf3>
 800bdb6:	4606      	mov	r6, r0
 800bdb8:	4628      	mov	r0, r5
 800bdba:	460f      	mov	r7, r1
 800bdbc:	f7f4 fbb2 	bl	8000524 <__aeabi_i2d>
 800bdc0:	a37d      	add	r3, pc, #500	; (adr r3, 800bfb8 <_dtoa_r+0x318>)
 800bdc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc6:	f7f4 fc17 	bl	80005f8 <__aeabi_dmul>
 800bdca:	4602      	mov	r2, r0
 800bdcc:	460b      	mov	r3, r1
 800bdce:	4630      	mov	r0, r6
 800bdd0:	4639      	mov	r1, r7
 800bdd2:	f7f4 fa5b 	bl	800028c <__adddf3>
 800bdd6:	4606      	mov	r6, r0
 800bdd8:	460f      	mov	r7, r1
 800bdda:	f7f4 febd 	bl	8000b58 <__aeabi_d2iz>
 800bdde:	2200      	movs	r2, #0
 800bde0:	4682      	mov	sl, r0
 800bde2:	2300      	movs	r3, #0
 800bde4:	4630      	mov	r0, r6
 800bde6:	4639      	mov	r1, r7
 800bde8:	f7f4 fe78 	bl	8000adc <__aeabi_dcmplt>
 800bdec:	b148      	cbz	r0, 800be02 <_dtoa_r+0x162>
 800bdee:	4650      	mov	r0, sl
 800bdf0:	f7f4 fb98 	bl	8000524 <__aeabi_i2d>
 800bdf4:	4632      	mov	r2, r6
 800bdf6:	463b      	mov	r3, r7
 800bdf8:	f7f4 fe66 	bl	8000ac8 <__aeabi_dcmpeq>
 800bdfc:	b908      	cbnz	r0, 800be02 <_dtoa_r+0x162>
 800bdfe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be02:	f1ba 0f16 	cmp.w	sl, #22
 800be06:	d859      	bhi.n	800bebc <_dtoa_r+0x21c>
 800be08:	4970      	ldr	r1, [pc, #448]	; (800bfcc <_dtoa_r+0x32c>)
 800be0a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800be0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be12:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be16:	f7f4 fe7f 	bl	8000b18 <__aeabi_dcmpgt>
 800be1a:	2800      	cmp	r0, #0
 800be1c:	d050      	beq.n	800bec0 <_dtoa_r+0x220>
 800be1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be22:	2300      	movs	r3, #0
 800be24:	930f      	str	r3, [sp, #60]	; 0x3c
 800be26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800be28:	1b5d      	subs	r5, r3, r5
 800be2a:	f1b5 0801 	subs.w	r8, r5, #1
 800be2e:	bf49      	itett	mi
 800be30:	f1c5 0301 	rsbmi	r3, r5, #1
 800be34:	2300      	movpl	r3, #0
 800be36:	9305      	strmi	r3, [sp, #20]
 800be38:	f04f 0800 	movmi.w	r8, #0
 800be3c:	bf58      	it	pl
 800be3e:	9305      	strpl	r3, [sp, #20]
 800be40:	f1ba 0f00 	cmp.w	sl, #0
 800be44:	db3e      	blt.n	800bec4 <_dtoa_r+0x224>
 800be46:	2300      	movs	r3, #0
 800be48:	44d0      	add	r8, sl
 800be4a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800be4e:	9307      	str	r3, [sp, #28]
 800be50:	9b06      	ldr	r3, [sp, #24]
 800be52:	2b09      	cmp	r3, #9
 800be54:	f200 8090 	bhi.w	800bf78 <_dtoa_r+0x2d8>
 800be58:	2b05      	cmp	r3, #5
 800be5a:	bfc4      	itt	gt
 800be5c:	3b04      	subgt	r3, #4
 800be5e:	9306      	strgt	r3, [sp, #24]
 800be60:	9b06      	ldr	r3, [sp, #24]
 800be62:	f1a3 0302 	sub.w	r3, r3, #2
 800be66:	bfcc      	ite	gt
 800be68:	2500      	movgt	r5, #0
 800be6a:	2501      	movle	r5, #1
 800be6c:	2b03      	cmp	r3, #3
 800be6e:	f200 808f 	bhi.w	800bf90 <_dtoa_r+0x2f0>
 800be72:	e8df f003 	tbb	[pc, r3]
 800be76:	7f7d      	.short	0x7f7d
 800be78:	7131      	.short	0x7131
 800be7a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800be7e:	441d      	add	r5, r3
 800be80:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800be84:	2820      	cmp	r0, #32
 800be86:	dd13      	ble.n	800beb0 <_dtoa_r+0x210>
 800be88:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800be8c:	9b00      	ldr	r3, [sp, #0]
 800be8e:	fa08 f800 	lsl.w	r8, r8, r0
 800be92:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800be96:	fa23 f000 	lsr.w	r0, r3, r0
 800be9a:	ea48 0000 	orr.w	r0, r8, r0
 800be9e:	f7f4 fb31 	bl	8000504 <__aeabi_ui2d>
 800bea2:	2301      	movs	r3, #1
 800bea4:	4682      	mov	sl, r0
 800bea6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800beaa:	3d01      	subs	r5, #1
 800beac:	9313      	str	r3, [sp, #76]	; 0x4c
 800beae:	e772      	b.n	800bd96 <_dtoa_r+0xf6>
 800beb0:	9b00      	ldr	r3, [sp, #0]
 800beb2:	f1c0 0020 	rsb	r0, r0, #32
 800beb6:	fa03 f000 	lsl.w	r0, r3, r0
 800beba:	e7f0      	b.n	800be9e <_dtoa_r+0x1fe>
 800bebc:	2301      	movs	r3, #1
 800bebe:	e7b1      	b.n	800be24 <_dtoa_r+0x184>
 800bec0:	900f      	str	r0, [sp, #60]	; 0x3c
 800bec2:	e7b0      	b.n	800be26 <_dtoa_r+0x186>
 800bec4:	9b05      	ldr	r3, [sp, #20]
 800bec6:	eba3 030a 	sub.w	r3, r3, sl
 800beca:	9305      	str	r3, [sp, #20]
 800becc:	f1ca 0300 	rsb	r3, sl, #0
 800bed0:	9307      	str	r3, [sp, #28]
 800bed2:	2300      	movs	r3, #0
 800bed4:	930e      	str	r3, [sp, #56]	; 0x38
 800bed6:	e7bb      	b.n	800be50 <_dtoa_r+0x1b0>
 800bed8:	2301      	movs	r3, #1
 800beda:	930a      	str	r3, [sp, #40]	; 0x28
 800bedc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bede:	2b00      	cmp	r3, #0
 800bee0:	dd59      	ble.n	800bf96 <_dtoa_r+0x2f6>
 800bee2:	9302      	str	r3, [sp, #8]
 800bee4:	4699      	mov	r9, r3
 800bee6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bee8:	2200      	movs	r2, #0
 800beea:	6072      	str	r2, [r6, #4]
 800beec:	2204      	movs	r2, #4
 800beee:	f102 0014 	add.w	r0, r2, #20
 800bef2:	4298      	cmp	r0, r3
 800bef4:	6871      	ldr	r1, [r6, #4]
 800bef6:	d953      	bls.n	800bfa0 <_dtoa_r+0x300>
 800bef8:	4620      	mov	r0, r4
 800befa:	f000 fca4 	bl	800c846 <_Balloc>
 800befe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf00:	6030      	str	r0, [r6, #0]
 800bf02:	f1b9 0f0e 	cmp.w	r9, #14
 800bf06:	f8d3 b000 	ldr.w	fp, [r3]
 800bf0a:	f200 80e6 	bhi.w	800c0da <_dtoa_r+0x43a>
 800bf0e:	2d00      	cmp	r5, #0
 800bf10:	f000 80e3 	beq.w	800c0da <_dtoa_r+0x43a>
 800bf14:	ed9d 7b00 	vldr	d7, [sp]
 800bf18:	f1ba 0f00 	cmp.w	sl, #0
 800bf1c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800bf20:	dd74      	ble.n	800c00c <_dtoa_r+0x36c>
 800bf22:	4a2a      	ldr	r2, [pc, #168]	; (800bfcc <_dtoa_r+0x32c>)
 800bf24:	f00a 030f 	and.w	r3, sl, #15
 800bf28:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bf2c:	ed93 7b00 	vldr	d7, [r3]
 800bf30:	ea4f 162a 	mov.w	r6, sl, asr #4
 800bf34:	06f0      	lsls	r0, r6, #27
 800bf36:	ed8d 7b08 	vstr	d7, [sp, #32]
 800bf3a:	d565      	bpl.n	800c008 <_dtoa_r+0x368>
 800bf3c:	4b24      	ldr	r3, [pc, #144]	; (800bfd0 <_dtoa_r+0x330>)
 800bf3e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bf42:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bf46:	f7f4 fc81 	bl	800084c <__aeabi_ddiv>
 800bf4a:	e9cd 0100 	strd	r0, r1, [sp]
 800bf4e:	f006 060f 	and.w	r6, r6, #15
 800bf52:	2503      	movs	r5, #3
 800bf54:	4f1e      	ldr	r7, [pc, #120]	; (800bfd0 <_dtoa_r+0x330>)
 800bf56:	e04c      	b.n	800bff2 <_dtoa_r+0x352>
 800bf58:	2301      	movs	r3, #1
 800bf5a:	930a      	str	r3, [sp, #40]	; 0x28
 800bf5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf5e:	4453      	add	r3, sl
 800bf60:	f103 0901 	add.w	r9, r3, #1
 800bf64:	9302      	str	r3, [sp, #8]
 800bf66:	464b      	mov	r3, r9
 800bf68:	2b01      	cmp	r3, #1
 800bf6a:	bfb8      	it	lt
 800bf6c:	2301      	movlt	r3, #1
 800bf6e:	e7ba      	b.n	800bee6 <_dtoa_r+0x246>
 800bf70:	2300      	movs	r3, #0
 800bf72:	e7b2      	b.n	800beda <_dtoa_r+0x23a>
 800bf74:	2300      	movs	r3, #0
 800bf76:	e7f0      	b.n	800bf5a <_dtoa_r+0x2ba>
 800bf78:	2501      	movs	r5, #1
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	9306      	str	r3, [sp, #24]
 800bf7e:	950a      	str	r5, [sp, #40]	; 0x28
 800bf80:	f04f 33ff 	mov.w	r3, #4294967295
 800bf84:	9302      	str	r3, [sp, #8]
 800bf86:	4699      	mov	r9, r3
 800bf88:	2200      	movs	r2, #0
 800bf8a:	2312      	movs	r3, #18
 800bf8c:	920b      	str	r2, [sp, #44]	; 0x2c
 800bf8e:	e7aa      	b.n	800bee6 <_dtoa_r+0x246>
 800bf90:	2301      	movs	r3, #1
 800bf92:	930a      	str	r3, [sp, #40]	; 0x28
 800bf94:	e7f4      	b.n	800bf80 <_dtoa_r+0x2e0>
 800bf96:	2301      	movs	r3, #1
 800bf98:	9302      	str	r3, [sp, #8]
 800bf9a:	4699      	mov	r9, r3
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	e7f5      	b.n	800bf8c <_dtoa_r+0x2ec>
 800bfa0:	3101      	adds	r1, #1
 800bfa2:	6071      	str	r1, [r6, #4]
 800bfa4:	0052      	lsls	r2, r2, #1
 800bfa6:	e7a2      	b.n	800beee <_dtoa_r+0x24e>
 800bfa8:	636f4361 	.word	0x636f4361
 800bfac:	3fd287a7 	.word	0x3fd287a7
 800bfb0:	8b60c8b3 	.word	0x8b60c8b3
 800bfb4:	3fc68a28 	.word	0x3fc68a28
 800bfb8:	509f79fb 	.word	0x509f79fb
 800bfbc:	3fd34413 	.word	0x3fd34413
 800bfc0:	7ff00000 	.word	0x7ff00000
 800bfc4:	0800d555 	.word	0x0800d555
 800bfc8:	3ff80000 	.word	0x3ff80000
 800bfcc:	0800d5b0 	.word	0x0800d5b0
 800bfd0:	0800d588 	.word	0x0800d588
 800bfd4:	0800d581 	.word	0x0800d581
 800bfd8:	07f1      	lsls	r1, r6, #31
 800bfda:	d508      	bpl.n	800bfee <_dtoa_r+0x34e>
 800bfdc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bfe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfe4:	f7f4 fb08 	bl	80005f8 <__aeabi_dmul>
 800bfe8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bfec:	3501      	adds	r5, #1
 800bfee:	1076      	asrs	r6, r6, #1
 800bff0:	3708      	adds	r7, #8
 800bff2:	2e00      	cmp	r6, #0
 800bff4:	d1f0      	bne.n	800bfd8 <_dtoa_r+0x338>
 800bff6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bffa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bffe:	f7f4 fc25 	bl	800084c <__aeabi_ddiv>
 800c002:	e9cd 0100 	strd	r0, r1, [sp]
 800c006:	e01a      	b.n	800c03e <_dtoa_r+0x39e>
 800c008:	2502      	movs	r5, #2
 800c00a:	e7a3      	b.n	800bf54 <_dtoa_r+0x2b4>
 800c00c:	f000 80a0 	beq.w	800c150 <_dtoa_r+0x4b0>
 800c010:	f1ca 0600 	rsb	r6, sl, #0
 800c014:	4b9f      	ldr	r3, [pc, #636]	; (800c294 <_dtoa_r+0x5f4>)
 800c016:	4fa0      	ldr	r7, [pc, #640]	; (800c298 <_dtoa_r+0x5f8>)
 800c018:	f006 020f 	and.w	r2, r6, #15
 800c01c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c024:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c028:	f7f4 fae6 	bl	80005f8 <__aeabi_dmul>
 800c02c:	e9cd 0100 	strd	r0, r1, [sp]
 800c030:	1136      	asrs	r6, r6, #4
 800c032:	2300      	movs	r3, #0
 800c034:	2502      	movs	r5, #2
 800c036:	2e00      	cmp	r6, #0
 800c038:	d17f      	bne.n	800c13a <_dtoa_r+0x49a>
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d1e1      	bne.n	800c002 <_dtoa_r+0x362>
 800c03e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c040:	2b00      	cmp	r3, #0
 800c042:	f000 8087 	beq.w	800c154 <_dtoa_r+0x4b4>
 800c046:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c04a:	2200      	movs	r2, #0
 800c04c:	4b93      	ldr	r3, [pc, #588]	; (800c29c <_dtoa_r+0x5fc>)
 800c04e:	4630      	mov	r0, r6
 800c050:	4639      	mov	r1, r7
 800c052:	f7f4 fd43 	bl	8000adc <__aeabi_dcmplt>
 800c056:	2800      	cmp	r0, #0
 800c058:	d07c      	beq.n	800c154 <_dtoa_r+0x4b4>
 800c05a:	f1b9 0f00 	cmp.w	r9, #0
 800c05e:	d079      	beq.n	800c154 <_dtoa_r+0x4b4>
 800c060:	9b02      	ldr	r3, [sp, #8]
 800c062:	2b00      	cmp	r3, #0
 800c064:	dd35      	ble.n	800c0d2 <_dtoa_r+0x432>
 800c066:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c06a:	9308      	str	r3, [sp, #32]
 800c06c:	4639      	mov	r1, r7
 800c06e:	2200      	movs	r2, #0
 800c070:	4b8b      	ldr	r3, [pc, #556]	; (800c2a0 <_dtoa_r+0x600>)
 800c072:	4630      	mov	r0, r6
 800c074:	f7f4 fac0 	bl	80005f8 <__aeabi_dmul>
 800c078:	e9cd 0100 	strd	r0, r1, [sp]
 800c07c:	9f02      	ldr	r7, [sp, #8]
 800c07e:	3501      	adds	r5, #1
 800c080:	4628      	mov	r0, r5
 800c082:	f7f4 fa4f 	bl	8000524 <__aeabi_i2d>
 800c086:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c08a:	f7f4 fab5 	bl	80005f8 <__aeabi_dmul>
 800c08e:	2200      	movs	r2, #0
 800c090:	4b84      	ldr	r3, [pc, #528]	; (800c2a4 <_dtoa_r+0x604>)
 800c092:	f7f4 f8fb 	bl	800028c <__adddf3>
 800c096:	4605      	mov	r5, r0
 800c098:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c09c:	2f00      	cmp	r7, #0
 800c09e:	d15d      	bne.n	800c15c <_dtoa_r+0x4bc>
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	4b81      	ldr	r3, [pc, #516]	; (800c2a8 <_dtoa_r+0x608>)
 800c0a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0a8:	f7f4 f8ee 	bl	8000288 <__aeabi_dsub>
 800c0ac:	462a      	mov	r2, r5
 800c0ae:	4633      	mov	r3, r6
 800c0b0:	e9cd 0100 	strd	r0, r1, [sp]
 800c0b4:	f7f4 fd30 	bl	8000b18 <__aeabi_dcmpgt>
 800c0b8:	2800      	cmp	r0, #0
 800c0ba:	f040 8288 	bne.w	800c5ce <_dtoa_r+0x92e>
 800c0be:	462a      	mov	r2, r5
 800c0c0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c0c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0c8:	f7f4 fd08 	bl	8000adc <__aeabi_dcmplt>
 800c0cc:	2800      	cmp	r0, #0
 800c0ce:	f040 827c 	bne.w	800c5ca <_dtoa_r+0x92a>
 800c0d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c0d6:	e9cd 2300 	strd	r2, r3, [sp]
 800c0da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	f2c0 8150 	blt.w	800c382 <_dtoa_r+0x6e2>
 800c0e2:	f1ba 0f0e 	cmp.w	sl, #14
 800c0e6:	f300 814c 	bgt.w	800c382 <_dtoa_r+0x6e2>
 800c0ea:	4b6a      	ldr	r3, [pc, #424]	; (800c294 <_dtoa_r+0x5f4>)
 800c0ec:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c0f0:	ed93 7b00 	vldr	d7, [r3]
 800c0f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c0fc:	f280 80d8 	bge.w	800c2b0 <_dtoa_r+0x610>
 800c100:	f1b9 0f00 	cmp.w	r9, #0
 800c104:	f300 80d4 	bgt.w	800c2b0 <_dtoa_r+0x610>
 800c108:	f040 825e 	bne.w	800c5c8 <_dtoa_r+0x928>
 800c10c:	2200      	movs	r2, #0
 800c10e:	4b66      	ldr	r3, [pc, #408]	; (800c2a8 <_dtoa_r+0x608>)
 800c110:	ec51 0b17 	vmov	r0, r1, d7
 800c114:	f7f4 fa70 	bl	80005f8 <__aeabi_dmul>
 800c118:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c11c:	f7f4 fcf2 	bl	8000b04 <__aeabi_dcmpge>
 800c120:	464f      	mov	r7, r9
 800c122:	464e      	mov	r6, r9
 800c124:	2800      	cmp	r0, #0
 800c126:	f040 8234 	bne.w	800c592 <_dtoa_r+0x8f2>
 800c12a:	2331      	movs	r3, #49	; 0x31
 800c12c:	f10b 0501 	add.w	r5, fp, #1
 800c130:	f88b 3000 	strb.w	r3, [fp]
 800c134:	f10a 0a01 	add.w	sl, sl, #1
 800c138:	e22f      	b.n	800c59a <_dtoa_r+0x8fa>
 800c13a:	07f2      	lsls	r2, r6, #31
 800c13c:	d505      	bpl.n	800c14a <_dtoa_r+0x4aa>
 800c13e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c142:	f7f4 fa59 	bl	80005f8 <__aeabi_dmul>
 800c146:	3501      	adds	r5, #1
 800c148:	2301      	movs	r3, #1
 800c14a:	1076      	asrs	r6, r6, #1
 800c14c:	3708      	adds	r7, #8
 800c14e:	e772      	b.n	800c036 <_dtoa_r+0x396>
 800c150:	2502      	movs	r5, #2
 800c152:	e774      	b.n	800c03e <_dtoa_r+0x39e>
 800c154:	f8cd a020 	str.w	sl, [sp, #32]
 800c158:	464f      	mov	r7, r9
 800c15a:	e791      	b.n	800c080 <_dtoa_r+0x3e0>
 800c15c:	4b4d      	ldr	r3, [pc, #308]	; (800c294 <_dtoa_r+0x5f4>)
 800c15e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c162:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d047      	beq.n	800c1fc <_dtoa_r+0x55c>
 800c16c:	4602      	mov	r2, r0
 800c16e:	460b      	mov	r3, r1
 800c170:	2000      	movs	r0, #0
 800c172:	494e      	ldr	r1, [pc, #312]	; (800c2ac <_dtoa_r+0x60c>)
 800c174:	f7f4 fb6a 	bl	800084c <__aeabi_ddiv>
 800c178:	462a      	mov	r2, r5
 800c17a:	4633      	mov	r3, r6
 800c17c:	f7f4 f884 	bl	8000288 <__aeabi_dsub>
 800c180:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c184:	465d      	mov	r5, fp
 800c186:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c18a:	f7f4 fce5 	bl	8000b58 <__aeabi_d2iz>
 800c18e:	4606      	mov	r6, r0
 800c190:	f7f4 f9c8 	bl	8000524 <__aeabi_i2d>
 800c194:	4602      	mov	r2, r0
 800c196:	460b      	mov	r3, r1
 800c198:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c19c:	f7f4 f874 	bl	8000288 <__aeabi_dsub>
 800c1a0:	3630      	adds	r6, #48	; 0x30
 800c1a2:	f805 6b01 	strb.w	r6, [r5], #1
 800c1a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c1aa:	e9cd 0100 	strd	r0, r1, [sp]
 800c1ae:	f7f4 fc95 	bl	8000adc <__aeabi_dcmplt>
 800c1b2:	2800      	cmp	r0, #0
 800c1b4:	d163      	bne.n	800c27e <_dtoa_r+0x5de>
 800c1b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1ba:	2000      	movs	r0, #0
 800c1bc:	4937      	ldr	r1, [pc, #220]	; (800c29c <_dtoa_r+0x5fc>)
 800c1be:	f7f4 f863 	bl	8000288 <__aeabi_dsub>
 800c1c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c1c6:	f7f4 fc89 	bl	8000adc <__aeabi_dcmplt>
 800c1ca:	2800      	cmp	r0, #0
 800c1cc:	f040 80b7 	bne.w	800c33e <_dtoa_r+0x69e>
 800c1d0:	eba5 030b 	sub.w	r3, r5, fp
 800c1d4:	429f      	cmp	r7, r3
 800c1d6:	f77f af7c 	ble.w	800c0d2 <_dtoa_r+0x432>
 800c1da:	2200      	movs	r2, #0
 800c1dc:	4b30      	ldr	r3, [pc, #192]	; (800c2a0 <_dtoa_r+0x600>)
 800c1de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c1e2:	f7f4 fa09 	bl	80005f8 <__aeabi_dmul>
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c1ec:	4b2c      	ldr	r3, [pc, #176]	; (800c2a0 <_dtoa_r+0x600>)
 800c1ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c1f2:	f7f4 fa01 	bl	80005f8 <__aeabi_dmul>
 800c1f6:	e9cd 0100 	strd	r0, r1, [sp]
 800c1fa:	e7c4      	b.n	800c186 <_dtoa_r+0x4e6>
 800c1fc:	462a      	mov	r2, r5
 800c1fe:	4633      	mov	r3, r6
 800c200:	f7f4 f9fa 	bl	80005f8 <__aeabi_dmul>
 800c204:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c208:	eb0b 0507 	add.w	r5, fp, r7
 800c20c:	465e      	mov	r6, fp
 800c20e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c212:	f7f4 fca1 	bl	8000b58 <__aeabi_d2iz>
 800c216:	4607      	mov	r7, r0
 800c218:	f7f4 f984 	bl	8000524 <__aeabi_i2d>
 800c21c:	3730      	adds	r7, #48	; 0x30
 800c21e:	4602      	mov	r2, r0
 800c220:	460b      	mov	r3, r1
 800c222:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c226:	f7f4 f82f 	bl	8000288 <__aeabi_dsub>
 800c22a:	f806 7b01 	strb.w	r7, [r6], #1
 800c22e:	42ae      	cmp	r6, r5
 800c230:	e9cd 0100 	strd	r0, r1, [sp]
 800c234:	f04f 0200 	mov.w	r2, #0
 800c238:	d126      	bne.n	800c288 <_dtoa_r+0x5e8>
 800c23a:	4b1c      	ldr	r3, [pc, #112]	; (800c2ac <_dtoa_r+0x60c>)
 800c23c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c240:	f7f4 f824 	bl	800028c <__adddf3>
 800c244:	4602      	mov	r2, r0
 800c246:	460b      	mov	r3, r1
 800c248:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c24c:	f7f4 fc64 	bl	8000b18 <__aeabi_dcmpgt>
 800c250:	2800      	cmp	r0, #0
 800c252:	d174      	bne.n	800c33e <_dtoa_r+0x69e>
 800c254:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c258:	2000      	movs	r0, #0
 800c25a:	4914      	ldr	r1, [pc, #80]	; (800c2ac <_dtoa_r+0x60c>)
 800c25c:	f7f4 f814 	bl	8000288 <__aeabi_dsub>
 800c260:	4602      	mov	r2, r0
 800c262:	460b      	mov	r3, r1
 800c264:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c268:	f7f4 fc38 	bl	8000adc <__aeabi_dcmplt>
 800c26c:	2800      	cmp	r0, #0
 800c26e:	f43f af30 	beq.w	800c0d2 <_dtoa_r+0x432>
 800c272:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c276:	2b30      	cmp	r3, #48	; 0x30
 800c278:	f105 32ff 	add.w	r2, r5, #4294967295
 800c27c:	d002      	beq.n	800c284 <_dtoa_r+0x5e4>
 800c27e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c282:	e04a      	b.n	800c31a <_dtoa_r+0x67a>
 800c284:	4615      	mov	r5, r2
 800c286:	e7f4      	b.n	800c272 <_dtoa_r+0x5d2>
 800c288:	4b05      	ldr	r3, [pc, #20]	; (800c2a0 <_dtoa_r+0x600>)
 800c28a:	f7f4 f9b5 	bl	80005f8 <__aeabi_dmul>
 800c28e:	e9cd 0100 	strd	r0, r1, [sp]
 800c292:	e7bc      	b.n	800c20e <_dtoa_r+0x56e>
 800c294:	0800d5b0 	.word	0x0800d5b0
 800c298:	0800d588 	.word	0x0800d588
 800c29c:	3ff00000 	.word	0x3ff00000
 800c2a0:	40240000 	.word	0x40240000
 800c2a4:	401c0000 	.word	0x401c0000
 800c2a8:	40140000 	.word	0x40140000
 800c2ac:	3fe00000 	.word	0x3fe00000
 800c2b0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c2b4:	465d      	mov	r5, fp
 800c2b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2ba:	4630      	mov	r0, r6
 800c2bc:	4639      	mov	r1, r7
 800c2be:	f7f4 fac5 	bl	800084c <__aeabi_ddiv>
 800c2c2:	f7f4 fc49 	bl	8000b58 <__aeabi_d2iz>
 800c2c6:	4680      	mov	r8, r0
 800c2c8:	f7f4 f92c 	bl	8000524 <__aeabi_i2d>
 800c2cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2d0:	f7f4 f992 	bl	80005f8 <__aeabi_dmul>
 800c2d4:	4602      	mov	r2, r0
 800c2d6:	460b      	mov	r3, r1
 800c2d8:	4630      	mov	r0, r6
 800c2da:	4639      	mov	r1, r7
 800c2dc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800c2e0:	f7f3 ffd2 	bl	8000288 <__aeabi_dsub>
 800c2e4:	f805 6b01 	strb.w	r6, [r5], #1
 800c2e8:	eba5 060b 	sub.w	r6, r5, fp
 800c2ec:	45b1      	cmp	r9, r6
 800c2ee:	4602      	mov	r2, r0
 800c2f0:	460b      	mov	r3, r1
 800c2f2:	d139      	bne.n	800c368 <_dtoa_r+0x6c8>
 800c2f4:	f7f3 ffca 	bl	800028c <__adddf3>
 800c2f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2fc:	4606      	mov	r6, r0
 800c2fe:	460f      	mov	r7, r1
 800c300:	f7f4 fc0a 	bl	8000b18 <__aeabi_dcmpgt>
 800c304:	b9c8      	cbnz	r0, 800c33a <_dtoa_r+0x69a>
 800c306:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c30a:	4630      	mov	r0, r6
 800c30c:	4639      	mov	r1, r7
 800c30e:	f7f4 fbdb 	bl	8000ac8 <__aeabi_dcmpeq>
 800c312:	b110      	cbz	r0, 800c31a <_dtoa_r+0x67a>
 800c314:	f018 0f01 	tst.w	r8, #1
 800c318:	d10f      	bne.n	800c33a <_dtoa_r+0x69a>
 800c31a:	9904      	ldr	r1, [sp, #16]
 800c31c:	4620      	mov	r0, r4
 800c31e:	f000 fac6 	bl	800c8ae <_Bfree>
 800c322:	2300      	movs	r3, #0
 800c324:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c326:	702b      	strb	r3, [r5, #0]
 800c328:	f10a 0301 	add.w	r3, sl, #1
 800c32c:	6013      	str	r3, [r2, #0]
 800c32e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c330:	2b00      	cmp	r3, #0
 800c332:	f000 8241 	beq.w	800c7b8 <_dtoa_r+0xb18>
 800c336:	601d      	str	r5, [r3, #0]
 800c338:	e23e      	b.n	800c7b8 <_dtoa_r+0xb18>
 800c33a:	f8cd a020 	str.w	sl, [sp, #32]
 800c33e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c342:	2a39      	cmp	r2, #57	; 0x39
 800c344:	f105 33ff 	add.w	r3, r5, #4294967295
 800c348:	d108      	bne.n	800c35c <_dtoa_r+0x6bc>
 800c34a:	459b      	cmp	fp, r3
 800c34c:	d10a      	bne.n	800c364 <_dtoa_r+0x6c4>
 800c34e:	9b08      	ldr	r3, [sp, #32]
 800c350:	3301      	adds	r3, #1
 800c352:	9308      	str	r3, [sp, #32]
 800c354:	2330      	movs	r3, #48	; 0x30
 800c356:	f88b 3000 	strb.w	r3, [fp]
 800c35a:	465b      	mov	r3, fp
 800c35c:	781a      	ldrb	r2, [r3, #0]
 800c35e:	3201      	adds	r2, #1
 800c360:	701a      	strb	r2, [r3, #0]
 800c362:	e78c      	b.n	800c27e <_dtoa_r+0x5de>
 800c364:	461d      	mov	r5, r3
 800c366:	e7ea      	b.n	800c33e <_dtoa_r+0x69e>
 800c368:	2200      	movs	r2, #0
 800c36a:	4b9b      	ldr	r3, [pc, #620]	; (800c5d8 <_dtoa_r+0x938>)
 800c36c:	f7f4 f944 	bl	80005f8 <__aeabi_dmul>
 800c370:	2200      	movs	r2, #0
 800c372:	2300      	movs	r3, #0
 800c374:	4606      	mov	r6, r0
 800c376:	460f      	mov	r7, r1
 800c378:	f7f4 fba6 	bl	8000ac8 <__aeabi_dcmpeq>
 800c37c:	2800      	cmp	r0, #0
 800c37e:	d09a      	beq.n	800c2b6 <_dtoa_r+0x616>
 800c380:	e7cb      	b.n	800c31a <_dtoa_r+0x67a>
 800c382:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c384:	2a00      	cmp	r2, #0
 800c386:	f000 808b 	beq.w	800c4a0 <_dtoa_r+0x800>
 800c38a:	9a06      	ldr	r2, [sp, #24]
 800c38c:	2a01      	cmp	r2, #1
 800c38e:	dc6e      	bgt.n	800c46e <_dtoa_r+0x7ce>
 800c390:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c392:	2a00      	cmp	r2, #0
 800c394:	d067      	beq.n	800c466 <_dtoa_r+0x7c6>
 800c396:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c39a:	9f07      	ldr	r7, [sp, #28]
 800c39c:	9d05      	ldr	r5, [sp, #20]
 800c39e:	9a05      	ldr	r2, [sp, #20]
 800c3a0:	2101      	movs	r1, #1
 800c3a2:	441a      	add	r2, r3
 800c3a4:	4620      	mov	r0, r4
 800c3a6:	9205      	str	r2, [sp, #20]
 800c3a8:	4498      	add	r8, r3
 800c3aa:	f000 fb20 	bl	800c9ee <__i2b>
 800c3ae:	4606      	mov	r6, r0
 800c3b0:	2d00      	cmp	r5, #0
 800c3b2:	dd0c      	ble.n	800c3ce <_dtoa_r+0x72e>
 800c3b4:	f1b8 0f00 	cmp.w	r8, #0
 800c3b8:	dd09      	ble.n	800c3ce <_dtoa_r+0x72e>
 800c3ba:	4545      	cmp	r5, r8
 800c3bc:	9a05      	ldr	r2, [sp, #20]
 800c3be:	462b      	mov	r3, r5
 800c3c0:	bfa8      	it	ge
 800c3c2:	4643      	movge	r3, r8
 800c3c4:	1ad2      	subs	r2, r2, r3
 800c3c6:	9205      	str	r2, [sp, #20]
 800c3c8:	1aed      	subs	r5, r5, r3
 800c3ca:	eba8 0803 	sub.w	r8, r8, r3
 800c3ce:	9b07      	ldr	r3, [sp, #28]
 800c3d0:	b1eb      	cbz	r3, 800c40e <_dtoa_r+0x76e>
 800c3d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d067      	beq.n	800c4a8 <_dtoa_r+0x808>
 800c3d8:	b18f      	cbz	r7, 800c3fe <_dtoa_r+0x75e>
 800c3da:	4631      	mov	r1, r6
 800c3dc:	463a      	mov	r2, r7
 800c3de:	4620      	mov	r0, r4
 800c3e0:	f000 fba4 	bl	800cb2c <__pow5mult>
 800c3e4:	9a04      	ldr	r2, [sp, #16]
 800c3e6:	4601      	mov	r1, r0
 800c3e8:	4606      	mov	r6, r0
 800c3ea:	4620      	mov	r0, r4
 800c3ec:	f000 fb08 	bl	800ca00 <__multiply>
 800c3f0:	9904      	ldr	r1, [sp, #16]
 800c3f2:	9008      	str	r0, [sp, #32]
 800c3f4:	4620      	mov	r0, r4
 800c3f6:	f000 fa5a 	bl	800c8ae <_Bfree>
 800c3fa:	9b08      	ldr	r3, [sp, #32]
 800c3fc:	9304      	str	r3, [sp, #16]
 800c3fe:	9b07      	ldr	r3, [sp, #28]
 800c400:	1bda      	subs	r2, r3, r7
 800c402:	d004      	beq.n	800c40e <_dtoa_r+0x76e>
 800c404:	9904      	ldr	r1, [sp, #16]
 800c406:	4620      	mov	r0, r4
 800c408:	f000 fb90 	bl	800cb2c <__pow5mult>
 800c40c:	9004      	str	r0, [sp, #16]
 800c40e:	2101      	movs	r1, #1
 800c410:	4620      	mov	r0, r4
 800c412:	f000 faec 	bl	800c9ee <__i2b>
 800c416:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c418:	4607      	mov	r7, r0
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	f000 81d0 	beq.w	800c7c0 <_dtoa_r+0xb20>
 800c420:	461a      	mov	r2, r3
 800c422:	4601      	mov	r1, r0
 800c424:	4620      	mov	r0, r4
 800c426:	f000 fb81 	bl	800cb2c <__pow5mult>
 800c42a:	9b06      	ldr	r3, [sp, #24]
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	4607      	mov	r7, r0
 800c430:	dc40      	bgt.n	800c4b4 <_dtoa_r+0x814>
 800c432:	9b00      	ldr	r3, [sp, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d139      	bne.n	800c4ac <_dtoa_r+0x80c>
 800c438:	9b01      	ldr	r3, [sp, #4]
 800c43a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d136      	bne.n	800c4b0 <_dtoa_r+0x810>
 800c442:	9b01      	ldr	r3, [sp, #4]
 800c444:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c448:	0d1b      	lsrs	r3, r3, #20
 800c44a:	051b      	lsls	r3, r3, #20
 800c44c:	b12b      	cbz	r3, 800c45a <_dtoa_r+0x7ba>
 800c44e:	9b05      	ldr	r3, [sp, #20]
 800c450:	3301      	adds	r3, #1
 800c452:	9305      	str	r3, [sp, #20]
 800c454:	f108 0801 	add.w	r8, r8, #1
 800c458:	2301      	movs	r3, #1
 800c45a:	9307      	str	r3, [sp, #28]
 800c45c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d12a      	bne.n	800c4b8 <_dtoa_r+0x818>
 800c462:	2001      	movs	r0, #1
 800c464:	e030      	b.n	800c4c8 <_dtoa_r+0x828>
 800c466:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c468:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c46c:	e795      	b.n	800c39a <_dtoa_r+0x6fa>
 800c46e:	9b07      	ldr	r3, [sp, #28]
 800c470:	f109 37ff 	add.w	r7, r9, #4294967295
 800c474:	42bb      	cmp	r3, r7
 800c476:	bfbf      	itttt	lt
 800c478:	9b07      	ldrlt	r3, [sp, #28]
 800c47a:	9707      	strlt	r7, [sp, #28]
 800c47c:	1afa      	sublt	r2, r7, r3
 800c47e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c480:	bfbb      	ittet	lt
 800c482:	189b      	addlt	r3, r3, r2
 800c484:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c486:	1bdf      	subge	r7, r3, r7
 800c488:	2700      	movlt	r7, #0
 800c48a:	f1b9 0f00 	cmp.w	r9, #0
 800c48e:	bfb5      	itete	lt
 800c490:	9b05      	ldrlt	r3, [sp, #20]
 800c492:	9d05      	ldrge	r5, [sp, #20]
 800c494:	eba3 0509 	sublt.w	r5, r3, r9
 800c498:	464b      	movge	r3, r9
 800c49a:	bfb8      	it	lt
 800c49c:	2300      	movlt	r3, #0
 800c49e:	e77e      	b.n	800c39e <_dtoa_r+0x6fe>
 800c4a0:	9f07      	ldr	r7, [sp, #28]
 800c4a2:	9d05      	ldr	r5, [sp, #20]
 800c4a4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c4a6:	e783      	b.n	800c3b0 <_dtoa_r+0x710>
 800c4a8:	9a07      	ldr	r2, [sp, #28]
 800c4aa:	e7ab      	b.n	800c404 <_dtoa_r+0x764>
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	e7d4      	b.n	800c45a <_dtoa_r+0x7ba>
 800c4b0:	9b00      	ldr	r3, [sp, #0]
 800c4b2:	e7d2      	b.n	800c45a <_dtoa_r+0x7ba>
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	9307      	str	r3, [sp, #28]
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800c4be:	6918      	ldr	r0, [r3, #16]
 800c4c0:	f000 fa47 	bl	800c952 <__hi0bits>
 800c4c4:	f1c0 0020 	rsb	r0, r0, #32
 800c4c8:	4440      	add	r0, r8
 800c4ca:	f010 001f 	ands.w	r0, r0, #31
 800c4ce:	d047      	beq.n	800c560 <_dtoa_r+0x8c0>
 800c4d0:	f1c0 0320 	rsb	r3, r0, #32
 800c4d4:	2b04      	cmp	r3, #4
 800c4d6:	dd3b      	ble.n	800c550 <_dtoa_r+0x8b0>
 800c4d8:	9b05      	ldr	r3, [sp, #20]
 800c4da:	f1c0 001c 	rsb	r0, r0, #28
 800c4de:	4403      	add	r3, r0
 800c4e0:	9305      	str	r3, [sp, #20]
 800c4e2:	4405      	add	r5, r0
 800c4e4:	4480      	add	r8, r0
 800c4e6:	9b05      	ldr	r3, [sp, #20]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	dd05      	ble.n	800c4f8 <_dtoa_r+0x858>
 800c4ec:	461a      	mov	r2, r3
 800c4ee:	9904      	ldr	r1, [sp, #16]
 800c4f0:	4620      	mov	r0, r4
 800c4f2:	f000 fb69 	bl	800cbc8 <__lshift>
 800c4f6:	9004      	str	r0, [sp, #16]
 800c4f8:	f1b8 0f00 	cmp.w	r8, #0
 800c4fc:	dd05      	ble.n	800c50a <_dtoa_r+0x86a>
 800c4fe:	4639      	mov	r1, r7
 800c500:	4642      	mov	r2, r8
 800c502:	4620      	mov	r0, r4
 800c504:	f000 fb60 	bl	800cbc8 <__lshift>
 800c508:	4607      	mov	r7, r0
 800c50a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c50c:	b353      	cbz	r3, 800c564 <_dtoa_r+0x8c4>
 800c50e:	4639      	mov	r1, r7
 800c510:	9804      	ldr	r0, [sp, #16]
 800c512:	f000 fbad 	bl	800cc70 <__mcmp>
 800c516:	2800      	cmp	r0, #0
 800c518:	da24      	bge.n	800c564 <_dtoa_r+0x8c4>
 800c51a:	2300      	movs	r3, #0
 800c51c:	220a      	movs	r2, #10
 800c51e:	9904      	ldr	r1, [sp, #16]
 800c520:	4620      	mov	r0, r4
 800c522:	f000 f9db 	bl	800c8dc <__multadd>
 800c526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c528:	9004      	str	r0, [sp, #16]
 800c52a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c52e:	2b00      	cmp	r3, #0
 800c530:	f000 814d 	beq.w	800c7ce <_dtoa_r+0xb2e>
 800c534:	2300      	movs	r3, #0
 800c536:	4631      	mov	r1, r6
 800c538:	220a      	movs	r2, #10
 800c53a:	4620      	mov	r0, r4
 800c53c:	f000 f9ce 	bl	800c8dc <__multadd>
 800c540:	9b02      	ldr	r3, [sp, #8]
 800c542:	2b00      	cmp	r3, #0
 800c544:	4606      	mov	r6, r0
 800c546:	dc4f      	bgt.n	800c5e8 <_dtoa_r+0x948>
 800c548:	9b06      	ldr	r3, [sp, #24]
 800c54a:	2b02      	cmp	r3, #2
 800c54c:	dd4c      	ble.n	800c5e8 <_dtoa_r+0x948>
 800c54e:	e011      	b.n	800c574 <_dtoa_r+0x8d4>
 800c550:	d0c9      	beq.n	800c4e6 <_dtoa_r+0x846>
 800c552:	9a05      	ldr	r2, [sp, #20]
 800c554:	331c      	adds	r3, #28
 800c556:	441a      	add	r2, r3
 800c558:	9205      	str	r2, [sp, #20]
 800c55a:	441d      	add	r5, r3
 800c55c:	4498      	add	r8, r3
 800c55e:	e7c2      	b.n	800c4e6 <_dtoa_r+0x846>
 800c560:	4603      	mov	r3, r0
 800c562:	e7f6      	b.n	800c552 <_dtoa_r+0x8b2>
 800c564:	f1b9 0f00 	cmp.w	r9, #0
 800c568:	dc38      	bgt.n	800c5dc <_dtoa_r+0x93c>
 800c56a:	9b06      	ldr	r3, [sp, #24]
 800c56c:	2b02      	cmp	r3, #2
 800c56e:	dd35      	ble.n	800c5dc <_dtoa_r+0x93c>
 800c570:	f8cd 9008 	str.w	r9, [sp, #8]
 800c574:	9b02      	ldr	r3, [sp, #8]
 800c576:	b963      	cbnz	r3, 800c592 <_dtoa_r+0x8f2>
 800c578:	4639      	mov	r1, r7
 800c57a:	2205      	movs	r2, #5
 800c57c:	4620      	mov	r0, r4
 800c57e:	f000 f9ad 	bl	800c8dc <__multadd>
 800c582:	4601      	mov	r1, r0
 800c584:	4607      	mov	r7, r0
 800c586:	9804      	ldr	r0, [sp, #16]
 800c588:	f000 fb72 	bl	800cc70 <__mcmp>
 800c58c:	2800      	cmp	r0, #0
 800c58e:	f73f adcc 	bgt.w	800c12a <_dtoa_r+0x48a>
 800c592:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c594:	465d      	mov	r5, fp
 800c596:	ea6f 0a03 	mvn.w	sl, r3
 800c59a:	f04f 0900 	mov.w	r9, #0
 800c59e:	4639      	mov	r1, r7
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	f000 f984 	bl	800c8ae <_Bfree>
 800c5a6:	2e00      	cmp	r6, #0
 800c5a8:	f43f aeb7 	beq.w	800c31a <_dtoa_r+0x67a>
 800c5ac:	f1b9 0f00 	cmp.w	r9, #0
 800c5b0:	d005      	beq.n	800c5be <_dtoa_r+0x91e>
 800c5b2:	45b1      	cmp	r9, r6
 800c5b4:	d003      	beq.n	800c5be <_dtoa_r+0x91e>
 800c5b6:	4649      	mov	r1, r9
 800c5b8:	4620      	mov	r0, r4
 800c5ba:	f000 f978 	bl	800c8ae <_Bfree>
 800c5be:	4631      	mov	r1, r6
 800c5c0:	4620      	mov	r0, r4
 800c5c2:	f000 f974 	bl	800c8ae <_Bfree>
 800c5c6:	e6a8      	b.n	800c31a <_dtoa_r+0x67a>
 800c5c8:	2700      	movs	r7, #0
 800c5ca:	463e      	mov	r6, r7
 800c5cc:	e7e1      	b.n	800c592 <_dtoa_r+0x8f2>
 800c5ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c5d2:	463e      	mov	r6, r7
 800c5d4:	e5a9      	b.n	800c12a <_dtoa_r+0x48a>
 800c5d6:	bf00      	nop
 800c5d8:	40240000 	.word	0x40240000
 800c5dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5de:	f8cd 9008 	str.w	r9, [sp, #8]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	f000 80fa 	beq.w	800c7dc <_dtoa_r+0xb3c>
 800c5e8:	2d00      	cmp	r5, #0
 800c5ea:	dd05      	ble.n	800c5f8 <_dtoa_r+0x958>
 800c5ec:	4631      	mov	r1, r6
 800c5ee:	462a      	mov	r2, r5
 800c5f0:	4620      	mov	r0, r4
 800c5f2:	f000 fae9 	bl	800cbc8 <__lshift>
 800c5f6:	4606      	mov	r6, r0
 800c5f8:	9b07      	ldr	r3, [sp, #28]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d04c      	beq.n	800c698 <_dtoa_r+0x9f8>
 800c5fe:	6871      	ldr	r1, [r6, #4]
 800c600:	4620      	mov	r0, r4
 800c602:	f000 f920 	bl	800c846 <_Balloc>
 800c606:	6932      	ldr	r2, [r6, #16]
 800c608:	3202      	adds	r2, #2
 800c60a:	4605      	mov	r5, r0
 800c60c:	0092      	lsls	r2, r2, #2
 800c60e:	f106 010c 	add.w	r1, r6, #12
 800c612:	300c      	adds	r0, #12
 800c614:	f000 f90a 	bl	800c82c <memcpy>
 800c618:	2201      	movs	r2, #1
 800c61a:	4629      	mov	r1, r5
 800c61c:	4620      	mov	r0, r4
 800c61e:	f000 fad3 	bl	800cbc8 <__lshift>
 800c622:	9b00      	ldr	r3, [sp, #0]
 800c624:	f8cd b014 	str.w	fp, [sp, #20]
 800c628:	f003 0301 	and.w	r3, r3, #1
 800c62c:	46b1      	mov	r9, r6
 800c62e:	9307      	str	r3, [sp, #28]
 800c630:	4606      	mov	r6, r0
 800c632:	4639      	mov	r1, r7
 800c634:	9804      	ldr	r0, [sp, #16]
 800c636:	f7ff faa7 	bl	800bb88 <quorem>
 800c63a:	4649      	mov	r1, r9
 800c63c:	4605      	mov	r5, r0
 800c63e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c642:	9804      	ldr	r0, [sp, #16]
 800c644:	f000 fb14 	bl	800cc70 <__mcmp>
 800c648:	4632      	mov	r2, r6
 800c64a:	9000      	str	r0, [sp, #0]
 800c64c:	4639      	mov	r1, r7
 800c64e:	4620      	mov	r0, r4
 800c650:	f000 fb28 	bl	800cca4 <__mdiff>
 800c654:	68c3      	ldr	r3, [r0, #12]
 800c656:	4602      	mov	r2, r0
 800c658:	bb03      	cbnz	r3, 800c69c <_dtoa_r+0x9fc>
 800c65a:	4601      	mov	r1, r0
 800c65c:	9008      	str	r0, [sp, #32]
 800c65e:	9804      	ldr	r0, [sp, #16]
 800c660:	f000 fb06 	bl	800cc70 <__mcmp>
 800c664:	9a08      	ldr	r2, [sp, #32]
 800c666:	4603      	mov	r3, r0
 800c668:	4611      	mov	r1, r2
 800c66a:	4620      	mov	r0, r4
 800c66c:	9308      	str	r3, [sp, #32]
 800c66e:	f000 f91e 	bl	800c8ae <_Bfree>
 800c672:	9b08      	ldr	r3, [sp, #32]
 800c674:	b9a3      	cbnz	r3, 800c6a0 <_dtoa_r+0xa00>
 800c676:	9a06      	ldr	r2, [sp, #24]
 800c678:	b992      	cbnz	r2, 800c6a0 <_dtoa_r+0xa00>
 800c67a:	9a07      	ldr	r2, [sp, #28]
 800c67c:	b982      	cbnz	r2, 800c6a0 <_dtoa_r+0xa00>
 800c67e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c682:	d029      	beq.n	800c6d8 <_dtoa_r+0xa38>
 800c684:	9b00      	ldr	r3, [sp, #0]
 800c686:	2b00      	cmp	r3, #0
 800c688:	dd01      	ble.n	800c68e <_dtoa_r+0x9ee>
 800c68a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c68e:	9b05      	ldr	r3, [sp, #20]
 800c690:	1c5d      	adds	r5, r3, #1
 800c692:	f883 8000 	strb.w	r8, [r3]
 800c696:	e782      	b.n	800c59e <_dtoa_r+0x8fe>
 800c698:	4630      	mov	r0, r6
 800c69a:	e7c2      	b.n	800c622 <_dtoa_r+0x982>
 800c69c:	2301      	movs	r3, #1
 800c69e:	e7e3      	b.n	800c668 <_dtoa_r+0x9c8>
 800c6a0:	9a00      	ldr	r2, [sp, #0]
 800c6a2:	2a00      	cmp	r2, #0
 800c6a4:	db04      	blt.n	800c6b0 <_dtoa_r+0xa10>
 800c6a6:	d125      	bne.n	800c6f4 <_dtoa_r+0xa54>
 800c6a8:	9a06      	ldr	r2, [sp, #24]
 800c6aa:	bb1a      	cbnz	r2, 800c6f4 <_dtoa_r+0xa54>
 800c6ac:	9a07      	ldr	r2, [sp, #28]
 800c6ae:	bb0a      	cbnz	r2, 800c6f4 <_dtoa_r+0xa54>
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	ddec      	ble.n	800c68e <_dtoa_r+0x9ee>
 800c6b4:	2201      	movs	r2, #1
 800c6b6:	9904      	ldr	r1, [sp, #16]
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	f000 fa85 	bl	800cbc8 <__lshift>
 800c6be:	4639      	mov	r1, r7
 800c6c0:	9004      	str	r0, [sp, #16]
 800c6c2:	f000 fad5 	bl	800cc70 <__mcmp>
 800c6c6:	2800      	cmp	r0, #0
 800c6c8:	dc03      	bgt.n	800c6d2 <_dtoa_r+0xa32>
 800c6ca:	d1e0      	bne.n	800c68e <_dtoa_r+0x9ee>
 800c6cc:	f018 0f01 	tst.w	r8, #1
 800c6d0:	d0dd      	beq.n	800c68e <_dtoa_r+0x9ee>
 800c6d2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c6d6:	d1d8      	bne.n	800c68a <_dtoa_r+0x9ea>
 800c6d8:	9b05      	ldr	r3, [sp, #20]
 800c6da:	9a05      	ldr	r2, [sp, #20]
 800c6dc:	1c5d      	adds	r5, r3, #1
 800c6de:	2339      	movs	r3, #57	; 0x39
 800c6e0:	7013      	strb	r3, [r2, #0]
 800c6e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c6e6:	2b39      	cmp	r3, #57	; 0x39
 800c6e8:	f105 32ff 	add.w	r2, r5, #4294967295
 800c6ec:	d04f      	beq.n	800c78e <_dtoa_r+0xaee>
 800c6ee:	3301      	adds	r3, #1
 800c6f0:	7013      	strb	r3, [r2, #0]
 800c6f2:	e754      	b.n	800c59e <_dtoa_r+0x8fe>
 800c6f4:	9a05      	ldr	r2, [sp, #20]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	f102 0501 	add.w	r5, r2, #1
 800c6fc:	dd06      	ble.n	800c70c <_dtoa_r+0xa6c>
 800c6fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c702:	d0e9      	beq.n	800c6d8 <_dtoa_r+0xa38>
 800c704:	f108 0801 	add.w	r8, r8, #1
 800c708:	9b05      	ldr	r3, [sp, #20]
 800c70a:	e7c2      	b.n	800c692 <_dtoa_r+0x9f2>
 800c70c:	9a02      	ldr	r2, [sp, #8]
 800c70e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c712:	eba5 030b 	sub.w	r3, r5, fp
 800c716:	4293      	cmp	r3, r2
 800c718:	d021      	beq.n	800c75e <_dtoa_r+0xabe>
 800c71a:	2300      	movs	r3, #0
 800c71c:	220a      	movs	r2, #10
 800c71e:	9904      	ldr	r1, [sp, #16]
 800c720:	4620      	mov	r0, r4
 800c722:	f000 f8db 	bl	800c8dc <__multadd>
 800c726:	45b1      	cmp	r9, r6
 800c728:	9004      	str	r0, [sp, #16]
 800c72a:	f04f 0300 	mov.w	r3, #0
 800c72e:	f04f 020a 	mov.w	r2, #10
 800c732:	4649      	mov	r1, r9
 800c734:	4620      	mov	r0, r4
 800c736:	d105      	bne.n	800c744 <_dtoa_r+0xaa4>
 800c738:	f000 f8d0 	bl	800c8dc <__multadd>
 800c73c:	4681      	mov	r9, r0
 800c73e:	4606      	mov	r6, r0
 800c740:	9505      	str	r5, [sp, #20]
 800c742:	e776      	b.n	800c632 <_dtoa_r+0x992>
 800c744:	f000 f8ca 	bl	800c8dc <__multadd>
 800c748:	4631      	mov	r1, r6
 800c74a:	4681      	mov	r9, r0
 800c74c:	2300      	movs	r3, #0
 800c74e:	220a      	movs	r2, #10
 800c750:	4620      	mov	r0, r4
 800c752:	f000 f8c3 	bl	800c8dc <__multadd>
 800c756:	4606      	mov	r6, r0
 800c758:	e7f2      	b.n	800c740 <_dtoa_r+0xaa0>
 800c75a:	f04f 0900 	mov.w	r9, #0
 800c75e:	2201      	movs	r2, #1
 800c760:	9904      	ldr	r1, [sp, #16]
 800c762:	4620      	mov	r0, r4
 800c764:	f000 fa30 	bl	800cbc8 <__lshift>
 800c768:	4639      	mov	r1, r7
 800c76a:	9004      	str	r0, [sp, #16]
 800c76c:	f000 fa80 	bl	800cc70 <__mcmp>
 800c770:	2800      	cmp	r0, #0
 800c772:	dcb6      	bgt.n	800c6e2 <_dtoa_r+0xa42>
 800c774:	d102      	bne.n	800c77c <_dtoa_r+0xadc>
 800c776:	f018 0f01 	tst.w	r8, #1
 800c77a:	d1b2      	bne.n	800c6e2 <_dtoa_r+0xa42>
 800c77c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c780:	2b30      	cmp	r3, #48	; 0x30
 800c782:	f105 32ff 	add.w	r2, r5, #4294967295
 800c786:	f47f af0a 	bne.w	800c59e <_dtoa_r+0x8fe>
 800c78a:	4615      	mov	r5, r2
 800c78c:	e7f6      	b.n	800c77c <_dtoa_r+0xadc>
 800c78e:	4593      	cmp	fp, r2
 800c790:	d105      	bne.n	800c79e <_dtoa_r+0xafe>
 800c792:	2331      	movs	r3, #49	; 0x31
 800c794:	f10a 0a01 	add.w	sl, sl, #1
 800c798:	f88b 3000 	strb.w	r3, [fp]
 800c79c:	e6ff      	b.n	800c59e <_dtoa_r+0x8fe>
 800c79e:	4615      	mov	r5, r2
 800c7a0:	e79f      	b.n	800c6e2 <_dtoa_r+0xa42>
 800c7a2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c808 <_dtoa_r+0xb68>
 800c7a6:	e007      	b.n	800c7b8 <_dtoa_r+0xb18>
 800c7a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c7aa:	f8df b060 	ldr.w	fp, [pc, #96]	; 800c80c <_dtoa_r+0xb6c>
 800c7ae:	b11b      	cbz	r3, 800c7b8 <_dtoa_r+0xb18>
 800c7b0:	f10b 0308 	add.w	r3, fp, #8
 800c7b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c7b6:	6013      	str	r3, [r2, #0]
 800c7b8:	4658      	mov	r0, fp
 800c7ba:	b017      	add	sp, #92	; 0x5c
 800c7bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7c0:	9b06      	ldr	r3, [sp, #24]
 800c7c2:	2b01      	cmp	r3, #1
 800c7c4:	f77f ae35 	ble.w	800c432 <_dtoa_r+0x792>
 800c7c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7ca:	9307      	str	r3, [sp, #28]
 800c7cc:	e649      	b.n	800c462 <_dtoa_r+0x7c2>
 800c7ce:	9b02      	ldr	r3, [sp, #8]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	dc03      	bgt.n	800c7dc <_dtoa_r+0xb3c>
 800c7d4:	9b06      	ldr	r3, [sp, #24]
 800c7d6:	2b02      	cmp	r3, #2
 800c7d8:	f73f aecc 	bgt.w	800c574 <_dtoa_r+0x8d4>
 800c7dc:	465d      	mov	r5, fp
 800c7de:	4639      	mov	r1, r7
 800c7e0:	9804      	ldr	r0, [sp, #16]
 800c7e2:	f7ff f9d1 	bl	800bb88 <quorem>
 800c7e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c7ea:	f805 8b01 	strb.w	r8, [r5], #1
 800c7ee:	9a02      	ldr	r2, [sp, #8]
 800c7f0:	eba5 030b 	sub.w	r3, r5, fp
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	ddb0      	ble.n	800c75a <_dtoa_r+0xaba>
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	220a      	movs	r2, #10
 800c7fc:	9904      	ldr	r1, [sp, #16]
 800c7fe:	4620      	mov	r0, r4
 800c800:	f000 f86c 	bl	800c8dc <__multadd>
 800c804:	9004      	str	r0, [sp, #16]
 800c806:	e7ea      	b.n	800c7de <_dtoa_r+0xb3e>
 800c808:	0800d554 	.word	0x0800d554
 800c80c:	0800d578 	.word	0x0800d578

0800c810 <_localeconv_r>:
 800c810:	4b04      	ldr	r3, [pc, #16]	; (800c824 <_localeconv_r+0x14>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	6a18      	ldr	r0, [r3, #32]
 800c816:	4b04      	ldr	r3, [pc, #16]	; (800c828 <_localeconv_r+0x18>)
 800c818:	2800      	cmp	r0, #0
 800c81a:	bf08      	it	eq
 800c81c:	4618      	moveq	r0, r3
 800c81e:	30f0      	adds	r0, #240	; 0xf0
 800c820:	4770      	bx	lr
 800c822:	bf00      	nop
 800c824:	20000188 	.word	0x20000188
 800c828:	200001ec 	.word	0x200001ec

0800c82c <memcpy>:
 800c82c:	b510      	push	{r4, lr}
 800c82e:	1e43      	subs	r3, r0, #1
 800c830:	440a      	add	r2, r1
 800c832:	4291      	cmp	r1, r2
 800c834:	d100      	bne.n	800c838 <memcpy+0xc>
 800c836:	bd10      	pop	{r4, pc}
 800c838:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c83c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c840:	e7f7      	b.n	800c832 <memcpy+0x6>

0800c842 <__malloc_lock>:
 800c842:	4770      	bx	lr

0800c844 <__malloc_unlock>:
 800c844:	4770      	bx	lr

0800c846 <_Balloc>:
 800c846:	b570      	push	{r4, r5, r6, lr}
 800c848:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c84a:	4604      	mov	r4, r0
 800c84c:	460e      	mov	r6, r1
 800c84e:	b93d      	cbnz	r5, 800c860 <_Balloc+0x1a>
 800c850:	2010      	movs	r0, #16
 800c852:	f7fe fc4d 	bl	800b0f0 <malloc>
 800c856:	6260      	str	r0, [r4, #36]	; 0x24
 800c858:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c85c:	6005      	str	r5, [r0, #0]
 800c85e:	60c5      	str	r5, [r0, #12]
 800c860:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c862:	68eb      	ldr	r3, [r5, #12]
 800c864:	b183      	cbz	r3, 800c888 <_Balloc+0x42>
 800c866:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c868:	68db      	ldr	r3, [r3, #12]
 800c86a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c86e:	b9b8      	cbnz	r0, 800c8a0 <_Balloc+0x5a>
 800c870:	2101      	movs	r1, #1
 800c872:	fa01 f506 	lsl.w	r5, r1, r6
 800c876:	1d6a      	adds	r2, r5, #5
 800c878:	0092      	lsls	r2, r2, #2
 800c87a:	4620      	mov	r0, r4
 800c87c:	f000 fabe 	bl	800cdfc <_calloc_r>
 800c880:	b160      	cbz	r0, 800c89c <_Balloc+0x56>
 800c882:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c886:	e00e      	b.n	800c8a6 <_Balloc+0x60>
 800c888:	2221      	movs	r2, #33	; 0x21
 800c88a:	2104      	movs	r1, #4
 800c88c:	4620      	mov	r0, r4
 800c88e:	f000 fab5 	bl	800cdfc <_calloc_r>
 800c892:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c894:	60e8      	str	r0, [r5, #12]
 800c896:	68db      	ldr	r3, [r3, #12]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d1e4      	bne.n	800c866 <_Balloc+0x20>
 800c89c:	2000      	movs	r0, #0
 800c89e:	bd70      	pop	{r4, r5, r6, pc}
 800c8a0:	6802      	ldr	r2, [r0, #0]
 800c8a2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c8ac:	e7f7      	b.n	800c89e <_Balloc+0x58>

0800c8ae <_Bfree>:
 800c8ae:	b570      	push	{r4, r5, r6, lr}
 800c8b0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c8b2:	4606      	mov	r6, r0
 800c8b4:	460d      	mov	r5, r1
 800c8b6:	b93c      	cbnz	r4, 800c8c8 <_Bfree+0x1a>
 800c8b8:	2010      	movs	r0, #16
 800c8ba:	f7fe fc19 	bl	800b0f0 <malloc>
 800c8be:	6270      	str	r0, [r6, #36]	; 0x24
 800c8c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c8c4:	6004      	str	r4, [r0, #0]
 800c8c6:	60c4      	str	r4, [r0, #12]
 800c8c8:	b13d      	cbz	r5, 800c8da <_Bfree+0x2c>
 800c8ca:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c8cc:	686a      	ldr	r2, [r5, #4]
 800c8ce:	68db      	ldr	r3, [r3, #12]
 800c8d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c8d4:	6029      	str	r1, [r5, #0]
 800c8d6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c8da:	bd70      	pop	{r4, r5, r6, pc}

0800c8dc <__multadd>:
 800c8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8e0:	690d      	ldr	r5, [r1, #16]
 800c8e2:	461f      	mov	r7, r3
 800c8e4:	4606      	mov	r6, r0
 800c8e6:	460c      	mov	r4, r1
 800c8e8:	f101 0c14 	add.w	ip, r1, #20
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	f8dc 0000 	ldr.w	r0, [ip]
 800c8f2:	b281      	uxth	r1, r0
 800c8f4:	fb02 7101 	mla	r1, r2, r1, r7
 800c8f8:	0c0f      	lsrs	r7, r1, #16
 800c8fa:	0c00      	lsrs	r0, r0, #16
 800c8fc:	fb02 7000 	mla	r0, r2, r0, r7
 800c900:	b289      	uxth	r1, r1
 800c902:	3301      	adds	r3, #1
 800c904:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c908:	429d      	cmp	r5, r3
 800c90a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c90e:	f84c 1b04 	str.w	r1, [ip], #4
 800c912:	dcec      	bgt.n	800c8ee <__multadd+0x12>
 800c914:	b1d7      	cbz	r7, 800c94c <__multadd+0x70>
 800c916:	68a3      	ldr	r3, [r4, #8]
 800c918:	42ab      	cmp	r3, r5
 800c91a:	dc12      	bgt.n	800c942 <__multadd+0x66>
 800c91c:	6861      	ldr	r1, [r4, #4]
 800c91e:	4630      	mov	r0, r6
 800c920:	3101      	adds	r1, #1
 800c922:	f7ff ff90 	bl	800c846 <_Balloc>
 800c926:	6922      	ldr	r2, [r4, #16]
 800c928:	3202      	adds	r2, #2
 800c92a:	f104 010c 	add.w	r1, r4, #12
 800c92e:	4680      	mov	r8, r0
 800c930:	0092      	lsls	r2, r2, #2
 800c932:	300c      	adds	r0, #12
 800c934:	f7ff ff7a 	bl	800c82c <memcpy>
 800c938:	4621      	mov	r1, r4
 800c93a:	4630      	mov	r0, r6
 800c93c:	f7ff ffb7 	bl	800c8ae <_Bfree>
 800c940:	4644      	mov	r4, r8
 800c942:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c946:	3501      	adds	r5, #1
 800c948:	615f      	str	r7, [r3, #20]
 800c94a:	6125      	str	r5, [r4, #16]
 800c94c:	4620      	mov	r0, r4
 800c94e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c952 <__hi0bits>:
 800c952:	0c02      	lsrs	r2, r0, #16
 800c954:	0412      	lsls	r2, r2, #16
 800c956:	4603      	mov	r3, r0
 800c958:	b9b2      	cbnz	r2, 800c988 <__hi0bits+0x36>
 800c95a:	0403      	lsls	r3, r0, #16
 800c95c:	2010      	movs	r0, #16
 800c95e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c962:	bf04      	itt	eq
 800c964:	021b      	lsleq	r3, r3, #8
 800c966:	3008      	addeq	r0, #8
 800c968:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c96c:	bf04      	itt	eq
 800c96e:	011b      	lsleq	r3, r3, #4
 800c970:	3004      	addeq	r0, #4
 800c972:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c976:	bf04      	itt	eq
 800c978:	009b      	lsleq	r3, r3, #2
 800c97a:	3002      	addeq	r0, #2
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	db06      	blt.n	800c98e <__hi0bits+0x3c>
 800c980:	005b      	lsls	r3, r3, #1
 800c982:	d503      	bpl.n	800c98c <__hi0bits+0x3a>
 800c984:	3001      	adds	r0, #1
 800c986:	4770      	bx	lr
 800c988:	2000      	movs	r0, #0
 800c98a:	e7e8      	b.n	800c95e <__hi0bits+0xc>
 800c98c:	2020      	movs	r0, #32
 800c98e:	4770      	bx	lr

0800c990 <__lo0bits>:
 800c990:	6803      	ldr	r3, [r0, #0]
 800c992:	f013 0207 	ands.w	r2, r3, #7
 800c996:	4601      	mov	r1, r0
 800c998:	d00b      	beq.n	800c9b2 <__lo0bits+0x22>
 800c99a:	07da      	lsls	r2, r3, #31
 800c99c:	d423      	bmi.n	800c9e6 <__lo0bits+0x56>
 800c99e:	0798      	lsls	r0, r3, #30
 800c9a0:	bf49      	itett	mi
 800c9a2:	085b      	lsrmi	r3, r3, #1
 800c9a4:	089b      	lsrpl	r3, r3, #2
 800c9a6:	2001      	movmi	r0, #1
 800c9a8:	600b      	strmi	r3, [r1, #0]
 800c9aa:	bf5c      	itt	pl
 800c9ac:	600b      	strpl	r3, [r1, #0]
 800c9ae:	2002      	movpl	r0, #2
 800c9b0:	4770      	bx	lr
 800c9b2:	b298      	uxth	r0, r3
 800c9b4:	b9a8      	cbnz	r0, 800c9e2 <__lo0bits+0x52>
 800c9b6:	0c1b      	lsrs	r3, r3, #16
 800c9b8:	2010      	movs	r0, #16
 800c9ba:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c9be:	bf04      	itt	eq
 800c9c0:	0a1b      	lsreq	r3, r3, #8
 800c9c2:	3008      	addeq	r0, #8
 800c9c4:	071a      	lsls	r2, r3, #28
 800c9c6:	bf04      	itt	eq
 800c9c8:	091b      	lsreq	r3, r3, #4
 800c9ca:	3004      	addeq	r0, #4
 800c9cc:	079a      	lsls	r2, r3, #30
 800c9ce:	bf04      	itt	eq
 800c9d0:	089b      	lsreq	r3, r3, #2
 800c9d2:	3002      	addeq	r0, #2
 800c9d4:	07da      	lsls	r2, r3, #31
 800c9d6:	d402      	bmi.n	800c9de <__lo0bits+0x4e>
 800c9d8:	085b      	lsrs	r3, r3, #1
 800c9da:	d006      	beq.n	800c9ea <__lo0bits+0x5a>
 800c9dc:	3001      	adds	r0, #1
 800c9de:	600b      	str	r3, [r1, #0]
 800c9e0:	4770      	bx	lr
 800c9e2:	4610      	mov	r0, r2
 800c9e4:	e7e9      	b.n	800c9ba <__lo0bits+0x2a>
 800c9e6:	2000      	movs	r0, #0
 800c9e8:	4770      	bx	lr
 800c9ea:	2020      	movs	r0, #32
 800c9ec:	4770      	bx	lr

0800c9ee <__i2b>:
 800c9ee:	b510      	push	{r4, lr}
 800c9f0:	460c      	mov	r4, r1
 800c9f2:	2101      	movs	r1, #1
 800c9f4:	f7ff ff27 	bl	800c846 <_Balloc>
 800c9f8:	2201      	movs	r2, #1
 800c9fa:	6144      	str	r4, [r0, #20]
 800c9fc:	6102      	str	r2, [r0, #16]
 800c9fe:	bd10      	pop	{r4, pc}

0800ca00 <__multiply>:
 800ca00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca04:	4614      	mov	r4, r2
 800ca06:	690a      	ldr	r2, [r1, #16]
 800ca08:	6923      	ldr	r3, [r4, #16]
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	bfb8      	it	lt
 800ca0e:	460b      	movlt	r3, r1
 800ca10:	4688      	mov	r8, r1
 800ca12:	bfbc      	itt	lt
 800ca14:	46a0      	movlt	r8, r4
 800ca16:	461c      	movlt	r4, r3
 800ca18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ca1c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ca20:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca24:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ca28:	eb07 0609 	add.w	r6, r7, r9
 800ca2c:	42b3      	cmp	r3, r6
 800ca2e:	bfb8      	it	lt
 800ca30:	3101      	addlt	r1, #1
 800ca32:	f7ff ff08 	bl	800c846 <_Balloc>
 800ca36:	f100 0514 	add.w	r5, r0, #20
 800ca3a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ca3e:	462b      	mov	r3, r5
 800ca40:	2200      	movs	r2, #0
 800ca42:	4573      	cmp	r3, lr
 800ca44:	d316      	bcc.n	800ca74 <__multiply+0x74>
 800ca46:	f104 0214 	add.w	r2, r4, #20
 800ca4a:	f108 0114 	add.w	r1, r8, #20
 800ca4e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ca52:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ca56:	9300      	str	r3, [sp, #0]
 800ca58:	9b00      	ldr	r3, [sp, #0]
 800ca5a:	9201      	str	r2, [sp, #4]
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d80c      	bhi.n	800ca7a <__multiply+0x7a>
 800ca60:	2e00      	cmp	r6, #0
 800ca62:	dd03      	ble.n	800ca6c <__multiply+0x6c>
 800ca64:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d05d      	beq.n	800cb28 <__multiply+0x128>
 800ca6c:	6106      	str	r6, [r0, #16]
 800ca6e:	b003      	add	sp, #12
 800ca70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca74:	f843 2b04 	str.w	r2, [r3], #4
 800ca78:	e7e3      	b.n	800ca42 <__multiply+0x42>
 800ca7a:	f8b2 b000 	ldrh.w	fp, [r2]
 800ca7e:	f1bb 0f00 	cmp.w	fp, #0
 800ca82:	d023      	beq.n	800cacc <__multiply+0xcc>
 800ca84:	4689      	mov	r9, r1
 800ca86:	46ac      	mov	ip, r5
 800ca88:	f04f 0800 	mov.w	r8, #0
 800ca8c:	f859 4b04 	ldr.w	r4, [r9], #4
 800ca90:	f8dc a000 	ldr.w	sl, [ip]
 800ca94:	b2a3      	uxth	r3, r4
 800ca96:	fa1f fa8a 	uxth.w	sl, sl
 800ca9a:	fb0b a303 	mla	r3, fp, r3, sl
 800ca9e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800caa2:	f8dc 4000 	ldr.w	r4, [ip]
 800caa6:	4443      	add	r3, r8
 800caa8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800caac:	fb0b 840a 	mla	r4, fp, sl, r8
 800cab0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800cab4:	46e2      	mov	sl, ip
 800cab6:	b29b      	uxth	r3, r3
 800cab8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cabc:	454f      	cmp	r7, r9
 800cabe:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800cac2:	f84a 3b04 	str.w	r3, [sl], #4
 800cac6:	d82b      	bhi.n	800cb20 <__multiply+0x120>
 800cac8:	f8cc 8004 	str.w	r8, [ip, #4]
 800cacc:	9b01      	ldr	r3, [sp, #4]
 800cace:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800cad2:	3204      	adds	r2, #4
 800cad4:	f1ba 0f00 	cmp.w	sl, #0
 800cad8:	d020      	beq.n	800cb1c <__multiply+0x11c>
 800cada:	682b      	ldr	r3, [r5, #0]
 800cadc:	4689      	mov	r9, r1
 800cade:	46a8      	mov	r8, r5
 800cae0:	f04f 0b00 	mov.w	fp, #0
 800cae4:	f8b9 c000 	ldrh.w	ip, [r9]
 800cae8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800caec:	fb0a 440c 	mla	r4, sl, ip, r4
 800caf0:	445c      	add	r4, fp
 800caf2:	46c4      	mov	ip, r8
 800caf4:	b29b      	uxth	r3, r3
 800caf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cafa:	f84c 3b04 	str.w	r3, [ip], #4
 800cafe:	f859 3b04 	ldr.w	r3, [r9], #4
 800cb02:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800cb06:	0c1b      	lsrs	r3, r3, #16
 800cb08:	fb0a b303 	mla	r3, sl, r3, fp
 800cb0c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800cb10:	454f      	cmp	r7, r9
 800cb12:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800cb16:	d805      	bhi.n	800cb24 <__multiply+0x124>
 800cb18:	f8c8 3004 	str.w	r3, [r8, #4]
 800cb1c:	3504      	adds	r5, #4
 800cb1e:	e79b      	b.n	800ca58 <__multiply+0x58>
 800cb20:	46d4      	mov	ip, sl
 800cb22:	e7b3      	b.n	800ca8c <__multiply+0x8c>
 800cb24:	46e0      	mov	r8, ip
 800cb26:	e7dd      	b.n	800cae4 <__multiply+0xe4>
 800cb28:	3e01      	subs	r6, #1
 800cb2a:	e799      	b.n	800ca60 <__multiply+0x60>

0800cb2c <__pow5mult>:
 800cb2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb30:	4615      	mov	r5, r2
 800cb32:	f012 0203 	ands.w	r2, r2, #3
 800cb36:	4606      	mov	r6, r0
 800cb38:	460f      	mov	r7, r1
 800cb3a:	d007      	beq.n	800cb4c <__pow5mult+0x20>
 800cb3c:	3a01      	subs	r2, #1
 800cb3e:	4c21      	ldr	r4, [pc, #132]	; (800cbc4 <__pow5mult+0x98>)
 800cb40:	2300      	movs	r3, #0
 800cb42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cb46:	f7ff fec9 	bl	800c8dc <__multadd>
 800cb4a:	4607      	mov	r7, r0
 800cb4c:	10ad      	asrs	r5, r5, #2
 800cb4e:	d035      	beq.n	800cbbc <__pow5mult+0x90>
 800cb50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cb52:	b93c      	cbnz	r4, 800cb64 <__pow5mult+0x38>
 800cb54:	2010      	movs	r0, #16
 800cb56:	f7fe facb 	bl	800b0f0 <malloc>
 800cb5a:	6270      	str	r0, [r6, #36]	; 0x24
 800cb5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cb60:	6004      	str	r4, [r0, #0]
 800cb62:	60c4      	str	r4, [r0, #12]
 800cb64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cb68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cb6c:	b94c      	cbnz	r4, 800cb82 <__pow5mult+0x56>
 800cb6e:	f240 2171 	movw	r1, #625	; 0x271
 800cb72:	4630      	mov	r0, r6
 800cb74:	f7ff ff3b 	bl	800c9ee <__i2b>
 800cb78:	2300      	movs	r3, #0
 800cb7a:	f8c8 0008 	str.w	r0, [r8, #8]
 800cb7e:	4604      	mov	r4, r0
 800cb80:	6003      	str	r3, [r0, #0]
 800cb82:	f04f 0800 	mov.w	r8, #0
 800cb86:	07eb      	lsls	r3, r5, #31
 800cb88:	d50a      	bpl.n	800cba0 <__pow5mult+0x74>
 800cb8a:	4639      	mov	r1, r7
 800cb8c:	4622      	mov	r2, r4
 800cb8e:	4630      	mov	r0, r6
 800cb90:	f7ff ff36 	bl	800ca00 <__multiply>
 800cb94:	4639      	mov	r1, r7
 800cb96:	4681      	mov	r9, r0
 800cb98:	4630      	mov	r0, r6
 800cb9a:	f7ff fe88 	bl	800c8ae <_Bfree>
 800cb9e:	464f      	mov	r7, r9
 800cba0:	106d      	asrs	r5, r5, #1
 800cba2:	d00b      	beq.n	800cbbc <__pow5mult+0x90>
 800cba4:	6820      	ldr	r0, [r4, #0]
 800cba6:	b938      	cbnz	r0, 800cbb8 <__pow5mult+0x8c>
 800cba8:	4622      	mov	r2, r4
 800cbaa:	4621      	mov	r1, r4
 800cbac:	4630      	mov	r0, r6
 800cbae:	f7ff ff27 	bl	800ca00 <__multiply>
 800cbb2:	6020      	str	r0, [r4, #0]
 800cbb4:	f8c0 8000 	str.w	r8, [r0]
 800cbb8:	4604      	mov	r4, r0
 800cbba:	e7e4      	b.n	800cb86 <__pow5mult+0x5a>
 800cbbc:	4638      	mov	r0, r7
 800cbbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbc2:	bf00      	nop
 800cbc4:	0800d678 	.word	0x0800d678

0800cbc8 <__lshift>:
 800cbc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbcc:	460c      	mov	r4, r1
 800cbce:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cbd2:	6923      	ldr	r3, [r4, #16]
 800cbd4:	6849      	ldr	r1, [r1, #4]
 800cbd6:	eb0a 0903 	add.w	r9, sl, r3
 800cbda:	68a3      	ldr	r3, [r4, #8]
 800cbdc:	4607      	mov	r7, r0
 800cbde:	4616      	mov	r6, r2
 800cbe0:	f109 0501 	add.w	r5, r9, #1
 800cbe4:	42ab      	cmp	r3, r5
 800cbe6:	db32      	blt.n	800cc4e <__lshift+0x86>
 800cbe8:	4638      	mov	r0, r7
 800cbea:	f7ff fe2c 	bl	800c846 <_Balloc>
 800cbee:	2300      	movs	r3, #0
 800cbf0:	4680      	mov	r8, r0
 800cbf2:	f100 0114 	add.w	r1, r0, #20
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	4553      	cmp	r3, sl
 800cbfa:	db2b      	blt.n	800cc54 <__lshift+0x8c>
 800cbfc:	6920      	ldr	r0, [r4, #16]
 800cbfe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cc02:	f104 0314 	add.w	r3, r4, #20
 800cc06:	f016 021f 	ands.w	r2, r6, #31
 800cc0a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cc0e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cc12:	d025      	beq.n	800cc60 <__lshift+0x98>
 800cc14:	f1c2 0e20 	rsb	lr, r2, #32
 800cc18:	2000      	movs	r0, #0
 800cc1a:	681e      	ldr	r6, [r3, #0]
 800cc1c:	468a      	mov	sl, r1
 800cc1e:	4096      	lsls	r6, r2
 800cc20:	4330      	orrs	r0, r6
 800cc22:	f84a 0b04 	str.w	r0, [sl], #4
 800cc26:	f853 0b04 	ldr.w	r0, [r3], #4
 800cc2a:	459c      	cmp	ip, r3
 800cc2c:	fa20 f00e 	lsr.w	r0, r0, lr
 800cc30:	d814      	bhi.n	800cc5c <__lshift+0x94>
 800cc32:	6048      	str	r0, [r1, #4]
 800cc34:	b108      	cbz	r0, 800cc3a <__lshift+0x72>
 800cc36:	f109 0502 	add.w	r5, r9, #2
 800cc3a:	3d01      	subs	r5, #1
 800cc3c:	4638      	mov	r0, r7
 800cc3e:	f8c8 5010 	str.w	r5, [r8, #16]
 800cc42:	4621      	mov	r1, r4
 800cc44:	f7ff fe33 	bl	800c8ae <_Bfree>
 800cc48:	4640      	mov	r0, r8
 800cc4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc4e:	3101      	adds	r1, #1
 800cc50:	005b      	lsls	r3, r3, #1
 800cc52:	e7c7      	b.n	800cbe4 <__lshift+0x1c>
 800cc54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800cc58:	3301      	adds	r3, #1
 800cc5a:	e7cd      	b.n	800cbf8 <__lshift+0x30>
 800cc5c:	4651      	mov	r1, sl
 800cc5e:	e7dc      	b.n	800cc1a <__lshift+0x52>
 800cc60:	3904      	subs	r1, #4
 800cc62:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc66:	f841 2f04 	str.w	r2, [r1, #4]!
 800cc6a:	459c      	cmp	ip, r3
 800cc6c:	d8f9      	bhi.n	800cc62 <__lshift+0x9a>
 800cc6e:	e7e4      	b.n	800cc3a <__lshift+0x72>

0800cc70 <__mcmp>:
 800cc70:	6903      	ldr	r3, [r0, #16]
 800cc72:	690a      	ldr	r2, [r1, #16]
 800cc74:	1a9b      	subs	r3, r3, r2
 800cc76:	b530      	push	{r4, r5, lr}
 800cc78:	d10c      	bne.n	800cc94 <__mcmp+0x24>
 800cc7a:	0092      	lsls	r2, r2, #2
 800cc7c:	3014      	adds	r0, #20
 800cc7e:	3114      	adds	r1, #20
 800cc80:	1884      	adds	r4, r0, r2
 800cc82:	4411      	add	r1, r2
 800cc84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cc88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cc8c:	4295      	cmp	r5, r2
 800cc8e:	d003      	beq.n	800cc98 <__mcmp+0x28>
 800cc90:	d305      	bcc.n	800cc9e <__mcmp+0x2e>
 800cc92:	2301      	movs	r3, #1
 800cc94:	4618      	mov	r0, r3
 800cc96:	bd30      	pop	{r4, r5, pc}
 800cc98:	42a0      	cmp	r0, r4
 800cc9a:	d3f3      	bcc.n	800cc84 <__mcmp+0x14>
 800cc9c:	e7fa      	b.n	800cc94 <__mcmp+0x24>
 800cc9e:	f04f 33ff 	mov.w	r3, #4294967295
 800cca2:	e7f7      	b.n	800cc94 <__mcmp+0x24>

0800cca4 <__mdiff>:
 800cca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cca8:	460d      	mov	r5, r1
 800ccaa:	4607      	mov	r7, r0
 800ccac:	4611      	mov	r1, r2
 800ccae:	4628      	mov	r0, r5
 800ccb0:	4614      	mov	r4, r2
 800ccb2:	f7ff ffdd 	bl	800cc70 <__mcmp>
 800ccb6:	1e06      	subs	r6, r0, #0
 800ccb8:	d108      	bne.n	800cccc <__mdiff+0x28>
 800ccba:	4631      	mov	r1, r6
 800ccbc:	4638      	mov	r0, r7
 800ccbe:	f7ff fdc2 	bl	800c846 <_Balloc>
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ccc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cccc:	bfa4      	itt	ge
 800ccce:	4623      	movge	r3, r4
 800ccd0:	462c      	movge	r4, r5
 800ccd2:	4638      	mov	r0, r7
 800ccd4:	6861      	ldr	r1, [r4, #4]
 800ccd6:	bfa6      	itte	ge
 800ccd8:	461d      	movge	r5, r3
 800ccda:	2600      	movge	r6, #0
 800ccdc:	2601      	movlt	r6, #1
 800ccde:	f7ff fdb2 	bl	800c846 <_Balloc>
 800cce2:	692b      	ldr	r3, [r5, #16]
 800cce4:	60c6      	str	r6, [r0, #12]
 800cce6:	6926      	ldr	r6, [r4, #16]
 800cce8:	f105 0914 	add.w	r9, r5, #20
 800ccec:	f104 0214 	add.w	r2, r4, #20
 800ccf0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ccf4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ccf8:	f100 0514 	add.w	r5, r0, #20
 800ccfc:	f04f 0e00 	mov.w	lr, #0
 800cd00:	f852 ab04 	ldr.w	sl, [r2], #4
 800cd04:	f859 4b04 	ldr.w	r4, [r9], #4
 800cd08:	fa1e f18a 	uxtah	r1, lr, sl
 800cd0c:	b2a3      	uxth	r3, r4
 800cd0e:	1ac9      	subs	r1, r1, r3
 800cd10:	0c23      	lsrs	r3, r4, #16
 800cd12:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800cd16:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800cd1a:	b289      	uxth	r1, r1
 800cd1c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800cd20:	45c8      	cmp	r8, r9
 800cd22:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800cd26:	4694      	mov	ip, r2
 800cd28:	f845 3b04 	str.w	r3, [r5], #4
 800cd2c:	d8e8      	bhi.n	800cd00 <__mdiff+0x5c>
 800cd2e:	45bc      	cmp	ip, r7
 800cd30:	d304      	bcc.n	800cd3c <__mdiff+0x98>
 800cd32:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800cd36:	b183      	cbz	r3, 800cd5a <__mdiff+0xb6>
 800cd38:	6106      	str	r6, [r0, #16]
 800cd3a:	e7c5      	b.n	800ccc8 <__mdiff+0x24>
 800cd3c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cd40:	fa1e f381 	uxtah	r3, lr, r1
 800cd44:	141a      	asrs	r2, r3, #16
 800cd46:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cd4a:	b29b      	uxth	r3, r3
 800cd4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd50:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800cd54:	f845 3b04 	str.w	r3, [r5], #4
 800cd58:	e7e9      	b.n	800cd2e <__mdiff+0x8a>
 800cd5a:	3e01      	subs	r6, #1
 800cd5c:	e7e9      	b.n	800cd32 <__mdiff+0x8e>

0800cd5e <__d2b>:
 800cd5e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cd62:	460e      	mov	r6, r1
 800cd64:	2101      	movs	r1, #1
 800cd66:	ec59 8b10 	vmov	r8, r9, d0
 800cd6a:	4615      	mov	r5, r2
 800cd6c:	f7ff fd6b 	bl	800c846 <_Balloc>
 800cd70:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800cd74:	4607      	mov	r7, r0
 800cd76:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cd7a:	bb34      	cbnz	r4, 800cdca <__d2b+0x6c>
 800cd7c:	9301      	str	r3, [sp, #4]
 800cd7e:	f1b8 0300 	subs.w	r3, r8, #0
 800cd82:	d027      	beq.n	800cdd4 <__d2b+0x76>
 800cd84:	a802      	add	r0, sp, #8
 800cd86:	f840 3d08 	str.w	r3, [r0, #-8]!
 800cd8a:	f7ff fe01 	bl	800c990 <__lo0bits>
 800cd8e:	9900      	ldr	r1, [sp, #0]
 800cd90:	b1f0      	cbz	r0, 800cdd0 <__d2b+0x72>
 800cd92:	9a01      	ldr	r2, [sp, #4]
 800cd94:	f1c0 0320 	rsb	r3, r0, #32
 800cd98:	fa02 f303 	lsl.w	r3, r2, r3
 800cd9c:	430b      	orrs	r3, r1
 800cd9e:	40c2      	lsrs	r2, r0
 800cda0:	617b      	str	r3, [r7, #20]
 800cda2:	9201      	str	r2, [sp, #4]
 800cda4:	9b01      	ldr	r3, [sp, #4]
 800cda6:	61bb      	str	r3, [r7, #24]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	bf14      	ite	ne
 800cdac:	2102      	movne	r1, #2
 800cdae:	2101      	moveq	r1, #1
 800cdb0:	6139      	str	r1, [r7, #16]
 800cdb2:	b1c4      	cbz	r4, 800cde6 <__d2b+0x88>
 800cdb4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800cdb8:	4404      	add	r4, r0
 800cdba:	6034      	str	r4, [r6, #0]
 800cdbc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cdc0:	6028      	str	r0, [r5, #0]
 800cdc2:	4638      	mov	r0, r7
 800cdc4:	b003      	add	sp, #12
 800cdc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cdce:	e7d5      	b.n	800cd7c <__d2b+0x1e>
 800cdd0:	6179      	str	r1, [r7, #20]
 800cdd2:	e7e7      	b.n	800cda4 <__d2b+0x46>
 800cdd4:	a801      	add	r0, sp, #4
 800cdd6:	f7ff fddb 	bl	800c990 <__lo0bits>
 800cdda:	9b01      	ldr	r3, [sp, #4]
 800cddc:	617b      	str	r3, [r7, #20]
 800cdde:	2101      	movs	r1, #1
 800cde0:	6139      	str	r1, [r7, #16]
 800cde2:	3020      	adds	r0, #32
 800cde4:	e7e5      	b.n	800cdb2 <__d2b+0x54>
 800cde6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800cdea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cdee:	6030      	str	r0, [r6, #0]
 800cdf0:	6918      	ldr	r0, [r3, #16]
 800cdf2:	f7ff fdae 	bl	800c952 <__hi0bits>
 800cdf6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800cdfa:	e7e1      	b.n	800cdc0 <__d2b+0x62>

0800cdfc <_calloc_r>:
 800cdfc:	b538      	push	{r3, r4, r5, lr}
 800cdfe:	fb02 f401 	mul.w	r4, r2, r1
 800ce02:	4621      	mov	r1, r4
 800ce04:	f7fe f9da 	bl	800b1bc <_malloc_r>
 800ce08:	4605      	mov	r5, r0
 800ce0a:	b118      	cbz	r0, 800ce14 <_calloc_r+0x18>
 800ce0c:	4622      	mov	r2, r4
 800ce0e:	2100      	movs	r1, #0
 800ce10:	f7fe f97e 	bl	800b110 <memset>
 800ce14:	4628      	mov	r0, r5
 800ce16:	bd38      	pop	{r3, r4, r5, pc}

0800ce18 <__ssputs_r>:
 800ce18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce1c:	688e      	ldr	r6, [r1, #8]
 800ce1e:	429e      	cmp	r6, r3
 800ce20:	4682      	mov	sl, r0
 800ce22:	460c      	mov	r4, r1
 800ce24:	4690      	mov	r8, r2
 800ce26:	4699      	mov	r9, r3
 800ce28:	d837      	bhi.n	800ce9a <__ssputs_r+0x82>
 800ce2a:	898a      	ldrh	r2, [r1, #12]
 800ce2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ce30:	d031      	beq.n	800ce96 <__ssputs_r+0x7e>
 800ce32:	6825      	ldr	r5, [r4, #0]
 800ce34:	6909      	ldr	r1, [r1, #16]
 800ce36:	1a6f      	subs	r7, r5, r1
 800ce38:	6965      	ldr	r5, [r4, #20]
 800ce3a:	2302      	movs	r3, #2
 800ce3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce40:	fb95 f5f3 	sdiv	r5, r5, r3
 800ce44:	f109 0301 	add.w	r3, r9, #1
 800ce48:	443b      	add	r3, r7
 800ce4a:	429d      	cmp	r5, r3
 800ce4c:	bf38      	it	cc
 800ce4e:	461d      	movcc	r5, r3
 800ce50:	0553      	lsls	r3, r2, #21
 800ce52:	d530      	bpl.n	800ceb6 <__ssputs_r+0x9e>
 800ce54:	4629      	mov	r1, r5
 800ce56:	f7fe f9b1 	bl	800b1bc <_malloc_r>
 800ce5a:	4606      	mov	r6, r0
 800ce5c:	b950      	cbnz	r0, 800ce74 <__ssputs_r+0x5c>
 800ce5e:	230c      	movs	r3, #12
 800ce60:	f8ca 3000 	str.w	r3, [sl]
 800ce64:	89a3      	ldrh	r3, [r4, #12]
 800ce66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce6a:	81a3      	strh	r3, [r4, #12]
 800ce6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce74:	463a      	mov	r2, r7
 800ce76:	6921      	ldr	r1, [r4, #16]
 800ce78:	f7ff fcd8 	bl	800c82c <memcpy>
 800ce7c:	89a3      	ldrh	r3, [r4, #12]
 800ce7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ce82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce86:	81a3      	strh	r3, [r4, #12]
 800ce88:	6126      	str	r6, [r4, #16]
 800ce8a:	6165      	str	r5, [r4, #20]
 800ce8c:	443e      	add	r6, r7
 800ce8e:	1bed      	subs	r5, r5, r7
 800ce90:	6026      	str	r6, [r4, #0]
 800ce92:	60a5      	str	r5, [r4, #8]
 800ce94:	464e      	mov	r6, r9
 800ce96:	454e      	cmp	r6, r9
 800ce98:	d900      	bls.n	800ce9c <__ssputs_r+0x84>
 800ce9a:	464e      	mov	r6, r9
 800ce9c:	4632      	mov	r2, r6
 800ce9e:	4641      	mov	r1, r8
 800cea0:	6820      	ldr	r0, [r4, #0]
 800cea2:	f000 f91d 	bl	800d0e0 <memmove>
 800cea6:	68a3      	ldr	r3, [r4, #8]
 800cea8:	1b9b      	subs	r3, r3, r6
 800ceaa:	60a3      	str	r3, [r4, #8]
 800ceac:	6823      	ldr	r3, [r4, #0]
 800ceae:	441e      	add	r6, r3
 800ceb0:	6026      	str	r6, [r4, #0]
 800ceb2:	2000      	movs	r0, #0
 800ceb4:	e7dc      	b.n	800ce70 <__ssputs_r+0x58>
 800ceb6:	462a      	mov	r2, r5
 800ceb8:	f000 f92b 	bl	800d112 <_realloc_r>
 800cebc:	4606      	mov	r6, r0
 800cebe:	2800      	cmp	r0, #0
 800cec0:	d1e2      	bne.n	800ce88 <__ssputs_r+0x70>
 800cec2:	6921      	ldr	r1, [r4, #16]
 800cec4:	4650      	mov	r0, sl
 800cec6:	f7fe f92b 	bl	800b120 <_free_r>
 800ceca:	e7c8      	b.n	800ce5e <__ssputs_r+0x46>

0800cecc <_svfiprintf_r>:
 800cecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ced0:	461d      	mov	r5, r3
 800ced2:	898b      	ldrh	r3, [r1, #12]
 800ced4:	061f      	lsls	r7, r3, #24
 800ced6:	b09d      	sub	sp, #116	; 0x74
 800ced8:	4680      	mov	r8, r0
 800ceda:	460c      	mov	r4, r1
 800cedc:	4616      	mov	r6, r2
 800cede:	d50f      	bpl.n	800cf00 <_svfiprintf_r+0x34>
 800cee0:	690b      	ldr	r3, [r1, #16]
 800cee2:	b96b      	cbnz	r3, 800cf00 <_svfiprintf_r+0x34>
 800cee4:	2140      	movs	r1, #64	; 0x40
 800cee6:	f7fe f969 	bl	800b1bc <_malloc_r>
 800ceea:	6020      	str	r0, [r4, #0]
 800ceec:	6120      	str	r0, [r4, #16]
 800ceee:	b928      	cbnz	r0, 800cefc <_svfiprintf_r+0x30>
 800cef0:	230c      	movs	r3, #12
 800cef2:	f8c8 3000 	str.w	r3, [r8]
 800cef6:	f04f 30ff 	mov.w	r0, #4294967295
 800cefa:	e0c8      	b.n	800d08e <_svfiprintf_r+0x1c2>
 800cefc:	2340      	movs	r3, #64	; 0x40
 800cefe:	6163      	str	r3, [r4, #20]
 800cf00:	2300      	movs	r3, #0
 800cf02:	9309      	str	r3, [sp, #36]	; 0x24
 800cf04:	2320      	movs	r3, #32
 800cf06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf0a:	2330      	movs	r3, #48	; 0x30
 800cf0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf10:	9503      	str	r5, [sp, #12]
 800cf12:	f04f 0b01 	mov.w	fp, #1
 800cf16:	4637      	mov	r7, r6
 800cf18:	463d      	mov	r5, r7
 800cf1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cf1e:	b10b      	cbz	r3, 800cf24 <_svfiprintf_r+0x58>
 800cf20:	2b25      	cmp	r3, #37	; 0x25
 800cf22:	d13e      	bne.n	800cfa2 <_svfiprintf_r+0xd6>
 800cf24:	ebb7 0a06 	subs.w	sl, r7, r6
 800cf28:	d00b      	beq.n	800cf42 <_svfiprintf_r+0x76>
 800cf2a:	4653      	mov	r3, sl
 800cf2c:	4632      	mov	r2, r6
 800cf2e:	4621      	mov	r1, r4
 800cf30:	4640      	mov	r0, r8
 800cf32:	f7ff ff71 	bl	800ce18 <__ssputs_r>
 800cf36:	3001      	adds	r0, #1
 800cf38:	f000 80a4 	beq.w	800d084 <_svfiprintf_r+0x1b8>
 800cf3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf3e:	4453      	add	r3, sl
 800cf40:	9309      	str	r3, [sp, #36]	; 0x24
 800cf42:	783b      	ldrb	r3, [r7, #0]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	f000 809d 	beq.w	800d084 <_svfiprintf_r+0x1b8>
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	f04f 32ff 	mov.w	r2, #4294967295
 800cf50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf54:	9304      	str	r3, [sp, #16]
 800cf56:	9307      	str	r3, [sp, #28]
 800cf58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf5c:	931a      	str	r3, [sp, #104]	; 0x68
 800cf5e:	462f      	mov	r7, r5
 800cf60:	2205      	movs	r2, #5
 800cf62:	f817 1b01 	ldrb.w	r1, [r7], #1
 800cf66:	4850      	ldr	r0, [pc, #320]	; (800d0a8 <_svfiprintf_r+0x1dc>)
 800cf68:	f7f3 f93a 	bl	80001e0 <memchr>
 800cf6c:	9b04      	ldr	r3, [sp, #16]
 800cf6e:	b9d0      	cbnz	r0, 800cfa6 <_svfiprintf_r+0xda>
 800cf70:	06d9      	lsls	r1, r3, #27
 800cf72:	bf44      	itt	mi
 800cf74:	2220      	movmi	r2, #32
 800cf76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cf7a:	071a      	lsls	r2, r3, #28
 800cf7c:	bf44      	itt	mi
 800cf7e:	222b      	movmi	r2, #43	; 0x2b
 800cf80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cf84:	782a      	ldrb	r2, [r5, #0]
 800cf86:	2a2a      	cmp	r2, #42	; 0x2a
 800cf88:	d015      	beq.n	800cfb6 <_svfiprintf_r+0xea>
 800cf8a:	9a07      	ldr	r2, [sp, #28]
 800cf8c:	462f      	mov	r7, r5
 800cf8e:	2000      	movs	r0, #0
 800cf90:	250a      	movs	r5, #10
 800cf92:	4639      	mov	r1, r7
 800cf94:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf98:	3b30      	subs	r3, #48	; 0x30
 800cf9a:	2b09      	cmp	r3, #9
 800cf9c:	d94d      	bls.n	800d03a <_svfiprintf_r+0x16e>
 800cf9e:	b1b8      	cbz	r0, 800cfd0 <_svfiprintf_r+0x104>
 800cfa0:	e00f      	b.n	800cfc2 <_svfiprintf_r+0xf6>
 800cfa2:	462f      	mov	r7, r5
 800cfa4:	e7b8      	b.n	800cf18 <_svfiprintf_r+0x4c>
 800cfa6:	4a40      	ldr	r2, [pc, #256]	; (800d0a8 <_svfiprintf_r+0x1dc>)
 800cfa8:	1a80      	subs	r0, r0, r2
 800cfaa:	fa0b f000 	lsl.w	r0, fp, r0
 800cfae:	4318      	orrs	r0, r3
 800cfb0:	9004      	str	r0, [sp, #16]
 800cfb2:	463d      	mov	r5, r7
 800cfb4:	e7d3      	b.n	800cf5e <_svfiprintf_r+0x92>
 800cfb6:	9a03      	ldr	r2, [sp, #12]
 800cfb8:	1d11      	adds	r1, r2, #4
 800cfba:	6812      	ldr	r2, [r2, #0]
 800cfbc:	9103      	str	r1, [sp, #12]
 800cfbe:	2a00      	cmp	r2, #0
 800cfc0:	db01      	blt.n	800cfc6 <_svfiprintf_r+0xfa>
 800cfc2:	9207      	str	r2, [sp, #28]
 800cfc4:	e004      	b.n	800cfd0 <_svfiprintf_r+0x104>
 800cfc6:	4252      	negs	r2, r2
 800cfc8:	f043 0302 	orr.w	r3, r3, #2
 800cfcc:	9207      	str	r2, [sp, #28]
 800cfce:	9304      	str	r3, [sp, #16]
 800cfd0:	783b      	ldrb	r3, [r7, #0]
 800cfd2:	2b2e      	cmp	r3, #46	; 0x2e
 800cfd4:	d10c      	bne.n	800cff0 <_svfiprintf_r+0x124>
 800cfd6:	787b      	ldrb	r3, [r7, #1]
 800cfd8:	2b2a      	cmp	r3, #42	; 0x2a
 800cfda:	d133      	bne.n	800d044 <_svfiprintf_r+0x178>
 800cfdc:	9b03      	ldr	r3, [sp, #12]
 800cfde:	1d1a      	adds	r2, r3, #4
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	9203      	str	r2, [sp, #12]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	bfb8      	it	lt
 800cfe8:	f04f 33ff 	movlt.w	r3, #4294967295
 800cfec:	3702      	adds	r7, #2
 800cfee:	9305      	str	r3, [sp, #20]
 800cff0:	4d2e      	ldr	r5, [pc, #184]	; (800d0ac <_svfiprintf_r+0x1e0>)
 800cff2:	7839      	ldrb	r1, [r7, #0]
 800cff4:	2203      	movs	r2, #3
 800cff6:	4628      	mov	r0, r5
 800cff8:	f7f3 f8f2 	bl	80001e0 <memchr>
 800cffc:	b138      	cbz	r0, 800d00e <_svfiprintf_r+0x142>
 800cffe:	2340      	movs	r3, #64	; 0x40
 800d000:	1b40      	subs	r0, r0, r5
 800d002:	fa03 f000 	lsl.w	r0, r3, r0
 800d006:	9b04      	ldr	r3, [sp, #16]
 800d008:	4303      	orrs	r3, r0
 800d00a:	3701      	adds	r7, #1
 800d00c:	9304      	str	r3, [sp, #16]
 800d00e:	7839      	ldrb	r1, [r7, #0]
 800d010:	4827      	ldr	r0, [pc, #156]	; (800d0b0 <_svfiprintf_r+0x1e4>)
 800d012:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d016:	2206      	movs	r2, #6
 800d018:	1c7e      	adds	r6, r7, #1
 800d01a:	f7f3 f8e1 	bl	80001e0 <memchr>
 800d01e:	2800      	cmp	r0, #0
 800d020:	d038      	beq.n	800d094 <_svfiprintf_r+0x1c8>
 800d022:	4b24      	ldr	r3, [pc, #144]	; (800d0b4 <_svfiprintf_r+0x1e8>)
 800d024:	bb13      	cbnz	r3, 800d06c <_svfiprintf_r+0x1a0>
 800d026:	9b03      	ldr	r3, [sp, #12]
 800d028:	3307      	adds	r3, #7
 800d02a:	f023 0307 	bic.w	r3, r3, #7
 800d02e:	3308      	adds	r3, #8
 800d030:	9303      	str	r3, [sp, #12]
 800d032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d034:	444b      	add	r3, r9
 800d036:	9309      	str	r3, [sp, #36]	; 0x24
 800d038:	e76d      	b.n	800cf16 <_svfiprintf_r+0x4a>
 800d03a:	fb05 3202 	mla	r2, r5, r2, r3
 800d03e:	2001      	movs	r0, #1
 800d040:	460f      	mov	r7, r1
 800d042:	e7a6      	b.n	800cf92 <_svfiprintf_r+0xc6>
 800d044:	2300      	movs	r3, #0
 800d046:	3701      	adds	r7, #1
 800d048:	9305      	str	r3, [sp, #20]
 800d04a:	4619      	mov	r1, r3
 800d04c:	250a      	movs	r5, #10
 800d04e:	4638      	mov	r0, r7
 800d050:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d054:	3a30      	subs	r2, #48	; 0x30
 800d056:	2a09      	cmp	r2, #9
 800d058:	d903      	bls.n	800d062 <_svfiprintf_r+0x196>
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d0c8      	beq.n	800cff0 <_svfiprintf_r+0x124>
 800d05e:	9105      	str	r1, [sp, #20]
 800d060:	e7c6      	b.n	800cff0 <_svfiprintf_r+0x124>
 800d062:	fb05 2101 	mla	r1, r5, r1, r2
 800d066:	2301      	movs	r3, #1
 800d068:	4607      	mov	r7, r0
 800d06a:	e7f0      	b.n	800d04e <_svfiprintf_r+0x182>
 800d06c:	ab03      	add	r3, sp, #12
 800d06e:	9300      	str	r3, [sp, #0]
 800d070:	4622      	mov	r2, r4
 800d072:	4b11      	ldr	r3, [pc, #68]	; (800d0b8 <_svfiprintf_r+0x1ec>)
 800d074:	a904      	add	r1, sp, #16
 800d076:	4640      	mov	r0, r8
 800d078:	f7fe f98e 	bl	800b398 <_printf_float>
 800d07c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d080:	4681      	mov	r9, r0
 800d082:	d1d6      	bne.n	800d032 <_svfiprintf_r+0x166>
 800d084:	89a3      	ldrh	r3, [r4, #12]
 800d086:	065b      	lsls	r3, r3, #25
 800d088:	f53f af35 	bmi.w	800cef6 <_svfiprintf_r+0x2a>
 800d08c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d08e:	b01d      	add	sp, #116	; 0x74
 800d090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d094:	ab03      	add	r3, sp, #12
 800d096:	9300      	str	r3, [sp, #0]
 800d098:	4622      	mov	r2, r4
 800d09a:	4b07      	ldr	r3, [pc, #28]	; (800d0b8 <_svfiprintf_r+0x1ec>)
 800d09c:	a904      	add	r1, sp, #16
 800d09e:	4640      	mov	r0, r8
 800d0a0:	f7fe fc30 	bl	800b904 <_printf_i>
 800d0a4:	e7ea      	b.n	800d07c <_svfiprintf_r+0x1b0>
 800d0a6:	bf00      	nop
 800d0a8:	0800d684 	.word	0x0800d684
 800d0ac:	0800d68a 	.word	0x0800d68a
 800d0b0:	0800d68e 	.word	0x0800d68e
 800d0b4:	0800b399 	.word	0x0800b399
 800d0b8:	0800ce19 	.word	0x0800ce19

0800d0bc <__ascii_mbtowc>:
 800d0bc:	b082      	sub	sp, #8
 800d0be:	b901      	cbnz	r1, 800d0c2 <__ascii_mbtowc+0x6>
 800d0c0:	a901      	add	r1, sp, #4
 800d0c2:	b142      	cbz	r2, 800d0d6 <__ascii_mbtowc+0x1a>
 800d0c4:	b14b      	cbz	r3, 800d0da <__ascii_mbtowc+0x1e>
 800d0c6:	7813      	ldrb	r3, [r2, #0]
 800d0c8:	600b      	str	r3, [r1, #0]
 800d0ca:	7812      	ldrb	r2, [r2, #0]
 800d0cc:	1c10      	adds	r0, r2, #0
 800d0ce:	bf18      	it	ne
 800d0d0:	2001      	movne	r0, #1
 800d0d2:	b002      	add	sp, #8
 800d0d4:	4770      	bx	lr
 800d0d6:	4610      	mov	r0, r2
 800d0d8:	e7fb      	b.n	800d0d2 <__ascii_mbtowc+0x16>
 800d0da:	f06f 0001 	mvn.w	r0, #1
 800d0de:	e7f8      	b.n	800d0d2 <__ascii_mbtowc+0x16>

0800d0e0 <memmove>:
 800d0e0:	4288      	cmp	r0, r1
 800d0e2:	b510      	push	{r4, lr}
 800d0e4:	eb01 0302 	add.w	r3, r1, r2
 800d0e8:	d807      	bhi.n	800d0fa <memmove+0x1a>
 800d0ea:	1e42      	subs	r2, r0, #1
 800d0ec:	4299      	cmp	r1, r3
 800d0ee:	d00a      	beq.n	800d106 <memmove+0x26>
 800d0f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0f4:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d0f8:	e7f8      	b.n	800d0ec <memmove+0xc>
 800d0fa:	4283      	cmp	r3, r0
 800d0fc:	d9f5      	bls.n	800d0ea <memmove+0xa>
 800d0fe:	1881      	adds	r1, r0, r2
 800d100:	1ad2      	subs	r2, r2, r3
 800d102:	42d3      	cmn	r3, r2
 800d104:	d100      	bne.n	800d108 <memmove+0x28>
 800d106:	bd10      	pop	{r4, pc}
 800d108:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d10c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d110:	e7f7      	b.n	800d102 <memmove+0x22>

0800d112 <_realloc_r>:
 800d112:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d114:	4607      	mov	r7, r0
 800d116:	4614      	mov	r4, r2
 800d118:	460e      	mov	r6, r1
 800d11a:	b921      	cbnz	r1, 800d126 <_realloc_r+0x14>
 800d11c:	4611      	mov	r1, r2
 800d11e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d122:	f7fe b84b 	b.w	800b1bc <_malloc_r>
 800d126:	b922      	cbnz	r2, 800d132 <_realloc_r+0x20>
 800d128:	f7fd fffa 	bl	800b120 <_free_r>
 800d12c:	4625      	mov	r5, r4
 800d12e:	4628      	mov	r0, r5
 800d130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d132:	f000 f821 	bl	800d178 <_malloc_usable_size_r>
 800d136:	42a0      	cmp	r0, r4
 800d138:	d20f      	bcs.n	800d15a <_realloc_r+0x48>
 800d13a:	4621      	mov	r1, r4
 800d13c:	4638      	mov	r0, r7
 800d13e:	f7fe f83d 	bl	800b1bc <_malloc_r>
 800d142:	4605      	mov	r5, r0
 800d144:	2800      	cmp	r0, #0
 800d146:	d0f2      	beq.n	800d12e <_realloc_r+0x1c>
 800d148:	4631      	mov	r1, r6
 800d14a:	4622      	mov	r2, r4
 800d14c:	f7ff fb6e 	bl	800c82c <memcpy>
 800d150:	4631      	mov	r1, r6
 800d152:	4638      	mov	r0, r7
 800d154:	f7fd ffe4 	bl	800b120 <_free_r>
 800d158:	e7e9      	b.n	800d12e <_realloc_r+0x1c>
 800d15a:	4635      	mov	r5, r6
 800d15c:	e7e7      	b.n	800d12e <_realloc_r+0x1c>

0800d15e <__ascii_wctomb>:
 800d15e:	b149      	cbz	r1, 800d174 <__ascii_wctomb+0x16>
 800d160:	2aff      	cmp	r2, #255	; 0xff
 800d162:	bf85      	ittet	hi
 800d164:	238a      	movhi	r3, #138	; 0x8a
 800d166:	6003      	strhi	r3, [r0, #0]
 800d168:	700a      	strbls	r2, [r1, #0]
 800d16a:	f04f 30ff 	movhi.w	r0, #4294967295
 800d16e:	bf98      	it	ls
 800d170:	2001      	movls	r0, #1
 800d172:	4770      	bx	lr
 800d174:	4608      	mov	r0, r1
 800d176:	4770      	bx	lr

0800d178 <_malloc_usable_size_r>:
 800d178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d17c:	1f18      	subs	r0, r3, #4
 800d17e:	2b00      	cmp	r3, #0
 800d180:	bfbc      	itt	lt
 800d182:	580b      	ldrlt	r3, [r1, r0]
 800d184:	18c0      	addlt	r0, r0, r3
 800d186:	4770      	bx	lr

0800d188 <ceil>:
 800d188:	ec51 0b10 	vmov	r0, r1, d0
 800d18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d190:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d194:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d198:	2e13      	cmp	r6, #19
 800d19a:	460c      	mov	r4, r1
 800d19c:	ee10 5a10 	vmov	r5, s0
 800d1a0:	4680      	mov	r8, r0
 800d1a2:	dc30      	bgt.n	800d206 <ceil+0x7e>
 800d1a4:	2e00      	cmp	r6, #0
 800d1a6:	da12      	bge.n	800d1ce <ceil+0x46>
 800d1a8:	a333      	add	r3, pc, #204	; (adr r3, 800d278 <ceil+0xf0>)
 800d1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ae:	f7f3 f86d 	bl	800028c <__adddf3>
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	f7f3 fcaf 	bl	8000b18 <__aeabi_dcmpgt>
 800d1ba:	b128      	cbz	r0, 800d1c8 <ceil+0x40>
 800d1bc:	2c00      	cmp	r4, #0
 800d1be:	db55      	blt.n	800d26c <ceil+0xe4>
 800d1c0:	432c      	orrs	r4, r5
 800d1c2:	d057      	beq.n	800d274 <ceil+0xec>
 800d1c4:	4c2e      	ldr	r4, [pc, #184]	; (800d280 <ceil+0xf8>)
 800d1c6:	2500      	movs	r5, #0
 800d1c8:	4621      	mov	r1, r4
 800d1ca:	4628      	mov	r0, r5
 800d1cc:	e025      	b.n	800d21a <ceil+0x92>
 800d1ce:	4f2d      	ldr	r7, [pc, #180]	; (800d284 <ceil+0xfc>)
 800d1d0:	4137      	asrs	r7, r6
 800d1d2:	ea01 0307 	and.w	r3, r1, r7
 800d1d6:	4303      	orrs	r3, r0
 800d1d8:	d01f      	beq.n	800d21a <ceil+0x92>
 800d1da:	a327      	add	r3, pc, #156	; (adr r3, 800d278 <ceil+0xf0>)
 800d1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e0:	f7f3 f854 	bl	800028c <__adddf3>
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	f7f3 fc96 	bl	8000b18 <__aeabi_dcmpgt>
 800d1ec:	2800      	cmp	r0, #0
 800d1ee:	d0eb      	beq.n	800d1c8 <ceil+0x40>
 800d1f0:	2c00      	cmp	r4, #0
 800d1f2:	bfc2      	ittt	gt
 800d1f4:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800d1f8:	fa43 f606 	asrgt.w	r6, r3, r6
 800d1fc:	19a4      	addgt	r4, r4, r6
 800d1fe:	ea24 0407 	bic.w	r4, r4, r7
 800d202:	2500      	movs	r5, #0
 800d204:	e7e0      	b.n	800d1c8 <ceil+0x40>
 800d206:	2e33      	cmp	r6, #51	; 0x33
 800d208:	dd0b      	ble.n	800d222 <ceil+0x9a>
 800d20a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d20e:	d104      	bne.n	800d21a <ceil+0x92>
 800d210:	ee10 2a10 	vmov	r2, s0
 800d214:	460b      	mov	r3, r1
 800d216:	f7f3 f839 	bl	800028c <__adddf3>
 800d21a:	ec41 0b10 	vmov	d0, r0, r1
 800d21e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d222:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d226:	f04f 33ff 	mov.w	r3, #4294967295
 800d22a:	fa23 f707 	lsr.w	r7, r3, r7
 800d22e:	4207      	tst	r7, r0
 800d230:	d0f3      	beq.n	800d21a <ceil+0x92>
 800d232:	a311      	add	r3, pc, #68	; (adr r3, 800d278 <ceil+0xf0>)
 800d234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d238:	f7f3 f828 	bl	800028c <__adddf3>
 800d23c:	2200      	movs	r2, #0
 800d23e:	2300      	movs	r3, #0
 800d240:	f7f3 fc6a 	bl	8000b18 <__aeabi_dcmpgt>
 800d244:	2800      	cmp	r0, #0
 800d246:	d0bf      	beq.n	800d1c8 <ceil+0x40>
 800d248:	2c00      	cmp	r4, #0
 800d24a:	dd02      	ble.n	800d252 <ceil+0xca>
 800d24c:	2e14      	cmp	r6, #20
 800d24e:	d103      	bne.n	800d258 <ceil+0xd0>
 800d250:	3401      	adds	r4, #1
 800d252:	ea25 0507 	bic.w	r5, r5, r7
 800d256:	e7b7      	b.n	800d1c8 <ceil+0x40>
 800d258:	2301      	movs	r3, #1
 800d25a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d25e:	fa03 f606 	lsl.w	r6, r3, r6
 800d262:	4435      	add	r5, r6
 800d264:	4545      	cmp	r5, r8
 800d266:	bf38      	it	cc
 800d268:	18e4      	addcc	r4, r4, r3
 800d26a:	e7f2      	b.n	800d252 <ceil+0xca>
 800d26c:	2500      	movs	r5, #0
 800d26e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d272:	e7a9      	b.n	800d1c8 <ceil+0x40>
 800d274:	4625      	mov	r5, r4
 800d276:	e7a7      	b.n	800d1c8 <ceil+0x40>
 800d278:	8800759c 	.word	0x8800759c
 800d27c:	7e37e43c 	.word	0x7e37e43c
 800d280:	3ff00000 	.word	0x3ff00000
 800d284:	000fffff 	.word	0x000fffff

0800d288 <floor>:
 800d288:	ec51 0b10 	vmov	r0, r1, d0
 800d28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d290:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d294:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d298:	2e13      	cmp	r6, #19
 800d29a:	460c      	mov	r4, r1
 800d29c:	ee10 5a10 	vmov	r5, s0
 800d2a0:	4680      	mov	r8, r0
 800d2a2:	dc34      	bgt.n	800d30e <floor+0x86>
 800d2a4:	2e00      	cmp	r6, #0
 800d2a6:	da16      	bge.n	800d2d6 <floor+0x4e>
 800d2a8:	a335      	add	r3, pc, #212	; (adr r3, 800d380 <floor+0xf8>)
 800d2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ae:	f7f2 ffed 	bl	800028c <__adddf3>
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	f7f3 fc2f 	bl	8000b18 <__aeabi_dcmpgt>
 800d2ba:	b148      	cbz	r0, 800d2d0 <floor+0x48>
 800d2bc:	2c00      	cmp	r4, #0
 800d2be:	da59      	bge.n	800d374 <floor+0xec>
 800d2c0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d2c4:	4a30      	ldr	r2, [pc, #192]	; (800d388 <floor+0x100>)
 800d2c6:	432b      	orrs	r3, r5
 800d2c8:	2500      	movs	r5, #0
 800d2ca:	42ab      	cmp	r3, r5
 800d2cc:	bf18      	it	ne
 800d2ce:	4614      	movne	r4, r2
 800d2d0:	4621      	mov	r1, r4
 800d2d2:	4628      	mov	r0, r5
 800d2d4:	e025      	b.n	800d322 <floor+0x9a>
 800d2d6:	4f2d      	ldr	r7, [pc, #180]	; (800d38c <floor+0x104>)
 800d2d8:	4137      	asrs	r7, r6
 800d2da:	ea01 0307 	and.w	r3, r1, r7
 800d2de:	4303      	orrs	r3, r0
 800d2e0:	d01f      	beq.n	800d322 <floor+0x9a>
 800d2e2:	a327      	add	r3, pc, #156	; (adr r3, 800d380 <floor+0xf8>)
 800d2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2e8:	f7f2 ffd0 	bl	800028c <__adddf3>
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	f7f3 fc12 	bl	8000b18 <__aeabi_dcmpgt>
 800d2f4:	2800      	cmp	r0, #0
 800d2f6:	d0eb      	beq.n	800d2d0 <floor+0x48>
 800d2f8:	2c00      	cmp	r4, #0
 800d2fa:	bfbe      	ittt	lt
 800d2fc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d300:	fa43 f606 	asrlt.w	r6, r3, r6
 800d304:	19a4      	addlt	r4, r4, r6
 800d306:	ea24 0407 	bic.w	r4, r4, r7
 800d30a:	2500      	movs	r5, #0
 800d30c:	e7e0      	b.n	800d2d0 <floor+0x48>
 800d30e:	2e33      	cmp	r6, #51	; 0x33
 800d310:	dd0b      	ble.n	800d32a <floor+0xa2>
 800d312:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d316:	d104      	bne.n	800d322 <floor+0x9a>
 800d318:	ee10 2a10 	vmov	r2, s0
 800d31c:	460b      	mov	r3, r1
 800d31e:	f7f2 ffb5 	bl	800028c <__adddf3>
 800d322:	ec41 0b10 	vmov	d0, r0, r1
 800d326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d32a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d32e:	f04f 33ff 	mov.w	r3, #4294967295
 800d332:	fa23 f707 	lsr.w	r7, r3, r7
 800d336:	4207      	tst	r7, r0
 800d338:	d0f3      	beq.n	800d322 <floor+0x9a>
 800d33a:	a311      	add	r3, pc, #68	; (adr r3, 800d380 <floor+0xf8>)
 800d33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d340:	f7f2 ffa4 	bl	800028c <__adddf3>
 800d344:	2200      	movs	r2, #0
 800d346:	2300      	movs	r3, #0
 800d348:	f7f3 fbe6 	bl	8000b18 <__aeabi_dcmpgt>
 800d34c:	2800      	cmp	r0, #0
 800d34e:	d0bf      	beq.n	800d2d0 <floor+0x48>
 800d350:	2c00      	cmp	r4, #0
 800d352:	da02      	bge.n	800d35a <floor+0xd2>
 800d354:	2e14      	cmp	r6, #20
 800d356:	d103      	bne.n	800d360 <floor+0xd8>
 800d358:	3401      	adds	r4, #1
 800d35a:	ea25 0507 	bic.w	r5, r5, r7
 800d35e:	e7b7      	b.n	800d2d0 <floor+0x48>
 800d360:	2301      	movs	r3, #1
 800d362:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d366:	fa03 f606 	lsl.w	r6, r3, r6
 800d36a:	4435      	add	r5, r6
 800d36c:	4545      	cmp	r5, r8
 800d36e:	bf38      	it	cc
 800d370:	18e4      	addcc	r4, r4, r3
 800d372:	e7f2      	b.n	800d35a <floor+0xd2>
 800d374:	2500      	movs	r5, #0
 800d376:	462c      	mov	r4, r5
 800d378:	e7aa      	b.n	800d2d0 <floor+0x48>
 800d37a:	bf00      	nop
 800d37c:	f3af 8000 	nop.w
 800d380:	8800759c 	.word	0x8800759c
 800d384:	7e37e43c 	.word	0x7e37e43c
 800d388:	bff00000 	.word	0xbff00000
 800d38c:	000fffff 	.word	0x000fffff

0800d390 <fmax>:
 800d390:	b508      	push	{r3, lr}
 800d392:	ed2d 8b04 	vpush	{d8-d9}
 800d396:	eeb0 8a40 	vmov.f32	s16, s0
 800d39a:	eef0 8a60 	vmov.f32	s17, s1
 800d39e:	eeb0 9a41 	vmov.f32	s18, s2
 800d3a2:	eef0 9a61 	vmov.f32	s19, s3
 800d3a6:	f000 f841 	bl	800d42c <__fpclassifyd>
 800d3aa:	b168      	cbz	r0, 800d3c8 <fmax+0x38>
 800d3ac:	eeb0 0a49 	vmov.f32	s0, s18
 800d3b0:	eef0 0a69 	vmov.f32	s1, s19
 800d3b4:	f000 f83a 	bl	800d42c <__fpclassifyd>
 800d3b8:	b150      	cbz	r0, 800d3d0 <fmax+0x40>
 800d3ba:	ec53 2b19 	vmov	r2, r3, d9
 800d3be:	ec51 0b18 	vmov	r0, r1, d8
 800d3c2:	f7f3 fba9 	bl	8000b18 <__aeabi_dcmpgt>
 800d3c6:	b918      	cbnz	r0, 800d3d0 <fmax+0x40>
 800d3c8:	eeb0 8a49 	vmov.f32	s16, s18
 800d3cc:	eef0 8a69 	vmov.f32	s17, s19
 800d3d0:	eeb0 0a48 	vmov.f32	s0, s16
 800d3d4:	eef0 0a68 	vmov.f32	s1, s17
 800d3d8:	ecbd 8b04 	vpop	{d8-d9}
 800d3dc:	bd08      	pop	{r3, pc}

0800d3de <fmin>:
 800d3de:	b508      	push	{r3, lr}
 800d3e0:	ed2d 8b04 	vpush	{d8-d9}
 800d3e4:	eeb0 8a40 	vmov.f32	s16, s0
 800d3e8:	eef0 8a60 	vmov.f32	s17, s1
 800d3ec:	eeb0 9a41 	vmov.f32	s18, s2
 800d3f0:	eef0 9a61 	vmov.f32	s19, s3
 800d3f4:	f000 f81a 	bl	800d42c <__fpclassifyd>
 800d3f8:	b168      	cbz	r0, 800d416 <fmin+0x38>
 800d3fa:	eeb0 0a49 	vmov.f32	s0, s18
 800d3fe:	eef0 0a69 	vmov.f32	s1, s19
 800d402:	f000 f813 	bl	800d42c <__fpclassifyd>
 800d406:	b150      	cbz	r0, 800d41e <fmin+0x40>
 800d408:	ec53 2b19 	vmov	r2, r3, d9
 800d40c:	ec51 0b18 	vmov	r0, r1, d8
 800d410:	f7f3 fb64 	bl	8000adc <__aeabi_dcmplt>
 800d414:	b918      	cbnz	r0, 800d41e <fmin+0x40>
 800d416:	eeb0 8a49 	vmov.f32	s16, s18
 800d41a:	eef0 8a69 	vmov.f32	s17, s19
 800d41e:	eeb0 0a48 	vmov.f32	s0, s16
 800d422:	eef0 0a68 	vmov.f32	s1, s17
 800d426:	ecbd 8b04 	vpop	{d8-d9}
 800d42a:	bd08      	pop	{r3, pc}

0800d42c <__fpclassifyd>:
 800d42c:	ec51 0b10 	vmov	r0, r1, d0
 800d430:	f031 4200 	bics.w	r2, r1, #2147483648	; 0x80000000
 800d434:	b510      	push	{r4, lr}
 800d436:	460b      	mov	r3, r1
 800d438:	d01b      	beq.n	800d472 <__fpclassifyd+0x46>
 800d43a:	f5a1 1480 	sub.w	r4, r1, #1048576	; 0x100000
 800d43e:	490f      	ldr	r1, [pc, #60]	; (800d47c <__fpclassifyd+0x50>)
 800d440:	428c      	cmp	r4, r1
 800d442:	d910      	bls.n	800d466 <__fpclassifyd+0x3a>
 800d444:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 800d448:	490c      	ldr	r1, [pc, #48]	; (800d47c <__fpclassifyd+0x50>)
 800d44a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d44e:	428b      	cmp	r3, r1
 800d450:	d909      	bls.n	800d466 <__fpclassifyd+0x3a>
 800d452:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800d456:	d308      	bcc.n	800d46a <__fpclassifyd+0x3e>
 800d458:	4b09      	ldr	r3, [pc, #36]	; (800d480 <__fpclassifyd+0x54>)
 800d45a:	429a      	cmp	r2, r3
 800d45c:	d107      	bne.n	800d46e <__fpclassifyd+0x42>
 800d45e:	fab0 f080 	clz	r0, r0
 800d462:	0940      	lsrs	r0, r0, #5
 800d464:	bd10      	pop	{r4, pc}
 800d466:	2004      	movs	r0, #4
 800d468:	e7fc      	b.n	800d464 <__fpclassifyd+0x38>
 800d46a:	2003      	movs	r0, #3
 800d46c:	e7fa      	b.n	800d464 <__fpclassifyd+0x38>
 800d46e:	2000      	movs	r0, #0
 800d470:	e7f8      	b.n	800d464 <__fpclassifyd+0x38>
 800d472:	2800      	cmp	r0, #0
 800d474:	d1e6      	bne.n	800d444 <__fpclassifyd+0x18>
 800d476:	2002      	movs	r0, #2
 800d478:	e7f4      	b.n	800d464 <__fpclassifyd+0x38>
 800d47a:	bf00      	nop
 800d47c:	7fdfffff 	.word	0x7fdfffff
 800d480:	7ff00000 	.word	0x7ff00000

0800d484 <_init>:
 800d484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d486:	bf00      	nop
 800d488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d48a:	bc08      	pop	{r3}
 800d48c:	469e      	mov	lr, r3
 800d48e:	4770      	bx	lr

0800d490 <_fini>:
 800d490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d492:	bf00      	nop
 800d494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d496:	bc08      	pop	{r3}
 800d498:	469e      	mov	lr, r3
 800d49a:	4770      	bx	lr

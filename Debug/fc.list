
fc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007514  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800769c  0800769c  0001769c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800770c  0800770c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800770c  0800770c  0001770c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007714  08007714  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007714  08007714  00017714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007718  08007718  00017718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800771c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001960  200001ec  08007908  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  20001b4c  08007908  00021b4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ac5  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002fb8  00000000  00000000  00035ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e10  00000000  00000000  00038ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cd0  00000000  00000000  00039ab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000219cc  00000000  00000000  0003a780  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ea10  00000000  00000000  0005c14c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bb8c5  00000000  00000000  0006ab5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00126421  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a70  00000000  00000000  0012649c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001ec 	.word	0x200001ec
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007684 	.word	0x08007684

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001f0 	.word	0x200001f0
 80001c4:	08007684 	.word	0x08007684

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <BMI088_I2C_Read_Accel_ID>:

#include "BMI088.h"

/* READ ACCEL AND GYRO CHIP IDS */
HAL_StatusTypeDef BMI088_I2C_Read_Accel_ID(I2C_HandleTypeDef *hi2c)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af02      	add	r7, sp, #8
 80004ce:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef ret; // HAL Status Value
	uint8_t buf[4];        // Tx/Rx Buffer

	ret    = HAL_OK;
 80004d0:	2300      	movs	r3, #0
 80004d2:	73fb      	strb	r3, [r7, #15]
	buf[0] = ACC_CHIP_ID;
 80004d4:	2300      	movs	r3, #0
 80004d6:	723b      	strb	r3, [r7, #8]
    ret = (ret | HAL_I2C_Master_Transmit(hi2c, BMI088_ACC_ADDR << 1, buf, 1, HAL_MAX_DELAY));
 80004d8:	f107 0208 	add.w	r2, r7, #8
 80004dc:	f04f 33ff 	mov.w	r3, #4294967295
 80004e0:	9300      	str	r3, [sp, #0]
 80004e2:	2301      	movs	r3, #1
 80004e4:	2130      	movs	r1, #48	; 0x30
 80004e6:	6878      	ldr	r0, [r7, #4]
 80004e8:	f000 ff84 	bl	80013f4 <HAL_I2C_Master_Transmit>
 80004ec:	4603      	mov	r3, r0
 80004ee:	461a      	mov	r2, r3
 80004f0:	7bfb      	ldrb	r3, [r7, #15]
 80004f2:	4313      	orrs	r3, r2
 80004f4:	73fb      	strb	r3, [r7, #15]
	ret = (ret | HAL_I2C_Master_Receive (hi2c, BMI088_ACC_ADDR << 1, buf, 1, HAL_MAX_DELAY));
 80004f6:	f107 0208 	add.w	r2, r7, #8
 80004fa:	f04f 33ff 	mov.w	r3, #4294967295
 80004fe:	9300      	str	r3, [sp, #0]
 8000500:	2301      	movs	r3, #1
 8000502:	2130      	movs	r1, #48	; 0x30
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f001 f873 	bl	80015f0 <HAL_I2C_Master_Receive>
 800050a:	4603      	mov	r3, r0
 800050c:	461a      	mov	r2, r3
 800050e:	7bfb      	ldrb	r3, [r7, #15]
 8000510:	4313      	orrs	r3, r2
 8000512:	73fb      	strb	r3, [r7, #15]
	if (buf[0] != BMI088_ACC_ID){ ret = HAL_ERROR; }
 8000514:	7a3b      	ldrb	r3, [r7, #8]
 8000516:	2b1e      	cmp	r3, #30
 8000518:	d001      	beq.n	800051e <BMI088_I2C_Read_Accel_ID+0x56>
 800051a:	2301      	movs	r3, #1
 800051c:	73fb      	strb	r3, [r7, #15]
	buf[0] = GYRO_CHIP_ID;
 800051e:	2300      	movs	r3, #0
 8000520:	723b      	strb	r3, [r7, #8]
	ret = (ret | HAL_I2C_Master_Transmit(hi2c, BMI088_GYRO_ADDR << 1, buf, 1, HAL_MAX_DELAY));
 8000522:	f107 0208 	add.w	r2, r7, #8
 8000526:	f04f 33ff 	mov.w	r3, #4294967295
 800052a:	9300      	str	r3, [sp, #0]
 800052c:	2301      	movs	r3, #1
 800052e:	21d0      	movs	r1, #208	; 0xd0
 8000530:	6878      	ldr	r0, [r7, #4]
 8000532:	f000 ff5f 	bl	80013f4 <HAL_I2C_Master_Transmit>
 8000536:	4603      	mov	r3, r0
 8000538:	461a      	mov	r2, r3
 800053a:	7bfb      	ldrb	r3, [r7, #15]
 800053c:	4313      	orrs	r3, r2
 800053e:	73fb      	strb	r3, [r7, #15]
	ret = (ret | HAL_I2C_Master_Receive (hi2c, BMI088_GYRO_ADDR << 1, buf, 1, HAL_MAX_DELAY));
 8000540:	f107 0208 	add.w	r2, r7, #8
 8000544:	f04f 33ff 	mov.w	r3, #4294967295
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2301      	movs	r3, #1
 800054c:	21d0      	movs	r1, #208	; 0xd0
 800054e:	6878      	ldr	r0, [r7, #4]
 8000550:	f001 f84e 	bl	80015f0 <HAL_I2C_Master_Receive>
 8000554:	4603      	mov	r3, r0
 8000556:	461a      	mov	r2, r3
 8000558:	7bfb      	ldrb	r3, [r7, #15]
 800055a:	4313      	orrs	r3, r2
 800055c:	73fb      	strb	r3, [r7, #15]
	if (buf[0] != BMI088_GYRO_ID){ ret = HAL_ERROR; }
 800055e:	7a3b      	ldrb	r3, [r7, #8]
 8000560:	2b0f      	cmp	r3, #15
 8000562:	d001      	beq.n	8000568 <BMI088_I2C_Read_Accel_ID+0xa0>
 8000564:	2301      	movs	r3, #1
 8000566:	73fb      	strb	r3, [r7, #15]

	return ret;
 8000568:	7bfb      	ldrb	r3, [r7, #15]
}
 800056a:	4618      	mov	r0, r3
 800056c:	3710      	adds	r7, #16
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <BMI088_I2C_Read_Accel>:

}

/* READ ALL ACCELEROMETER DATA */
HAL_StatusTypeDef BMI088_I2C_Read_Accel(I2C_HandleTypeDef *hi2c, uint8_t *pData)
{
 8000572:	b580      	push	{r7, lr}
 8000574:	b086      	sub	sp, #24
 8000576:	af02      	add	r7, sp, #8
 8000578:	6078      	str	r0, [r7, #4]
 800057a:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret; // HAL Status Value
	uint8_t addr[1];       // Slave Address Buffer

	ret     = HAL_OK;
 800057c:	2300      	movs	r3, #0
 800057e:	73fb      	strb	r3, [r7, #15]
	addr[0] = ACC_DATA;
 8000580:	2312      	movs	r3, #18
 8000582:	733b      	strb	r3, [r7, #12]
	ret = (ret | HAL_I2C_Master_Transmit(hi2c, BMI088_ACC_ADDR << 1, addr,  1, HAL_MAX_DELAY));
 8000584:	f107 020c 	add.w	r2, r7, #12
 8000588:	f04f 33ff 	mov.w	r3, #4294967295
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2301      	movs	r3, #1
 8000590:	2130      	movs	r1, #48	; 0x30
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f000 ff2e 	bl	80013f4 <HAL_I2C_Master_Transmit>
 8000598:	4603      	mov	r3, r0
 800059a:	461a      	mov	r2, r3
 800059c:	7bfb      	ldrb	r3, [r7, #15]
 800059e:	4313      	orrs	r3, r2
 80005a0:	73fb      	strb	r3, [r7, #15]
	ret = (ret | HAL_I2C_Master_Receive (hi2c, BMI088_ACC_ADDR << 1, pData, 6, HAL_MAX_DELAY));
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295
 80005a6:	9300      	str	r3, [sp, #0]
 80005a8:	2306      	movs	r3, #6
 80005aa:	683a      	ldr	r2, [r7, #0]
 80005ac:	2130      	movs	r1, #48	; 0x30
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	f001 f81e 	bl	80015f0 <HAL_I2C_Master_Receive>
 80005b4:	4603      	mov	r3, r0
 80005b6:	461a      	mov	r2, r3
 80005b8:	7bfb      	ldrb	r3, [r7, #15]
 80005ba:	4313      	orrs	r3, r2
 80005bc:	73fb      	strb	r3, [r7, #15]

	return ret;
 80005be:	7bfb      	ldrb	r3, [r7, #15]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3710      	adds	r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08c      	sub	sp, #48	; 0x30
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ce:	f000 fa65 	bl	8000a9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d2:	f000 f83b 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d6:	f000 f8d3 	bl	8000780 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005da:	f000 f8a3 	bl	8000724 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80005de:	f006 fa43 	bl	8006a68 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // CHECK DEVICE IDENTIFIERS
  if ( BMI088_I2C_Read_Accel_ID(&hi2c1) != HAL_OK ) { Error_Handler(); }
 80005e2:	4817      	ldr	r0, [pc, #92]	; (8000640 <main+0x78>)
 80005e4:	f7ff ff70 	bl	80004c8 <BMI088_I2C_Read_Accel_ID>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <main+0x2a>
 80005ee:	f000 f925 	bl	800083c <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 80005f2:	2140      	movs	r1, #64	; 0x40
 80005f4:	4813      	ldr	r0, [pc, #76]	; (8000644 <main+0x7c>)
 80005f6:	f000 fdaa 	bl	800114e <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80005fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005fe:	f000 fabf 	bl	8000b80 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8000602:	2180      	movs	r1, #128	; 0x80
 8000604:	480f      	ldr	r0, [pc, #60]	; (8000644 <main+0x7c>)
 8000606:	f000 fda2 	bl	800114e <HAL_GPIO_TogglePin>

	  if ( BMI088_I2C_Read_Accel(&hi2c1, abuf) != HAL_OK ) { Error_Handler(); }
 800060a:	f107 0318 	add.w	r3, r7, #24
 800060e:	4619      	mov	r1, r3
 8000610:	480b      	ldr	r0, [pc, #44]	; (8000640 <main+0x78>)
 8000612:	f7ff ffae 	bl	8000572 <BMI088_I2C_Read_Accel>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <main+0x58>
 800061c:	f000 f90e 	bl	800083c <Error_Handler>
	  if ( BMI088_I2C_Read_Accel(&hi2c1, gbuf) != HAL_OK ) { Error_Handler(); }
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	4619      	mov	r1, r3
 8000626:	4806      	ldr	r0, [pc, #24]	; (8000640 <main+0x78>)
 8000628:	f7ff ffa3 	bl	8000572 <BMI088_I2C_Read_Accel>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <main+0x6e>
 8000632:	f000 f903 	bl	800083c <Error_Handler>

	  //buf[0] = 0x1E;
	  //sprintf(abuf, "0x%02X\n", buf[0]);
	  //abuf[4] = '\n';
	  CDC_Transmit_FS("TEST \n", 6);
 8000636:	2106      	movs	r1, #6
 8000638:	4803      	ldr	r0, [pc, #12]	; (8000648 <main+0x80>)
 800063a:	f006 fae7 	bl	8006c0c <CDC_Transmit_FS>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 800063e:	e7d8      	b.n	80005f2 <main+0x2a>
 8000640:	20000218 	.word	0x20000218
 8000644:	40020800 	.word	0x40020800
 8000648:	0800769c 	.word	0x0800769c

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	; 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0320 	add.w	r3, r7, #32
 8000656:	2230      	movs	r2, #48	; 0x30
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f006 ff50 	bl	8007500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000670:	2300      	movs	r3, #0
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	4b29      	ldr	r3, [pc, #164]	; (800071c <SystemClock_Config+0xd0>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	4a28      	ldr	r2, [pc, #160]	; (800071c <SystemClock_Config+0xd0>)
 800067a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067e:	6413      	str	r3, [r2, #64]	; 0x40
 8000680:	4b26      	ldr	r3, [pc, #152]	; (800071c <SystemClock_Config+0xd0>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	4b23      	ldr	r3, [pc, #140]	; (8000720 <SystemClock_Config+0xd4>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a22      	ldr	r2, [pc, #136]	; (8000720 <SystemClock_Config+0xd4>)
 8000696:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b20      	ldr	r3, [pc, #128]	; (8000720 <SystemClock_Config+0xd4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006a8:	2303      	movs	r3, #3
 80006aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b2:	2301      	movs	r3, #1
 80006b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b6:	2310      	movs	r3, #16
 80006b8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ba:	2302      	movs	r3, #2
 80006bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006c4:	2310      	movs	r3, #16
 80006c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006c8:	23c0      	movs	r3, #192	; 0xc0
 80006ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d0:	2304      	movs	r3, #4
 80006d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	f107 0320 	add.w	r3, r7, #32
 80006d8:	4618      	mov	r0, r3
 80006da:	f002 fe5f 	bl	800339c <HAL_RCC_OscConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006e4:	f000 f8aa 	bl	800083c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e8:	230f      	movs	r3, #15
 80006ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ec:	2300      	movs	r3, #0
 80006ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f003 f8ba 	bl	800387c <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800070e:	f000 f895 	bl	800083c <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3750      	adds	r7, #80	; 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_I2C1_Init+0x50>)
 800072a:	4a13      	ldr	r2, [pc, #76]	; (8000778 <MX_I2C1_Init+0x54>)
 800072c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_I2C1_Init+0x50>)
 8000730:	4a12      	ldr	r2, [pc, #72]	; (800077c <MX_I2C1_Init+0x58>)
 8000732:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_I2C1_Init+0x50>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_I2C1_Init+0x50>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_I2C1_Init+0x50>)
 8000742:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000746:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <MX_I2C1_Init+0x50>)
 800074a:	2200      	movs	r2, #0
 800074c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_I2C1_Init+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000754:	4b07      	ldr	r3, [pc, #28]	; (8000774 <MX_I2C1_Init+0x50>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_I2C1_Init+0x50>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000760:	4804      	ldr	r0, [pc, #16]	; (8000774 <MX_I2C1_Init+0x50>)
 8000762:	f000 fd0f 	bl	8001184 <HAL_I2C_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800076c:	f000 f866 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000218 	.word	0x20000218
 8000778:	40005400 	.word	0x40005400
 800077c:	00061a80 	.word	0x00061a80

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	; 0x28
 8000784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
 800079a:	4b26      	ldr	r3, [pc, #152]	; (8000834 <MX_GPIO_Init+0xb4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a25      	ldr	r2, [pc, #148]	; (8000834 <MX_GPIO_Init+0xb4>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b23      	ldr	r3, [pc, #140]	; (8000834 <MX_GPIO_Init+0xb4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <MX_GPIO_Init+0xb4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a1e      	ldr	r2, [pc, #120]	; (8000834 <MX_GPIO_Init+0xb4>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <MX_GPIO_Init+0xb4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	4b18      	ldr	r3, [pc, #96]	; (8000834 <MX_GPIO_Init+0xb4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a17      	ldr	r2, [pc, #92]	; (8000834 <MX_GPIO_Init+0xb4>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <MX_GPIO_Init+0xb4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_GPIO_Init+0xb4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a10      	ldr	r2, [pc, #64]	; (8000834 <MX_GPIO_Init+0xb4>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_GPIO_Init+0xb4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	21c0      	movs	r1, #192	; 0xc0
 800080a:	480b      	ldr	r0, [pc, #44]	; (8000838 <MX_GPIO_Init+0xb8>)
 800080c:	f000 fc86 	bl	800111c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000810:	23c0      	movs	r3, #192	; 0xc0
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000814:	2301      	movs	r3, #1
 8000816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	4804      	ldr	r0, [pc, #16]	; (8000838 <MX_GPIO_Init+0xb8>)
 8000828:	f000 fade 	bl	8000de8 <HAL_GPIO_Init>

}
 800082c:	bf00      	nop
 800082e:	3728      	adds	r7, #40	; 0x28
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40023800 	.word	0x40023800
 8000838:	40020800 	.word	0x40020800

0800083c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2140      	movs	r1, #64	; 0x40
 8000846:	4806      	ldr	r0, [pc, #24]	; (8000860 <Error_Handler+0x24>)
 8000848:	f000 fc68 	bl	800111c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800084c:	2201      	movs	r2, #1
 800084e:	2180      	movs	r1, #128	; 0x80
 8000850:	4803      	ldr	r0, [pc, #12]	; (8000860 <Error_Handler+0x24>)
 8000852:	f000 fc63 	bl	800111c <HAL_GPIO_WritePin>

  CDC_Transmit_FS((uint8_t*)"ERROR\n", 6);
 8000856:	2106      	movs	r1, #6
 8000858:	4802      	ldr	r0, [pc, #8]	; (8000864 <Error_Handler+0x28>)
 800085a:	f006 f9d7 	bl	8006c0c <CDC_Transmit_FS>
  while (1)
 800085e:	e7fe      	b.n	800085e <Error_Handler+0x22>
 8000860:	40020800 	.word	0x40020800
 8000864:	080076a4 	.word	0x080076a4

08000868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <HAL_MspInit+0x4c>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000876:	4a0f      	ldr	r2, [pc, #60]	; (80008b4 <HAL_MspInit+0x4c>)
 8000878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800087c:	6453      	str	r3, [r2, #68]	; 0x44
 800087e:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <HAL_MspInit+0x4c>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	603b      	str	r3, [r7, #0]
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <HAL_MspInit+0x4c>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	4a08      	ldr	r2, [pc, #32]	; (80008b4 <HAL_MspInit+0x4c>)
 8000894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000898:	6413      	str	r3, [r2, #64]	; 0x40
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <HAL_MspInit+0x4c>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800

080008b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	; 0x28
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a19      	ldr	r2, [pc, #100]	; (800093c <HAL_I2C_MspInit+0x84>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d12c      	bne.n	8000934 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <HAL_I2C_MspInit+0x88>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a17      	ldr	r2, [pc, #92]	; (8000940 <HAL_I2C_MspInit+0x88>)
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <HAL_I2C_MspInit+0x88>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008fc:	2312      	movs	r3, #18
 80008fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000900:	2301      	movs	r3, #1
 8000902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000904:	2303      	movs	r3, #3
 8000906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000908:	2304      	movs	r3, #4
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	480c      	ldr	r0, [pc, #48]	; (8000944 <HAL_I2C_MspInit+0x8c>)
 8000914:	f000 fa68 	bl	8000de8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <HAL_I2C_MspInit+0x88>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000920:	4a07      	ldr	r2, [pc, #28]	; (8000940 <HAL_I2C_MspInit+0x88>)
 8000922:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000926:	6413      	str	r3, [r2, #64]	; 0x40
 8000928:	4b05      	ldr	r3, [pc, #20]	; (8000940 <HAL_I2C_MspInit+0x88>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000934:	bf00      	nop
 8000936:	3728      	adds	r7, #40	; 0x28
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40005400 	.word	0x40005400
 8000940:	40023800 	.word	0x40023800
 8000944:	40020400 	.word	0x40020400

08000948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800094c:	e7fe      	b.n	800094c <NMI_Handler+0x4>

0800094e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <HardFault_Handler+0x4>

08000954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <MemManage_Handler+0x4>

0800095a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <BusFault_Handler+0x4>

08000960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <UsageFault_Handler+0x4>

08000966 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000994:	f000 f8d4 	bl	8000b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}

0800099c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009a0:	4802      	ldr	r0, [pc, #8]	; (80009ac <OTG_FS_IRQHandler+0x10>)
 80009a2:	f001 fcc8 	bl	8002336 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20001740 	.word	0x20001740

080009b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009b8:	4a14      	ldr	r2, [pc, #80]	; (8000a0c <_sbrk+0x5c>)
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <_sbrk+0x60>)
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009c4:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <_sbrk+0x64>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d102      	bne.n	80009d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <_sbrk+0x64>)
 80009ce:	4a12      	ldr	r2, [pc, #72]	; (8000a18 <_sbrk+0x68>)
 80009d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <_sbrk+0x64>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4413      	add	r3, r2
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d207      	bcs.n	80009f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009e0:	f006 fd54 	bl	800748c <__errno>
 80009e4:	4602      	mov	r2, r0
 80009e6:	230c      	movs	r3, #12
 80009e8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
 80009ee:	e009      	b.n	8000a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <_sbrk+0x64>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009f6:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <_sbrk+0x64>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	4a05      	ldr	r2, [pc, #20]	; (8000a14 <_sbrk+0x64>)
 8000a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a02:	68fb      	ldr	r3, [r7, #12]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20020000 	.word	0x20020000
 8000a10:	00000400 	.word	0x00000400
 8000a14:	20000208 	.word	0x20000208
 8000a18:	20001b50 	.word	0x20001b50

08000a1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <SystemInit+0x28>)
 8000a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a26:	4a07      	ldr	r2, [pc, #28]	; (8000a44 <SystemInit+0x28>)
 8000a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a30:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <SystemInit+0x28>)
 8000a32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a36:	609a      	str	r2, [r3, #8]
#endif
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a80 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a4e:	e003      	b.n	8000a58 <LoopCopyDataInit>

08000a50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a56:	3104      	adds	r1, #4

08000a58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a58:	480b      	ldr	r0, [pc, #44]	; (8000a88 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a60:	d3f6      	bcc.n	8000a50 <CopyDataInit>
  ldr  r2, =_sbss
 8000a62:	4a0b      	ldr	r2, [pc, #44]	; (8000a90 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a64:	e002      	b.n	8000a6c <LoopFillZerobss>

08000a66 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a68:	f842 3b04 	str.w	r3, [r2], #4

08000a6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a70:	d3f9      	bcc.n	8000a66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a72:	f7ff ffd3 	bl	8000a1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a76:	f006 fd0f 	bl	8007498 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a7a:	f7ff fda5 	bl	80005c8 <main>
  bx  lr    
 8000a7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a80:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a84:	0800771c 	.word	0x0800771c
  ldr  r0, =_sdata
 8000a88:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a8c:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 8000a90:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 8000a94:	20001b4c 	.word	0x20001b4c

08000a98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a98:	e7fe      	b.n	8000a98 <ADC_IRQHandler>
	...

08000a9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aa0:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <HAL_Init+0x40>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	; (8000adc <HAL_Init+0x40>)
 8000aa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aac:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <HAL_Init+0x40>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <HAL_Init+0x40>)
 8000ab2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ab6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <HAL_Init+0x40>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a07      	ldr	r2, [pc, #28]	; (8000adc <HAL_Init+0x40>)
 8000abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac4:	2003      	movs	r0, #3
 8000ac6:	f000 f94d 	bl	8000d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aca:	2000      	movs	r0, #0
 8000acc:	f000 f808 	bl	8000ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad0:	f7ff feca 	bl	8000868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40023c00 	.word	0x40023c00

08000ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_InitTick+0x54>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <HAL_InitTick+0x58>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	4619      	mov	r1, r3
 8000af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 f965 	bl	8000dce <HAL_SYSTICK_Config>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e00e      	b.n	8000b2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2b0f      	cmp	r3, #15
 8000b12:	d80a      	bhi.n	8000b2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b14:	2200      	movs	r2, #0
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	f000 f92d 	bl	8000d7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b20:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <HAL_InitTick+0x5c>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b26:	2300      	movs	r3, #0
 8000b28:	e000      	b.n	8000b2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000000 	.word	0x20000000
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	20000004 	.word	0x20000004

08000b40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_IncTick+0x20>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_IncTick+0x24>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <HAL_IncTick+0x24>)
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	20000008 	.word	0x20000008
 8000b64:	2000026c 	.word	0x2000026c

08000b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <HAL_GetTick+0x14>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	2000026c 	.word	0x2000026c

08000b80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b88:	f7ff ffee 	bl	8000b68 <HAL_GetTick>
 8000b8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b98:	d005      	beq.n	8000ba6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <HAL_Delay+0x40>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ba6:	bf00      	nop
 8000ba8:	f7ff ffde 	bl	8000b68 <HAL_GetTick>
 8000bac:	4602      	mov	r2, r0
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	68fa      	ldr	r2, [r7, #12]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d8f7      	bhi.n	8000ba8 <HAL_Delay+0x28>
  {
  }
}
 8000bb8:	bf00      	nop
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000008 	.word	0x20000008

08000bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be0:	4013      	ands	r3, r2
 8000be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf6:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	60d3      	str	r3, [r2, #12]
}
 8000bfc:	bf00      	nop
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <__NVIC_GetPriorityGrouping+0x18>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	0a1b      	lsrs	r3, r3, #8
 8000c16:	f003 0307 	and.w	r3, r3, #7
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db0b      	blt.n	8000c52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	f003 021f 	and.w	r2, r3, #31
 8000c40:	4907      	ldr	r1, [pc, #28]	; (8000c60 <__NVIC_EnableIRQ+0x38>)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	095b      	lsrs	r3, r3, #5
 8000c48:	2001      	movs	r0, #1
 8000c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000e100 	.word	0xe000e100

08000c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	6039      	str	r1, [r7, #0]
 8000c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	db0a      	blt.n	8000c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	490c      	ldr	r1, [pc, #48]	; (8000cb0 <__NVIC_SetPriority+0x4c>)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	0112      	lsls	r2, r2, #4
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	440b      	add	r3, r1
 8000c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c8c:	e00a      	b.n	8000ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	4908      	ldr	r1, [pc, #32]	; (8000cb4 <__NVIC_SetPriority+0x50>)
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	f003 030f 	and.w	r3, r3, #15
 8000c9a:	3b04      	subs	r3, #4
 8000c9c:	0112      	lsls	r2, r2, #4
 8000c9e:	b2d2      	uxtb	r2, r2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	761a      	strb	r2, [r3, #24]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000e100 	.word	0xe000e100
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b089      	sub	sp, #36	; 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	f1c3 0307 	rsb	r3, r3, #7
 8000cd2:	2b04      	cmp	r3, #4
 8000cd4:	bf28      	it	cs
 8000cd6:	2304      	movcs	r3, #4
 8000cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3304      	adds	r3, #4
 8000cde:	2b06      	cmp	r3, #6
 8000ce0:	d902      	bls.n	8000ce8 <NVIC_EncodePriority+0x30>
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3b03      	subs	r3, #3
 8000ce6:	e000      	b.n	8000cea <NVIC_EncodePriority+0x32>
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43da      	mvns	r2, r3
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d00:	f04f 31ff 	mov.w	r1, #4294967295
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0a:	43d9      	mvns	r1, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	4313      	orrs	r3, r2
         );
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3724      	adds	r7, #36	; 0x24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
	...

08000d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d30:	d301      	bcc.n	8000d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d32:	2301      	movs	r3, #1
 8000d34:	e00f      	b.n	8000d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d36:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <SysTick_Config+0x40>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d3e:	210f      	movs	r1, #15
 8000d40:	f04f 30ff 	mov.w	r0, #4294967295
 8000d44:	f7ff ff8e 	bl	8000c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <SysTick_Config+0x40>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d4e:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <SysTick_Config+0x40>)
 8000d50:	2207      	movs	r2, #7
 8000d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	e000e010 	.word	0xe000e010

08000d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f7ff ff29 	bl	8000bc4 <__NVIC_SetPriorityGrouping>
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b086      	sub	sp, #24
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	4603      	mov	r3, r0
 8000d82:	60b9      	str	r1, [r7, #8]
 8000d84:	607a      	str	r2, [r7, #4]
 8000d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d8c:	f7ff ff3e 	bl	8000c0c <__NVIC_GetPriorityGrouping>
 8000d90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	68b9      	ldr	r1, [r7, #8]
 8000d96:	6978      	ldr	r0, [r7, #20]
 8000d98:	f7ff ff8e 	bl	8000cb8 <NVIC_EncodePriority>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da2:	4611      	mov	r1, r2
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff5d 	bl	8000c64 <__NVIC_SetPriority>
}
 8000daa:	bf00      	nop
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	4603      	mov	r3, r0
 8000dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ff31 	bl	8000c28 <__NVIC_EnableIRQ>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff ffa2 	bl	8000d20 <SysTick_Config>
 8000ddc:	4603      	mov	r3, r0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b089      	sub	sp, #36	; 0x24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
 8000e02:	e16b      	b.n	80010dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e04:	2201      	movs	r2, #1
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	697a      	ldr	r2, [r7, #20]
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	f040 815a 	bne.w	80010d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d00b      	beq.n	8000e42 <HAL_GPIO_Init+0x5a>
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d007      	beq.n	8000e42 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e36:	2b11      	cmp	r3, #17
 8000e38:	d003      	beq.n	8000e42 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	2b12      	cmp	r3, #18
 8000e40:	d130      	bne.n	8000ea4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4013      	ands	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	68da      	ldr	r2, [r3, #12]
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e78:	2201      	movs	r2, #1
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	091b      	lsrs	r3, r3, #4
 8000e8e:	f003 0201 	and.w	r2, r3, #1
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	2203      	movs	r2, #3
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	689a      	ldr	r2, [r3, #8]
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d003      	beq.n	8000ee4 <HAL_GPIO_Init+0xfc>
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	2b12      	cmp	r3, #18
 8000ee2:	d123      	bne.n	8000f2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	08da      	lsrs	r2, r3, #3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3208      	adds	r2, #8
 8000eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	f003 0307 	and.w	r3, r3, #7
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	220f      	movs	r2, #15
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	691a      	ldr	r2, [r3, #16]
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	08da      	lsrs	r2, r3, #3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3208      	adds	r2, #8
 8000f26:	69b9      	ldr	r1, [r7, #24]
 8000f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	2203      	movs	r2, #3
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 0203 	and.w	r2, r3, #3
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f000 80b4 	beq.w	80010d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	4b5f      	ldr	r3, [pc, #380]	; (80010f0 <HAL_GPIO_Init+0x308>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	4a5e      	ldr	r2, [pc, #376]	; (80010f0 <HAL_GPIO_Init+0x308>)
 8000f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f7e:	4b5c      	ldr	r3, [pc, #368]	; (80010f0 <HAL_GPIO_Init+0x308>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f8a:	4a5a      	ldr	r2, [pc, #360]	; (80010f4 <HAL_GPIO_Init+0x30c>)
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	089b      	lsrs	r3, r3, #2
 8000f90:	3302      	adds	r3, #2
 8000f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f003 0303 	and.w	r3, r3, #3
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	220f      	movs	r2, #15
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a51      	ldr	r2, [pc, #324]	; (80010f8 <HAL_GPIO_Init+0x310>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d02b      	beq.n	800100e <HAL_GPIO_Init+0x226>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a50      	ldr	r2, [pc, #320]	; (80010fc <HAL_GPIO_Init+0x314>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d025      	beq.n	800100a <HAL_GPIO_Init+0x222>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a4f      	ldr	r2, [pc, #316]	; (8001100 <HAL_GPIO_Init+0x318>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d01f      	beq.n	8001006 <HAL_GPIO_Init+0x21e>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a4e      	ldr	r2, [pc, #312]	; (8001104 <HAL_GPIO_Init+0x31c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d019      	beq.n	8001002 <HAL_GPIO_Init+0x21a>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a4d      	ldr	r2, [pc, #308]	; (8001108 <HAL_GPIO_Init+0x320>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d013      	beq.n	8000ffe <HAL_GPIO_Init+0x216>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a4c      	ldr	r2, [pc, #304]	; (800110c <HAL_GPIO_Init+0x324>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d00d      	beq.n	8000ffa <HAL_GPIO_Init+0x212>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a4b      	ldr	r2, [pc, #300]	; (8001110 <HAL_GPIO_Init+0x328>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d007      	beq.n	8000ff6 <HAL_GPIO_Init+0x20e>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a4a      	ldr	r2, [pc, #296]	; (8001114 <HAL_GPIO_Init+0x32c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d101      	bne.n	8000ff2 <HAL_GPIO_Init+0x20a>
 8000fee:	2307      	movs	r3, #7
 8000ff0:	e00e      	b.n	8001010 <HAL_GPIO_Init+0x228>
 8000ff2:	2308      	movs	r3, #8
 8000ff4:	e00c      	b.n	8001010 <HAL_GPIO_Init+0x228>
 8000ff6:	2306      	movs	r3, #6
 8000ff8:	e00a      	b.n	8001010 <HAL_GPIO_Init+0x228>
 8000ffa:	2305      	movs	r3, #5
 8000ffc:	e008      	b.n	8001010 <HAL_GPIO_Init+0x228>
 8000ffe:	2304      	movs	r3, #4
 8001000:	e006      	b.n	8001010 <HAL_GPIO_Init+0x228>
 8001002:	2303      	movs	r3, #3
 8001004:	e004      	b.n	8001010 <HAL_GPIO_Init+0x228>
 8001006:	2302      	movs	r3, #2
 8001008:	e002      	b.n	8001010 <HAL_GPIO_Init+0x228>
 800100a:	2301      	movs	r3, #1
 800100c:	e000      	b.n	8001010 <HAL_GPIO_Init+0x228>
 800100e:	2300      	movs	r3, #0
 8001010:	69fa      	ldr	r2, [r7, #28]
 8001012:	f002 0203 	and.w	r2, r2, #3
 8001016:	0092      	lsls	r2, r2, #2
 8001018:	4093      	lsls	r3, r2
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001020:	4934      	ldr	r1, [pc, #208]	; (80010f4 <HAL_GPIO_Init+0x30c>)
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	089b      	lsrs	r3, r3, #2
 8001026:	3302      	adds	r3, #2
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800102e:	4b3a      	ldr	r3, [pc, #232]	; (8001118 <HAL_GPIO_Init+0x330>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001052:	4a31      	ldr	r2, [pc, #196]	; (8001118 <HAL_GPIO_Init+0x330>)
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001058:	4b2f      	ldr	r3, [pc, #188]	; (8001118 <HAL_GPIO_Init+0x330>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800107c:	4a26      	ldr	r2, [pc, #152]	; (8001118 <HAL_GPIO_Init+0x330>)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001082:	4b25      	ldr	r3, [pc, #148]	; (8001118 <HAL_GPIO_Init+0x330>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010a6:	4a1c      	ldr	r2, [pc, #112]	; (8001118 <HAL_GPIO_Init+0x330>)
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010ac:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <HAL_GPIO_Init+0x330>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010d0:	4a11      	ldr	r2, [pc, #68]	; (8001118 <HAL_GPIO_Init+0x330>)
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3301      	adds	r3, #1
 80010da:	61fb      	str	r3, [r7, #28]
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	2b0f      	cmp	r3, #15
 80010e0:	f67f ae90 	bls.w	8000e04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010e4:	bf00      	nop
 80010e6:	3724      	adds	r7, #36	; 0x24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40013800 	.word	0x40013800
 80010f8:	40020000 	.word	0x40020000
 80010fc:	40020400 	.word	0x40020400
 8001100:	40020800 	.word	0x40020800
 8001104:	40020c00 	.word	0x40020c00
 8001108:	40021000 	.word	0x40021000
 800110c:	40021400 	.word	0x40021400
 8001110:	40021800 	.word	0x40021800
 8001114:	40021c00 	.word	0x40021c00
 8001118:	40013c00 	.word	0x40013c00

0800111c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	807b      	strh	r3, [r7, #2]
 8001128:	4613      	mov	r3, r2
 800112a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800112c:	787b      	ldrb	r3, [r7, #1]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001132:	887a      	ldrh	r2, [r7, #2]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001138:	e003      	b.n	8001142 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800113a:	887b      	ldrh	r3, [r7, #2]
 800113c:	041a      	lsls	r2, r3, #16
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	619a      	str	r2, [r3, #24]
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
 8001156:	460b      	mov	r3, r1
 8001158:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	695a      	ldr	r2, [r3, #20]
 800115e:	887b      	ldrh	r3, [r7, #2]
 8001160:	401a      	ands	r2, r3
 8001162:	887b      	ldrh	r3, [r7, #2]
 8001164:	429a      	cmp	r2, r3
 8001166:	d104      	bne.n	8001172 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001168:	887b      	ldrh	r3, [r7, #2]
 800116a:	041a      	lsls	r2, r3, #16
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001170:	e002      	b.n	8001178 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001172:	887a      	ldrh	r2, [r7, #2]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	619a      	str	r2, [r3, #24]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e11f      	b.n	80013d6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d106      	bne.n	80011b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff fb84 	bl	80008b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2224      	movs	r2, #36	; 0x24
 80011b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f022 0201 	bic.w	r2, r2, #1
 80011c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80011e8:	f002 fd10 	bl	8003c0c <HAL_RCC_GetPCLK1Freq>
 80011ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	4a7b      	ldr	r2, [pc, #492]	; (80013e0 <HAL_I2C_Init+0x25c>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d807      	bhi.n	8001208 <HAL_I2C_Init+0x84>
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4a7a      	ldr	r2, [pc, #488]	; (80013e4 <HAL_I2C_Init+0x260>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	bf94      	ite	ls
 8001200:	2301      	movls	r3, #1
 8001202:	2300      	movhi	r3, #0
 8001204:	b2db      	uxtb	r3, r3
 8001206:	e006      	b.n	8001216 <HAL_I2C_Init+0x92>
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4a77      	ldr	r2, [pc, #476]	; (80013e8 <HAL_I2C_Init+0x264>)
 800120c:	4293      	cmp	r3, r2
 800120e:	bf94      	ite	ls
 8001210:	2301      	movls	r3, #1
 8001212:	2300      	movhi	r3, #0
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e0db      	b.n	80013d6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	4a72      	ldr	r2, [pc, #456]	; (80013ec <HAL_I2C_Init+0x268>)
 8001222:	fba2 2303 	umull	r2, r3, r2, r3
 8001226:	0c9b      	lsrs	r3, r3, #18
 8001228:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	68ba      	ldr	r2, [r7, #8]
 800123a:	430a      	orrs	r2, r1
 800123c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6a1b      	ldr	r3, [r3, #32]
 8001244:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	4a64      	ldr	r2, [pc, #400]	; (80013e0 <HAL_I2C_Init+0x25c>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d802      	bhi.n	8001258 <HAL_I2C_Init+0xd4>
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	3301      	adds	r3, #1
 8001256:	e009      	b.n	800126c <HAL_I2C_Init+0xe8>
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800125e:	fb02 f303 	mul.w	r3, r2, r3
 8001262:	4a63      	ldr	r2, [pc, #396]	; (80013f0 <HAL_I2C_Init+0x26c>)
 8001264:	fba2 2303 	umull	r2, r3, r2, r3
 8001268:	099b      	lsrs	r3, r3, #6
 800126a:	3301      	adds	r3, #1
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	6812      	ldr	r2, [r2, #0]
 8001270:	430b      	orrs	r3, r1
 8001272:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800127e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	4956      	ldr	r1, [pc, #344]	; (80013e0 <HAL_I2C_Init+0x25c>)
 8001288:	428b      	cmp	r3, r1
 800128a:	d80d      	bhi.n	80012a8 <HAL_I2C_Init+0x124>
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	1e59      	subs	r1, r3, #1
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	fbb1 f3f3 	udiv	r3, r1, r3
 800129a:	3301      	adds	r3, #1
 800129c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012a0:	2b04      	cmp	r3, #4
 80012a2:	bf38      	it	cc
 80012a4:	2304      	movcc	r3, #4
 80012a6:	e04f      	b.n	8001348 <HAL_I2C_Init+0x1c4>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d111      	bne.n	80012d4 <HAL_I2C_Init+0x150>
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	1e58      	subs	r0, r3, #1
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6859      	ldr	r1, [r3, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	440b      	add	r3, r1
 80012be:	fbb0 f3f3 	udiv	r3, r0, r3
 80012c2:	3301      	adds	r3, #1
 80012c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	bf0c      	ite	eq
 80012cc:	2301      	moveq	r3, #1
 80012ce:	2300      	movne	r3, #0
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	e012      	b.n	80012fa <HAL_I2C_Init+0x176>
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	1e58      	subs	r0, r3, #1
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6859      	ldr	r1, [r3, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	440b      	add	r3, r1
 80012e2:	0099      	lsls	r1, r3, #2
 80012e4:	440b      	add	r3, r1
 80012e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80012ea:	3301      	adds	r3, #1
 80012ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	bf0c      	ite	eq
 80012f4:	2301      	moveq	r3, #1
 80012f6:	2300      	movne	r3, #0
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_I2C_Init+0x17e>
 80012fe:	2301      	movs	r3, #1
 8001300:	e022      	b.n	8001348 <HAL_I2C_Init+0x1c4>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10e      	bne.n	8001328 <HAL_I2C_Init+0x1a4>
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	1e58      	subs	r0, r3, #1
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6859      	ldr	r1, [r3, #4]
 8001312:	460b      	mov	r3, r1
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	440b      	add	r3, r1
 8001318:	fbb0 f3f3 	udiv	r3, r0, r3
 800131c:	3301      	adds	r3, #1
 800131e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001326:	e00f      	b.n	8001348 <HAL_I2C_Init+0x1c4>
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	1e58      	subs	r0, r3, #1
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6859      	ldr	r1, [r3, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	440b      	add	r3, r1
 8001336:	0099      	lsls	r1, r3, #2
 8001338:	440b      	add	r3, r1
 800133a:	fbb0 f3f3 	udiv	r3, r0, r3
 800133e:	3301      	adds	r3, #1
 8001340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001344:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001348:	6879      	ldr	r1, [r7, #4]
 800134a:	6809      	ldr	r1, [r1, #0]
 800134c:	4313      	orrs	r3, r2
 800134e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69da      	ldr	r2, [r3, #28]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	431a      	orrs	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	430a      	orrs	r2, r1
 800136a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001376:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	6911      	ldr	r1, [r2, #16]
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	68d2      	ldr	r2, [r2, #12]
 8001382:	4311      	orrs	r1, r2
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	6812      	ldr	r2, [r2, #0]
 8001388:	430b      	orrs	r3, r1
 800138a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	695a      	ldr	r2, [r3, #20]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	431a      	orrs	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	430a      	orrs	r2, r1
 80013a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f042 0201 	orr.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2220      	movs	r2, #32
 80013c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	000186a0 	.word	0x000186a0
 80013e4:	001e847f 	.word	0x001e847f
 80013e8:	003d08ff 	.word	0x003d08ff
 80013ec:	431bde83 	.word	0x431bde83
 80013f0:	10624dd3 	.word	0x10624dd3

080013f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af02      	add	r7, sp, #8
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	607a      	str	r2, [r7, #4]
 80013fe:	461a      	mov	r2, r3
 8001400:	460b      	mov	r3, r1
 8001402:	817b      	strh	r3, [r7, #10]
 8001404:	4613      	mov	r3, r2
 8001406:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001408:	f7ff fbae 	bl	8000b68 <HAL_GetTick>
 800140c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b20      	cmp	r3, #32
 8001418:	f040 80e0 	bne.w	80015dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	2319      	movs	r3, #25
 8001422:	2201      	movs	r2, #1
 8001424:	4970      	ldr	r1, [pc, #448]	; (80015e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	f000 fc58 	bl	8001cdc <I2C_WaitOnFlagUntilTimeout>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001432:	2302      	movs	r3, #2
 8001434:	e0d3      	b.n	80015de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800143c:	2b01      	cmp	r3, #1
 800143e:	d101      	bne.n	8001444 <HAL_I2C_Master_Transmit+0x50>
 8001440:	2302      	movs	r3, #2
 8001442:	e0cc      	b.n	80015de <HAL_I2C_Master_Transmit+0x1ea>
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	2b01      	cmp	r3, #1
 8001458:	d007      	beq.n	800146a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f042 0201 	orr.w	r2, r2, #1
 8001468:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001478:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2221      	movs	r2, #33	; 0x21
 800147e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2210      	movs	r2, #16
 8001486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2200      	movs	r2, #0
 800148e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	893a      	ldrh	r2, [r7, #8]
 800149a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	4a50      	ldr	r2, [pc, #320]	; (80015ec <HAL_I2C_Master_Transmit+0x1f8>)
 80014aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80014ac:	8979      	ldrh	r1, [r7, #10]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	6a3a      	ldr	r2, [r7, #32]
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f000 fac2 	bl	8001a3c <I2C_MasterRequestWrite>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e08d      	b.n	80015de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80014d8:	e066      	b.n	80015a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	6a39      	ldr	r1, [r7, #32]
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f000 fcd2 	bl	8001e88 <I2C_WaitOnTXEFlagUntilTimeout>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d00d      	beq.n	8001506 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	d107      	bne.n	8001502 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001500:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e06b      	b.n	80015de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	781a      	ldrb	r2, [r3, #0]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001516:	1c5a      	adds	r2, r3, #1
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001520:	b29b      	uxth	r3, r3
 8001522:	3b01      	subs	r3, #1
 8001524:	b29a      	uxth	r2, r3
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800152e:	3b01      	subs	r3, #1
 8001530:	b29a      	uxth	r2, r3
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	2b04      	cmp	r3, #4
 8001542:	d11b      	bne.n	800157c <HAL_I2C_Master_Transmit+0x188>
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001548:	2b00      	cmp	r3, #0
 800154a:	d017      	beq.n	800157c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001550:	781a      	ldrb	r2, [r3, #0]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155c:	1c5a      	adds	r2, r3, #1
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001566:	b29b      	uxth	r3, r3
 8001568:	3b01      	subs	r3, #1
 800156a:	b29a      	uxth	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001574:	3b01      	subs	r3, #1
 8001576:	b29a      	uxth	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800157c:	697a      	ldr	r2, [r7, #20]
 800157e:	6a39      	ldr	r1, [r7, #32]
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f000 fcc2 	bl	8001f0a <I2C_WaitOnBTFFlagUntilTimeout>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d00d      	beq.n	80015a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	2b04      	cmp	r3, #4
 8001592:	d107      	bne.n	80015a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e01a      	b.n	80015de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d194      	bne.n	80014da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2220      	movs	r2, #32
 80015c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80015d8:	2300      	movs	r3, #0
 80015da:	e000      	b.n	80015de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80015dc:	2302      	movs	r3, #2
  }
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	00100002 	.word	0x00100002
 80015ec:	ffff0000 	.word	0xffff0000

080015f0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08c      	sub	sp, #48	; 0x30
 80015f4:	af02      	add	r7, sp, #8
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	607a      	str	r2, [r7, #4]
 80015fa:	461a      	mov	r2, r3
 80015fc:	460b      	mov	r3, r1
 80015fe:	817b      	strh	r3, [r7, #10]
 8001600:	4613      	mov	r3, r2
 8001602:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001604:	f7ff fab0 	bl	8000b68 <HAL_GetTick>
 8001608:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b20      	cmp	r3, #32
 8001614:	f040 820b 	bne.w	8001a2e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	2319      	movs	r3, #25
 800161e:	2201      	movs	r2, #1
 8001620:	497c      	ldr	r1, [pc, #496]	; (8001814 <HAL_I2C_Master_Receive+0x224>)
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f000 fb5a 	bl	8001cdc <I2C_WaitOnFlagUntilTimeout>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800162e:	2302      	movs	r3, #2
 8001630:	e1fe      	b.n	8001a30 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001638:	2b01      	cmp	r3, #1
 800163a:	d101      	bne.n	8001640 <HAL_I2C_Master_Receive+0x50>
 800163c:	2302      	movs	r3, #2
 800163e:	e1f7      	b.n	8001a30 <HAL_I2C_Master_Receive+0x440>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b01      	cmp	r3, #1
 8001654:	d007      	beq.n	8001666 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f042 0201 	orr.w	r2, r2, #1
 8001664:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001674:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2222      	movs	r2, #34	; 0x22
 800167a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2210      	movs	r2, #16
 8001682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2200      	movs	r2, #0
 800168a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	893a      	ldrh	r2, [r7, #8]
 8001696:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800169c:	b29a      	uxth	r2, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	4a5c      	ldr	r2, [pc, #368]	; (8001818 <HAL_I2C_Master_Receive+0x228>)
 80016a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80016a8:	8979      	ldrh	r1, [r7, #10]
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	f000 fa46 	bl	8001b40 <I2C_MasterRequestRead>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e1b8      	b.n	8001a30 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d113      	bne.n	80016ee <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016c6:	2300      	movs	r3, #0
 80016c8:	623b      	str	r3, [r7, #32]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	695b      	ldr	r3, [r3, #20]
 80016d0:	623b      	str	r3, [r7, #32]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	623b      	str	r3, [r7, #32]
 80016da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	e18c      	b.n	8001a08 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d11b      	bne.n	800172e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001704:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	61fb      	str	r3, [r7, #28]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	61fb      	str	r3, [r7, #28]
 800171a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	e16c      	b.n	8001a08 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001732:	2b02      	cmp	r3, #2
 8001734:	d11b      	bne.n	800176e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001744:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001754:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001756:	2300      	movs	r3, #0
 8001758:	61bb      	str	r3, [r7, #24]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	61bb      	str	r3, [r7, #24]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	61bb      	str	r3, [r7, #24]
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	e14c      	b.n	8001a08 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800177c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	695b      	ldr	r3, [r3, #20]
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001794:	e138      	b.n	8001a08 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800179a:	2b03      	cmp	r3, #3
 800179c:	f200 80f1 	bhi.w	8001982 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d123      	bne.n	80017f0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f000 fbed 	bl	8001f8c <I2C_WaitOnRXNEFlagUntilTimeout>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e139      	b.n	8001a30 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	691a      	ldr	r2, [r3, #16]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d8:	3b01      	subs	r3, #1
 80017da:	b29a      	uxth	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	3b01      	subs	r3, #1
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80017ee:	e10b      	b.n	8001a08 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d14e      	bne.n	8001896 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017fe:	2200      	movs	r2, #0
 8001800:	4906      	ldr	r1, [pc, #24]	; (800181c <HAL_I2C_Master_Receive+0x22c>)
 8001802:	68f8      	ldr	r0, [r7, #12]
 8001804:	f000 fa6a 	bl	8001cdc <I2C_WaitOnFlagUntilTimeout>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d008      	beq.n	8001820 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e10e      	b.n	8001a30 <HAL_I2C_Master_Receive+0x440>
 8001812:	bf00      	nop
 8001814:	00100002 	.word	0x00100002
 8001818:	ffff0000 	.word	0xffff0000
 800181c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800182e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	691a      	ldr	r2, [r3, #16]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800184c:	3b01      	subs	r3, #1
 800184e:	b29a      	uxth	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001858:	b29b      	uxth	r3, r3
 800185a:	3b01      	subs	r3, #1
 800185c:	b29a      	uxth	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	691a      	ldr	r2, [r3, #16]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001874:	1c5a      	adds	r2, r3, #1
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800187e:	3b01      	subs	r3, #1
 8001880:	b29a      	uxth	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800188a:	b29b      	uxth	r3, r3
 800188c:	3b01      	subs	r3, #1
 800188e:	b29a      	uxth	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001894:	e0b8      	b.n	8001a08 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800189c:	2200      	movs	r2, #0
 800189e:	4966      	ldr	r1, [pc, #408]	; (8001a38 <HAL_I2C_Master_Receive+0x448>)
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f000 fa1b 	bl	8001cdc <I2C_WaitOnFlagUntilTimeout>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e0bf      	b.n	8001a30 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	691a      	ldr	r2, [r3, #16]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018dc:	3b01      	subs	r3, #1
 80018de:	b29a      	uxth	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	3b01      	subs	r3, #1
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018f8:	2200      	movs	r2, #0
 80018fa:	494f      	ldr	r1, [pc, #316]	; (8001a38 <HAL_I2C_Master_Receive+0x448>)
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f000 f9ed 	bl	8001cdc <I2C_WaitOnFlagUntilTimeout>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e091      	b.n	8001a30 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800191a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	691a      	ldr	r2, [r3, #16]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192e:	1c5a      	adds	r2, r3, #1
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001938:	3b01      	subs	r3, #1
 800193a:	b29a      	uxth	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001944:	b29b      	uxth	r3, r3
 8001946:	3b01      	subs	r3, #1
 8001948:	b29a      	uxth	r2, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	691a      	ldr	r2, [r3, #16]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	1c5a      	adds	r2, r3, #1
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800196a:	3b01      	subs	r3, #1
 800196c:	b29a      	uxth	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001976:	b29b      	uxth	r3, r3
 8001978:	3b01      	subs	r3, #1
 800197a:	b29a      	uxth	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001980:	e042      	b.n	8001a08 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001984:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	f000 fb00 	bl	8001f8c <I2C_WaitOnRXNEFlagUntilTimeout>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e04c      	b.n	8001a30 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	691a      	ldr	r2, [r3, #16]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a8:	1c5a      	adds	r2, r3, #1
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b2:	3b01      	subs	r3, #1
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019be:	b29b      	uxth	r3, r3
 80019c0:	3b01      	subs	r3, #1
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	d118      	bne.n	8001a08 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	691a      	ldr	r2, [r3, #16]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e8:	1c5a      	adds	r2, r3, #1
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f2:	3b01      	subs	r3, #1
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	3b01      	subs	r3, #1
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f47f aec2 	bne.w	8001796 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2220      	movs	r2, #32
 8001a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	e000      	b.n	8001a30 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001a2e:	2302      	movs	r3, #2
  }
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3728      	adds	r7, #40	; 0x28
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	00010004 	.word	0x00010004

08001a3c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af02      	add	r7, sp, #8
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	607a      	str	r2, [r7, #4]
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a50:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	d006      	beq.n	8001a66 <I2C_MasterRequestWrite+0x2a>
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d003      	beq.n	8001a66 <I2C_MasterRequestWrite+0x2a>
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a64:	d108      	bne.n	8001a78 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	e00b      	b.n	8001a90 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7c:	2b12      	cmp	r3, #18
 8001a7e:	d107      	bne.n	8001a90 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f000 f91d 	bl	8001cdc <I2C_WaitOnFlagUntilTimeout>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d00d      	beq.n	8001ac4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ab6:	d103      	bne.n	8001ac0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001abe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e035      	b.n	8001b30 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001acc:	d108      	bne.n	8001ae0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ace:	897b      	ldrh	r3, [r7, #10]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001adc:	611a      	str	r2, [r3, #16]
 8001ade:	e01b      	b.n	8001b18 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ae0:	897b      	ldrh	r3, [r7, #10]
 8001ae2:	11db      	asrs	r3, r3, #7
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	f003 0306 	and.w	r3, r3, #6
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	f063 030f 	orn	r3, r3, #15
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	490e      	ldr	r1, [pc, #56]	; (8001b38 <I2C_MasterRequestWrite+0xfc>)
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f000 f943 	bl	8001d8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e010      	b.n	8001b30 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001b0e:	897b      	ldrh	r3, [r7, #10]
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	4907      	ldr	r1, [pc, #28]	; (8001b3c <I2C_MasterRequestWrite+0x100>)
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f000 f933 	bl	8001d8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e000      	b.n	8001b30 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	00010008 	.word	0x00010008
 8001b3c:	00010002 	.word	0x00010002

08001b40 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af02      	add	r7, sp, #8
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	607a      	str	r2, [r7, #4]
 8001b4a:	603b      	str	r3, [r7, #0]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b54:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b64:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	d006      	beq.n	8001b7a <I2C_MasterRequestRead+0x3a>
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d003      	beq.n	8001b7a <I2C_MasterRequestRead+0x3a>
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b78:	d108      	bne.n	8001b8c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	e00b      	b.n	8001ba4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b90:	2b11      	cmp	r3, #17
 8001b92:	d107      	bne.n	8001ba4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ba2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	f000 f893 	bl	8001cdc <I2C_WaitOnFlagUntilTimeout>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00d      	beq.n	8001bd8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bca:	d103      	bne.n	8001bd4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e079      	b.n	8001ccc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001be0:	d108      	bne.n	8001bf4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001be2:	897b      	ldrh	r3, [r7, #10]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	611a      	str	r2, [r3, #16]
 8001bf2:	e05f      	b.n	8001cb4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001bf4:	897b      	ldrh	r3, [r7, #10]
 8001bf6:	11db      	asrs	r3, r3, #7
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	f003 0306 	and.w	r3, r3, #6
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	f063 030f 	orn	r3, r3, #15
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	4930      	ldr	r1, [pc, #192]	; (8001cd4 <I2C_MasterRequestRead+0x194>)
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 f8b9 	bl	8001d8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e054      	b.n	8001ccc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001c22:	897b      	ldrh	r3, [r7, #10]
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	4929      	ldr	r1, [pc, #164]	; (8001cd8 <I2C_MasterRequestRead+0x198>)
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f000 f8a9 	bl	8001d8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e044      	b.n	8001ccc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c66:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f000 f831 	bl	8001cdc <I2C_WaitOnFlagUntilTimeout>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00d      	beq.n	8001c9c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c8e:	d103      	bne.n	8001c98 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c96:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e017      	b.n	8001ccc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001c9c:	897b      	ldrh	r3, [r7, #10]
 8001c9e:	11db      	asrs	r3, r3, #7
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	f003 0306 	and.w	r3, r3, #6
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	f063 030e 	orn	r3, r3, #14
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	4907      	ldr	r1, [pc, #28]	; (8001cd8 <I2C_MasterRequestRead+0x198>)
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f000 f865 	bl	8001d8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	00010008 	.word	0x00010008
 8001cd8:	00010002 	.word	0x00010002

08001cdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	603b      	str	r3, [r7, #0]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cec:	e025      	b.n	8001d3a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf4:	d021      	beq.n	8001d3a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cf6:	f7fe ff37 	bl	8000b68 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d302      	bcc.n	8001d0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d116      	bne.n	8001d3a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2220      	movs	r2, #32
 8001d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f043 0220 	orr.w	r2, r3, #32
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e023      	b.n	8001d82 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	0c1b      	lsrs	r3, r3, #16
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d10d      	bne.n	8001d60 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	bf0c      	ite	eq
 8001d56:	2301      	moveq	r3, #1
 8001d58:	2300      	movne	r3, #0
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	e00c      	b.n	8001d7a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	43da      	mvns	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	bf0c      	ite	eq
 8001d72:	2301      	moveq	r3, #1
 8001d74:	2300      	movne	r3, #0
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	461a      	mov	r2, r3
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d0b6      	beq.n	8001cee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b084      	sub	sp, #16
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	60f8      	str	r0, [r7, #12]
 8001d92:	60b9      	str	r1, [r7, #8]
 8001d94:	607a      	str	r2, [r7, #4]
 8001d96:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d98:	e051      	b.n	8001e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	695b      	ldr	r3, [r3, #20]
 8001da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001da8:	d123      	bne.n	8001df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001db8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001dc2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2220      	movs	r2, #32
 8001dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	f043 0204 	orr.w	r2, r3, #4
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e046      	b.n	8001e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df8:	d021      	beq.n	8001e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dfa:	f7fe feb5 	bl	8000b68 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d302      	bcc.n	8001e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d116      	bne.n	8001e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2200      	movs	r2, #0
 8001e14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2220      	movs	r2, #32
 8001e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	f043 0220 	orr.w	r2, r3, #32
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e020      	b.n	8001e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	0c1b      	lsrs	r3, r3, #16
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d10c      	bne.n	8001e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	43da      	mvns	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	4013      	ands	r3, r2
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	bf14      	ite	ne
 8001e5a:	2301      	movne	r3, #1
 8001e5c:	2300      	moveq	r3, #0
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	e00b      	b.n	8001e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	43da      	mvns	r2, r3
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	bf14      	ite	ne
 8001e74:	2301      	movne	r3, #1
 8001e76:	2300      	moveq	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d18d      	bne.n	8001d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e94:	e02d      	b.n	8001ef2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f000 f8ce 	bl	8002038 <I2C_IsAcknowledgeFailed>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e02d      	b.n	8001f02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eac:	d021      	beq.n	8001ef2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eae:	f7fe fe5b 	bl	8000b68 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	68ba      	ldr	r2, [r7, #8]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d302      	bcc.n	8001ec4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d116      	bne.n	8001ef2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2220      	movs	r2, #32
 8001ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	f043 0220 	orr.w	r2, r3, #32
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e007      	b.n	8001f02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efc:	2b80      	cmp	r3, #128	; 0x80
 8001efe:	d1ca      	bne.n	8001e96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b084      	sub	sp, #16
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	60f8      	str	r0, [r7, #12]
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f16:	e02d      	b.n	8001f74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f000 f88d 	bl	8002038 <I2C_IsAcknowledgeFailed>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e02d      	b.n	8001f84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f2e:	d021      	beq.n	8001f74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f30:	f7fe fe1a 	bl	8000b68 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d302      	bcc.n	8001f46 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d116      	bne.n	8001f74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2220      	movs	r2, #32
 8001f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	f043 0220 	orr.w	r2, r3, #32
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e007      	b.n	8001f84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f003 0304 	and.w	r3, r3, #4
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d1ca      	bne.n	8001f18 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f98:	e042      	b.n	8002020 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	f003 0310 	and.w	r3, r3, #16
 8001fa4:	2b10      	cmp	r3, #16
 8001fa6:	d119      	bne.n	8001fdc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f06f 0210 	mvn.w	r2, #16
 8001fb0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2220      	movs	r2, #32
 8001fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e029      	b.n	8002030 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fdc:	f7fe fdc4 	bl	8000b68 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d302      	bcc.n	8001ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d116      	bne.n	8002020 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	f043 0220 	orr.w	r2, r3, #32
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e007      	b.n	8002030 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800202a:	2b40      	cmp	r3, #64	; 0x40
 800202c:	d1b5      	bne.n	8001f9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800204e:	d11b      	bne.n	8002088 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002058:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2220      	movs	r2, #32
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	f043 0204 	orr.w	r2, r3, #4
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e000      	b.n	800208a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002096:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002098:	b08f      	sub	sp, #60	; 0x3c
 800209a:	af0a      	add	r7, sp, #40	; 0x28
 800209c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e10f      	b.n	80022c8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d106      	bne.n	80020c8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f004 fee6 	bl	8006e94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2203      	movs	r2, #3
 80020cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d102      	bne.n	80020e2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f001 feb9 	bl	8003e5e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	603b      	str	r3, [r7, #0]
 80020f2:	687e      	ldr	r6, [r7, #4]
 80020f4:	466d      	mov	r5, sp
 80020f6:	f106 0410 	add.w	r4, r6, #16
 80020fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002100:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002102:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002106:	e885 0003 	stmia.w	r5, {r0, r1}
 800210a:	1d33      	adds	r3, r6, #4
 800210c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800210e:	6838      	ldr	r0, [r7, #0]
 8002110:	f001 fd90 	bl	8003c34 <USB_CoreInit>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d005      	beq.n	8002126 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2202      	movs	r2, #2
 800211e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e0d0      	b.n	80022c8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2100      	movs	r1, #0
 800212c:	4618      	mov	r0, r3
 800212e:	f001 fea7 	bl	8003e80 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002132:	2300      	movs	r3, #0
 8002134:	73fb      	strb	r3, [r7, #15]
 8002136:	e04a      	b.n	80021ce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002138:	7bfa      	ldrb	r2, [r7, #15]
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	1a9b      	subs	r3, r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	333d      	adds	r3, #61	; 0x3d
 8002148:	2201      	movs	r2, #1
 800214a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800214c:	7bfa      	ldrb	r2, [r7, #15]
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	1a9b      	subs	r3, r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	333c      	adds	r3, #60	; 0x3c
 800215c:	7bfa      	ldrb	r2, [r7, #15]
 800215e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002160:	7bfa      	ldrb	r2, [r7, #15]
 8002162:	7bfb      	ldrb	r3, [r7, #15]
 8002164:	b298      	uxth	r0, r3
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	1a9b      	subs	r3, r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	3342      	adds	r3, #66	; 0x42
 8002174:	4602      	mov	r2, r0
 8002176:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002178:	7bfa      	ldrb	r2, [r7, #15]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	1a9b      	subs	r3, r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	333f      	adds	r3, #63	; 0x3f
 8002188:	2200      	movs	r2, #0
 800218a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800218c:	7bfa      	ldrb	r2, [r7, #15]
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	1a9b      	subs	r3, r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	3344      	adds	r3, #68	; 0x44
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021a0:	7bfa      	ldrb	r2, [r7, #15]
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	4613      	mov	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	1a9b      	subs	r3, r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	3348      	adds	r3, #72	; 0x48
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021b4:	7bfa      	ldrb	r2, [r7, #15]
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	1a9b      	subs	r3, r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	3350      	adds	r3, #80	; 0x50
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	3301      	adds	r3, #1
 80021cc:	73fb      	strb	r3, [r7, #15]
 80021ce:	7bfa      	ldrb	r2, [r7, #15]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d3af      	bcc.n	8002138 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021d8:	2300      	movs	r3, #0
 80021da:	73fb      	strb	r3, [r7, #15]
 80021dc:	e044      	b.n	8002268 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021de:	7bfa      	ldrb	r2, [r7, #15]
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	1a9b      	subs	r3, r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	440b      	add	r3, r1
 80021ec:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80021f0:	2200      	movs	r2, #0
 80021f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021f4:	7bfa      	ldrb	r2, [r7, #15]
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	1a9b      	subs	r3, r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002206:	7bfa      	ldrb	r2, [r7, #15]
 8002208:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800220a:	7bfa      	ldrb	r2, [r7, #15]
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	4613      	mov	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	1a9b      	subs	r3, r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	440b      	add	r3, r1
 8002218:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800221c:	2200      	movs	r2, #0
 800221e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002220:	7bfa      	ldrb	r2, [r7, #15]
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	1a9b      	subs	r3, r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	440b      	add	r3, r1
 800222e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002236:	7bfa      	ldrb	r2, [r7, #15]
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	1a9b      	subs	r3, r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800224c:	7bfa      	ldrb	r2, [r7, #15]
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	1a9b      	subs	r3, r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002262:	7bfb      	ldrb	r3, [r7, #15]
 8002264:	3301      	adds	r3, #1
 8002266:	73fb      	strb	r3, [r7, #15]
 8002268:	7bfa      	ldrb	r2, [r7, #15]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	429a      	cmp	r2, r3
 8002270:	d3b5      	bcc.n	80021de <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	603b      	str	r3, [r7, #0]
 8002278:	687e      	ldr	r6, [r7, #4]
 800227a:	466d      	mov	r5, sp
 800227c:	f106 0410 	add.w	r4, r6, #16
 8002280:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002282:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002284:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002286:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002288:	e894 0003 	ldmia.w	r4, {r0, r1}
 800228c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002290:	1d33      	adds	r3, r6, #4
 8002292:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002294:	6838      	ldr	r0, [r7, #0]
 8002296:	f001 fe1d 	bl	8003ed4 <USB_DevInit>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d005      	beq.n	80022ac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2202      	movs	r2, #2
 80022a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e00d      	b.n	80022c8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f002 fe65 	bl	8004f90 <USB_DevDisconnect>

  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022d0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <HAL_PCD_Start+0x1c>
 80022e8:	2302      	movs	r3, #2
 80022ea:	e020      	b.n	800232e <HAL_PCD_Start+0x5e>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d109      	bne.n	8002310 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002300:	2b01      	cmp	r3, #1
 8002302:	d005      	beq.n	8002310 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002308:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f001 fd91 	bl	8003e3c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f002 fe15 	bl	8004f4e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002336:	b590      	push	{r4, r7, lr}
 8002338:	b08d      	sub	sp, #52	; 0x34
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f002 fed3 	bl	80050f8 <USB_GetMode>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	f040 839d 	bne.w	8002a94 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f002 fe37 	bl	8004fd2 <USB_ReadInterrupts>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 8393 	beq.w	8002a92 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f002 fe2e 	bl	8004fd2 <USB_ReadInterrupts>
 8002376:	4603      	mov	r3, r0
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b02      	cmp	r3, #2
 800237e:	d107      	bne.n	8002390 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	695a      	ldr	r2, [r3, #20]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f002 0202 	and.w	r2, r2, #2
 800238e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f002 fe1c 	bl	8004fd2 <USB_ReadInterrupts>
 800239a:	4603      	mov	r3, r0
 800239c:	f003 0310 	and.w	r3, r3, #16
 80023a0:	2b10      	cmp	r3, #16
 80023a2:	d161      	bne.n	8002468 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699a      	ldr	r2, [r3, #24]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0210 	bic.w	r2, r2, #16
 80023b2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80023b4:	6a3b      	ldr	r3, [r7, #32]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	f003 020f 	and.w	r2, r3, #15
 80023c0:	4613      	mov	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	1a9b      	subs	r3, r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	4413      	add	r3, r2
 80023d0:	3304      	adds	r3, #4
 80023d2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	0c5b      	lsrs	r3, r3, #17
 80023d8:	f003 030f 	and.w	r3, r3, #15
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d124      	bne.n	800242a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80023e6:	4013      	ands	r3, r2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d035      	beq.n	8002458 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	091b      	lsrs	r3, r3, #4
 80023f4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	461a      	mov	r2, r3
 80023fe:	6a38      	ldr	r0, [r7, #32]
 8002400:	f002 fc82 	bl	8004d08 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	091b      	lsrs	r3, r3, #4
 800240c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002410:	441a      	add	r2, r3
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	699a      	ldr	r2, [r3, #24]
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	091b      	lsrs	r3, r3, #4
 800241e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002422:	441a      	add	r2, r3
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	619a      	str	r2, [r3, #24]
 8002428:	e016      	b.n	8002458 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	0c5b      	lsrs	r3, r3, #17
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	2b06      	cmp	r3, #6
 8002434:	d110      	bne.n	8002458 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800243c:	2208      	movs	r2, #8
 800243e:	4619      	mov	r1, r3
 8002440:	6a38      	ldr	r0, [r7, #32]
 8002442:	f002 fc61 	bl	8004d08 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	699a      	ldr	r2, [r3, #24]
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002452:	441a      	add	r2, r3
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	699a      	ldr	r2, [r3, #24]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0210 	orr.w	r2, r2, #16
 8002466:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f002 fdb0 	bl	8004fd2 <USB_ReadInterrupts>
 8002472:	4603      	mov	r3, r0
 8002474:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002478:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800247c:	d16e      	bne.n	800255c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800247e:	2300      	movs	r3, #0
 8002480:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f002 fdb6 	bl	8004ff8 <USB_ReadDevAllOutEpInterrupt>
 800248c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800248e:	e062      	b.n	8002556 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d057      	beq.n	800254a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a0:	b2d2      	uxtb	r2, r2
 80024a2:	4611      	mov	r1, r2
 80024a4:	4618      	mov	r0, r3
 80024a6:	f002 fddb 	bl	8005060 <USB_ReadDevOutEPInterrupt>
 80024aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00c      	beq.n	80024d0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024c2:	461a      	mov	r2, r3
 80024c4:	2301      	movs	r3, #1
 80024c6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80024c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 fdb0 	bl	8003030 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	f003 0308 	and.w	r3, r3, #8
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00c      	beq.n	80024f4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	015a      	lsls	r2, r3, #5
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	4413      	add	r3, r2
 80024e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024e6:	461a      	mov	r2, r3
 80024e8:	2308      	movs	r3, #8
 80024ea:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80024ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 feaa 	bl	8003248 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	f003 0310 	and.w	r3, r3, #16
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d008      	beq.n	8002510 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	4413      	add	r3, r2
 8002506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800250a:	461a      	mov	r2, r3
 800250c:	2310      	movs	r3, #16
 800250e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	f003 0320 	and.w	r3, r3, #32
 8002516:	2b00      	cmp	r3, #0
 8002518:	d008      	beq.n	800252c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	015a      	lsls	r2, r3, #5
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	4413      	add	r3, r2
 8002522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002526:	461a      	mov	r2, r3
 8002528:	2320      	movs	r3, #32
 800252a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d009      	beq.n	800254a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	015a      	lsls	r2, r3, #5
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	4413      	add	r3, r2
 800253e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002542:	461a      	mov	r2, r3
 8002544:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002548:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	3301      	adds	r3, #1
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002552:	085b      	lsrs	r3, r3, #1
 8002554:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002558:	2b00      	cmp	r3, #0
 800255a:	d199      	bne.n	8002490 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f002 fd36 	bl	8004fd2 <USB_ReadInterrupts>
 8002566:	4603      	mov	r3, r0
 8002568:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800256c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002570:	f040 80c0 	bne.w	80026f4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f002 fd57 	bl	800502c <USB_ReadDevAllInEpInterrupt>
 800257e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002584:	e0b2      	b.n	80026ec <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80a7 	beq.w	80026e0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	4611      	mov	r1, r2
 800259c:	4618      	mov	r0, r3
 800259e:	f002 fd7d 	bl	800509c <USB_ReadDevInEPInterrupt>
 80025a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d057      	beq.n	800265e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	f003 030f 	and.w	r3, r3, #15
 80025b4:	2201      	movs	r2, #1
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69f9      	ldr	r1, [r7, #28]
 80025ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80025ce:	4013      	ands	r3, r2
 80025d0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	015a      	lsls	r2, r3, #5
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	4413      	add	r3, r2
 80025da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025de:	461a      	mov	r2, r3
 80025e0:	2301      	movs	r3, #1
 80025e2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d132      	bne.n	8002652 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f0:	4613      	mov	r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	1a9b      	subs	r3, r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	3348      	adds	r3, #72	; 0x48
 80025fc:	6819      	ldr	r1, [r3, #0]
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002602:	4613      	mov	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	1a9b      	subs	r3, r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4403      	add	r3, r0
 800260c:	3344      	adds	r3, #68	; 0x44
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4419      	add	r1, r3
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002616:	4613      	mov	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	1a9b      	subs	r3, r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4403      	add	r3, r0
 8002620:	3348      	adds	r3, #72	; 0x48
 8002622:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	2b00      	cmp	r3, #0
 8002628:	d113      	bne.n	8002652 <HAL_PCD_IRQHandler+0x31c>
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800262e:	4613      	mov	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	1a9b      	subs	r3, r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	3350      	adds	r3, #80	; 0x50
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d108      	bne.n	8002652 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6818      	ldr	r0, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800264a:	461a      	mov	r2, r3
 800264c:	2101      	movs	r1, #1
 800264e:	f002 fd85 	bl	800515c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	b2db      	uxtb	r3, r3
 8002656:	4619      	mov	r1, r3
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f004 fc9c 	bl	8006f96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	f003 0308 	and.w	r3, r3, #8
 8002664:	2b00      	cmp	r3, #0
 8002666:	d008      	beq.n	800267a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	4413      	add	r3, r2
 8002670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002674:	461a      	mov	r2, r3
 8002676:	2308      	movs	r3, #8
 8002678:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	f003 0310 	and.w	r3, r3, #16
 8002680:	2b00      	cmp	r3, #0
 8002682:	d008      	beq.n	8002696 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	015a      	lsls	r2, r3, #5
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	4413      	add	r3, r2
 800268c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002690:	461a      	mov	r2, r3
 8002692:	2310      	movs	r3, #16
 8002694:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800269c:	2b00      	cmp	r3, #0
 800269e:	d008      	beq.n	80026b2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	015a      	lsls	r2, r3, #5
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	4413      	add	r3, r2
 80026a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026ac:	461a      	mov	r2, r3
 80026ae:	2340      	movs	r3, #64	; 0x40
 80026b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d008      	beq.n	80026ce <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	015a      	lsls	r2, r3, #5
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	4413      	add	r3, r2
 80026c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026c8:	461a      	mov	r2, r3
 80026ca:	2302      	movs	r3, #2
 80026cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80026d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 fc1b 	bl	8002f16 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	3301      	adds	r3, #1
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80026e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e8:	085b      	lsrs	r3, r3, #1
 80026ea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80026ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f47f af49 	bne.w	8002586 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f002 fc6a 	bl	8004fd2 <USB_ReadInterrupts>
 80026fe:	4603      	mov	r3, r0
 8002700:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002704:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002708:	d122      	bne.n	8002750 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	69fa      	ldr	r2, [r7, #28]
 8002714:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002718:	f023 0301 	bic.w	r3, r3, #1
 800271c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002724:	2b01      	cmp	r3, #1
 8002726:	d108      	bne.n	800273a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002730:	2100      	movs	r1, #0
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 fe26 	bl	8003384 <HAL_PCDEx_LPM_Callback>
 8002738:	e002      	b.n	8002740 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f004 fca2 	bl	8007084 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	695a      	ldr	r2, [r3, #20]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800274e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f002 fc3c 	bl	8004fd2 <USB_ReadInterrupts>
 800275a:	4603      	mov	r3, r0
 800275c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002760:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002764:	d112      	bne.n	800278c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b01      	cmp	r3, #1
 8002774:	d102      	bne.n	800277c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f004 fc5e 	bl	8007038 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	695a      	ldr	r2, [r3, #20]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800278a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f002 fc1e 	bl	8004fd2 <USB_ReadInterrupts>
 8002796:	4603      	mov	r3, r0
 8002798:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800279c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027a0:	f040 80c7 	bne.w	8002932 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	69fa      	ldr	r2, [r7, #28]
 80027ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027b2:	f023 0301 	bic.w	r3, r3, #1
 80027b6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2110      	movs	r1, #16
 80027be:	4618      	mov	r0, r3
 80027c0:	f001 fcec 	bl	800419c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027c4:	2300      	movs	r3, #0
 80027c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027c8:	e056      	b.n	8002878 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80027ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027cc:	015a      	lsls	r2, r3, #5
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	4413      	add	r3, r2
 80027d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027d6:	461a      	mov	r2, r3
 80027d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027dc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80027de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e0:	015a      	lsls	r2, r3, #5
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	4413      	add	r3, r2
 80027e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ee:	0151      	lsls	r1, r2, #5
 80027f0:	69fa      	ldr	r2, [r7, #28]
 80027f2:	440a      	add	r2, r1
 80027f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027fc:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80027fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002800:	015a      	lsls	r2, r3, #5
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	4413      	add	r3, r2
 8002806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800280e:	0151      	lsls	r1, r2, #5
 8002810:	69fa      	ldr	r2, [r7, #28]
 8002812:	440a      	add	r2, r1
 8002814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002818:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800281c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800281e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002820:	015a      	lsls	r2, r3, #5
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	4413      	add	r3, r2
 8002826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800282a:	461a      	mov	r2, r3
 800282c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002830:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002834:	015a      	lsls	r2, r3, #5
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	4413      	add	r3, r2
 800283a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002842:	0151      	lsls	r1, r2, #5
 8002844:	69fa      	ldr	r2, [r7, #28]
 8002846:	440a      	add	r2, r1
 8002848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800284c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002850:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002854:	015a      	lsls	r2, r3, #5
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	4413      	add	r3, r2
 800285a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002862:	0151      	lsls	r1, r2, #5
 8002864:	69fa      	ldr	r2, [r7, #28]
 8002866:	440a      	add	r2, r1
 8002868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800286c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002870:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002874:	3301      	adds	r3, #1
 8002876:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800287e:	429a      	cmp	r2, r3
 8002880:	d3a3      	bcc.n	80027ca <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	69fa      	ldr	r2, [r7, #28]
 800288c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002890:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002894:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	2b00      	cmp	r3, #0
 800289c:	d016      	beq.n	80028cc <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028a8:	69fa      	ldr	r2, [r7, #28]
 80028aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028ae:	f043 030b 	orr.w	r3, r3, #11
 80028b2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028be:	69fa      	ldr	r2, [r7, #28]
 80028c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028c4:	f043 030b 	orr.w	r3, r3, #11
 80028c8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ca:	e015      	b.n	80028f8 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	69fa      	ldr	r2, [r7, #28]
 80028d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028de:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80028e2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	69fa      	ldr	r2, [r7, #28]
 80028ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028f2:	f043 030b 	orr.w	r3, r3, #11
 80028f6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	69fa      	ldr	r2, [r7, #28]
 8002902:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002906:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800290a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6818      	ldr	r0, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800291c:	461a      	mov	r2, r3
 800291e:	f002 fc1d 	bl	800515c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695a      	ldr	r2, [r3, #20]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002930:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f002 fb4b 	bl	8004fd2 <USB_ReadInterrupts>
 800293c:	4603      	mov	r3, r0
 800293e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002946:	d124      	bne.n	8002992 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f002 fbe1 	bl	8005114 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f001 fc81 	bl	800425e <USB_GetDevSpeed>
 800295c:	4603      	mov	r3, r0
 800295e:	461a      	mov	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681c      	ldr	r4, [r3, #0]
 8002968:	f001 f944 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 800296c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002972:	b2db      	uxtb	r3, r3
 8002974:	461a      	mov	r2, r3
 8002976:	4620      	mov	r0, r4
 8002978:	f001 f9be 	bl	8003cf8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f004 fb32 	bl	8006fe6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695a      	ldr	r2, [r3, #20]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002990:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f002 fb1b 	bl	8004fd2 <USB_ReadInterrupts>
 800299c:	4603      	mov	r3, r0
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d10a      	bne.n	80029bc <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f004 fb0f 	bl	8006fca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695a      	ldr	r2, [r3, #20]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f002 0208 	and.w	r2, r2, #8
 80029ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f002 fb06 	bl	8004fd2 <USB_ReadInterrupts>
 80029c6:	4603      	mov	r3, r0
 80029c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029d0:	d10f      	bne.n	80029f2 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	4619      	mov	r1, r3
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f004 fb71 	bl	80070c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	695a      	ldr	r2, [r3, #20]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80029f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f002 faeb 	bl	8004fd2 <USB_ReadInterrupts>
 80029fc:	4603      	mov	r3, r0
 80029fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a06:	d10f      	bne.n	8002a28 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	4619      	mov	r1, r3
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f004 fb44 	bl	80070a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695a      	ldr	r2, [r3, #20]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002a26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f002 fad0 	bl	8004fd2 <USB_ReadInterrupts>
 8002a32:	4603      	mov	r3, r0
 8002a34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3c:	d10a      	bne.n	8002a54 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f004 fb52 	bl	80070e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695a      	ldr	r2, [r3, #20]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f002 faba 	bl	8004fd2 <USB_ReadInterrupts>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d115      	bne.n	8002a94 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d002      	beq.n	8002a80 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f004 fb42 	bl	8007104 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6859      	ldr	r1, [r3, #4]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	605a      	str	r2, [r3, #4]
 8002a90:	e000      	b.n	8002a94 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002a92:	bf00      	nop
    }
  }
}
 8002a94:	3734      	adds	r7, #52	; 0x34
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd90      	pop	{r4, r7, pc}

08002a9a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_PCD_SetAddress+0x1a>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e013      	b.n	8002adc <HAL_PCD_SetAddress+0x42>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	78fa      	ldrb	r2, [r7, #3]
 8002ac0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	78fa      	ldrb	r2, [r7, #3]
 8002aca:	4611      	mov	r1, r2
 8002acc:	4618      	mov	r0, r3
 8002ace:	f002 fa18 	bl	8004f02 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	4608      	mov	r0, r1
 8002aee:	4611      	mov	r1, r2
 8002af0:	461a      	mov	r2, r3
 8002af2:	4603      	mov	r3, r0
 8002af4:	70fb      	strb	r3, [r7, #3]
 8002af6:	460b      	mov	r3, r1
 8002af8:	803b      	strh	r3, [r7, #0]
 8002afa:	4613      	mov	r3, r2
 8002afc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	da0f      	bge.n	8002b2a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b0a:	78fb      	ldrb	r3, [r7, #3]
 8002b0c:	f003 020f 	and.w	r2, r3, #15
 8002b10:	4613      	mov	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	1a9b      	subs	r3, r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	3338      	adds	r3, #56	; 0x38
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3304      	adds	r3, #4
 8002b20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2201      	movs	r2, #1
 8002b26:	705a      	strb	r2, [r3, #1]
 8002b28:	e00f      	b.n	8002b4a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b2a:	78fb      	ldrb	r3, [r7, #3]
 8002b2c:	f003 020f 	and.w	r2, r3, #15
 8002b30:	4613      	mov	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	1a9b      	subs	r3, r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	4413      	add	r3, r2
 8002b40:	3304      	adds	r3, #4
 8002b42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b4a:	78fb      	ldrb	r3, [r7, #3]
 8002b4c:	f003 030f 	and.w	r3, r3, #15
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b56:	883a      	ldrh	r2, [r7, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	78ba      	ldrb	r2, [r7, #2]
 8002b60:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	785b      	ldrb	r3, [r3, #1]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d004      	beq.n	8002b74 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b74:	78bb      	ldrb	r3, [r7, #2]
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d102      	bne.n	8002b80 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <HAL_PCD_EP_Open+0xaa>
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e00e      	b.n	8002bac <HAL_PCD_EP_Open+0xc8>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68f9      	ldr	r1, [r7, #12]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f001 fb83 	bl	80042a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002baa:	7afb      	ldrb	r3, [r7, #11]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	da0f      	bge.n	8002be8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	f003 020f 	and.w	r2, r3, #15
 8002bce:	4613      	mov	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	1a9b      	subs	r3, r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	3338      	adds	r3, #56	; 0x38
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	4413      	add	r3, r2
 8002bdc:	3304      	adds	r3, #4
 8002bde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2201      	movs	r2, #1
 8002be4:	705a      	strb	r2, [r3, #1]
 8002be6:	e00f      	b.n	8002c08 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002be8:	78fb      	ldrb	r3, [r7, #3]
 8002bea:	f003 020f 	and.w	r2, r3, #15
 8002bee:	4613      	mov	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	1a9b      	subs	r3, r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	3304      	adds	r3, #4
 8002c00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002c08:	78fb      	ldrb	r3, [r7, #3]
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d101      	bne.n	8002c22 <HAL_PCD_EP_Close+0x6e>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e00e      	b.n	8002c40 <HAL_PCD_EP_Close+0x8c>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68f9      	ldr	r1, [r7, #12]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f001 fbc1 	bl	80043b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	607a      	str	r2, [r7, #4]
 8002c52:	603b      	str	r3, [r7, #0]
 8002c54:	460b      	mov	r3, r1
 8002c56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c58:	7afb      	ldrb	r3, [r7, #11]
 8002c5a:	f003 020f 	and.w	r2, r3, #15
 8002c5e:	4613      	mov	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	1a9b      	subs	r3, r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3304      	adds	r3, #4
 8002c70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	2200      	movs	r2, #0
 8002c82:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	2200      	movs	r2, #0
 8002c88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c8a:	7afb      	ldrb	r3, [r7, #11]
 8002c8c:	f003 030f 	and.w	r3, r3, #15
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d102      	bne.n	8002ca4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ca4:	7afb      	ldrb	r3, [r7, #11]
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d109      	bne.n	8002cc2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	461a      	mov	r2, r3
 8002cba:	6979      	ldr	r1, [r7, #20]
 8002cbc:	f001 fe9c 	bl	80049f8 <USB_EP0StartXfer>
 8002cc0:	e008      	b.n	8002cd4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6818      	ldr	r0, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	461a      	mov	r2, r3
 8002cce:	6979      	ldr	r1, [r7, #20]
 8002cd0:	f001 fc4e 	bl	8004570 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002cea:	78fb      	ldrb	r3, [r7, #3]
 8002cec:	f003 020f 	and.w	r2, r3, #15
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	1a9b      	subs	r3, r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002d00:	681b      	ldr	r3, [r3, #0]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b086      	sub	sp, #24
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	60f8      	str	r0, [r7, #12]
 8002d16:	607a      	str	r2, [r7, #4]
 8002d18:	603b      	str	r3, [r7, #0]
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d1e:	7afb      	ldrb	r3, [r7, #11]
 8002d20:	f003 020f 	and.w	r2, r3, #15
 8002d24:	4613      	mov	r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	1a9b      	subs	r3, r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	3338      	adds	r3, #56	; 0x38
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	4413      	add	r3, r2
 8002d32:	3304      	adds	r3, #4
 8002d34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2200      	movs	r2, #0
 8002d46:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d4e:	7afb      	ldrb	r3, [r7, #11]
 8002d50:	f003 030f 	and.w	r3, r3, #15
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d102      	bne.n	8002d68 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d68:	7afb      	ldrb	r3, [r7, #11]
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d109      	bne.n	8002d86 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6818      	ldr	r0, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	6979      	ldr	r1, [r7, #20]
 8002d80:	f001 fe3a 	bl	80049f8 <USB_EP0StartXfer>
 8002d84:	e008      	b.n	8002d98 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6818      	ldr	r0, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	461a      	mov	r2, r3
 8002d92:	6979      	ldr	r1, [r7, #20]
 8002d94:	f001 fbec 	bl	8004570 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b084      	sub	sp, #16
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
 8002daa:	460b      	mov	r3, r1
 8002dac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002dae:	78fb      	ldrb	r3, [r7, #3]
 8002db0:	f003 020f 	and.w	r2, r3, #15
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d901      	bls.n	8002dc0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e050      	b.n	8002e62 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002dc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	da0f      	bge.n	8002de8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dc8:	78fb      	ldrb	r3, [r7, #3]
 8002dca:	f003 020f 	and.w	r2, r3, #15
 8002dce:	4613      	mov	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	1a9b      	subs	r3, r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	3338      	adds	r3, #56	; 0x38
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	4413      	add	r3, r2
 8002ddc:	3304      	adds	r3, #4
 8002dde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2201      	movs	r2, #1
 8002de4:	705a      	strb	r2, [r3, #1]
 8002de6:	e00d      	b.n	8002e04 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002de8:	78fa      	ldrb	r2, [r7, #3]
 8002dea:	4613      	mov	r3, r2
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	1a9b      	subs	r3, r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	4413      	add	r3, r2
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2201      	movs	r2, #1
 8002e08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e0a:	78fb      	ldrb	r3, [r7, #3]
 8002e0c:	f003 030f 	and.w	r3, r3, #15
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d101      	bne.n	8002e24 <HAL_PCD_EP_SetStall+0x82>
 8002e20:	2302      	movs	r3, #2
 8002e22:	e01e      	b.n	8002e62 <HAL_PCD_EP_SetStall+0xc0>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68f9      	ldr	r1, [r7, #12]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f001 ff91 	bl	8004d5a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e38:	78fb      	ldrb	r3, [r7, #3]
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10a      	bne.n	8002e58 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6818      	ldr	r0, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	b2d9      	uxtb	r1, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e52:	461a      	mov	r2, r3
 8002e54:	f002 f982 	bl	800515c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b084      	sub	sp, #16
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
 8002e72:	460b      	mov	r3, r1
 8002e74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e76:	78fb      	ldrb	r3, [r7, #3]
 8002e78:	f003 020f 	and.w	r2, r3, #15
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d901      	bls.n	8002e88 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e042      	b.n	8002f0e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	da0f      	bge.n	8002eb0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e90:	78fb      	ldrb	r3, [r7, #3]
 8002e92:	f003 020f 	and.w	r2, r3, #15
 8002e96:	4613      	mov	r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	1a9b      	subs	r3, r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	3338      	adds	r3, #56	; 0x38
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	705a      	strb	r2, [r3, #1]
 8002eae:	e00f      	b.n	8002ed0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eb0:	78fb      	ldrb	r3, [r7, #3]
 8002eb2:	f003 020f 	and.w	r2, r3, #15
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	1a9b      	subs	r3, r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ed6:	78fb      	ldrb	r3, [r7, #3]
 8002ed8:	f003 030f 	and.w	r3, r3, #15
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_PCD_EP_ClrStall+0x86>
 8002eec:	2302      	movs	r3, #2
 8002eee:	e00e      	b.n	8002f0e <HAL_PCD_EP_ClrStall+0xa4>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68f9      	ldr	r1, [r7, #12]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f001 ff99 	bl	8004e36 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b08a      	sub	sp, #40	; 0x28
 8002f1a:	af02      	add	r7, sp, #8
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	1a9b      	subs	r3, r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	3338      	adds	r3, #56	; 0x38
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	4413      	add	r3, r2
 8002f3a:	3304      	adds	r3, #4
 8002f3c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	699a      	ldr	r2, [r3, #24]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d901      	bls.n	8002f4e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e06c      	b.n	8003028 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	695a      	ldr	r2, [r3, #20]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	69fa      	ldr	r2, [r7, #28]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d902      	bls.n	8002f6a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	3303      	adds	r3, #3
 8002f6e:	089b      	lsrs	r3, r3, #2
 8002f70:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f72:	e02b      	b.n	8002fcc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	695a      	ldr	r2, [r3, #20]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	69fa      	ldr	r2, [r7, #28]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d902      	bls.n	8002f90 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	3303      	adds	r3, #3
 8002f94:	089b      	lsrs	r3, r3, #2
 8002f96:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	68d9      	ldr	r1, [r3, #12]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	4603      	mov	r3, r0
 8002fae:	6978      	ldr	r0, [r7, #20]
 8002fb0:	f001 fe75 	bl	8004c9e <USB_WritePacket>

    ep->xfer_buff  += len;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	68da      	ldr	r2, [r3, #12]
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	441a      	add	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	699a      	ldr	r2, [r3, #24]
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	441a      	add	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	015a      	lsls	r2, r3, #5
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d809      	bhi.n	8002ff6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	699a      	ldr	r2, [r3, #24]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d203      	bcs.n	8002ff6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1be      	bne.n	8002f74 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	695a      	ldr	r2, [r3, #20]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d811      	bhi.n	8003026 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	f003 030f 	and.w	r3, r3, #15
 8003008:	2201      	movs	r2, #1
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003016:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	43db      	mvns	r3, r3
 800301c:	6939      	ldr	r1, [r7, #16]
 800301e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003022:	4013      	ands	r3, r2
 8003024:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3720      	adds	r7, #32
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	333c      	adds	r3, #60	; 0x3c
 8003048:	3304      	adds	r3, #4
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	015a      	lsls	r2, r3, #5
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	4413      	add	r3, r2
 8003056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	2b01      	cmp	r3, #1
 8003064:	f040 80a0 	bne.w	80031a8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	2b00      	cmp	r3, #0
 8003070:	d015      	beq.n	800309e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	4a72      	ldr	r2, [pc, #456]	; (8003240 <PCD_EP_OutXfrComplete_int+0x210>)
 8003076:	4293      	cmp	r3, r2
 8003078:	f240 80dd 	bls.w	8003236 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 80d7 	beq.w	8003236 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	015a      	lsls	r2, r3, #5
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	4413      	add	r3, r2
 8003090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003094:	461a      	mov	r2, r3
 8003096:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800309a:	6093      	str	r3, [r2, #8]
 800309c:	e0cb      	b.n	8003236 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	f003 0320 	and.w	r3, r3, #32
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d009      	beq.n	80030bc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030b4:	461a      	mov	r2, r3
 80030b6:	2320      	movs	r3, #32
 80030b8:	6093      	str	r3, [r2, #8]
 80030ba:	e0bc      	b.n	8003236 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f040 80b7 	bne.w	8003236 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4a5d      	ldr	r2, [pc, #372]	; (8003240 <PCD_EP_OutXfrComplete_int+0x210>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d90f      	bls.n	80030f0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	015a      	lsls	r2, r3, #5
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4413      	add	r3, r2
 80030e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e6:	461a      	mov	r2, r3
 80030e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ec:	6093      	str	r3, [r2, #8]
 80030ee:	e0a2      	b.n	8003236 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	4613      	mov	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	1a9b      	subs	r3, r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003102:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	0159      	lsls	r1, r3, #5
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	440b      	add	r3, r1
 800310c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003116:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	4613      	mov	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	1a9b      	subs	r3, r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4403      	add	r3, r0
 8003126:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800312a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	4613      	mov	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	1a9b      	subs	r3, r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800313e:	6819      	ldr	r1, [r3, #0]
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	4613      	mov	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	1a9b      	subs	r3, r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4403      	add	r3, r0
 800314e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4419      	add	r1, r3
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	4613      	mov	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	1a9b      	subs	r3, r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4403      	add	r3, r0
 8003164:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003168:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d114      	bne.n	800319a <PCD_EP_OutXfrComplete_int+0x16a>
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	4613      	mov	r3, r2
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d108      	bne.n	800319a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6818      	ldr	r0, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003192:	461a      	mov	r2, r3
 8003194:	2101      	movs	r1, #1
 8003196:	f001 ffe1 	bl	800515c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	b2db      	uxtb	r3, r3
 800319e:	4619      	mov	r1, r3
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f003 fedd 	bl	8006f60 <HAL_PCD_DataOutStageCallback>
 80031a6:	e046      	b.n	8003236 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4a26      	ldr	r2, [pc, #152]	; (8003244 <PCD_EP_OutXfrComplete_int+0x214>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d124      	bne.n	80031fa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00a      	beq.n	80031d0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	015a      	lsls	r2, r3, #5
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4413      	add	r3, r2
 80031c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031c6:	461a      	mov	r2, r3
 80031c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031cc:	6093      	str	r3, [r2, #8]
 80031ce:	e032      	b.n	8003236 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	f003 0320 	and.w	r3, r3, #32
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d008      	beq.n	80031ec <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	015a      	lsls	r2, r3, #5
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4413      	add	r3, r2
 80031e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e6:	461a      	mov	r2, r3
 80031e8:	2320      	movs	r3, #32
 80031ea:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	4619      	mov	r1, r3
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f003 feb4 	bl	8006f60 <HAL_PCD_DataOutStageCallback>
 80031f8:	e01d      	b.n	8003236 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d114      	bne.n	800322a <PCD_EP_OutXfrComplete_int+0x1fa>
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	4613      	mov	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	1a9b      	subs	r3, r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d108      	bne.n	800322a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6818      	ldr	r0, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003222:	461a      	mov	r2, r3
 8003224:	2100      	movs	r1, #0
 8003226:	f001 ff99 	bl	800515c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	4619      	mov	r1, r3
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f003 fe95 	bl	8006f60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3718      	adds	r7, #24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	4f54300a 	.word	0x4f54300a
 8003244:	4f54310a 	.word	0x4f54310a

08003248 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	333c      	adds	r3, #60	; 0x3c
 8003260:	3304      	adds	r3, #4
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	015a      	lsls	r2, r3, #5
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	4413      	add	r3, r2
 800326e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4a15      	ldr	r2, [pc, #84]	; (80032d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d90e      	bls.n	800329c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003284:	2b00      	cmp	r3, #0
 8003286:	d009      	beq.n	800329c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4413      	add	r3, r2
 8003290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003294:	461a      	mov	r2, r3
 8003296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800329a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f003 fe4d 	bl	8006f3c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4a0a      	ldr	r2, [pc, #40]	; (80032d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d90c      	bls.n	80032c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d108      	bne.n	80032c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6818      	ldr	r0, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80032bc:	461a      	mov	r2, r3
 80032be:	2101      	movs	r1, #1
 80032c0:	f001 ff4c 	bl	800515c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	4f54300a 	.word	0x4f54300a

080032d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	460b      	mov	r3, r1
 80032de:	70fb      	strb	r3, [r7, #3]
 80032e0:	4613      	mov	r3, r2
 80032e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d107      	bne.n	8003302 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80032f2:	883b      	ldrh	r3, [r7, #0]
 80032f4:	0419      	lsls	r1, r3, #16
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003300:	e028      	b.n	8003354 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003308:	0c1b      	lsrs	r3, r3, #16
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	4413      	add	r3, r2
 800330e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003310:	2300      	movs	r3, #0
 8003312:	73fb      	strb	r3, [r7, #15]
 8003314:	e00d      	b.n	8003332 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	7bfb      	ldrb	r3, [r7, #15]
 800331c:	3340      	adds	r3, #64	; 0x40
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	0c1b      	lsrs	r3, r3, #16
 8003326:	68ba      	ldr	r2, [r7, #8]
 8003328:	4413      	add	r3, r2
 800332a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800332c:	7bfb      	ldrb	r3, [r7, #15]
 800332e:	3301      	adds	r3, #1
 8003330:	73fb      	strb	r3, [r7, #15]
 8003332:	7bfa      	ldrb	r2, [r7, #15]
 8003334:	78fb      	ldrb	r3, [r7, #3]
 8003336:	3b01      	subs	r3, #1
 8003338:	429a      	cmp	r2, r3
 800333a:	d3ec      	bcc.n	8003316 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800333c:	883b      	ldrh	r3, [r7, #0]
 800333e:	0418      	lsls	r0, r3, #16
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6819      	ldr	r1, [r3, #0]
 8003344:	78fb      	ldrb	r3, [r7, #3]
 8003346:	3b01      	subs	r3, #1
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	4302      	orrs	r2, r0
 800334c:	3340      	adds	r3, #64	; 0x40
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
 800336a:	460b      	mov	r3, r1
 800336c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	887a      	ldrh	r2, [r7, #2]
 8003374:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e25b      	b.n	8003866 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d075      	beq.n	80034a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033ba:	4ba3      	ldr	r3, [pc, #652]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 030c 	and.w	r3, r3, #12
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d00c      	beq.n	80033e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033c6:	4ba0      	ldr	r3, [pc, #640]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033ce:	2b08      	cmp	r3, #8
 80033d0:	d112      	bne.n	80033f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033d2:	4b9d      	ldr	r3, [pc, #628]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033de:	d10b      	bne.n	80033f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e0:	4b99      	ldr	r3, [pc, #612]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d05b      	beq.n	80034a4 <HAL_RCC_OscConfig+0x108>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d157      	bne.n	80034a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e236      	b.n	8003866 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003400:	d106      	bne.n	8003410 <HAL_RCC_OscConfig+0x74>
 8003402:	4b91      	ldr	r3, [pc, #580]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a90      	ldr	r2, [pc, #576]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 8003408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	e01d      	b.n	800344c <HAL_RCC_OscConfig+0xb0>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003418:	d10c      	bne.n	8003434 <HAL_RCC_OscConfig+0x98>
 800341a:	4b8b      	ldr	r3, [pc, #556]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a8a      	ldr	r2, [pc, #552]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 8003420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	4b88      	ldr	r3, [pc, #544]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a87      	ldr	r2, [pc, #540]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 800342c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	e00b      	b.n	800344c <HAL_RCC_OscConfig+0xb0>
 8003434:	4b84      	ldr	r3, [pc, #528]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a83      	ldr	r2, [pc, #524]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 800343a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800343e:	6013      	str	r3, [r2, #0]
 8003440:	4b81      	ldr	r3, [pc, #516]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a80      	ldr	r2, [pc, #512]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 8003446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800344a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d013      	beq.n	800347c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003454:	f7fd fb88 	bl	8000b68 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800345c:	f7fd fb84 	bl	8000b68 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b64      	cmp	r3, #100	; 0x64
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e1fb      	b.n	8003866 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346e:	4b76      	ldr	r3, [pc, #472]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d0f0      	beq.n	800345c <HAL_RCC_OscConfig+0xc0>
 800347a:	e014      	b.n	80034a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347c:	f7fd fb74 	bl	8000b68 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003484:	f7fd fb70 	bl	8000b68 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b64      	cmp	r3, #100	; 0x64
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e1e7      	b.n	8003866 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003496:	4b6c      	ldr	r3, [pc, #432]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0xe8>
 80034a2:	e000      	b.n	80034a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d063      	beq.n	800357a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034b2:	4b65      	ldr	r3, [pc, #404]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 030c 	and.w	r3, r3, #12
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00b      	beq.n	80034d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034be:	4b62      	ldr	r3, [pc, #392]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d11c      	bne.n	8003504 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ca:	4b5f      	ldr	r3, [pc, #380]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d116      	bne.n	8003504 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034d6:	4b5c      	ldr	r3, [pc, #368]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d005      	beq.n	80034ee <HAL_RCC_OscConfig+0x152>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d001      	beq.n	80034ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e1bb      	b.n	8003866 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ee:	4b56      	ldr	r3, [pc, #344]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	4952      	ldr	r1, [pc, #328]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003502:	e03a      	b.n	800357a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d020      	beq.n	800354e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800350c:	4b4f      	ldr	r3, [pc, #316]	; (800364c <HAL_RCC_OscConfig+0x2b0>)
 800350e:	2201      	movs	r2, #1
 8003510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003512:	f7fd fb29 	bl	8000b68 <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800351a:	f7fd fb25 	bl	8000b68 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e19c      	b.n	8003866 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800352c:	4b46      	ldr	r3, [pc, #280]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0f0      	beq.n	800351a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003538:	4b43      	ldr	r3, [pc, #268]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	4940      	ldr	r1, [pc, #256]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 8003548:	4313      	orrs	r3, r2
 800354a:	600b      	str	r3, [r1, #0]
 800354c:	e015      	b.n	800357a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800354e:	4b3f      	ldr	r3, [pc, #252]	; (800364c <HAL_RCC_OscConfig+0x2b0>)
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003554:	f7fd fb08 	bl	8000b68 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800355c:	f7fd fb04 	bl	8000b68 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e17b      	b.n	8003866 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800356e:	4b36      	ldr	r3, [pc, #216]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1f0      	bne.n	800355c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d030      	beq.n	80035e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d016      	beq.n	80035bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800358e:	4b30      	ldr	r3, [pc, #192]	; (8003650 <HAL_RCC_OscConfig+0x2b4>)
 8003590:	2201      	movs	r2, #1
 8003592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003594:	f7fd fae8 	bl	8000b68 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800359c:	f7fd fae4 	bl	8000b68 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e15b      	b.n	8003866 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ae:	4b26      	ldr	r3, [pc, #152]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 80035b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0f0      	beq.n	800359c <HAL_RCC_OscConfig+0x200>
 80035ba:	e015      	b.n	80035e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035bc:	4b24      	ldr	r3, [pc, #144]	; (8003650 <HAL_RCC_OscConfig+0x2b4>)
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c2:	f7fd fad1 	bl	8000b68 <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ca:	f7fd facd 	bl	8000b68 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e144      	b.n	8003866 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035dc:	4b1a      	ldr	r3, [pc, #104]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 80035de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1f0      	bne.n	80035ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 80a0 	beq.w	8003736 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035f6:	2300      	movs	r3, #0
 80035f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035fa:	4b13      	ldr	r3, [pc, #76]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10f      	bne.n	8003626 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003606:	2300      	movs	r3, #0
 8003608:	60bb      	str	r3, [r7, #8]
 800360a:	4b0f      	ldr	r3, [pc, #60]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	4a0e      	ldr	r2, [pc, #56]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 8003610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003614:	6413      	str	r3, [r2, #64]	; 0x40
 8003616:	4b0c      	ldr	r3, [pc, #48]	; (8003648 <HAL_RCC_OscConfig+0x2ac>)
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361e:	60bb      	str	r3, [r7, #8]
 8003620:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003622:	2301      	movs	r3, #1
 8003624:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003626:	4b0b      	ldr	r3, [pc, #44]	; (8003654 <HAL_RCC_OscConfig+0x2b8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362e:	2b00      	cmp	r3, #0
 8003630:	d121      	bne.n	8003676 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003632:	4b08      	ldr	r3, [pc, #32]	; (8003654 <HAL_RCC_OscConfig+0x2b8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a07      	ldr	r2, [pc, #28]	; (8003654 <HAL_RCC_OscConfig+0x2b8>)
 8003638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800363c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800363e:	f7fd fa93 	bl	8000b68 <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003644:	e011      	b.n	800366a <HAL_RCC_OscConfig+0x2ce>
 8003646:	bf00      	nop
 8003648:	40023800 	.word	0x40023800
 800364c:	42470000 	.word	0x42470000
 8003650:	42470e80 	.word	0x42470e80
 8003654:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003658:	f7fd fa86 	bl	8000b68 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e0fd      	b.n	8003866 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366a:	4b81      	ldr	r3, [pc, #516]	; (8003870 <HAL_RCC_OscConfig+0x4d4>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0f0      	beq.n	8003658 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d106      	bne.n	800368c <HAL_RCC_OscConfig+0x2f0>
 800367e:	4b7d      	ldr	r3, [pc, #500]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 8003680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003682:	4a7c      	ldr	r2, [pc, #496]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 8003684:	f043 0301 	orr.w	r3, r3, #1
 8003688:	6713      	str	r3, [r2, #112]	; 0x70
 800368a:	e01c      	b.n	80036c6 <HAL_RCC_OscConfig+0x32a>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	2b05      	cmp	r3, #5
 8003692:	d10c      	bne.n	80036ae <HAL_RCC_OscConfig+0x312>
 8003694:	4b77      	ldr	r3, [pc, #476]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 8003696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003698:	4a76      	ldr	r2, [pc, #472]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 800369a:	f043 0304 	orr.w	r3, r3, #4
 800369e:	6713      	str	r3, [r2, #112]	; 0x70
 80036a0:	4b74      	ldr	r3, [pc, #464]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 80036a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a4:	4a73      	ldr	r2, [pc, #460]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 80036a6:	f043 0301 	orr.w	r3, r3, #1
 80036aa:	6713      	str	r3, [r2, #112]	; 0x70
 80036ac:	e00b      	b.n	80036c6 <HAL_RCC_OscConfig+0x32a>
 80036ae:	4b71      	ldr	r3, [pc, #452]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 80036b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b2:	4a70      	ldr	r2, [pc, #448]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 80036b4:	f023 0301 	bic.w	r3, r3, #1
 80036b8:	6713      	str	r3, [r2, #112]	; 0x70
 80036ba:	4b6e      	ldr	r3, [pc, #440]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 80036bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036be:	4a6d      	ldr	r2, [pc, #436]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 80036c0:	f023 0304 	bic.w	r3, r3, #4
 80036c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d015      	beq.n	80036fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ce:	f7fd fa4b 	bl	8000b68 <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d4:	e00a      	b.n	80036ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036d6:	f7fd fa47 	bl	8000b68 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e0bc      	b.n	8003866 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ec:	4b61      	ldr	r3, [pc, #388]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 80036ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0ee      	beq.n	80036d6 <HAL_RCC_OscConfig+0x33a>
 80036f8:	e014      	b.n	8003724 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036fa:	f7fd fa35 	bl	8000b68 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003700:	e00a      	b.n	8003718 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003702:	f7fd fa31 	bl	8000b68 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003710:	4293      	cmp	r3, r2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e0a6      	b.n	8003866 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003718:	4b56      	ldr	r3, [pc, #344]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 800371a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1ee      	bne.n	8003702 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003724:	7dfb      	ldrb	r3, [r7, #23]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d105      	bne.n	8003736 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800372a:	4b52      	ldr	r3, [pc, #328]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	4a51      	ldr	r2, [pc, #324]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 8003730:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003734:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 8092 	beq.w	8003864 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003740:	4b4c      	ldr	r3, [pc, #304]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f003 030c 	and.w	r3, r3, #12
 8003748:	2b08      	cmp	r3, #8
 800374a:	d05c      	beq.n	8003806 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	2b02      	cmp	r3, #2
 8003752:	d141      	bne.n	80037d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003754:	4b48      	ldr	r3, [pc, #288]	; (8003878 <HAL_RCC_OscConfig+0x4dc>)
 8003756:	2200      	movs	r2, #0
 8003758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375a:	f7fd fa05 	bl	8000b68 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003762:	f7fd fa01 	bl	8000b68 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e078      	b.n	8003866 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003774:	4b3f      	ldr	r3, [pc, #252]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1f0      	bne.n	8003762 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	69da      	ldr	r2, [r3, #28]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	019b      	lsls	r3, r3, #6
 8003790:	431a      	orrs	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003796:	085b      	lsrs	r3, r3, #1
 8003798:	3b01      	subs	r3, #1
 800379a:	041b      	lsls	r3, r3, #16
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a2:	061b      	lsls	r3, r3, #24
 80037a4:	4933      	ldr	r1, [pc, #204]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037aa:	4b33      	ldr	r3, [pc, #204]	; (8003878 <HAL_RCC_OscConfig+0x4dc>)
 80037ac:	2201      	movs	r2, #1
 80037ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b0:	f7fd f9da 	bl	8000b68 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b8:	f7fd f9d6 	bl	8000b68 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e04d      	b.n	8003866 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ca:	4b2a      	ldr	r3, [pc, #168]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0f0      	beq.n	80037b8 <HAL_RCC_OscConfig+0x41c>
 80037d6:	e045      	b.n	8003864 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d8:	4b27      	ldr	r3, [pc, #156]	; (8003878 <HAL_RCC_OscConfig+0x4dc>)
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037de:	f7fd f9c3 	bl	8000b68 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037e6:	f7fd f9bf 	bl	8000b68 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e036      	b.n	8003866 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f8:	4b1e      	ldr	r3, [pc, #120]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1f0      	bne.n	80037e6 <HAL_RCC_OscConfig+0x44a>
 8003804:	e02e      	b.n	8003864 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d101      	bne.n	8003812 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e029      	b.n	8003866 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003812:	4b18      	ldr	r3, [pc, #96]	; (8003874 <HAL_RCC_OscConfig+0x4d8>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	429a      	cmp	r2, r3
 8003824:	d11c      	bne.n	8003860 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003830:	429a      	cmp	r2, r3
 8003832:	d115      	bne.n	8003860 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800383a:	4013      	ands	r3, r2
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003840:	4293      	cmp	r3, r2
 8003842:	d10d      	bne.n	8003860 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800384e:	429a      	cmp	r2, r3
 8003850:	d106      	bne.n	8003860 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800385c:	429a      	cmp	r2, r3
 800385e:	d001      	beq.n	8003864 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e000      	b.n	8003866 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3718      	adds	r7, #24
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40007000 	.word	0x40007000
 8003874:	40023800 	.word	0x40023800
 8003878:	42470060 	.word	0x42470060

0800387c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0cc      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003890:	4b68      	ldr	r3, [pc, #416]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 030f 	and.w	r3, r3, #15
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d90c      	bls.n	80038b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389e:	4b65      	ldr	r3, [pc, #404]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a6:	4b63      	ldr	r3, [pc, #396]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d001      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0b8      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d020      	beq.n	8003906 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d005      	beq.n	80038dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038d0:	4b59      	ldr	r3, [pc, #356]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	4a58      	ldr	r2, [pc, #352]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038e8:	4b53      	ldr	r3, [pc, #332]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	4a52      	ldr	r2, [pc, #328]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038f4:	4b50      	ldr	r3, [pc, #320]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	494d      	ldr	r1, [pc, #308]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	4313      	orrs	r3, r2
 8003904:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d044      	beq.n	800399c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d107      	bne.n	800392a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391a:	4b47      	ldr	r3, [pc, #284]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d119      	bne.n	800395a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e07f      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b02      	cmp	r3, #2
 8003930:	d003      	beq.n	800393a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003936:	2b03      	cmp	r3, #3
 8003938:	d107      	bne.n	800394a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800393a:	4b3f      	ldr	r3, [pc, #252]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d109      	bne.n	800395a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e06f      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800394a:	4b3b      	ldr	r3, [pc, #236]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e067      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800395a:	4b37      	ldr	r3, [pc, #220]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f023 0203 	bic.w	r2, r3, #3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	4934      	ldr	r1, [pc, #208]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	4313      	orrs	r3, r2
 800396a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800396c:	f7fd f8fc 	bl	8000b68 <HAL_GetTick>
 8003970:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003972:	e00a      	b.n	800398a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003974:	f7fd f8f8 	bl	8000b68 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003982:	4293      	cmp	r3, r2
 8003984:	d901      	bls.n	800398a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e04f      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398a:	4b2b      	ldr	r3, [pc, #172]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 020c 	and.w	r2, r3, #12
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	429a      	cmp	r2, r3
 800399a:	d1eb      	bne.n	8003974 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800399c:	4b25      	ldr	r3, [pc, #148]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 030f 	and.w	r3, r3, #15
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d20c      	bcs.n	80039c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039aa:	4b22      	ldr	r3, [pc, #136]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b2:	4b20      	ldr	r3, [pc, #128]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d001      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e032      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d008      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d0:	4b19      	ldr	r3, [pc, #100]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	4916      	ldr	r1, [pc, #88]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d009      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ee:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	490e      	ldr	r1, [pc, #56]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a02:	f000 f821 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 8003a06:	4601      	mov	r1, r0
 8003a08:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	091b      	lsrs	r3, r3, #4
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	4a0a      	ldr	r2, [pc, #40]	; (8003a3c <HAL_RCC_ClockConfig+0x1c0>)
 8003a14:	5cd3      	ldrb	r3, [r2, r3]
 8003a16:	fa21 f303 	lsr.w	r3, r1, r3
 8003a1a:	4a09      	ldr	r2, [pc, #36]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a1e:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <HAL_RCC_ClockConfig+0x1c8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fd f85c 	bl	8000ae0 <HAL_InitTick>

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40023c00 	.word	0x40023c00
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	080076f4 	.word	0x080076f4
 8003a40:	20000000 	.word	0x20000000
 8003a44:	20000004 	.word	0x20000004

08003a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	607b      	str	r3, [r7, #4]
 8003a52:	2300      	movs	r3, #0
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	2300      	movs	r3, #0
 8003a58:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a5e:	4b63      	ldr	r3, [pc, #396]	; (8003bec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 030c 	and.w	r3, r3, #12
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	d007      	beq.n	8003a7a <HAL_RCC_GetSysClockFreq+0x32>
 8003a6a:	2b08      	cmp	r3, #8
 8003a6c:	d008      	beq.n	8003a80 <HAL_RCC_GetSysClockFreq+0x38>
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f040 80b4 	bne.w	8003bdc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a74:	4b5e      	ldr	r3, [pc, #376]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003a76:	60bb      	str	r3, [r7, #8]
       break;
 8003a78:	e0b3      	b.n	8003be2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a7a:	4b5d      	ldr	r3, [pc, #372]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003a7c:	60bb      	str	r3, [r7, #8]
      break;
 8003a7e:	e0b0      	b.n	8003be2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a80:	4b5a      	ldr	r3, [pc, #360]	; (8003bec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a88:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a8a:	4b58      	ldr	r3, [pc, #352]	; (8003bec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d04a      	beq.n	8003b2c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a96:	4b55      	ldr	r3, [pc, #340]	; (8003bec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	099b      	lsrs	r3, r3, #6
 8003a9c:	f04f 0400 	mov.w	r4, #0
 8003aa0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	ea03 0501 	and.w	r5, r3, r1
 8003aac:	ea04 0602 	and.w	r6, r4, r2
 8003ab0:	4629      	mov	r1, r5
 8003ab2:	4632      	mov	r2, r6
 8003ab4:	f04f 0300 	mov.w	r3, #0
 8003ab8:	f04f 0400 	mov.w	r4, #0
 8003abc:	0154      	lsls	r4, r2, #5
 8003abe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ac2:	014b      	lsls	r3, r1, #5
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4622      	mov	r2, r4
 8003ac8:	1b49      	subs	r1, r1, r5
 8003aca:	eb62 0206 	sbc.w	r2, r2, r6
 8003ace:	f04f 0300 	mov.w	r3, #0
 8003ad2:	f04f 0400 	mov.w	r4, #0
 8003ad6:	0194      	lsls	r4, r2, #6
 8003ad8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003adc:	018b      	lsls	r3, r1, #6
 8003ade:	1a5b      	subs	r3, r3, r1
 8003ae0:	eb64 0402 	sbc.w	r4, r4, r2
 8003ae4:	f04f 0100 	mov.w	r1, #0
 8003ae8:	f04f 0200 	mov.w	r2, #0
 8003aec:	00e2      	lsls	r2, r4, #3
 8003aee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003af2:	00d9      	lsls	r1, r3, #3
 8003af4:	460b      	mov	r3, r1
 8003af6:	4614      	mov	r4, r2
 8003af8:	195b      	adds	r3, r3, r5
 8003afa:	eb44 0406 	adc.w	r4, r4, r6
 8003afe:	f04f 0100 	mov.w	r1, #0
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	02a2      	lsls	r2, r4, #10
 8003b08:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003b0c:	0299      	lsls	r1, r3, #10
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4614      	mov	r4, r2
 8003b12:	4618      	mov	r0, r3
 8003b14:	4621      	mov	r1, r4
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f04f 0400 	mov.w	r4, #0
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	4623      	mov	r3, r4
 8003b20:	f7fc fb52 	bl	80001c8 <__aeabi_uldivmod>
 8003b24:	4603      	mov	r3, r0
 8003b26:	460c      	mov	r4, r1
 8003b28:	60fb      	str	r3, [r7, #12]
 8003b2a:	e049      	b.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b2c:	4b2f      	ldr	r3, [pc, #188]	; (8003bec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	099b      	lsrs	r3, r3, #6
 8003b32:	f04f 0400 	mov.w	r4, #0
 8003b36:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b3a:	f04f 0200 	mov.w	r2, #0
 8003b3e:	ea03 0501 	and.w	r5, r3, r1
 8003b42:	ea04 0602 	and.w	r6, r4, r2
 8003b46:	4629      	mov	r1, r5
 8003b48:	4632      	mov	r2, r6
 8003b4a:	f04f 0300 	mov.w	r3, #0
 8003b4e:	f04f 0400 	mov.w	r4, #0
 8003b52:	0154      	lsls	r4, r2, #5
 8003b54:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003b58:	014b      	lsls	r3, r1, #5
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	4622      	mov	r2, r4
 8003b5e:	1b49      	subs	r1, r1, r5
 8003b60:	eb62 0206 	sbc.w	r2, r2, r6
 8003b64:	f04f 0300 	mov.w	r3, #0
 8003b68:	f04f 0400 	mov.w	r4, #0
 8003b6c:	0194      	lsls	r4, r2, #6
 8003b6e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003b72:	018b      	lsls	r3, r1, #6
 8003b74:	1a5b      	subs	r3, r3, r1
 8003b76:	eb64 0402 	sbc.w	r4, r4, r2
 8003b7a:	f04f 0100 	mov.w	r1, #0
 8003b7e:	f04f 0200 	mov.w	r2, #0
 8003b82:	00e2      	lsls	r2, r4, #3
 8003b84:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b88:	00d9      	lsls	r1, r3, #3
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	4614      	mov	r4, r2
 8003b8e:	195b      	adds	r3, r3, r5
 8003b90:	eb44 0406 	adc.w	r4, r4, r6
 8003b94:	f04f 0100 	mov.w	r1, #0
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	02a2      	lsls	r2, r4, #10
 8003b9e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003ba2:	0299      	lsls	r1, r3, #10
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	4614      	mov	r4, r2
 8003ba8:	4618      	mov	r0, r3
 8003baa:	4621      	mov	r1, r4
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f04f 0400 	mov.w	r4, #0
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	4623      	mov	r3, r4
 8003bb6:	f7fc fb07 	bl	80001c8 <__aeabi_uldivmod>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	460c      	mov	r4, r1
 8003bbe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bc0:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	0c1b      	lsrs	r3, r3, #16
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	3301      	adds	r3, #1
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd8:	60bb      	str	r3, [r7, #8]
      break;
 8003bda:	e002      	b.n	8003be2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bdc:	4b04      	ldr	r3, [pc, #16]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003bde:	60bb      	str	r3, [r7, #8]
      break;
 8003be0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003be2:	68bb      	ldr	r3, [r7, #8]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	00f42400 	.word	0x00f42400

08003bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bf8:	4b03      	ldr	r3, [pc, #12]	; (8003c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	20000000 	.word	0x20000000

08003c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c10:	f7ff fff0 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 8003c14:	4601      	mov	r1, r0
 8003c16:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	0a9b      	lsrs	r3, r3, #10
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	4a03      	ldr	r2, [pc, #12]	; (8003c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c22:	5cd3      	ldrb	r3, [r2, r3]
 8003c24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	08007704 	.word	0x08007704

08003c34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c34:	b084      	sub	sp, #16
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b084      	sub	sp, #16
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	f107 001c 	add.w	r0, r7, #28
 8003c42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d122      	bne.n	8003c92 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d105      	bne.n	8003c86 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f001 fac6 	bl	8005218 <USB_CoreReset>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	73fb      	strb	r3, [r7, #15]
 8003c90:	e01a      	b.n	8003cc8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f001 faba 	bl	8005218 <USB_CoreReset>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d106      	bne.n	8003cbc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	639a      	str	r2, [r3, #56]	; 0x38
 8003cba:	e005      	b.n	8003cc8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d10b      	bne.n	8003ce6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f043 0206 	orr.w	r2, r3, #6
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f043 0220 	orr.w	r2, r3, #32
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cf2:	b004      	add	sp, #16
 8003cf4:	4770      	bx	lr
	...

08003cf8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b087      	sub	sp, #28
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	4613      	mov	r3, r2
 8003d04:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003d06:	79fb      	ldrb	r3, [r7, #7]
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d165      	bne.n	8003dd8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	4a41      	ldr	r2, [pc, #260]	; (8003e14 <USB_SetTurnaroundTime+0x11c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d906      	bls.n	8003d22 <USB_SetTurnaroundTime+0x2a>
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	4a40      	ldr	r2, [pc, #256]	; (8003e18 <USB_SetTurnaroundTime+0x120>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d802      	bhi.n	8003d22 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003d1c:	230f      	movs	r3, #15
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	e062      	b.n	8003de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	4a3c      	ldr	r2, [pc, #240]	; (8003e18 <USB_SetTurnaroundTime+0x120>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d906      	bls.n	8003d38 <USB_SetTurnaroundTime+0x40>
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	4a3b      	ldr	r2, [pc, #236]	; (8003e1c <USB_SetTurnaroundTime+0x124>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d802      	bhi.n	8003d38 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003d32:	230e      	movs	r3, #14
 8003d34:	617b      	str	r3, [r7, #20]
 8003d36:	e057      	b.n	8003de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	4a38      	ldr	r2, [pc, #224]	; (8003e1c <USB_SetTurnaroundTime+0x124>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d906      	bls.n	8003d4e <USB_SetTurnaroundTime+0x56>
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	4a37      	ldr	r2, [pc, #220]	; (8003e20 <USB_SetTurnaroundTime+0x128>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d802      	bhi.n	8003d4e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003d48:	230d      	movs	r3, #13
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	e04c      	b.n	8003de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	4a33      	ldr	r2, [pc, #204]	; (8003e20 <USB_SetTurnaroundTime+0x128>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d906      	bls.n	8003d64 <USB_SetTurnaroundTime+0x6c>
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	4a32      	ldr	r2, [pc, #200]	; (8003e24 <USB_SetTurnaroundTime+0x12c>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d802      	bhi.n	8003d64 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003d5e:	230c      	movs	r3, #12
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	e041      	b.n	8003de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	4a2f      	ldr	r2, [pc, #188]	; (8003e24 <USB_SetTurnaroundTime+0x12c>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d906      	bls.n	8003d7a <USB_SetTurnaroundTime+0x82>
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	4a2e      	ldr	r2, [pc, #184]	; (8003e28 <USB_SetTurnaroundTime+0x130>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d802      	bhi.n	8003d7a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003d74:	230b      	movs	r3, #11
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	e036      	b.n	8003de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	4a2a      	ldr	r2, [pc, #168]	; (8003e28 <USB_SetTurnaroundTime+0x130>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d906      	bls.n	8003d90 <USB_SetTurnaroundTime+0x98>
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	4a29      	ldr	r2, [pc, #164]	; (8003e2c <USB_SetTurnaroundTime+0x134>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d802      	bhi.n	8003d90 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003d8a:	230a      	movs	r3, #10
 8003d8c:	617b      	str	r3, [r7, #20]
 8003d8e:	e02b      	b.n	8003de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	4a26      	ldr	r2, [pc, #152]	; (8003e2c <USB_SetTurnaroundTime+0x134>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d906      	bls.n	8003da6 <USB_SetTurnaroundTime+0xae>
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	4a25      	ldr	r2, [pc, #148]	; (8003e30 <USB_SetTurnaroundTime+0x138>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d802      	bhi.n	8003da6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003da0:	2309      	movs	r3, #9
 8003da2:	617b      	str	r3, [r7, #20]
 8003da4:	e020      	b.n	8003de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	4a21      	ldr	r2, [pc, #132]	; (8003e30 <USB_SetTurnaroundTime+0x138>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d906      	bls.n	8003dbc <USB_SetTurnaroundTime+0xc4>
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	4a20      	ldr	r2, [pc, #128]	; (8003e34 <USB_SetTurnaroundTime+0x13c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d802      	bhi.n	8003dbc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003db6:	2308      	movs	r3, #8
 8003db8:	617b      	str	r3, [r7, #20]
 8003dba:	e015      	b.n	8003de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	4a1d      	ldr	r2, [pc, #116]	; (8003e34 <USB_SetTurnaroundTime+0x13c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d906      	bls.n	8003dd2 <USB_SetTurnaroundTime+0xda>
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	4a1c      	ldr	r2, [pc, #112]	; (8003e38 <USB_SetTurnaroundTime+0x140>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d802      	bhi.n	8003dd2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003dcc:	2307      	movs	r3, #7
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	e00a      	b.n	8003de8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003dd2:	2306      	movs	r3, #6
 8003dd4:	617b      	str	r3, [r7, #20]
 8003dd6:	e007      	b.n	8003de8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003dd8:	79fb      	ldrb	r3, [r7, #7]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d102      	bne.n	8003de4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003dde:	2309      	movs	r3, #9
 8003de0:	617b      	str	r3, [r7, #20]
 8003de2:	e001      	b.n	8003de8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003de4:	2309      	movs	r3, #9
 8003de6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	029b      	lsls	r3, r3, #10
 8003dfc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003e00:	431a      	orrs	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	371c      	adds	r7, #28
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	00d8acbf 	.word	0x00d8acbf
 8003e18:	00e4e1bf 	.word	0x00e4e1bf
 8003e1c:	00f423ff 	.word	0x00f423ff
 8003e20:	0106737f 	.word	0x0106737f
 8003e24:	011a499f 	.word	0x011a499f
 8003e28:	01312cff 	.word	0x01312cff
 8003e2c:	014ca43f 	.word	0x014ca43f
 8003e30:	016e35ff 	.word	0x016e35ff
 8003e34:	01a6ab1f 	.word	0x01a6ab1f
 8003e38:	01e847ff 	.word	0x01e847ff

08003e3c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f043 0201 	orr.w	r2, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f023 0201 	bic.w	r2, r3, #1
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e98:	78fb      	ldrb	r3, [r7, #3]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d106      	bne.n	8003eac <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	60da      	str	r2, [r3, #12]
 8003eaa:	e00b      	b.n	8003ec4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003eac:	78fb      	ldrb	r3, [r7, #3]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d106      	bne.n	8003ec0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	60da      	str	r2, [r3, #12]
 8003ebe:	e001      	b.n	8003ec4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e003      	b.n	8003ecc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003ec4:	2032      	movs	r0, #50	; 0x32
 8003ec6:	f7fc fe5b 	bl	8000b80 <HAL_Delay>

  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ed4:	b084      	sub	sp, #16
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b086      	sub	sp, #24
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
 8003ede:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003ee2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003eee:	2300      	movs	r3, #0
 8003ef0:	613b      	str	r3, [r7, #16]
 8003ef2:	e009      	b.n	8003f08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	3340      	adds	r3, #64	; 0x40
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	2200      	movs	r2, #0
 8003f00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	3301      	adds	r3, #1
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	2b0e      	cmp	r3, #14
 8003f0c:	d9f2      	bls.n	8003ef4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d11c      	bne.n	8003f4e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f22:	f043 0302 	orr.w	r3, r3, #2
 8003f26:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f38:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f44:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	639a      	str	r2, [r3, #56]	; 0x38
 8003f4c:	e00b      	b.n	8003f66 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f52:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	2300      	movs	r3, #0
 8003f70:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f78:	4619      	mov	r1, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f80:	461a      	mov	r2, r3
 8003f82:	680b      	ldr	r3, [r1, #0]
 8003f84:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d10c      	bne.n	8003fa6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d104      	bne.n	8003f9c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003f92:	2100      	movs	r1, #0
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f949 	bl	800422c <USB_SetDevSpeed>
 8003f9a:	e008      	b.n	8003fae <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f944 	bl	800422c <USB_SetDevSpeed>
 8003fa4:	e003      	b.n	8003fae <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003fa6:	2103      	movs	r1, #3
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f93f 	bl	800422c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003fae:	2110      	movs	r1, #16
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f8f3 	bl	800419c <USB_FlushTxFifo>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f911 	bl	80041e8 <USB_FlushRxFifo>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	2300      	movs	r3, #0
 8003fda:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fee:	461a      	mov	r2, r3
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	613b      	str	r3, [r7, #16]
 8003ff8:	e043      	b.n	8004082 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	015a      	lsls	r2, r3, #5
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	4413      	add	r3, r2
 8004002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800400c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004010:	d118      	bne.n	8004044 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10a      	bne.n	800402e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4413      	add	r3, r2
 8004020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004024:	461a      	mov	r2, r3
 8004026:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800402a:	6013      	str	r3, [r2, #0]
 800402c:	e013      	b.n	8004056 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	015a      	lsls	r2, r3, #5
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4413      	add	r3, r2
 8004036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800403a:	461a      	mov	r2, r3
 800403c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	e008      	b.n	8004056 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4413      	add	r3, r2
 800404c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004050:	461a      	mov	r2, r3
 8004052:	2300      	movs	r3, #0
 8004054:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	015a      	lsls	r2, r3, #5
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	4413      	add	r3, r2
 800405e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004062:	461a      	mov	r2, r3
 8004064:	2300      	movs	r3, #0
 8004066:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	015a      	lsls	r2, r3, #5
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4413      	add	r3, r2
 8004070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004074:	461a      	mov	r2, r3
 8004076:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800407a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	3301      	adds	r3, #1
 8004080:	613b      	str	r3, [r7, #16]
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	429a      	cmp	r2, r3
 8004088:	d3b7      	bcc.n	8003ffa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800408a:	2300      	movs	r3, #0
 800408c:	613b      	str	r3, [r7, #16]
 800408e:	e043      	b.n	8004118 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4413      	add	r3, r2
 8004098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040a6:	d118      	bne.n	80040da <USB_DevInit+0x206>
    {
      if (i == 0U)
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10a      	bne.n	80040c4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ba:	461a      	mov	r2, r3
 80040bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	e013      	b.n	80040ec <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d0:	461a      	mov	r2, r3
 80040d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040d6:	6013      	str	r3, [r2, #0]
 80040d8:	e008      	b.n	80040ec <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	015a      	lsls	r2, r3, #5
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	4413      	add	r3, r2
 80040e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e6:	461a      	mov	r2, r3
 80040e8:	2300      	movs	r3, #0
 80040ea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f8:	461a      	mov	r2, r3
 80040fa:	2300      	movs	r3, #0
 80040fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	015a      	lsls	r2, r3, #5
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	4413      	add	r3, r2
 8004106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800410a:	461a      	mov	r2, r3
 800410c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004110:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	3301      	adds	r3, #1
 8004116:	613b      	str	r3, [r7, #16]
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	429a      	cmp	r2, r3
 800411e:	d3b7      	bcc.n	8004090 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800412e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004132:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004140:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004144:	2b00      	cmp	r3, #0
 8004146:	d105      	bne.n	8004154 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	f043 0210 	orr.w	r2, r3, #16
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	699a      	ldr	r2, [r3, #24]
 8004158:	4b0f      	ldr	r3, [pc, #60]	; (8004198 <USB_DevInit+0x2c4>)
 800415a:	4313      	orrs	r3, r2
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004162:	2b00      	cmp	r3, #0
 8004164:	d005      	beq.n	8004172 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	f043 0208 	orr.w	r2, r3, #8
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004174:	2b01      	cmp	r3, #1
 8004176:	d107      	bne.n	8004188 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004180:	f043 0304 	orr.w	r3, r3, #4
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004188:	7dfb      	ldrb	r3, [r7, #23]
}
 800418a:	4618      	mov	r0, r3
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004194:	b004      	add	sp, #16
 8004196:	4770      	bx	lr
 8004198:	803c3800 	.word	0x803c3800

0800419c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80041a6:	2300      	movs	r3, #0
 80041a8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	019b      	lsls	r3, r3, #6
 80041ae:	f043 0220 	orr.w	r2, r3, #32
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	3301      	adds	r3, #1
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4a09      	ldr	r2, [pc, #36]	; (80041e4 <USB_FlushTxFifo+0x48>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d901      	bls.n	80041c8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e006      	b.n	80041d6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	f003 0320 	and.w	r3, r3, #32
 80041d0:	2b20      	cmp	r3, #32
 80041d2:	d0f0      	beq.n	80041b6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	00030d40 	.word	0x00030d40

080041e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80041f0:	2300      	movs	r3, #0
 80041f2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2210      	movs	r2, #16
 80041f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3301      	adds	r3, #1
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4a09      	ldr	r2, [pc, #36]	; (8004228 <USB_FlushRxFifo+0x40>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d901      	bls.n	800420c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e006      	b.n	800421a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	f003 0310 	and.w	r3, r3, #16
 8004214:	2b10      	cmp	r3, #16
 8004216:	d0f0      	beq.n	80041fa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	00030d40 	.word	0x00030d40

0800422c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	460b      	mov	r3, r1
 8004236:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	78fb      	ldrb	r3, [r7, #3]
 8004246:	68f9      	ldr	r1, [r7, #12]
 8004248:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800424c:	4313      	orrs	r3, r2
 800424e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800425e:	b480      	push	{r7}
 8004260:	b087      	sub	sp, #28
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 0306 	and.w	r3, r3, #6
 8004276:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d102      	bne.n	8004284 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800427e:	2300      	movs	r3, #0
 8004280:	75fb      	strb	r3, [r7, #23]
 8004282:	e00a      	b.n	800429a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2b02      	cmp	r3, #2
 8004288:	d002      	beq.n	8004290 <USB_GetDevSpeed+0x32>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2b06      	cmp	r3, #6
 800428e:	d102      	bne.n	8004296 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004290:	2302      	movs	r3, #2
 8004292:	75fb      	strb	r3, [r7, #23]
 8004294:	e001      	b.n	800429a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004296:	230f      	movs	r3, #15
 8004298:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800429a:	7dfb      	ldrb	r3, [r7, #23]
}
 800429c:	4618      	mov	r0, r3
 800429e:	371c      	adds	r7, #28
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	785b      	ldrb	r3, [r3, #1]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d13a      	bne.n	800433a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ca:	69da      	ldr	r2, [r3, #28]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	f003 030f 	and.w	r3, r3, #15
 80042d4:	2101      	movs	r1, #1
 80042d6:	fa01 f303 	lsl.w	r3, r1, r3
 80042da:	b29b      	uxth	r3, r3
 80042dc:	68f9      	ldr	r1, [r7, #12]
 80042de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042e2:	4313      	orrs	r3, r2
 80042e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d155      	bne.n	80043a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	4413      	add	r3, r2
 8004304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	78db      	ldrb	r3, [r3, #3]
 8004316:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004318:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	059b      	lsls	r3, r3, #22
 800431e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004320:	4313      	orrs	r3, r2
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	0151      	lsls	r1, r2, #5
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	440a      	add	r2, r1
 800432a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800432e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004336:	6013      	str	r3, [r2, #0]
 8004338:	e036      	b.n	80043a8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004340:	69da      	ldr	r2, [r3, #28]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	2101      	movs	r1, #1
 800434c:	fa01 f303 	lsl.w	r3, r1, r3
 8004350:	041b      	lsls	r3, r3, #16
 8004352:	68f9      	ldr	r1, [r7, #12]
 8004354:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004358:	4313      	orrs	r3, r2
 800435a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	015a      	lsls	r2, r3, #5
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4413      	add	r3, r2
 8004364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d11a      	bne.n	80043a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	015a      	lsls	r2, r3, #5
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	4413      	add	r3, r2
 800437a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	78db      	ldrb	r3, [r3, #3]
 800438c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800438e:	430b      	orrs	r3, r1
 8004390:	4313      	orrs	r3, r2
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	0151      	lsls	r1, r2, #5
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	440a      	add	r2, r1
 800439a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800439e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043a6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
	...

080043b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	785b      	ldrb	r3, [r3, #1]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d161      	bne.n	8004498 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043ea:	d11f      	bne.n	800442c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	0151      	lsls	r1, r2, #5
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	440a      	add	r2, r1
 8004402:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004406:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800440a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4413      	add	r3, r2
 8004414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	0151      	lsls	r1, r2, #5
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	440a      	add	r2, r1
 8004422:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004426:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800442a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004432:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	f003 030f 	and.w	r3, r3, #15
 800443c:	2101      	movs	r1, #1
 800443e:	fa01 f303 	lsl.w	r3, r1, r3
 8004442:	b29b      	uxth	r3, r3
 8004444:	43db      	mvns	r3, r3
 8004446:	68f9      	ldr	r1, [r7, #12]
 8004448:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800444c:	4013      	ands	r3, r2
 800444e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004456:	69da      	ldr	r2, [r3, #28]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	f003 030f 	and.w	r3, r3, #15
 8004460:	2101      	movs	r1, #1
 8004462:	fa01 f303 	lsl.w	r3, r1, r3
 8004466:	b29b      	uxth	r3, r3
 8004468:	43db      	mvns	r3, r3
 800446a:	68f9      	ldr	r1, [r7, #12]
 800446c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004470:	4013      	ands	r3, r2
 8004472:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4413      	add	r3, r2
 800447c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	0159      	lsls	r1, r3, #5
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	440b      	add	r3, r1
 800448a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800448e:	4619      	mov	r1, r3
 8004490:	4b35      	ldr	r3, [pc, #212]	; (8004568 <USB_DeactivateEndpoint+0x1b0>)
 8004492:	4013      	ands	r3, r2
 8004494:	600b      	str	r3, [r1, #0]
 8004496:	e060      	b.n	800455a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	015a      	lsls	r2, r3, #5
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4413      	add	r3, r2
 80044a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044ae:	d11f      	bne.n	80044f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	0151      	lsls	r1, r2, #5
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	440a      	add	r2, r1
 80044c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	0151      	lsls	r1, r2, #5
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	440a      	add	r2, r1
 80044e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	f003 030f 	and.w	r3, r3, #15
 8004500:	2101      	movs	r1, #1
 8004502:	fa01 f303 	lsl.w	r3, r1, r3
 8004506:	041b      	lsls	r3, r3, #16
 8004508:	43db      	mvns	r3, r3
 800450a:	68f9      	ldr	r1, [r7, #12]
 800450c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004510:	4013      	ands	r3, r2
 8004512:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800451a:	69da      	ldr	r2, [r3, #28]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	f003 030f 	and.w	r3, r3, #15
 8004524:	2101      	movs	r1, #1
 8004526:	fa01 f303 	lsl.w	r3, r1, r3
 800452a:	041b      	lsls	r3, r3, #16
 800452c:	43db      	mvns	r3, r3
 800452e:	68f9      	ldr	r1, [r7, #12]
 8004530:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004534:	4013      	ands	r3, r2
 8004536:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	0159      	lsls	r1, r3, #5
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	440b      	add	r3, r1
 800454e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004552:	4619      	mov	r1, r3
 8004554:	4b05      	ldr	r3, [pc, #20]	; (800456c <USB_DeactivateEndpoint+0x1b4>)
 8004556:	4013      	ands	r3, r2
 8004558:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	ec337800 	.word	0xec337800
 800456c:	eff37800 	.word	0xeff37800

08004570 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b08a      	sub	sp, #40	; 0x28
 8004574:	af02      	add	r7, sp, #8
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	4613      	mov	r3, r2
 800457c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	785b      	ldrb	r3, [r3, #1]
 800458c:	2b01      	cmp	r3, #1
 800458e:	f040 815c 	bne.w	800484a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d132      	bne.n	8004600 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	0151      	lsls	r1, r2, #5
 80045ac:	69fa      	ldr	r2, [r7, #28]
 80045ae:	440a      	add	r2, r1
 80045b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	0151      	lsls	r1, r2, #5
 80045d0:	69fa      	ldr	r2, [r7, #28]
 80045d2:	440a      	add	r2, r1
 80045d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	015a      	lsls	r2, r3, #5
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	4413      	add	r3, r2
 80045e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	0151      	lsls	r1, r2, #5
 80045f0:	69fa      	ldr	r2, [r7, #28]
 80045f2:	440a      	add	r2, r1
 80045f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045f8:	0cdb      	lsrs	r3, r3, #19
 80045fa:	04db      	lsls	r3, r3, #19
 80045fc:	6113      	str	r3, [r2, #16]
 80045fe:	e074      	b.n	80046ea <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	0151      	lsls	r1, r2, #5
 8004612:	69fa      	ldr	r2, [r7, #28]
 8004614:	440a      	add	r2, r1
 8004616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800461a:	0cdb      	lsrs	r3, r3, #19
 800461c:	04db      	lsls	r3, r3, #19
 800461e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	4413      	add	r3, r2
 8004628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	0151      	lsls	r1, r2, #5
 8004632:	69fa      	ldr	r2, [r7, #28]
 8004634:	440a      	add	r2, r1
 8004636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800463a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800463e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004642:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	4413      	add	r3, r2
 800464c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004650:	691a      	ldr	r2, [r3, #16]
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	6959      	ldr	r1, [r3, #20]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	440b      	add	r3, r1
 800465c:	1e59      	subs	r1, r3, #1
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	fbb1 f3f3 	udiv	r3, r1, r3
 8004666:	04d9      	lsls	r1, r3, #19
 8004668:	4b9d      	ldr	r3, [pc, #628]	; (80048e0 <USB_EPStartXfer+0x370>)
 800466a:	400b      	ands	r3, r1
 800466c:	69b9      	ldr	r1, [r7, #24]
 800466e:	0148      	lsls	r0, r1, #5
 8004670:	69f9      	ldr	r1, [r7, #28]
 8004672:	4401      	add	r1, r0
 8004674:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004678:	4313      	orrs	r3, r2
 800467a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	4413      	add	r3, r2
 8004684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004688:	691a      	ldr	r2, [r3, #16]
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004692:	69b9      	ldr	r1, [r7, #24]
 8004694:	0148      	lsls	r0, r1, #5
 8004696:	69f9      	ldr	r1, [r7, #28]
 8004698:	4401      	add	r1, r0
 800469a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800469e:	4313      	orrs	r3, r2
 80046a0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	78db      	ldrb	r3, [r3, #3]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d11f      	bne.n	80046ea <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	015a      	lsls	r2, r3, #5
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	4413      	add	r3, r2
 80046b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	0151      	lsls	r1, r2, #5
 80046bc:	69fa      	ldr	r2, [r7, #28]
 80046be:	440a      	add	r2, r1
 80046c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046c4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80046c8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	015a      	lsls	r2, r3, #5
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	4413      	add	r3, r2
 80046d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	0151      	lsls	r1, r2, #5
 80046dc:	69fa      	ldr	r2, [r7, #28]
 80046de:	440a      	add	r2, r1
 80046e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046e8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80046ea:	79fb      	ldrb	r3, [r7, #7]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d14b      	bne.n	8004788 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d009      	beq.n	800470c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004704:	461a      	mov	r2, r3
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	78db      	ldrb	r3, [r3, #3]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d128      	bne.n	8004766 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004720:	2b00      	cmp	r3, #0
 8004722:	d110      	bne.n	8004746 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	4413      	add	r3, r2
 800472c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	0151      	lsls	r1, r2, #5
 8004736:	69fa      	ldr	r2, [r7, #28]
 8004738:	440a      	add	r2, r1
 800473a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800473e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004742:	6013      	str	r3, [r2, #0]
 8004744:	e00f      	b.n	8004766 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	015a      	lsls	r2, r3, #5
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	4413      	add	r3, r2
 800474e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	0151      	lsls	r1, r2, #5
 8004758:	69fa      	ldr	r2, [r7, #28]
 800475a:	440a      	add	r2, r1
 800475c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004764:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	015a      	lsls	r2, r3, #5
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	4413      	add	r3, r2
 800476e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	0151      	lsls	r1, r2, #5
 8004778:	69fa      	ldr	r2, [r7, #28]
 800477a:	440a      	add	r2, r1
 800477c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004780:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004784:	6013      	str	r3, [r2, #0]
 8004786:	e12f      	b.n	80049e8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	4413      	add	r3, r2
 8004790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	0151      	lsls	r1, r2, #5
 800479a:	69fa      	ldr	r2, [r7, #28]
 800479c:	440a      	add	r2, r1
 800479e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047a6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	78db      	ldrb	r3, [r3, #3]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d015      	beq.n	80047dc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 8117 	beq.w	80049e8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	f003 030f 	and.w	r3, r3, #15
 80047ca:	2101      	movs	r1, #1
 80047cc:	fa01 f303 	lsl.w	r3, r1, r3
 80047d0:	69f9      	ldr	r1, [r7, #28]
 80047d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047d6:	4313      	orrs	r3, r2
 80047d8:	634b      	str	r3, [r1, #52]	; 0x34
 80047da:	e105      	b.n	80049e8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d110      	bne.n	800480e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	0151      	lsls	r1, r2, #5
 80047fe:	69fa      	ldr	r2, [r7, #28]
 8004800:	440a      	add	r2, r1
 8004802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004806:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800480a:	6013      	str	r3, [r2, #0]
 800480c:	e00f      	b.n	800482e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	015a      	lsls	r2, r3, #5
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	4413      	add	r3, r2
 8004816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	0151      	lsls	r1, r2, #5
 8004820:	69fa      	ldr	r2, [r7, #28]
 8004822:	440a      	add	r2, r1
 8004824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800482c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	68d9      	ldr	r1, [r3, #12]
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	781a      	ldrb	r2, [r3, #0]
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	b298      	uxth	r0, r3
 800483c:	79fb      	ldrb	r3, [r7, #7]
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	4603      	mov	r3, r0
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 fa2b 	bl	8004c9e <USB_WritePacket>
 8004848:	e0ce      	b.n	80049e8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	015a      	lsls	r2, r3, #5
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	4413      	add	r3, r2
 8004852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	0151      	lsls	r1, r2, #5
 800485c:	69fa      	ldr	r2, [r7, #28]
 800485e:	440a      	add	r2, r1
 8004860:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004864:	0cdb      	lsrs	r3, r3, #19
 8004866:	04db      	lsls	r3, r3, #19
 8004868:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	4413      	add	r3, r2
 8004872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	0151      	lsls	r1, r2, #5
 800487c:	69fa      	ldr	r2, [r7, #28]
 800487e:	440a      	add	r2, r1
 8004880:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004884:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004888:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800488c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d126      	bne.n	80048e4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	4413      	add	r3, r2
 800489e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a2:	691a      	ldr	r2, [r3, #16]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048ac:	69b9      	ldr	r1, [r7, #24]
 80048ae:	0148      	lsls	r0, r1, #5
 80048b0:	69f9      	ldr	r1, [r7, #28]
 80048b2:	4401      	add	r1, r0
 80048b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80048b8:	4313      	orrs	r3, r2
 80048ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	015a      	lsls	r2, r3, #5
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	0151      	lsls	r1, r2, #5
 80048ce:	69fa      	ldr	r2, [r7, #28]
 80048d0:	440a      	add	r2, r1
 80048d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048da:	6113      	str	r3, [r2, #16]
 80048dc:	e036      	b.n	800494c <USB_EPStartXfer+0x3dc>
 80048de:	bf00      	nop
 80048e0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	695a      	ldr	r2, [r3, #20]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	4413      	add	r3, r2
 80048ee:	1e5a      	subs	r2, r3, #1
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	4413      	add	r3, r2
 8004902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004906:	691a      	ldr	r2, [r3, #16]
 8004908:	8afb      	ldrh	r3, [r7, #22]
 800490a:	04d9      	lsls	r1, r3, #19
 800490c:	4b39      	ldr	r3, [pc, #228]	; (80049f4 <USB_EPStartXfer+0x484>)
 800490e:	400b      	ands	r3, r1
 8004910:	69b9      	ldr	r1, [r7, #24]
 8004912:	0148      	lsls	r0, r1, #5
 8004914:	69f9      	ldr	r1, [r7, #28]
 8004916:	4401      	add	r1, r0
 8004918:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800491c:	4313      	orrs	r3, r2
 800491e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492c:	691a      	ldr	r2, [r3, #16]
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	8af9      	ldrh	r1, [r7, #22]
 8004934:	fb01 f303 	mul.w	r3, r1, r3
 8004938:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800493c:	69b9      	ldr	r1, [r7, #24]
 800493e:	0148      	lsls	r0, r1, #5
 8004940:	69f9      	ldr	r1, [r7, #28]
 8004942:	4401      	add	r1, r0
 8004944:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004948:	4313      	orrs	r3, r2
 800494a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800494c:	79fb      	ldrb	r3, [r7, #7]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d10d      	bne.n	800496e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d009      	beq.n	800496e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	68d9      	ldr	r1, [r3, #12]
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	015a      	lsls	r2, r3, #5
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	4413      	add	r3, r2
 8004966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496a:	460a      	mov	r2, r1
 800496c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	78db      	ldrb	r3, [r3, #3]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d128      	bne.n	80049c8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004982:	2b00      	cmp	r3, #0
 8004984:	d110      	bne.n	80049a8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	015a      	lsls	r2, r3, #5
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	4413      	add	r3, r2
 800498e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	0151      	lsls	r1, r2, #5
 8004998:	69fa      	ldr	r2, [r7, #28]
 800499a:	440a      	add	r2, r1
 800499c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049a4:	6013      	str	r3, [r2, #0]
 80049a6:	e00f      	b.n	80049c8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	0151      	lsls	r1, r2, #5
 80049ba:	69fa      	ldr	r2, [r7, #28]
 80049bc:	440a      	add	r2, r1
 80049be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	015a      	lsls	r2, r3, #5
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	69ba      	ldr	r2, [r7, #24]
 80049d8:	0151      	lsls	r1, r2, #5
 80049da:	69fa      	ldr	r2, [r7, #28]
 80049dc:	440a      	add	r2, r1
 80049de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3720      	adds	r7, #32
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	1ff80000 	.word	0x1ff80000

080049f8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b087      	sub	sp, #28
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	4613      	mov	r3, r2
 8004a04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	785b      	ldrb	r3, [r3, #1]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	f040 80cd 	bne.w	8004bb4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d132      	bne.n	8004a88 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	015a      	lsls	r2, r3, #5
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	0151      	lsls	r1, r2, #5
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	440a      	add	r2, r1
 8004a38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	015a      	lsls	r2, r3, #5
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	0151      	lsls	r1, r2, #5
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	440a      	add	r2, r1
 8004a5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	015a      	lsls	r2, r3, #5
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	0151      	lsls	r1, r2, #5
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	440a      	add	r2, r1
 8004a7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a80:	0cdb      	lsrs	r3, r3, #19
 8004a82:	04db      	lsls	r3, r3, #19
 8004a84:	6113      	str	r3, [r2, #16]
 8004a86:	e04e      	b.n	8004b26 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	0151      	lsls	r1, r2, #5
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	440a      	add	r2, r1
 8004a9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aa2:	0cdb      	lsrs	r3, r3, #19
 8004aa4:	04db      	lsls	r3, r3, #19
 8004aa6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	0151      	lsls	r1, r2, #5
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	440a      	add	r2, r1
 8004abe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ac2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ac6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004aca:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	695a      	ldr	r2, [r3, #20]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d903      	bls.n	8004ae0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	0151      	lsls	r1, r2, #5
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	440a      	add	r2, r1
 8004af6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004afa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004afe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0c:	691a      	ldr	r2, [r3, #16]
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b16:	6939      	ldr	r1, [r7, #16]
 8004b18:	0148      	lsls	r0, r1, #5
 8004b1a:	6979      	ldr	r1, [r7, #20]
 8004b1c:	4401      	add	r1, r0
 8004b1e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b22:	4313      	orrs	r3, r2
 8004b24:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004b26:	79fb      	ldrb	r3, [r7, #7]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d11e      	bne.n	8004b6a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d009      	beq.n	8004b48 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	015a      	lsls	r2, r3, #5
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b40:	461a      	mov	r2, r3
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	0151      	lsls	r1, r2, #5
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	440a      	add	r2, r1
 8004b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	e092      	b.n	8004c90 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	0151      	lsls	r1, r2, #5
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	440a      	add	r2, r1
 8004b80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b88:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d07e      	beq.n	8004c90 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	f003 030f 	and.w	r3, r3, #15
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba8:	6979      	ldr	r1, [r7, #20]
 8004baa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	634b      	str	r3, [r1, #52]	; 0x34
 8004bb2:	e06d      	b.n	8004c90 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	0151      	lsls	r1, r2, #5
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	440a      	add	r2, r1
 8004bca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bce:	0cdb      	lsrs	r3, r3, #19
 8004bd0:	04db      	lsls	r3, r3, #19
 8004bd2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	0151      	lsls	r1, r2, #5
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	440a      	add	r2, r1
 8004bea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bf2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bf6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d003      	beq.n	8004c08 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	015a      	lsls	r2, r3, #5
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	0151      	lsls	r1, r2, #5
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	440a      	add	r2, r1
 8004c1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c26:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c34:	691a      	ldr	r2, [r3, #16]
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c3e:	6939      	ldr	r1, [r7, #16]
 8004c40:	0148      	lsls	r0, r1, #5
 8004c42:	6979      	ldr	r1, [r7, #20]
 8004c44:	4401      	add	r1, r0
 8004c46:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004c4e:	79fb      	ldrb	r3, [r7, #7]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d10d      	bne.n	8004c70 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d009      	beq.n	8004c70 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	68d9      	ldr	r1, [r3, #12]
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	015a      	lsls	r2, r3, #5
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	4413      	add	r3, r2
 8004c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c6c:	460a      	mov	r2, r1
 8004c6e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	0151      	lsls	r1, r2, #5
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	440a      	add	r2, r1
 8004c86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	371c      	adds	r7, #28
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b089      	sub	sp, #36	; 0x24
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	60f8      	str	r0, [r7, #12]
 8004ca6:	60b9      	str	r1, [r7, #8]
 8004ca8:	4611      	mov	r1, r2
 8004caa:	461a      	mov	r2, r3
 8004cac:	460b      	mov	r3, r1
 8004cae:	71fb      	strb	r3, [r7, #7]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004cbc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d11a      	bne.n	8004cfa <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004cc4:	88bb      	ldrh	r3, [r7, #4]
 8004cc6:	3303      	adds	r3, #3
 8004cc8:	089b      	lsrs	r3, r3, #2
 8004cca:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004ccc:	2300      	movs	r3, #0
 8004cce:	61bb      	str	r3, [r7, #24]
 8004cd0:	e00f      	b.n	8004cf2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004cd2:	79fb      	ldrb	r3, [r7, #7]
 8004cd4:	031a      	lsls	r2, r3, #12
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cde:	461a      	mov	r2, r3
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	3304      	adds	r3, #4
 8004cea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	61bb      	str	r3, [r7, #24]
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d3eb      	bcc.n	8004cd2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3724      	adds	r7, #36	; 0x24
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b089      	sub	sp, #36	; 0x24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	4613      	mov	r3, r2
 8004d14:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004d1e:	88fb      	ldrh	r3, [r7, #6]
 8004d20:	3303      	adds	r3, #3
 8004d22:	089b      	lsrs	r3, r3, #2
 8004d24:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004d26:	2300      	movs	r3, #0
 8004d28:	61bb      	str	r3, [r7, #24]
 8004d2a:	e00b      	b.n	8004d44 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	601a      	str	r2, [r3, #0]
    pDest++;
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	3301      	adds	r3, #1
 8004d42:	61bb      	str	r3, [r7, #24]
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d3ef      	bcc.n	8004d2c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004d4c:	69fb      	ldr	r3, [r7, #28]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3724      	adds	r7, #36	; 0x24
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b085      	sub	sp, #20
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
 8004d62:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	785b      	ldrb	r3, [r3, #1]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d12c      	bne.n	8004dd0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	015a      	lsls	r2, r3, #5
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	db12      	blt.n	8004dae <USB_EPSetStall+0x54>
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00f      	beq.n	8004dae <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	0151      	lsls	r1, r2, #5
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	440a      	add	r2, r1
 8004da4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004da8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004dac:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	015a      	lsls	r2, r3, #5
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4413      	add	r3, r2
 8004db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	0151      	lsls	r1, r2, #5
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	440a      	add	r2, r1
 8004dc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004dcc:	6013      	str	r3, [r2, #0]
 8004dce:	e02b      	b.n	8004e28 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	db12      	blt.n	8004e08 <USB_EPSetStall+0xae>
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00f      	beq.n	8004e08 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	0151      	lsls	r1, r2, #5
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	440a      	add	r2, r1
 8004dfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e02:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e06:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	0151      	lsls	r1, r2, #5
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	440a      	add	r2, r1
 8004e1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b085      	sub	sp, #20
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
 8004e3e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	785b      	ldrb	r3, [r3, #1]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d128      	bne.n	8004ea4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	0151      	lsls	r1, r2, #5
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	440a      	add	r2, r1
 8004e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e6c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e70:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	78db      	ldrb	r3, [r3, #3]
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	d003      	beq.n	8004e82 <USB_EPClearStall+0x4c>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	78db      	ldrb	r3, [r3, #3]
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d138      	bne.n	8004ef4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	015a      	lsls	r2, r3, #5
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	0151      	lsls	r1, r2, #5
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	440a      	add	r2, r1
 8004e98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ea0:	6013      	str	r3, [r2, #0]
 8004ea2:	e027      	b.n	8004ef4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	0151      	lsls	r1, r2, #5
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	440a      	add	r2, r1
 8004eba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ebe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ec2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	78db      	ldrb	r3, [r3, #3]
 8004ec8:	2b03      	cmp	r3, #3
 8004eca:	d003      	beq.n	8004ed4 <USB_EPClearStall+0x9e>
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	78db      	ldrb	r3, [r3, #3]
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d10f      	bne.n	8004ef4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	015a      	lsls	r2, r3, #5
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	0151      	lsls	r1, r2, #5
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	440a      	add	r2, r1
 8004eea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ef2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b085      	sub	sp, #20
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f20:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004f24:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	78fb      	ldrb	r3, [r7, #3]
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004f36:	68f9      	ldr	r1, [r7, #12]
 8004f38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3714      	adds	r7, #20
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b085      	sub	sp, #20
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f68:	f023 0303 	bic.w	r3, r3, #3
 8004f6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f7c:	f023 0302 	bic.w	r3, r3, #2
 8004f80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004faa:	f023 0303 	bic.w	r3, r3, #3
 8004fae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fbe:	f043 0302 	orr.w	r3, r3, #2
 8004fc2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b085      	sub	sp, #20
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004fea:	68fb      	ldr	r3, [r7, #12]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	4013      	ands	r3, r2
 800501a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	0c1b      	lsrs	r3, r3, #16
}
 8005020:	4618      	mov	r0, r3
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	4013      	ands	r3, r2
 800504e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	b29b      	uxth	r3, r3
}
 8005054:	4618      	mov	r0, r3
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	460b      	mov	r3, r1
 800506a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005070:	78fb      	ldrb	r3, [r7, #3]
 8005072:	015a      	lsls	r2, r3, #5
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	4413      	add	r3, r2
 8005078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	4013      	ands	r3, r2
 800508c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800508e:	68bb      	ldr	r3, [r7, #8]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3714      	adds	r7, #20
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800509c:	b480      	push	{r7}
 800509e:	b087      	sub	sp, #28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	460b      	mov	r3, r1
 80050a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050be:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80050c0:	78fb      	ldrb	r3, [r7, #3]
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	fa22 f303 	lsr.w	r3, r2, r3
 80050cc:	01db      	lsls	r3, r3, #7
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80050d6:	78fb      	ldrb	r3, [r7, #3]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	4013      	ands	r3, r2
 80050e8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80050ea:	68bb      	ldr	r3, [r7, #8]
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	371c      	adds	r7, #28
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	f003 0301 	and.w	r3, r3, #1
}
 8005108:	4618      	mov	r0, r3
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800512e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005132:	f023 0307 	bic.w	r3, r3, #7
 8005136:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800514a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3714      	adds	r7, #20
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
	...

0800515c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	460b      	mov	r3, r1
 8005166:	607a      	str	r2, [r7, #4]
 8005168:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	333c      	adds	r3, #60	; 0x3c
 8005172:	3304      	adds	r3, #4
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	4a26      	ldr	r2, [pc, #152]	; (8005214 <USB_EP0_OutStart+0xb8>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d90a      	bls.n	8005196 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800518c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005190:	d101      	bne.n	8005196 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005192:	2300      	movs	r3, #0
 8005194:	e037      	b.n	8005206 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800519c:	461a      	mov	r2, r3
 800519e:	2300      	movs	r3, #0
 80051a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051c4:	f043 0318 	orr.w	r3, r3, #24
 80051c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051d8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80051dc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80051de:	7afb      	ldrb	r3, [r7, #11]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d10f      	bne.n	8005204 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ea:	461a      	mov	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051fe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005202:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	371c      	adds	r7, #28
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	4f54300a 	.word	0x4f54300a

08005218 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005220:	2300      	movs	r3, #0
 8005222:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	3301      	adds	r3, #1
 8005228:	60fb      	str	r3, [r7, #12]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4a13      	ldr	r2, [pc, #76]	; (800527c <USB_CoreReset+0x64>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d901      	bls.n	8005236 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e01b      	b.n	800526e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	2b00      	cmp	r3, #0
 800523c:	daf2      	bge.n	8005224 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	f043 0201 	orr.w	r2, r3, #1
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	3301      	adds	r3, #1
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4a09      	ldr	r2, [pc, #36]	; (800527c <USB_CoreReset+0x64>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d901      	bls.n	8005260 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e006      	b.n	800526e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	2b01      	cmp	r3, #1
 800526a:	d0f0      	beq.n	800524e <USB_CoreReset+0x36>

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	00030d40 	.word	0x00030d40

08005280 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	460b      	mov	r3, r1
 800528a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800528c:	205c      	movs	r0, #92	; 0x5c
 800528e:	f002 f927 	bl	80074e0 <malloc>
 8005292:	4603      	mov	r3, r0
 8005294:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d105      	bne.n	80052a8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80052a4:	2302      	movs	r3, #2
 80052a6:	e05f      	b.n	8005368 <USBD_CDC_Init+0xe8>
  }

  pdev->pClassData = (void *)hcdc;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	7c1b      	ldrb	r3, [r3, #16]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d117      	bne.n	80052e8 <USBD_CDC_Init+0x68>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80052b8:	2340      	movs	r3, #64	; 0x40
 80052ba:	2202      	movs	r2, #2
 80052bc:	2181      	movs	r1, #129	; 0x81
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f001 ff95 	bl	80071ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80052ca:	2340      	movs	r3, #64	; 0x40
 80052cc:	2202      	movs	r2, #2
 80052ce:	2101      	movs	r1, #1
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f001 ff8c 	bl	80071ee <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2210      	movs	r2, #16
 80052e2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80052e6:	e016      	b.n	8005316 <USBD_CDC_Init+0x96>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80052e8:	2340      	movs	r3, #64	; 0x40
 80052ea:	2202      	movs	r2, #2
 80052ec:	2181      	movs	r1, #129	; 0x81
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f001 ff7d 	bl	80071ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80052fa:	2340      	movs	r3, #64	; 0x40
 80052fc:	2202      	movs	r2, #2
 80052fe:	2101      	movs	r1, #1
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f001 ff74 	bl	80071ee <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2210      	movs	r2, #16
 8005312:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005316:	2308      	movs	r3, #8
 8005318:	2203      	movs	r2, #3
 800531a:	2182      	movs	r1, #130	; 0x82
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f001 ff66 	bl	80071ee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	655a      	str	r2, [r3, #84]	; 0x54
  hcdc->RxState = 0U;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	659a      	str	r2, [r3, #88]	; 0x58

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	7c1b      	ldrb	r3, [r3, #16]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d107      	bne.n	8005358 <USBD_CDC_Init+0xd8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800534c:	2340      	movs	r3, #64	; 0x40
 800534e:	2101      	movs	r1, #1
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f002 f83b 	bl	80073cc <USBD_LL_PrepareReceive>
 8005356:	e006      	b.n	8005366 <USBD_CDC_Init+0xe6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800535c:	2340      	movs	r3, #64	; 0x40
 800535e:	2101      	movs	r1, #1
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f002 f833 	bl	80073cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	460b      	mov	r3, r1
 800537a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800537c:	2300      	movs	r3, #0
 800537e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005380:	2181      	movs	r1, #129	; 0x81
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f001 ff59 	bl	800723a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800538e:	2101      	movs	r1, #1
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f001 ff52 	bl	800723a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800539e:	2182      	movs	r1, #130	; 0x82
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f001 ff4a 	bl	800723a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00e      	beq.n	80053de <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053d0:	4618      	mov	r0, r3
 80053d2:	f002 f88d 	bl	80074f0 <free>
    pdev->pClassData = NULL;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80053de:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053f8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80053fa:	2300      	movs	r3, #0
 80053fc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80053fe:	2300      	movs	r3, #0
 8005400:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005402:	2300      	movs	r3, #0
 8005404:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800540e:	2b00      	cmp	r3, #0
 8005410:	d03a      	beq.n	8005488 <USBD_CDC_Setup+0xa0>
 8005412:	2b20      	cmp	r3, #32
 8005414:	f040 8097 	bne.w	8005546 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	88db      	ldrh	r3, [r3, #6]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d029      	beq.n	8005474 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	b25b      	sxtb	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	da11      	bge.n	800544e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	683a      	ldr	r2, [r7, #0]
 8005434:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8005436:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	88d2      	ldrh	r2, [r2, #6]
 800543c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800543e:	6939      	ldr	r1, [r7, #16]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	88db      	ldrh	r3, [r3, #6]
 8005444:	461a      	mov	r2, r3
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f001 fa8d 	bl	8006966 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800544c:	e082      	b.n	8005554 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	785a      	ldrb	r2, [r3, #1]
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	88db      	ldrh	r3, [r3, #6]
 800545c:	b2da      	uxtb	r2, r3
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005464:	6939      	ldr	r1, [r7, #16]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	88db      	ldrh	r3, [r3, #6]
 800546a:	461a      	mov	r2, r3
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f001 faa6 	bl	80069be <USBD_CtlPrepareRx>
    break;
 8005472:	e06f      	b.n	8005554 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	683a      	ldr	r2, [r7, #0]
 800547e:	7850      	ldrb	r0, [r2, #1]
 8005480:	2200      	movs	r2, #0
 8005482:	6839      	ldr	r1, [r7, #0]
 8005484:	4798      	blx	r3
    break;
 8005486:	e065      	b.n	8005554 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	785b      	ldrb	r3, [r3, #1]
 800548c:	2b0b      	cmp	r3, #11
 800548e:	d84f      	bhi.n	8005530 <USBD_CDC_Setup+0x148>
 8005490:	a201      	add	r2, pc, #4	; (adr r2, 8005498 <USBD_CDC_Setup+0xb0>)
 8005492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005496:	bf00      	nop
 8005498:	080054c9 	.word	0x080054c9
 800549c:	0800553f 	.word	0x0800553f
 80054a0:	08005531 	.word	0x08005531
 80054a4:	08005531 	.word	0x08005531
 80054a8:	08005531 	.word	0x08005531
 80054ac:	08005531 	.word	0x08005531
 80054b0:	08005531 	.word	0x08005531
 80054b4:	08005531 	.word	0x08005531
 80054b8:	08005531 	.word	0x08005531
 80054bc:	08005531 	.word	0x08005531
 80054c0:	080054f1 	.word	0x080054f1
 80054c4:	08005519 	.word	0x08005519
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054ce:	2b03      	cmp	r3, #3
 80054d0:	d107      	bne.n	80054e2 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80054d2:	f107 030c 	add.w	r3, r7, #12
 80054d6:	2202      	movs	r2, #2
 80054d8:	4619      	mov	r1, r3
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f001 fa43 	bl	8006966 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80054e0:	e030      	b.n	8005544 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80054e2:	6839      	ldr	r1, [r7, #0]
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f001 f9cd 	bl	8006884 <USBD_CtlError>
        ret = USBD_FAIL;
 80054ea:	2303      	movs	r3, #3
 80054ec:	75fb      	strb	r3, [r7, #23]
      break;
 80054ee:	e029      	b.n	8005544 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054f6:	2b03      	cmp	r3, #3
 80054f8:	d107      	bne.n	800550a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80054fa:	f107 030f 	add.w	r3, r7, #15
 80054fe:	2201      	movs	r2, #1
 8005500:	4619      	mov	r1, r3
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f001 fa2f 	bl	8006966 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005508:	e01c      	b.n	8005544 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800550a:	6839      	ldr	r1, [r7, #0]
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f001 f9b9 	bl	8006884 <USBD_CtlError>
        ret = USBD_FAIL;
 8005512:	2303      	movs	r3, #3
 8005514:	75fb      	strb	r3, [r7, #23]
      break;
 8005516:	e015      	b.n	8005544 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800551e:	2b03      	cmp	r3, #3
 8005520:	d00f      	beq.n	8005542 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8005522:	6839      	ldr	r1, [r7, #0]
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f001 f9ad 	bl	8006884 <USBD_CtlError>
        ret = USBD_FAIL;
 800552a:	2303      	movs	r3, #3
 800552c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800552e:	e008      	b.n	8005542 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005530:	6839      	ldr	r1, [r7, #0]
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f001 f9a6 	bl	8006884 <USBD_CtlError>
      ret = USBD_FAIL;
 8005538:	2303      	movs	r3, #3
 800553a:	75fb      	strb	r3, [r7, #23]
      break;
 800553c:	e002      	b.n	8005544 <USBD_CDC_Setup+0x15c>
      break;
 800553e:	bf00      	nop
 8005540:	e008      	b.n	8005554 <USBD_CDC_Setup+0x16c>
      break;
 8005542:	bf00      	nop
    }
    break;
 8005544:	e006      	b.n	8005554 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8005546:	6839      	ldr	r1, [r7, #0]
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f001 f99b 	bl	8006884 <USBD_CtlError>
    ret = USBD_FAIL;
 800554e:	2303      	movs	r3, #3
 8005550:	75fb      	strb	r3, [r7, #23]
    break;
 8005552:	bf00      	nop
  }

  return (uint8_t)ret;
 8005554:	7dfb      	ldrb	r3, [r7, #23]
}
 8005556:	4618      	mov	r0, r3
 8005558:	3718      	adds	r7, #24
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop

08005560 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	460b      	mov	r3, r1
 800556a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005572:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800557e:	2303      	movs	r3, #3
 8005580:	e047      	b.n	8005612 <USBD_CDC_DataIn+0xb2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005588:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800558a:	78fa      	ldrb	r2, [r7, #3]
 800558c:	6879      	ldr	r1, [r7, #4]
 800558e:	4613      	mov	r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4413      	add	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	440b      	add	r3, r1
 8005598:	3318      	adds	r3, #24
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d029      	beq.n	80055f4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80055a0:	78fa      	ldrb	r2, [r7, #3]
 80055a2:	6879      	ldr	r1, [r7, #4]
 80055a4:	4613      	mov	r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	440b      	add	r3, r1
 80055ae:	3318      	adds	r3, #24
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	78f9      	ldrb	r1, [r7, #3]
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	460b      	mov	r3, r1
 80055b8:	00db      	lsls	r3, r3, #3
 80055ba:	1a5b      	subs	r3, r3, r1
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4403      	add	r3, r0
 80055c0:	3344      	adds	r3, #68	; 0x44
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	fbb2 f1f3 	udiv	r1, r2, r3
 80055c8:	fb03 f301 	mul.w	r3, r3, r1
 80055cc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d110      	bne.n	80055f4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80055d2:	78fa      	ldrb	r2, [r7, #3]
 80055d4:	6879      	ldr	r1, [r7, #4]
 80055d6:	4613      	mov	r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4413      	add	r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	440b      	add	r3, r1
 80055e0:	3318      	adds	r3, #24
 80055e2:	2200      	movs	r2, #0
 80055e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80055e6:	78f9      	ldrb	r1, [r7, #3]
 80055e8:	2300      	movs	r3, #0
 80055ea:	2200      	movs	r2, #0
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f001 fecc 	bl	800738a <USBD_LL_Transmit>
 80055f2:	e00d      	b.n	8005610 <USBD_CDC_DataIn+0xb0>
  }
  else
  {
    hcdc->TxState = 0U;
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2200      	movs	r2, #0
 80055f8:	655a      	str	r2, [r3, #84]	; 0x54
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	6c90      	ldr	r0, [r2, #72]	; 0x48
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	f102 0150 	add.w	r1, r2, #80	; 0x50
 800560c:	78fa      	ldrb	r2, [r7, #3]
 800560e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b084      	sub	sp, #16
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
 8005622:	460b      	mov	r3, r1
 8005624:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800562c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005638:	2303      	movs	r3, #3
 800563a:	e012      	b.n	8005662 <USBD_CDC_DataOut+0x48>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800563c:	78fb      	ldrb	r3, [r7, #3]
 800563e:	4619      	mov	r1, r3
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f001 fee4 	bl	800740e <USBD_LL_GetRxDataSize>
 8005646:	4602      	mov	r2, r0
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	6c50      	ldr	r0, [r2, #68]	; 0x44
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	324c      	adds	r2, #76	; 0x4c
 800565c:	4611      	mov	r1, r2
 800565e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b084      	sub	sp, #16
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005678:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d015      	beq.n	80056b0 <USBD_CDC_EP0_RxReady+0x46>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800568a:	2bff      	cmp	r3, #255	; 0xff
 800568c:	d010      	beq.n	80056b0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
                                                      (uint8_t *)hcdc->data,
 800569c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80056a4:	b292      	uxth	r2, r2
 80056a6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	22ff      	movs	r2, #255	; 0xff
 80056ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  }

  return (uint8_t)USBD_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
	...

080056bc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2243      	movs	r2, #67	; 0x43
 80056c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80056ca:	4b03      	ldr	r3, [pc, #12]	; (80056d8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	20000094 	.word	0x20000094

080056dc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2243      	movs	r2, #67	; 0x43
 80056e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80056ea:	4b03      	ldr	r3, [pc, #12]	; (80056f8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr
 80056f8:	20000050 	.word	0x20000050

080056fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2243      	movs	r2, #67	; 0x43
 8005708:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800570a:	4b03      	ldr	r3, [pc, #12]	; (8005718 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800570c:	4618      	mov	r0, r3
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	200000d8 	.word	0x200000d8

0800571c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	220a      	movs	r2, #10
 8005728:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800572a:	4b03      	ldr	r3, [pc, #12]	; (8005738 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800572c:	4618      	mov	r0, r3
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	2000000c 	.word	0x2000000c

0800573c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800574c:	2303      	movs	r3, #3
 800574e:	e004      	b.n	800575a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005766:	b480      	push	{r7}
 8005768:	b087      	sub	sp, #28
 800576a:	af00      	add	r7, sp, #0
 800576c:	60f8      	str	r0, [r7, #12]
 800576e:	60b9      	str	r1, [r7, #8]
 8005770:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005778:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	649a      	str	r2, [r3, #72]	; 0x48
  hcdc->TxLength = length;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	651a      	str	r2, [r3, #80]	; 0x50

  return (uint8_t)USBD_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	371c      	adds	r7, #28
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057a4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	683a      	ldr	r2, [r7, #0]
 80057aa:	645a      	str	r2, [r3, #68]	; 0x44

  return (uint8_t)USBD_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b084      	sub	sp, #16
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057c8:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80057ca:	2301      	movs	r3, #1
 80057cc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d101      	bne.n	80057dc <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80057d8:	2303      	movs	r3, #3
 80057da:	e015      	b.n	8005808 <USBD_CDC_TransmitPacket+0x4e>
  }

  if (hcdc->TxState == 0U)
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d110      	bne.n	8005806 <USBD_CDC_TransmitPacket+0x4c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	2201      	movs	r2, #1
 80057e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057fa:	2181      	movs	r1, #129	; 0x81
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f001 fdc4 	bl	800738a <USBD_LL_Transmit>

    ret = USBD_OK;
 8005802:	2300      	movs	r3, #0
 8005804:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005806:	7bfb      	ldrb	r3, [r7, #15]
}
 8005808:	4618      	mov	r0, r3
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800581e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800582a:	2303      	movs	r3, #3
 800582c:	e013      	b.n	8005856 <USBD_CDC_ReceivePacket+0x46>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	7c1b      	ldrb	r3, [r3, #16]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d107      	bne.n	8005846 <USBD_CDC_ReceivePacket+0x36>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800583a:	2340      	movs	r3, #64	; 0x40
 800583c:	2101      	movs	r1, #1
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f001 fdc4 	bl	80073cc <USBD_LL_PrepareReceive>
 8005844:	e006      	b.n	8005854 <USBD_CDC_ReceivePacket+0x44>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800584a:	2340      	movs	r3, #64	; 0x40
 800584c:	2101      	movs	r1, #1
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f001 fdbc 	bl	80073cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b086      	sub	sp, #24
 8005862:	af00      	add	r7, sp, #0
 8005864:	60f8      	str	r0, [r7, #12]
 8005866:	60b9      	str	r1, [r7, #8]
 8005868:	4613      	mov	r3, r2
 800586a:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005872:	2303      	movs	r3, #3
 8005874:	e025      	b.n	80058c2 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800587c:	2b00      	cmp	r3, #0
 800587e:	d003      	beq.n	8005888 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d003      	beq.n	80058a8 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	79fa      	ldrb	r2, [r7, #7]
 80058b4:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f001 fc32 	bl	8007120 <USBD_LL_Init>
 80058bc:	4603      	mov	r3, r0
 80058be:	75fb      	strb	r3, [r7, #23]

  return ret;
 80058c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3718      	adds	r7, #24
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b084      	sub	sp, #16
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
 80058d2:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80058de:	2303      	movs	r3, #3
 80058e0:	e010      	b.n	8005904 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f2:	f107 020e 	add.w	r2, r7, #14
 80058f6:	4610      	mov	r0, r2
 80058f8:	4798      	blx	r3
 80058fa:	4602      	mov	r2, r0
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f001 fc4f 	bl	80071b8 <USBD_LL_Start>
 800591a:	4603      	mov	r3, r0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr

0800593a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b084      	sub	sp, #16
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
 8005942:	460b      	mov	r3, r1
 8005944:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005946:	2303      	movs	r3, #3
 8005948:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005950:	2b00      	cmp	r3, #0
 8005952:	d009      	beq.n	8005968 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	78fa      	ldrb	r2, [r7, #3]
 800595e:	4611      	mov	r1, r2
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	4798      	blx	r3
 8005964:	4603      	mov	r3, r0
 8005966:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005968:	7bfb      	ldrb	r3, [r7, #15]
}
 800596a:	4618      	mov	r0, r3
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005972:	b580      	push	{r7, lr}
 8005974:	b082      	sub	sp, #8
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	460b      	mov	r3, r1
 800597c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005984:	2b00      	cmp	r3, #0
 8005986:	d007      	beq.n	8005998 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	78fa      	ldrb	r2, [r7, #3]
 8005992:	4611      	mov	r1, r2
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	4798      	blx	r3
  }

  return USBD_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b084      	sub	sp, #16
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059b2:	6839      	ldr	r1, [r7, #0]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f000 ff2b 	bl	8006810 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80059c8:	461a      	mov	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80059d6:	f003 031f 	and.w	r3, r3, #31
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d00e      	beq.n	80059fc <USBD_LL_SetupStage+0x5a>
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d302      	bcc.n	80059e8 <USBD_LL_SetupStage+0x46>
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d014      	beq.n	8005a10 <USBD_LL_SetupStage+0x6e>
 80059e6:	e01d      	b.n	8005a24 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059ee:	4619      	mov	r1, r3
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 fa17 	bl	8005e24 <USBD_StdDevReq>
 80059f6:	4603      	mov	r3, r0
 80059f8:	73fb      	strb	r3, [r7, #15]
      break;
 80059fa:	e020      	b.n	8005a3e <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a02:	4619      	mov	r1, r3
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 fa7b 	bl	8005f00 <USBD_StdItfReq>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	73fb      	strb	r3, [r7, #15]
      break;
 8005a0e:	e016      	b.n	8005a3e <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a16:	4619      	mov	r1, r3
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 fab7 	bl	8005f8c <USBD_StdEPReq>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	73fb      	strb	r3, [r7, #15]
      break;
 8005a22:	e00c      	b.n	8005a3e <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a2a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	4619      	mov	r1, r3
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f001 fc20 	bl	8007278 <USBD_LL_StallEP>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a3c:	bf00      	nop
  }

  return ret;
 8005a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	460b      	mov	r3, r1
 8005a52:	607a      	str	r2, [r7, #4]
 8005a54:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005a56:	7afb      	ldrb	r3, [r7, #11]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d137      	bne.n	8005acc <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005a62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a6a:	2b03      	cmp	r3, #3
 8005a6c:	d14a      	bne.n	8005b04 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	689a      	ldr	r2, [r3, #8]
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d913      	bls.n	8005aa2 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	689a      	ldr	r2, [r3, #8]
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	1ad2      	subs	r2, r2, r3
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	68da      	ldr	r2, [r3, #12]
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	4293      	cmp	r3, r2
 8005a92:	bf28      	it	cs
 8005a94:	4613      	movcs	r3, r2
 8005a96:	461a      	mov	r2, r3
 8005a98:	6879      	ldr	r1, [r7, #4]
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f000 ffac 	bl	80069f8 <USBD_CtlContinueRx>
 8005aa0:	e030      	b.n	8005b04 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00a      	beq.n	8005ac4 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005ab4:	2b03      	cmp	r3, #3
 8005ab6:	d105      	bne.n	8005ac4 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f000 ffa8 	bl	8006a1a <USBD_CtlSendStatus>
 8005aca:	e01b      	b.n	8005b04 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d013      	beq.n	8005b00 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005ade:	2b03      	cmp	r3, #3
 8005ae0:	d10e      	bne.n	8005b00 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	7afa      	ldrb	r2, [r7, #11]
 8005aec:	4611      	mov	r1, r2
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	4798      	blx	r3
 8005af2:	4603      	mov	r3, r0
 8005af4:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005af6:	7dfb      	ldrb	r3, [r7, #23]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d003      	beq.n	8005b04 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005afc:	7dfb      	ldrb	r3, [r7, #23]
 8005afe:	e002      	b.n	8005b06 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e000      	b.n	8005b06 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3718      	adds	r7, #24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b086      	sub	sp, #24
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	60f8      	str	r0, [r7, #12]
 8005b16:	460b      	mov	r3, r1
 8005b18:	607a      	str	r2, [r7, #4]
 8005b1a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005b1c:	7afb      	ldrb	r3, [r7, #11]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d16a      	bne.n	8005bf8 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	3314      	adds	r3, #20
 8005b26:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d155      	bne.n	8005bde <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	689a      	ldr	r2, [r3, #8]
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d914      	bls.n	8005b68 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	689a      	ldr	r2, [r3, #8]
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	1ad2      	subs	r2, r2, r3
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	461a      	mov	r2, r3
 8005b52:	6879      	ldr	r1, [r7, #4]
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 ff21 	bl	800699c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	2100      	movs	r1, #0
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f001 fc33 	bl	80073cc <USBD_LL_PrepareReceive>
 8005b66:	e03a      	b.n	8005bde <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	68da      	ldr	r2, [r3, #12]
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d11c      	bne.n	8005bae <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d316      	bcc.n	8005bae <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d20f      	bcs.n	8005bae <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005b8e:	2200      	movs	r2, #0
 8005b90:	2100      	movs	r1, #0
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f000 ff02 	bl	800699c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f001 fc10 	bl	80073cc <USBD_LL_PrepareReceive>
 8005bac:	e017      	b.n	8005bde <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00a      	beq.n	8005bd0 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005bc0:	2b03      	cmp	r3, #3
 8005bc2:	d105      	bne.n	8005bd0 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005bd0:	2180      	movs	r1, #128	; 0x80
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f001 fb50 	bl	8007278 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 ff31 	bl	8006a40 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d123      	bne.n	8005c30 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f7ff fe9b 	bl	8005924 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005bf6:	e01b      	b.n	8005c30 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d013      	beq.n	8005c2c <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005c0a:	2b03      	cmp	r3, #3
 8005c0c:	d10e      	bne.n	8005c2c <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	7afa      	ldrb	r2, [r7, #11]
 8005c18:	4611      	mov	r1, r2
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	4798      	blx	r3
 8005c1e:	4603      	mov	r3, r0
 8005c20:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005c22:	7dfb      	ldrb	r3, [r7, #23]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d003      	beq.n	8005c30 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8005c28:	7dfb      	ldrb	r3, [r7, #23]
 8005c2a:	e002      	b.n	8005c32 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e000      	b.n	8005c32 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3718      	adds	r7, #24
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b082      	sub	sp, #8
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d009      	beq.n	8005c7e <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	6852      	ldr	r2, [r2, #4]
 8005c76:	b2d2      	uxtb	r2, r2
 8005c78:	4611      	mov	r1, r2
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c7e:	2340      	movs	r3, #64	; 0x40
 8005c80:	2200      	movs	r2, #0
 8005c82:	2100      	movs	r1, #0
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f001 fab2 	bl	80071ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2240      	movs	r2, #64	; 0x40
 8005c96:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c9a:	2340      	movs	r3, #64	; 0x40
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	2180      	movs	r1, #128	; 0x80
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f001 faa4 	bl	80071ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2240      	movs	r2, #64	; 0x40
 8005cb0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3708      	adds	r7, #8
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	78fa      	ldrb	r2, [r7, #3]
 8005ccc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2204      	movs	r2, #4
 8005cf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	370c      	adds	r7, #12
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b083      	sub	sp, #12
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d14:	2b04      	cmp	r3, #4
 8005d16:	d105      	bne.n	8005d24 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b082      	sub	sp, #8
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d40:	2b03      	cmp	r3, #3
 8005d42:	d10b      	bne.n	8005d5c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d005      	beq.n	8005d5c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d56:	69db      	ldr	r3, [r3, #28]
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3708      	adds	r7, #8
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b083      	sub	sp, #12
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	460b      	mov	r3, r1
 8005d70:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	460b      	mov	r3, r1
 8005d8a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b083      	sub	sp, #12
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d009      	beq.n	8005dde <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	6852      	ldr	r2, [r2, #4]
 8005dd6:	b2d2      	uxtb	r2, r2
 8005dd8:	4611      	mov	r1, r2
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	4798      	blx	r3
  }

  return USBD_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3708      	adds	r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005e06:	8a3b      	ldrh	r3, [r7, #16]
 8005e08:	021b      	lsls	r3, r3, #8
 8005e0a:	b21a      	sxth	r2, r3
 8005e0c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	b21b      	sxth	r3, r3
 8005e14:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005e16:	89fb      	ldrh	r3, [r7, #14]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	371c      	adds	r7, #28
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e3a:	2b20      	cmp	r3, #32
 8005e3c:	d004      	beq.n	8005e48 <USBD_StdDevReq+0x24>
 8005e3e:	2b40      	cmp	r3, #64	; 0x40
 8005e40:	d002      	beq.n	8005e48 <USBD_StdDevReq+0x24>
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00a      	beq.n	8005e5c <USBD_StdDevReq+0x38>
 8005e46:	e050      	b.n	8005eea <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	6839      	ldr	r1, [r7, #0]
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	4798      	blx	r3
 8005e56:	4603      	mov	r3, r0
 8005e58:	73fb      	strb	r3, [r7, #15]
    break;
 8005e5a:	e04b      	b.n	8005ef4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	785b      	ldrb	r3, [r3, #1]
 8005e60:	2b09      	cmp	r3, #9
 8005e62:	d83c      	bhi.n	8005ede <USBD_StdDevReq+0xba>
 8005e64:	a201      	add	r2, pc, #4	; (adr r2, 8005e6c <USBD_StdDevReq+0x48>)
 8005e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6a:	bf00      	nop
 8005e6c:	08005ec1 	.word	0x08005ec1
 8005e70:	08005ed5 	.word	0x08005ed5
 8005e74:	08005edf 	.word	0x08005edf
 8005e78:	08005ecb 	.word	0x08005ecb
 8005e7c:	08005edf 	.word	0x08005edf
 8005e80:	08005e9f 	.word	0x08005e9f
 8005e84:	08005e95 	.word	0x08005e95
 8005e88:	08005edf 	.word	0x08005edf
 8005e8c:	08005eb7 	.word	0x08005eb7
 8005e90:	08005ea9 	.word	0x08005ea9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8005e94:	6839      	ldr	r1, [r7, #0]
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f9ce 	bl	8006238 <USBD_GetDescriptor>
      break;
 8005e9c:	e024      	b.n	8005ee8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8005e9e:	6839      	ldr	r1, [r7, #0]
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 fb33 	bl	800650c <USBD_SetAddress>
      break;
 8005ea6:	e01f      	b.n	8005ee8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8005ea8:	6839      	ldr	r1, [r7, #0]
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 fb70 	bl	8006590 <USBD_SetConfig>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8005eb4:	e018      	b.n	8005ee8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8005eb6:	6839      	ldr	r1, [r7, #0]
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 fc0d 	bl	80066d8 <USBD_GetConfig>
      break;
 8005ebe:	e013      	b.n	8005ee8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8005ec0:	6839      	ldr	r1, [r7, #0]
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 fc3c 	bl	8006740 <USBD_GetStatus>
      break;
 8005ec8:	e00e      	b.n	8005ee8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8005eca:	6839      	ldr	r1, [r7, #0]
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 fc6a 	bl	80067a6 <USBD_SetFeature>
      break;
 8005ed2:	e009      	b.n	8005ee8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8005ed4:	6839      	ldr	r1, [r7, #0]
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fc79 	bl	80067ce <USBD_ClrFeature>
      break;
 8005edc:	e004      	b.n	8005ee8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8005ede:	6839      	ldr	r1, [r7, #0]
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 fccf 	bl	8006884 <USBD_CtlError>
      break;
 8005ee6:	bf00      	nop
    }
    break;
 8005ee8:	e004      	b.n	8005ef4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8005eea:	6839      	ldr	r1, [r7, #0]
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 fcc9 	bl	8006884 <USBD_CtlError>
    break;
 8005ef2:	bf00      	nop
  }

  return ret;
 8005ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop

08005f00 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f16:	2b20      	cmp	r3, #32
 8005f18:	d003      	beq.n	8005f22 <USBD_StdItfReq+0x22>
 8005f1a:	2b40      	cmp	r3, #64	; 0x40
 8005f1c:	d001      	beq.n	8005f22 <USBD_StdItfReq+0x22>
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d12a      	bne.n	8005f78 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d81d      	bhi.n	8005f6a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	889b      	ldrh	r3, [r3, #4]
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d813      	bhi.n	8005f60 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	6839      	ldr	r1, [r7, #0]
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	4798      	blx	r3
 8005f46:	4603      	mov	r3, r0
 8005f48:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	88db      	ldrh	r3, [r3, #6]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d110      	bne.n	8005f74 <USBD_StdItfReq+0x74>
 8005f52:	7bfb      	ldrb	r3, [r7, #15]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10d      	bne.n	8005f74 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 fd5e 	bl	8006a1a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8005f5e:	e009      	b.n	8005f74 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8005f60:	6839      	ldr	r1, [r7, #0]
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fc8e 	bl	8006884 <USBD_CtlError>
      break;
 8005f68:	e004      	b.n	8005f74 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8005f6a:	6839      	ldr	r1, [r7, #0]
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 fc89 	bl	8006884 <USBD_CtlError>
      break;
 8005f72:	e000      	b.n	8005f76 <USBD_StdItfReq+0x76>
      break;
 8005f74:	bf00      	nop
    }
    break;
 8005f76:	e004      	b.n	8005f82 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8005f78:	6839      	ldr	r1, [r7, #0]
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 fc82 	bl	8006884 <USBD_CtlError>
    break;
 8005f80:	bf00      	nop
  }

  return ret;
 8005f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f96:	2300      	movs	r3, #0
 8005f98:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	889b      	ldrh	r3, [r3, #4]
 8005f9e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fa8:	2b20      	cmp	r3, #32
 8005faa:	d004      	beq.n	8005fb6 <USBD_StdEPReq+0x2a>
 8005fac:	2b40      	cmp	r3, #64	; 0x40
 8005fae:	d002      	beq.n	8005fb6 <USBD_StdEPReq+0x2a>
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00a      	beq.n	8005fca <USBD_StdEPReq+0x3e>
 8005fb4:	e135      	b.n	8006222 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	6839      	ldr	r1, [r7, #0]
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	4798      	blx	r3
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	73fb      	strb	r3, [r7, #15]
    break;
 8005fc8:	e130      	b.n	800622c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	785b      	ldrb	r3, [r3, #1]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d03e      	beq.n	8006050 <USBD_StdEPReq+0xc4>
 8005fd2:	2b03      	cmp	r3, #3
 8005fd4:	d002      	beq.n	8005fdc <USBD_StdEPReq+0x50>
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d077      	beq.n	80060ca <USBD_StdEPReq+0x13e>
 8005fda:	e11c      	b.n	8006216 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d002      	beq.n	8005fec <USBD_StdEPReq+0x60>
 8005fe6:	2b03      	cmp	r3, #3
 8005fe8:	d015      	beq.n	8006016 <USBD_StdEPReq+0x8a>
 8005fea:	e02b      	b.n	8006044 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fec:	7bbb      	ldrb	r3, [r7, #14]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00c      	beq.n	800600c <USBD_StdEPReq+0x80>
 8005ff2:	7bbb      	ldrb	r3, [r7, #14]
 8005ff4:	2b80      	cmp	r3, #128	; 0x80
 8005ff6:	d009      	beq.n	800600c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ff8:	7bbb      	ldrb	r3, [r7, #14]
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f001 f93b 	bl	8007278 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006002:	2180      	movs	r1, #128	; 0x80
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f001 f937 	bl	8007278 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800600a:	e020      	b.n	800604e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800600c:	6839      	ldr	r1, [r7, #0]
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 fc38 	bl	8006884 <USBD_CtlError>
        break;
 8006014:	e01b      	b.n	800604e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	885b      	ldrh	r3, [r3, #2]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10e      	bne.n	800603c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800601e:	7bbb      	ldrb	r3, [r7, #14]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00b      	beq.n	800603c <USBD_StdEPReq+0xb0>
 8006024:	7bbb      	ldrb	r3, [r7, #14]
 8006026:	2b80      	cmp	r3, #128	; 0x80
 8006028:	d008      	beq.n	800603c <USBD_StdEPReq+0xb0>
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	88db      	ldrh	r3, [r3, #6]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d104      	bne.n	800603c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006032:	7bbb      	ldrb	r3, [r7, #14]
 8006034:	4619      	mov	r1, r3
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f001 f91e 	bl	8007278 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 fcec 	bl	8006a1a <USBD_CtlSendStatus>

        break;
 8006042:	e004      	b.n	800604e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006044:	6839      	ldr	r1, [r7, #0]
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 fc1c 	bl	8006884 <USBD_CtlError>
        break;
 800604c:	bf00      	nop
      }
      break;
 800604e:	e0e7      	b.n	8006220 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006056:	2b02      	cmp	r3, #2
 8006058:	d002      	beq.n	8006060 <USBD_StdEPReq+0xd4>
 800605a:	2b03      	cmp	r3, #3
 800605c:	d015      	beq.n	800608a <USBD_StdEPReq+0xfe>
 800605e:	e02d      	b.n	80060bc <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006060:	7bbb      	ldrb	r3, [r7, #14]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00c      	beq.n	8006080 <USBD_StdEPReq+0xf4>
 8006066:	7bbb      	ldrb	r3, [r7, #14]
 8006068:	2b80      	cmp	r3, #128	; 0x80
 800606a:	d009      	beq.n	8006080 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800606c:	7bbb      	ldrb	r3, [r7, #14]
 800606e:	4619      	mov	r1, r3
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f001 f901 	bl	8007278 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006076:	2180      	movs	r1, #128	; 0x80
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f001 f8fd 	bl	8007278 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800607e:	e023      	b.n	80060c8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8006080:	6839      	ldr	r1, [r7, #0]
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 fbfe 	bl	8006884 <USBD_CtlError>
        break;
 8006088:	e01e      	b.n	80060c8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	885b      	ldrh	r3, [r3, #2]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d119      	bne.n	80060c6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006092:	7bbb      	ldrb	r3, [r7, #14]
 8006094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006098:	2b00      	cmp	r3, #0
 800609a:	d004      	beq.n	80060a6 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800609c:	7bbb      	ldrb	r3, [r7, #14]
 800609e:	4619      	mov	r1, r3
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f001 f908 	bl	80072b6 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fcb7 	bl	8006a1a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	6839      	ldr	r1, [r7, #0]
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	4798      	blx	r3
        }
        break;
 80060ba:	e004      	b.n	80060c6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80060bc:	6839      	ldr	r1, [r7, #0]
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 fbe0 	bl	8006884 <USBD_CtlError>
        break;
 80060c4:	e000      	b.n	80060c8 <USBD_StdEPReq+0x13c>
        break;
 80060c6:	bf00      	nop
      }
      break;
 80060c8:	e0aa      	b.n	8006220 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d002      	beq.n	80060da <USBD_StdEPReq+0x14e>
 80060d4:	2b03      	cmp	r3, #3
 80060d6:	d032      	beq.n	800613e <USBD_StdEPReq+0x1b2>
 80060d8:	e097      	b.n	800620a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80060da:	7bbb      	ldrb	r3, [r7, #14]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d007      	beq.n	80060f0 <USBD_StdEPReq+0x164>
 80060e0:	7bbb      	ldrb	r3, [r7, #14]
 80060e2:	2b80      	cmp	r3, #128	; 0x80
 80060e4:	d004      	beq.n	80060f0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80060e6:	6839      	ldr	r1, [r7, #0]
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fbcb 	bl	8006884 <USBD_CtlError>
          break;
 80060ee:	e091      	b.n	8006214 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	da0b      	bge.n	8006110 <USBD_StdEPReq+0x184>
 80060f8:	7bbb      	ldrb	r3, [r7, #14]
 80060fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060fe:	4613      	mov	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	3310      	adds	r3, #16
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	4413      	add	r3, r2
 800610c:	3304      	adds	r3, #4
 800610e:	e00b      	b.n	8006128 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006110:	7bbb      	ldrb	r3, [r7, #14]
 8006112:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006116:	4613      	mov	r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	4413      	add	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	4413      	add	r3, r2
 8006126:	3304      	adds	r3, #4
 8006128:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	2200      	movs	r2, #0
 800612e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	2202      	movs	r2, #2
 8006134:	4619      	mov	r1, r3
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 fc15 	bl	8006966 <USBD_CtlSendData>
        break;
 800613c:	e06a      	b.n	8006214 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800613e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006142:	2b00      	cmp	r3, #0
 8006144:	da11      	bge.n	800616a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006146:	7bbb      	ldrb	r3, [r7, #14]
 8006148:	f003 020f 	and.w	r2, r3, #15
 800614c:	6879      	ldr	r1, [r7, #4]
 800614e:	4613      	mov	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	440b      	add	r3, r1
 8006158:	3324      	adds	r3, #36	; 0x24
 800615a:	881b      	ldrh	r3, [r3, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d117      	bne.n	8006190 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006160:	6839      	ldr	r1, [r7, #0]
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 fb8e 	bl	8006884 <USBD_CtlError>
            break;
 8006168:	e054      	b.n	8006214 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800616a:	7bbb      	ldrb	r3, [r7, #14]
 800616c:	f003 020f 	and.w	r2, r3, #15
 8006170:	6879      	ldr	r1, [r7, #4]
 8006172:	4613      	mov	r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4413      	add	r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	440b      	add	r3, r1
 800617c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d104      	bne.n	8006190 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006186:	6839      	ldr	r1, [r7, #0]
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 fb7b 	bl	8006884 <USBD_CtlError>
            break;
 800618e:	e041      	b.n	8006214 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006190:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006194:	2b00      	cmp	r3, #0
 8006196:	da0b      	bge.n	80061b0 <USBD_StdEPReq+0x224>
 8006198:	7bbb      	ldrb	r3, [r7, #14]
 800619a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800619e:	4613      	mov	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	3310      	adds	r3, #16
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	4413      	add	r3, r2
 80061ac:	3304      	adds	r3, #4
 80061ae:	e00b      	b.n	80061c8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80061b0:	7bbb      	ldrb	r3, [r7, #14]
 80061b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061b6:	4613      	mov	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	4413      	add	r3, r2
 80061c6:	3304      	adds	r3, #4
 80061c8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80061ca:	7bbb      	ldrb	r3, [r7, #14]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d002      	beq.n	80061d6 <USBD_StdEPReq+0x24a>
 80061d0:	7bbb      	ldrb	r3, [r7, #14]
 80061d2:	2b80      	cmp	r3, #128	; 0x80
 80061d4:	d103      	bne.n	80061de <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	2200      	movs	r2, #0
 80061da:	601a      	str	r2, [r3, #0]
 80061dc:	e00e      	b.n	80061fc <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80061de:	7bbb      	ldrb	r3, [r7, #14]
 80061e0:	4619      	mov	r1, r3
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f001 f886 	bl	80072f4 <USBD_LL_IsStallEP>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d003      	beq.n	80061f6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	2201      	movs	r2, #1
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	e002      	b.n	80061fc <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	2200      	movs	r2, #0
 80061fa:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2202      	movs	r2, #2
 8006200:	4619      	mov	r1, r3
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fbaf 	bl	8006966 <USBD_CtlSendData>
          break;
 8006208:	e004      	b.n	8006214 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800620a:	6839      	ldr	r1, [r7, #0]
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 fb39 	bl	8006884 <USBD_CtlError>
        break;
 8006212:	bf00      	nop
      }
      break;
 8006214:	e004      	b.n	8006220 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8006216:	6839      	ldr	r1, [r7, #0]
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 fb33 	bl	8006884 <USBD_CtlError>
      break;
 800621e:	bf00      	nop
    }
    break;
 8006220:	e004      	b.n	800622c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8006222:	6839      	ldr	r1, [r7, #0]
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 fb2d 	bl	8006884 <USBD_CtlError>
    break;
 800622a:	bf00      	nop
  }

  return ret;
 800622c:	7bfb      	ldrb	r3, [r7, #15]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
	...

08006238 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006242:	2300      	movs	r3, #0
 8006244:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006246:	2300      	movs	r3, #0
 8006248:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800624a:	2300      	movs	r3, #0
 800624c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	885b      	ldrh	r3, [r3, #2]
 8006252:	0a1b      	lsrs	r3, r3, #8
 8006254:	b29b      	uxth	r3, r3
 8006256:	3b01      	subs	r3, #1
 8006258:	2b06      	cmp	r3, #6
 800625a:	f200 8128 	bhi.w	80064ae <USBD_GetDescriptor+0x276>
 800625e:	a201      	add	r2, pc, #4	; (adr r2, 8006264 <USBD_GetDescriptor+0x2c>)
 8006260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006264:	08006281 	.word	0x08006281
 8006268:	08006299 	.word	0x08006299
 800626c:	080062d9 	.word	0x080062d9
 8006270:	080064af 	.word	0x080064af
 8006274:	080064af 	.word	0x080064af
 8006278:	0800644f 	.word	0x0800644f
 800627c:	0800647b 	.word	0x0800647b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	7c12      	ldrb	r2, [r2, #16]
 800628c:	f107 0108 	add.w	r1, r7, #8
 8006290:	4610      	mov	r0, r2
 8006292:	4798      	blx	r3
 8006294:	60f8      	str	r0, [r7, #12]
    break;
 8006296:	e112      	b.n	80064be <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	7c1b      	ldrb	r3, [r3, #16]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10d      	bne.n	80062bc <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a8:	f107 0208 	add.w	r2, r7, #8
 80062ac:	4610      	mov	r0, r2
 80062ae:	4798      	blx	r3
 80062b0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	3301      	adds	r3, #1
 80062b6:	2202      	movs	r2, #2
 80062b8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80062ba:	e100      	b.n	80064be <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c4:	f107 0208 	add.w	r2, r7, #8
 80062c8:	4610      	mov	r0, r2
 80062ca:	4798      	blx	r3
 80062cc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	3301      	adds	r3, #1
 80062d2:	2202      	movs	r2, #2
 80062d4:	701a      	strb	r2, [r3, #0]
    break;
 80062d6:	e0f2      	b.n	80064be <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	885b      	ldrh	r3, [r3, #2]
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	2b05      	cmp	r3, #5
 80062e0:	f200 80ac 	bhi.w	800643c <USBD_GetDescriptor+0x204>
 80062e4:	a201      	add	r2, pc, #4	; (adr r2, 80062ec <USBD_GetDescriptor+0xb4>)
 80062e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ea:	bf00      	nop
 80062ec:	08006305 	.word	0x08006305
 80062f0:	08006339 	.word	0x08006339
 80062f4:	0800636d 	.word	0x0800636d
 80062f8:	080063a1 	.word	0x080063a1
 80062fc:	080063d5 	.word	0x080063d5
 8006300:	08006409 	.word	0x08006409
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00b      	beq.n	8006328 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	7c12      	ldrb	r2, [r2, #16]
 800631c:	f107 0108 	add.w	r1, r7, #8
 8006320:	4610      	mov	r0, r2
 8006322:	4798      	blx	r3
 8006324:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006326:	e091      	b.n	800644c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006328:	6839      	ldr	r1, [r7, #0]
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 faaa 	bl	8006884 <USBD_CtlError>
        err++;
 8006330:	7afb      	ldrb	r3, [r7, #11]
 8006332:	3301      	adds	r3, #1
 8006334:	72fb      	strb	r3, [r7, #11]
      break;
 8006336:	e089      	b.n	800644c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00b      	beq.n	800635c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	7c12      	ldrb	r2, [r2, #16]
 8006350:	f107 0108 	add.w	r1, r7, #8
 8006354:	4610      	mov	r0, r2
 8006356:	4798      	blx	r3
 8006358:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800635a:	e077      	b.n	800644c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800635c:	6839      	ldr	r1, [r7, #0]
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 fa90 	bl	8006884 <USBD_CtlError>
        err++;
 8006364:	7afb      	ldrb	r3, [r7, #11]
 8006366:	3301      	adds	r3, #1
 8006368:	72fb      	strb	r3, [r7, #11]
      break;
 800636a:	e06f      	b.n	800644c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00b      	beq.n	8006390 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	7c12      	ldrb	r2, [r2, #16]
 8006384:	f107 0108 	add.w	r1, r7, #8
 8006388:	4610      	mov	r0, r2
 800638a:	4798      	blx	r3
 800638c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800638e:	e05d      	b.n	800644c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006390:	6839      	ldr	r1, [r7, #0]
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 fa76 	bl	8006884 <USBD_CtlError>
        err++;
 8006398:	7afb      	ldrb	r3, [r7, #11]
 800639a:	3301      	adds	r3, #1
 800639c:	72fb      	strb	r3, [r7, #11]
      break;
 800639e:	e055      	b.n	800644c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00b      	beq.n	80063c4 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	7c12      	ldrb	r2, [r2, #16]
 80063b8:	f107 0108 	add.w	r1, r7, #8
 80063bc:	4610      	mov	r0, r2
 80063be:	4798      	blx	r3
 80063c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80063c2:	e043      	b.n	800644c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80063c4:	6839      	ldr	r1, [r7, #0]
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 fa5c 	bl	8006884 <USBD_CtlError>
        err++;
 80063cc:	7afb      	ldrb	r3, [r7, #11]
 80063ce:	3301      	adds	r3, #1
 80063d0:	72fb      	strb	r3, [r7, #11]
      break;
 80063d2:	e03b      	b.n	800644c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063da:	695b      	ldr	r3, [r3, #20]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00b      	beq.n	80063f8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063e6:	695b      	ldr	r3, [r3, #20]
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	7c12      	ldrb	r2, [r2, #16]
 80063ec:	f107 0108 	add.w	r1, r7, #8
 80063f0:	4610      	mov	r0, r2
 80063f2:	4798      	blx	r3
 80063f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80063f6:	e029      	b.n	800644c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80063f8:	6839      	ldr	r1, [r7, #0]
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fa42 	bl	8006884 <USBD_CtlError>
        err++;
 8006400:	7afb      	ldrb	r3, [r7, #11]
 8006402:	3301      	adds	r3, #1
 8006404:	72fb      	strb	r3, [r7, #11]
      break;
 8006406:	e021      	b.n	800644c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00b      	beq.n	800642c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	7c12      	ldrb	r2, [r2, #16]
 8006420:	f107 0108 	add.w	r1, r7, #8
 8006424:	4610      	mov	r0, r2
 8006426:	4798      	blx	r3
 8006428:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800642a:	e00f      	b.n	800644c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800642c:	6839      	ldr	r1, [r7, #0]
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 fa28 	bl	8006884 <USBD_CtlError>
        err++;
 8006434:	7afb      	ldrb	r3, [r7, #11]
 8006436:	3301      	adds	r3, #1
 8006438:	72fb      	strb	r3, [r7, #11]
      break;
 800643a:	e007      	b.n	800644c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800643c:	6839      	ldr	r1, [r7, #0]
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 fa20 	bl	8006884 <USBD_CtlError>
      err++;
 8006444:	7afb      	ldrb	r3, [r7, #11]
 8006446:	3301      	adds	r3, #1
 8006448:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800644a:	bf00      	nop
    }
    break;
 800644c:	e037      	b.n	80064be <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	7c1b      	ldrb	r3, [r3, #16]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d109      	bne.n	800646a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800645c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800645e:	f107 0208 	add.w	r2, r7, #8
 8006462:	4610      	mov	r0, r2
 8006464:	4798      	blx	r3
 8006466:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006468:	e029      	b.n	80064be <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800646a:	6839      	ldr	r1, [r7, #0]
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 fa09 	bl	8006884 <USBD_CtlError>
      err++;
 8006472:	7afb      	ldrb	r3, [r7, #11]
 8006474:	3301      	adds	r3, #1
 8006476:	72fb      	strb	r3, [r7, #11]
    break;
 8006478:	e021      	b.n	80064be <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	7c1b      	ldrb	r3, [r3, #16]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10d      	bne.n	800649e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648a:	f107 0208 	add.w	r2, r7, #8
 800648e:	4610      	mov	r0, r2
 8006490:	4798      	blx	r3
 8006492:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	3301      	adds	r3, #1
 8006498:	2207      	movs	r2, #7
 800649a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800649c:	e00f      	b.n	80064be <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800649e:	6839      	ldr	r1, [r7, #0]
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 f9ef 	bl	8006884 <USBD_CtlError>
      err++;
 80064a6:	7afb      	ldrb	r3, [r7, #11]
 80064a8:	3301      	adds	r3, #1
 80064aa:	72fb      	strb	r3, [r7, #11]
    break;
 80064ac:	e007      	b.n	80064be <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80064ae:	6839      	ldr	r1, [r7, #0]
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 f9e7 	bl	8006884 <USBD_CtlError>
    err++;
 80064b6:	7afb      	ldrb	r3, [r7, #11]
 80064b8:	3301      	adds	r3, #1
 80064ba:	72fb      	strb	r3, [r7, #11]
    break;
 80064bc:	bf00      	nop
  }

  if (err != 0U)
 80064be:	7afb      	ldrb	r3, [r7, #11]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d11e      	bne.n	8006502 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	88db      	ldrh	r3, [r3, #6]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d016      	beq.n	80064fa <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80064cc:	893b      	ldrh	r3, [r7, #8]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00e      	beq.n	80064f0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	88da      	ldrh	r2, [r3, #6]
 80064d6:	893b      	ldrh	r3, [r7, #8]
 80064d8:	4293      	cmp	r3, r2
 80064da:	bf28      	it	cs
 80064dc:	4613      	movcs	r3, r2
 80064de:	b29b      	uxth	r3, r3
 80064e0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80064e2:	893b      	ldrh	r3, [r7, #8]
 80064e4:	461a      	mov	r2, r3
 80064e6:	68f9      	ldr	r1, [r7, #12]
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 fa3c 	bl	8006966 <USBD_CtlSendData>
 80064ee:	e009      	b.n	8006504 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80064f0:	6839      	ldr	r1, [r7, #0]
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 f9c6 	bl	8006884 <USBD_CtlError>
 80064f8:	e004      	b.n	8006504 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 fa8d 	bl	8006a1a <USBD_CtlSendStatus>
 8006500:	e000      	b.n	8006504 <USBD_GetDescriptor+0x2cc>
    return;
 8006502:	bf00      	nop
    }
  }
}
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop

0800650c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	889b      	ldrh	r3, [r3, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d130      	bne.n	8006580 <USBD_SetAddress+0x74>
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	88db      	ldrh	r3, [r3, #6]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d12c      	bne.n	8006580 <USBD_SetAddress+0x74>
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	885b      	ldrh	r3, [r3, #2]
 800652a:	2b7f      	cmp	r3, #127	; 0x7f
 800652c:	d828      	bhi.n	8006580 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	885b      	ldrh	r3, [r3, #2]
 8006532:	b2db      	uxtb	r3, r3
 8006534:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006538:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006540:	2b03      	cmp	r3, #3
 8006542:	d104      	bne.n	800654e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006544:	6839      	ldr	r1, [r7, #0]
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f99c 	bl	8006884 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800654c:	e01c      	b.n	8006588 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	7bfa      	ldrb	r2, [r7, #15]
 8006552:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006556:	7bfb      	ldrb	r3, [r7, #15]
 8006558:	4619      	mov	r1, r3
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fef6 	bl	800734c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 fa5a 	bl	8006a1a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006566:	7bfb      	ldrb	r3, [r7, #15]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d004      	beq.n	8006576 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2202      	movs	r2, #2
 8006570:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006574:	e008      	b.n	8006588 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2201      	movs	r2, #1
 800657a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800657e:	e003      	b.n	8006588 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006580:	6839      	ldr	r1, [r7, #0]
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 f97e 	bl	8006884 <USBD_CtlError>
  }
}
 8006588:	bf00      	nop
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800659a:	2300      	movs	r3, #0
 800659c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	885b      	ldrh	r3, [r3, #2]
 80065a2:	b2da      	uxtb	r2, r3
 80065a4:	4b4b      	ldr	r3, [pc, #300]	; (80066d4 <USBD_SetConfig+0x144>)
 80065a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80065a8:	4b4a      	ldr	r3, [pc, #296]	; (80066d4 <USBD_SetConfig+0x144>)
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d905      	bls.n	80065bc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80065b0:	6839      	ldr	r1, [r7, #0]
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f966 	bl	8006884 <USBD_CtlError>
    return USBD_FAIL;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e087      	b.n	80066cc <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d002      	beq.n	80065cc <USBD_SetConfig+0x3c>
 80065c6:	2b03      	cmp	r3, #3
 80065c8:	d025      	beq.n	8006616 <USBD_SetConfig+0x86>
 80065ca:	e071      	b.n	80066b0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80065cc:	4b41      	ldr	r3, [pc, #260]	; (80066d4 <USBD_SetConfig+0x144>)
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d01c      	beq.n	800660e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80065d4:	4b3f      	ldr	r3, [pc, #252]	; (80066d4 <USBD_SetConfig+0x144>)
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	461a      	mov	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80065de:	4b3d      	ldr	r3, [pc, #244]	; (80066d4 <USBD_SetConfig+0x144>)
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	4619      	mov	r1, r3
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f7ff f9a8 	bl	800593a <USBD_SetClassConfig>
 80065ea:	4603      	mov	r3, r0
 80065ec:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80065ee:	7bfb      	ldrb	r3, [r7, #15]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d004      	beq.n	80065fe <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80065f4:	6839      	ldr	r1, [r7, #0]
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f944 	bl	8006884 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80065fc:	e065      	b.n	80066ca <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 fa0b 	bl	8006a1a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2203      	movs	r2, #3
 8006608:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800660c:	e05d      	b.n	80066ca <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 fa03 	bl	8006a1a <USBD_CtlSendStatus>
    break;
 8006614:	e059      	b.n	80066ca <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006616:	4b2f      	ldr	r3, [pc, #188]	; (80066d4 <USBD_SetConfig+0x144>)
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d112      	bne.n	8006644 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2202      	movs	r2, #2
 8006622:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006626:	4b2b      	ldr	r3, [pc, #172]	; (80066d4 <USBD_SetConfig+0x144>)
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	461a      	mov	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006630:	4b28      	ldr	r3, [pc, #160]	; (80066d4 <USBD_SetConfig+0x144>)
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	4619      	mov	r1, r3
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f7ff f99b 	bl	8005972 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 f9ec 	bl	8006a1a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006642:	e042      	b.n	80066ca <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006644:	4b23      	ldr	r3, [pc, #140]	; (80066d4 <USBD_SetConfig+0x144>)
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	461a      	mov	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	429a      	cmp	r2, r3
 8006650:	d02a      	beq.n	80066a8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	b2db      	uxtb	r3, r3
 8006658:	4619      	mov	r1, r3
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f7ff f989 	bl	8005972 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006660:	4b1c      	ldr	r3, [pc, #112]	; (80066d4 <USBD_SetConfig+0x144>)
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	461a      	mov	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800666a:	4b1a      	ldr	r3, [pc, #104]	; (80066d4 <USBD_SetConfig+0x144>)
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	4619      	mov	r1, r3
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f7ff f962 	bl	800593a <USBD_SetClassConfig>
 8006676:	4603      	mov	r3, r0
 8006678:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800667a:	7bfb      	ldrb	r3, [r7, #15]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00f      	beq.n	80066a0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006680:	6839      	ldr	r1, [r7, #0]
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f8fe 	bl	8006884 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	b2db      	uxtb	r3, r3
 800668e:	4619      	mov	r1, r3
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f7ff f96e 	bl	8005972 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2202      	movs	r2, #2
 800669a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800669e:	e014      	b.n	80066ca <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 f9ba 	bl	8006a1a <USBD_CtlSendStatus>
    break;
 80066a6:	e010      	b.n	80066ca <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 f9b6 	bl	8006a1a <USBD_CtlSendStatus>
    break;
 80066ae:	e00c      	b.n	80066ca <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80066b0:	6839      	ldr	r1, [r7, #0]
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f8e6 	bl	8006884 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80066b8:	4b06      	ldr	r3, [pc, #24]	; (80066d4 <USBD_SetConfig+0x144>)
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	4619      	mov	r1, r3
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f7ff f957 	bl	8005972 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80066c4:	2303      	movs	r3, #3
 80066c6:	73fb      	strb	r3, [r7, #15]
    break;
 80066c8:	bf00      	nop
  }

  return ret;
 80066ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	2000020c 	.word	0x2000020c

080066d8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	88db      	ldrh	r3, [r3, #6]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d004      	beq.n	80066f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80066ea:	6839      	ldr	r1, [r7, #0]
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 f8c9 	bl	8006884 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80066f2:	e021      	b.n	8006738 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	db17      	blt.n	800672e <USBD_GetConfig+0x56>
 80066fe:	2b02      	cmp	r3, #2
 8006700:	dd02      	ble.n	8006708 <USBD_GetConfig+0x30>
 8006702:	2b03      	cmp	r3, #3
 8006704:	d00b      	beq.n	800671e <USBD_GetConfig+0x46>
 8006706:	e012      	b.n	800672e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	3308      	adds	r3, #8
 8006712:	2201      	movs	r2, #1
 8006714:	4619      	mov	r1, r3
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f925 	bl	8006966 <USBD_CtlSendData>
      break;
 800671c:	e00c      	b.n	8006738 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	3304      	adds	r3, #4
 8006722:	2201      	movs	r2, #1
 8006724:	4619      	mov	r1, r3
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f91d 	bl	8006966 <USBD_CtlSendData>
      break;
 800672c:	e004      	b.n	8006738 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800672e:	6839      	ldr	r1, [r7, #0]
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 f8a7 	bl	8006884 <USBD_CtlError>
      break;
 8006736:	bf00      	nop
}
 8006738:	bf00      	nop
 800673a:	3708      	adds	r7, #8
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006750:	3b01      	subs	r3, #1
 8006752:	2b02      	cmp	r3, #2
 8006754:	d81e      	bhi.n	8006794 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	88db      	ldrh	r3, [r3, #6]
 800675a:	2b02      	cmp	r3, #2
 800675c:	d004      	beq.n	8006768 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800675e:	6839      	ldr	r1, [r7, #0]
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f88f 	bl	8006884 <USBD_CtlError>
      break;
 8006766:	e01a      	b.n	800679e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006774:	2b00      	cmp	r3, #0
 8006776:	d005      	beq.n	8006784 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	f043 0202 	orr.w	r2, r3, #2
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	330c      	adds	r3, #12
 8006788:	2202      	movs	r2, #2
 800678a:	4619      	mov	r1, r3
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 f8ea 	bl	8006966 <USBD_CtlSendData>
    break;
 8006792:	e004      	b.n	800679e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006794:	6839      	ldr	r1, [r7, #0]
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f874 	bl	8006884 <USBD_CtlError>
    break;
 800679c:	bf00      	nop
  }
}
 800679e:	bf00      	nop
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b082      	sub	sp, #8
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
 80067ae:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	885b      	ldrh	r3, [r3, #2]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d106      	bne.n	80067c6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 f92a 	bl	8006a1a <USBD_CtlSendStatus>
  }
}
 80067c6:	bf00      	nop
 80067c8:	3708      	adds	r7, #8
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b082      	sub	sp, #8
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
 80067d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067de:	3b01      	subs	r3, #1
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d80b      	bhi.n	80067fc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	885b      	ldrh	r3, [r3, #2]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d10c      	bne.n	8006806 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f910 	bl	8006a1a <USBD_CtlSendStatus>
      }
      break;
 80067fa:	e004      	b.n	8006806 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80067fc:	6839      	ldr	r1, [r7, #0]
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f840 	bl	8006884 <USBD_CtlError>
      break;
 8006804:	e000      	b.n	8006808 <USBD_ClrFeature+0x3a>
      break;
 8006806:	bf00      	nop
  }
}
 8006808:	bf00      	nop
 800680a:	3708      	adds	r7, #8
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	781a      	ldrb	r2, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	3301      	adds	r3, #1
 800682a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	781a      	ldrb	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	3301      	adds	r3, #1
 8006838:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f7ff fad4 	bl	8005de8 <SWAPBYTE>
 8006840:	4603      	mov	r3, r0
 8006842:	461a      	mov	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	3301      	adds	r3, #1
 800684c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	3301      	adds	r3, #1
 8006852:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f7ff fac7 	bl	8005de8 <SWAPBYTE>
 800685a:	4603      	mov	r3, r0
 800685c:	461a      	mov	r2, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	3301      	adds	r3, #1
 8006866:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	3301      	adds	r3, #1
 800686c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f7ff faba 	bl	8005de8 <SWAPBYTE>
 8006874:	4603      	mov	r3, r0
 8006876:	461a      	mov	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	80da      	strh	r2, [r3, #6]
}
 800687c:	bf00      	nop
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800688e:	2180      	movs	r1, #128	; 0x80
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 fcf1 	bl	8007278 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006896:	2100      	movs	r1, #0
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 fced 	bl	8007278 <USBD_LL_StallEP>
}
 800689e:	bf00      	nop
 80068a0:	3708      	adds	r7, #8
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b086      	sub	sp, #24
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	60f8      	str	r0, [r7, #12]
 80068ae:	60b9      	str	r1, [r7, #8]
 80068b0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80068b2:	2300      	movs	r3, #0
 80068b4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d036      	beq.n	800692a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80068c0:	6938      	ldr	r0, [r7, #16]
 80068c2:	f000 f836 	bl	8006932 <USBD_GetLen>
 80068c6:	4603      	mov	r3, r0
 80068c8:	3301      	adds	r3, #1
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	005b      	lsls	r3, r3, #1
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80068d4:	7dfb      	ldrb	r3, [r7, #23]
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	4413      	add	r3, r2
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	7812      	ldrb	r2, [r2, #0]
 80068de:	701a      	strb	r2, [r3, #0]
  idx++;
 80068e0:	7dfb      	ldrb	r3, [r7, #23]
 80068e2:	3301      	adds	r3, #1
 80068e4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80068e6:	7dfb      	ldrb	r3, [r7, #23]
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	4413      	add	r3, r2
 80068ec:	2203      	movs	r2, #3
 80068ee:	701a      	strb	r2, [r3, #0]
  idx++;
 80068f0:	7dfb      	ldrb	r3, [r7, #23]
 80068f2:	3301      	adds	r3, #1
 80068f4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80068f6:	e013      	b.n	8006920 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80068f8:	7dfb      	ldrb	r3, [r7, #23]
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	4413      	add	r3, r2
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	7812      	ldrb	r2, [r2, #0]
 8006902:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	3301      	adds	r3, #1
 8006908:	613b      	str	r3, [r7, #16]
    idx++;
 800690a:	7dfb      	ldrb	r3, [r7, #23]
 800690c:	3301      	adds	r3, #1
 800690e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006910:	7dfb      	ldrb	r3, [r7, #23]
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	4413      	add	r3, r2
 8006916:	2200      	movs	r2, #0
 8006918:	701a      	strb	r2, [r3, #0]
    idx++;
 800691a:	7dfb      	ldrb	r3, [r7, #23]
 800691c:	3301      	adds	r3, #1
 800691e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1e7      	bne.n	80068f8 <USBD_GetString+0x52>
 8006928:	e000      	b.n	800692c <USBD_GetString+0x86>
    return;
 800692a:	bf00      	nop
  }
}
 800692c:	3718      	adds	r7, #24
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006932:	b480      	push	{r7}
 8006934:	b085      	sub	sp, #20
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800693a:	2300      	movs	r3, #0
 800693c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006942:	e005      	b.n	8006950 <USBD_GetLen+0x1e>
  {
    len++;
 8006944:	7bfb      	ldrb	r3, [r7, #15]
 8006946:	3301      	adds	r3, #1
 8006948:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	3301      	adds	r3, #1
 800694e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1f5      	bne.n	8006944 <USBD_GetLen+0x12>
  }

  return len;
 8006958:	7bfb      	ldrb	r3, [r7, #15]
}
 800695a:	4618      	mov	r0, r3
 800695c:	3714      	adds	r7, #20
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b084      	sub	sp, #16
 800696a:	af00      	add	r7, sp, #0
 800696c:	60f8      	str	r0, [r7, #12]
 800696e:	60b9      	str	r1, [r7, #8]
 8006970:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2202      	movs	r2, #2
 8006976:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	2100      	movs	r1, #0
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f000 fcfc 	bl	800738a <USBD_LL_Transmit>

  return USBD_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	2100      	movs	r1, #0
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f000 fceb 	bl	800738a <USBD_LL_Transmit>

  return USBD_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b084      	sub	sp, #16
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	60f8      	str	r0, [r7, #12]
 80069c6:	60b9      	str	r1, [r7, #8]
 80069c8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2203      	movs	r2, #3
 80069ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68ba      	ldr	r2, [r7, #8]
 80069e6:	2100      	movs	r1, #0
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f000 fcef 	bl	80073cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	2100      	movs	r1, #0
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 fcde 	bl	80073cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b082      	sub	sp, #8
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2204      	movs	r2, #4
 8006a26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	2100      	movs	r1, #0
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 fcaa 	bl	800738a <USBD_LL_Transmit>

  return USBD_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3708      	adds	r7, #8
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2205      	movs	r2, #5
 8006a4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a50:	2300      	movs	r3, #0
 8006a52:	2200      	movs	r2, #0
 8006a54:	2100      	movs	r1, #0
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fcb8 	bl	80073cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3708      	adds	r7, #8
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
	...

08006a68 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	4912      	ldr	r1, [pc, #72]	; (8006ab8 <MX_USB_DEVICE_Init+0x50>)
 8006a70:	4812      	ldr	r0, [pc, #72]	; (8006abc <MX_USB_DEVICE_Init+0x54>)
 8006a72:	f7fe fef4 	bl	800585e <USBD_Init>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d001      	beq.n	8006a80 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006a7c:	f7f9 fede 	bl	800083c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006a80:	490f      	ldr	r1, [pc, #60]	; (8006ac0 <MX_USB_DEVICE_Init+0x58>)
 8006a82:	480e      	ldr	r0, [pc, #56]	; (8006abc <MX_USB_DEVICE_Init+0x54>)
 8006a84:	f7fe ff21 	bl	80058ca <USBD_RegisterClass>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d001      	beq.n	8006a92 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006a8e:	f7f9 fed5 	bl	800083c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006a92:	490c      	ldr	r1, [pc, #48]	; (8006ac4 <MX_USB_DEVICE_Init+0x5c>)
 8006a94:	4809      	ldr	r0, [pc, #36]	; (8006abc <MX_USB_DEVICE_Init+0x54>)
 8006a96:	f7fe fe51 	bl	800573c <USBD_CDC_RegisterInterface>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006aa0:	f7f9 fecc 	bl	800083c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006aa4:	4805      	ldr	r0, [pc, #20]	; (8006abc <MX_USB_DEVICE_Init+0x54>)
 8006aa6:	f7fe ff31 	bl	800590c <USBD_Start>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d001      	beq.n	8006ab4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006ab0:	f7f9 fec4 	bl	800083c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006ab4:	bf00      	nop
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	20000138 	.word	0x20000138
 8006abc:	20000270 	.word	0x20000270
 8006ac0:	20000018 	.word	0x20000018
 8006ac4:	20000124 	.word	0x20000124

08006ac8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006acc:	2200      	movs	r2, #0
 8006ace:	4905      	ldr	r1, [pc, #20]	; (8006ae4 <CDC_Init_FS+0x1c>)
 8006ad0:	4805      	ldr	r0, [pc, #20]	; (8006ae8 <CDC_Init_FS+0x20>)
 8006ad2:	f7fe fe48 	bl	8005766 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006ad6:	4905      	ldr	r1, [pc, #20]	; (8006aec <CDC_Init_FS+0x24>)
 8006ad8:	4803      	ldr	r0, [pc, #12]	; (8006ae8 <CDC_Init_FS+0x20>)
 8006ada:	f7fe fe5b 	bl	8005794 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006ade:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	20000d40 	.word	0x20000d40
 8006ae8:	20000270 	.word	0x20000270
 8006aec:	20000540 	.word	0x20000540

08006af0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006af0:	b480      	push	{r7}
 8006af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006af4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	4603      	mov	r3, r0
 8006b08:	6039      	str	r1, [r7, #0]
 8006b0a:	71fb      	strb	r3, [r7, #7]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006b10:	79fb      	ldrb	r3, [r7, #7]
 8006b12:	2b23      	cmp	r3, #35	; 0x23
 8006b14:	d85c      	bhi.n	8006bd0 <CDC_Control_FS+0xd0>
 8006b16:	a201      	add	r2, pc, #4	; (adr r2, 8006b1c <CDC_Control_FS+0x1c>)
 8006b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1c:	08006bd1 	.word	0x08006bd1
 8006b20:	08006bd1 	.word	0x08006bd1
 8006b24:	08006bd1 	.word	0x08006bd1
 8006b28:	08006bd1 	.word	0x08006bd1
 8006b2c:	08006bd1 	.word	0x08006bd1
 8006b30:	08006bd1 	.word	0x08006bd1
 8006b34:	08006bd1 	.word	0x08006bd1
 8006b38:	08006bd1 	.word	0x08006bd1
 8006b3c:	08006bd1 	.word	0x08006bd1
 8006b40:	08006bd1 	.word	0x08006bd1
 8006b44:	08006bd1 	.word	0x08006bd1
 8006b48:	08006bd1 	.word	0x08006bd1
 8006b4c:	08006bd1 	.word	0x08006bd1
 8006b50:	08006bd1 	.word	0x08006bd1
 8006b54:	08006bd1 	.word	0x08006bd1
 8006b58:	08006bd1 	.word	0x08006bd1
 8006b5c:	08006bd1 	.word	0x08006bd1
 8006b60:	08006bd1 	.word	0x08006bd1
 8006b64:	08006bd1 	.word	0x08006bd1
 8006b68:	08006bd1 	.word	0x08006bd1
 8006b6c:	08006bd1 	.word	0x08006bd1
 8006b70:	08006bd1 	.word	0x08006bd1
 8006b74:	08006bd1 	.word	0x08006bd1
 8006b78:	08006bd1 	.word	0x08006bd1
 8006b7c:	08006bd1 	.word	0x08006bd1
 8006b80:	08006bd1 	.word	0x08006bd1
 8006b84:	08006bd1 	.word	0x08006bd1
 8006b88:	08006bd1 	.word	0x08006bd1
 8006b8c:	08006bd1 	.word	0x08006bd1
 8006b90:	08006bd1 	.word	0x08006bd1
 8006b94:	08006bd1 	.word	0x08006bd1
 8006b98:	08006bd1 	.word	0x08006bd1
 8006b9c:	08006bad 	.word	0x08006bad
 8006ba0:	08006bbf 	.word	0x08006bbf
 8006ba4:	08006bd1 	.word	0x08006bd1
 8006ba8:	08006bd1 	.word	0x08006bd1
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8006bac:	4b0c      	ldr	r3, [pc, #48]	; (8006be0 <CDC_Control_FS+0xe0>)
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	6810      	ldr	r0, [r2, #0]
 8006bb2:	6018      	str	r0, [r3, #0]
 8006bb4:	8891      	ldrh	r1, [r2, #4]
 8006bb6:	7992      	ldrb	r2, [r2, #6]
 8006bb8:	8099      	strh	r1, [r3, #4]
 8006bba:	719a      	strb	r2, [r3, #6]
    break;
 8006bbc:	e009      	b.n	8006bd2 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	4a07      	ldr	r2, [pc, #28]	; (8006be0 <CDC_Control_FS+0xe0>)
 8006bc2:	6810      	ldr	r0, [r2, #0]
 8006bc4:	6018      	str	r0, [r3, #0]
 8006bc6:	8891      	ldrh	r1, [r2, #4]
 8006bc8:	7992      	ldrb	r2, [r2, #6]
 8006bca:	8099      	strh	r1, [r3, #4]
 8006bcc:	719a      	strb	r2, [r3, #6]
    break;
 8006bce:	e000      	b.n	8006bd2 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006bd0:	bf00      	nop
  }

  return (USBD_OK);
 8006bd2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr
 8006be0:	2000011c 	.word	0x2000011c

08006be4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006bee:	6879      	ldr	r1, [r7, #4]
 8006bf0:	4805      	ldr	r0, [pc, #20]	; (8006c08 <CDC_Receive_FS+0x24>)
 8006bf2:	f7fe fdcf 	bl	8005794 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006bf6:	4804      	ldr	r0, [pc, #16]	; (8006c08 <CDC_Receive_FS+0x24>)
 8006bf8:	f7fe fe0a 	bl	8005810 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006bfc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	20000270 	.word	0x20000270

08006c0c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	460b      	mov	r3, r1
 8006c16:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006c1c:	4b0c      	ldr	r3, [pc, #48]	; (8006c50 <CDC_Transmit_FS+0x44>)
 8006c1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c22:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d001      	beq.n	8006c30 <CDC_Transmit_FS+0x24>
    return USBD_BUSY;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e00b      	b.n	8006c48 <CDC_Transmit_FS+0x3c>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006c30:	887b      	ldrh	r3, [r7, #2]
 8006c32:	461a      	mov	r2, r3
 8006c34:	6879      	ldr	r1, [r7, #4]
 8006c36:	4806      	ldr	r0, [pc, #24]	; (8006c50 <CDC_Transmit_FS+0x44>)
 8006c38:	f7fe fd95 	bl	8005766 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006c3c:	4804      	ldr	r0, [pc, #16]	; (8006c50 <CDC_Transmit_FS+0x44>)
 8006c3e:	f7fe fdbc 	bl	80057ba <USBD_CDC_TransmitPacket>
 8006c42:	4603      	mov	r3, r0
 8006c44:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	20000270 	.word	0x20000270

08006c54 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b087      	sub	sp, #28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006c62:	2300      	movs	r3, #0
 8006c64:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006c66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	371c      	adds	r7, #28
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
	...

08006c78 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	4603      	mov	r3, r0
 8006c80:	6039      	str	r1, [r7, #0]
 8006c82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	2212      	movs	r2, #18
 8006c88:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006c8a:	4b03      	ldr	r3, [pc, #12]	; (8006c98 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr
 8006c98:	20000154 	.word	0x20000154

08006c9c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	6039      	str	r1, [r7, #0]
 8006ca6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	2204      	movs	r2, #4
 8006cac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006cae:	4b03      	ldr	r3, [pc, #12]	; (8006cbc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr
 8006cbc:	20000168 	.word	0x20000168

08006cc0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	6039      	str	r1, [r7, #0]
 8006cca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ccc:	79fb      	ldrb	r3, [r7, #7]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d105      	bne.n	8006cde <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	4907      	ldr	r1, [pc, #28]	; (8006cf4 <USBD_FS_ProductStrDescriptor+0x34>)
 8006cd6:	4808      	ldr	r0, [pc, #32]	; (8006cf8 <USBD_FS_ProductStrDescriptor+0x38>)
 8006cd8:	f7ff fde5 	bl	80068a6 <USBD_GetString>
 8006cdc:	e004      	b.n	8006ce8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006cde:	683a      	ldr	r2, [r7, #0]
 8006ce0:	4904      	ldr	r1, [pc, #16]	; (8006cf4 <USBD_FS_ProductStrDescriptor+0x34>)
 8006ce2:	4805      	ldr	r0, [pc, #20]	; (8006cf8 <USBD_FS_ProductStrDescriptor+0x38>)
 8006ce4:	f7ff fddf 	bl	80068a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ce8:	4b02      	ldr	r3, [pc, #8]	; (8006cf4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3708      	adds	r7, #8
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	20001540 	.word	0x20001540
 8006cf8:	080076ac 	.word	0x080076ac

08006cfc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	4603      	mov	r3, r0
 8006d04:	6039      	str	r1, [r7, #0]
 8006d06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006d08:	683a      	ldr	r2, [r7, #0]
 8006d0a:	4904      	ldr	r1, [pc, #16]	; (8006d1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006d0c:	4804      	ldr	r0, [pc, #16]	; (8006d20 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006d0e:	f7ff fdca 	bl	80068a6 <USBD_GetString>
  return USBD_StrDesc;
 8006d12:	4b02      	ldr	r3, [pc, #8]	; (8006d1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3708      	adds	r7, #8
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	20001540 	.word	0x20001540
 8006d20:	080076c4 	.word	0x080076c4

08006d24 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	6039      	str	r1, [r7, #0]
 8006d2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	221a      	movs	r2, #26
 8006d34:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006d36:	f000 f843 	bl	8006dc0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006d3a:	4b02      	ldr	r3, [pc, #8]	; (8006d44 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3708      	adds	r7, #8
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	2000016c 	.word	0x2000016c

08006d48 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	4603      	mov	r3, r0
 8006d50:	6039      	str	r1, [r7, #0]
 8006d52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006d54:	79fb      	ldrb	r3, [r7, #7]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d105      	bne.n	8006d66 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006d5a:	683a      	ldr	r2, [r7, #0]
 8006d5c:	4907      	ldr	r1, [pc, #28]	; (8006d7c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006d5e:	4808      	ldr	r0, [pc, #32]	; (8006d80 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006d60:	f7ff fda1 	bl	80068a6 <USBD_GetString>
 8006d64:	e004      	b.n	8006d70 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006d66:	683a      	ldr	r2, [r7, #0]
 8006d68:	4904      	ldr	r1, [pc, #16]	; (8006d7c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006d6a:	4805      	ldr	r0, [pc, #20]	; (8006d80 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006d6c:	f7ff fd9b 	bl	80068a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d70:	4b02      	ldr	r3, [pc, #8]	; (8006d7c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3708      	adds	r7, #8
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	20001540 	.word	0x20001540
 8006d80:	080076d8 	.word	0x080076d8

08006d84 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	6039      	str	r1, [r7, #0]
 8006d8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006d90:	79fb      	ldrb	r3, [r7, #7]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d105      	bne.n	8006da2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006d96:	683a      	ldr	r2, [r7, #0]
 8006d98:	4907      	ldr	r1, [pc, #28]	; (8006db8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006d9a:	4808      	ldr	r0, [pc, #32]	; (8006dbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006d9c:	f7ff fd83 	bl	80068a6 <USBD_GetString>
 8006da0:	e004      	b.n	8006dac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006da2:	683a      	ldr	r2, [r7, #0]
 8006da4:	4904      	ldr	r1, [pc, #16]	; (8006db8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006da6:	4805      	ldr	r0, [pc, #20]	; (8006dbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006da8:	f7ff fd7d 	bl	80068a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006dac:	4b02      	ldr	r3, [pc, #8]	; (8006db8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3708      	adds	r7, #8
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	20001540 	.word	0x20001540
 8006dbc:	080076e4 	.word	0x080076e4

08006dc0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006dc6:	4b0f      	ldr	r3, [pc, #60]	; (8006e04 <Get_SerialNum+0x44>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006dcc:	4b0e      	ldr	r3, [pc, #56]	; (8006e08 <Get_SerialNum+0x48>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006dd2:	4b0e      	ldr	r3, [pc, #56]	; (8006e0c <Get_SerialNum+0x4c>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4413      	add	r3, r2
 8006dde:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d009      	beq.n	8006dfa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006de6:	2208      	movs	r2, #8
 8006de8:	4909      	ldr	r1, [pc, #36]	; (8006e10 <Get_SerialNum+0x50>)
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f000 f814 	bl	8006e18 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006df0:	2204      	movs	r2, #4
 8006df2:	4908      	ldr	r1, [pc, #32]	; (8006e14 <Get_SerialNum+0x54>)
 8006df4:	68b8      	ldr	r0, [r7, #8]
 8006df6:	f000 f80f 	bl	8006e18 <IntToUnicode>
  }
}
 8006dfa:	bf00      	nop
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	1fff7a10 	.word	0x1fff7a10
 8006e08:	1fff7a14 	.word	0x1fff7a14
 8006e0c:	1fff7a18 	.word	0x1fff7a18
 8006e10:	2000016e 	.word	0x2000016e
 8006e14:	2000017e 	.word	0x2000017e

08006e18 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b087      	sub	sp, #28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	4613      	mov	r3, r2
 8006e24:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006e26:	2300      	movs	r3, #0
 8006e28:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	75fb      	strb	r3, [r7, #23]
 8006e2e:	e027      	b.n	8006e80 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	0f1b      	lsrs	r3, r3, #28
 8006e34:	2b09      	cmp	r3, #9
 8006e36:	d80b      	bhi.n	8006e50 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	0f1b      	lsrs	r3, r3, #28
 8006e3c:	b2da      	uxtb	r2, r3
 8006e3e:	7dfb      	ldrb	r3, [r7, #23]
 8006e40:	005b      	lsls	r3, r3, #1
 8006e42:	4619      	mov	r1, r3
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	440b      	add	r3, r1
 8006e48:	3230      	adds	r2, #48	; 0x30
 8006e4a:	b2d2      	uxtb	r2, r2
 8006e4c:	701a      	strb	r2, [r3, #0]
 8006e4e:	e00a      	b.n	8006e66 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	0f1b      	lsrs	r3, r3, #28
 8006e54:	b2da      	uxtb	r2, r3
 8006e56:	7dfb      	ldrb	r3, [r7, #23]
 8006e58:	005b      	lsls	r3, r3, #1
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	440b      	add	r3, r1
 8006e60:	3237      	adds	r2, #55	; 0x37
 8006e62:	b2d2      	uxtb	r2, r2
 8006e64:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	011b      	lsls	r3, r3, #4
 8006e6a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006e6c:	7dfb      	ldrb	r3, [r7, #23]
 8006e6e:	005b      	lsls	r3, r3, #1
 8006e70:	3301      	adds	r3, #1
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	4413      	add	r3, r2
 8006e76:	2200      	movs	r2, #0
 8006e78:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006e7a:	7dfb      	ldrb	r3, [r7, #23]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	75fb      	strb	r3, [r7, #23]
 8006e80:	7dfa      	ldrb	r2, [r7, #23]
 8006e82:	79fb      	ldrb	r3, [r7, #7]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d3d3      	bcc.n	8006e30 <IntToUnicode+0x18>
  }
}
 8006e88:	bf00      	nop
 8006e8a:	371c      	adds	r7, #28
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b08a      	sub	sp, #40	; 0x28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e9c:	f107 0314 	add.w	r3, r7, #20
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	601a      	str	r2, [r3, #0]
 8006ea4:	605a      	str	r2, [r3, #4]
 8006ea6:	609a      	str	r2, [r3, #8]
 8006ea8:	60da      	str	r2, [r3, #12]
 8006eaa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006eb4:	d13a      	bne.n	8006f2c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	613b      	str	r3, [r7, #16]
 8006eba:	4b1e      	ldr	r3, [pc, #120]	; (8006f34 <HAL_PCD_MspInit+0xa0>)
 8006ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ebe:	4a1d      	ldr	r2, [pc, #116]	; (8006f34 <HAL_PCD_MspInit+0xa0>)
 8006ec0:	f043 0301 	orr.w	r3, r3, #1
 8006ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ec6:	4b1b      	ldr	r3, [pc, #108]	; (8006f34 <HAL_PCD_MspInit+0xa0>)
 8006ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eca:	f003 0301 	and.w	r3, r3, #1
 8006ece:	613b      	str	r3, [r7, #16]
 8006ed0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006ed2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ed8:	2302      	movs	r3, #2
 8006eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006edc:	2300      	movs	r3, #0
 8006ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006ee4:	230a      	movs	r3, #10
 8006ee6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ee8:	f107 0314 	add.w	r3, r7, #20
 8006eec:	4619      	mov	r1, r3
 8006eee:	4812      	ldr	r0, [pc, #72]	; (8006f38 <HAL_PCD_MspInit+0xa4>)
 8006ef0:	f7f9 ff7a 	bl	8000de8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006ef4:	4b0f      	ldr	r3, [pc, #60]	; (8006f34 <HAL_PCD_MspInit+0xa0>)
 8006ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef8:	4a0e      	ldr	r2, [pc, #56]	; (8006f34 <HAL_PCD_MspInit+0xa0>)
 8006efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006efe:	6353      	str	r3, [r2, #52]	; 0x34
 8006f00:	2300      	movs	r3, #0
 8006f02:	60fb      	str	r3, [r7, #12]
 8006f04:	4b0b      	ldr	r3, [pc, #44]	; (8006f34 <HAL_PCD_MspInit+0xa0>)
 8006f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f08:	4a0a      	ldr	r2, [pc, #40]	; (8006f34 <HAL_PCD_MspInit+0xa0>)
 8006f0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f0e:	6453      	str	r3, [r2, #68]	; 0x44
 8006f10:	4b08      	ldr	r3, [pc, #32]	; (8006f34 <HAL_PCD_MspInit+0xa0>)
 8006f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f18:	60fb      	str	r3, [r7, #12]
 8006f1a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	2100      	movs	r1, #0
 8006f20:	2043      	movs	r0, #67	; 0x43
 8006f22:	f7f9 ff2a 	bl	8000d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006f26:	2043      	movs	r0, #67	; 0x43
 8006f28:	f7f9 ff43 	bl	8000db2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006f2c:	bf00      	nop
 8006f2e:	3728      	adds	r7, #40	; 0x28
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	40023800 	.word	0x40023800
 8006f38:	40020000 	.word	0x40020000

08006f3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006f50:	4619      	mov	r1, r3
 8006f52:	4610      	mov	r0, r2
 8006f54:	f7fe fd25 	bl	80059a2 <USBD_LL_SetupStage>
}
 8006f58:	bf00      	nop
 8006f5a:	3708      	adds	r7, #8
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	460b      	mov	r3, r1
 8006f6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006f72:	78fa      	ldrb	r2, [r7, #3]
 8006f74:	6879      	ldr	r1, [r7, #4]
 8006f76:	4613      	mov	r3, r2
 8006f78:	00db      	lsls	r3, r3, #3
 8006f7a:	1a9b      	subs	r3, r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	440b      	add	r3, r1
 8006f80:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	78fb      	ldrb	r3, [r7, #3]
 8006f88:	4619      	mov	r1, r3
 8006f8a:	f7fe fd5d 	bl	8005a48 <USBD_LL_DataOutStage>
}
 8006f8e:	bf00      	nop
 8006f90:	3708      	adds	r7, #8
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b082      	sub	sp, #8
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006fa8:	78fa      	ldrb	r2, [r7, #3]
 8006faa:	6879      	ldr	r1, [r7, #4]
 8006fac:	4613      	mov	r3, r2
 8006fae:	00db      	lsls	r3, r3, #3
 8006fb0:	1a9b      	subs	r3, r3, r2
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	440b      	add	r3, r1
 8006fb6:	3348      	adds	r3, #72	; 0x48
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	78fb      	ldrb	r3, [r7, #3]
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	f7fe fda6 	bl	8005b0e <USBD_LL_DataInStage>
}
 8006fc2:	bf00      	nop
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b082      	sub	sp, #8
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7fe feaa 	bl	8005d32 <USBD_LL_SOF>
}
 8006fde:	bf00      	nop
 8006fe0:	3708      	adds	r7, #8
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b084      	sub	sp, #16
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d102      	bne.n	8007000 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	73fb      	strb	r3, [r7, #15]
 8006ffe:	e008      	b.n	8007012 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	2b02      	cmp	r3, #2
 8007006:	d102      	bne.n	800700e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007008:	2301      	movs	r3, #1
 800700a:	73fb      	strb	r3, [r7, #15]
 800700c:	e001      	b.n	8007012 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800700e:	f7f9 fc15 	bl	800083c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007018:	7bfa      	ldrb	r2, [r7, #15]
 800701a:	4611      	mov	r1, r2
 800701c:	4618      	mov	r0, r3
 800701e:	f7fe fe4d 	bl	8005cbc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007028:	4618      	mov	r0, r3
 800702a:	f7fe fe06 	bl	8005c3a <USBD_LL_Reset>
}
 800702e:	bf00      	nop
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
	...

08007038 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007046:	4618      	mov	r0, r3
 8007048:	f7fe fe48 	bl	8005cdc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	6812      	ldr	r2, [r2, #0]
 800705a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800705e:	f043 0301 	orr.w	r3, r3, #1
 8007062:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a1b      	ldr	r3, [r3, #32]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d005      	beq.n	8007078 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800706c:	4b04      	ldr	r3, [pc, #16]	; (8007080 <HAL_PCD_SuspendCallback+0x48>)
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	4a03      	ldr	r2, [pc, #12]	; (8007080 <HAL_PCD_SuspendCallback+0x48>)
 8007072:	f043 0306 	orr.w	r3, r3, #6
 8007076:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007078:	bf00      	nop
 800707a:	3708      	adds	r7, #8
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	e000ed00 	.word	0xe000ed00

08007084 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007092:	4618      	mov	r0, r3
 8007094:	f7fe fe37 	bl	8005d06 <USBD_LL_Resume>
}
 8007098:	bf00      	nop
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	460b      	mov	r3, r1
 80070aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80070b2:	78fa      	ldrb	r2, [r7, #3]
 80070b4:	4611      	mov	r1, r2
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7fe fe62 	bl	8005d80 <USBD_LL_IsoOUTIncomplete>
}
 80070bc:	bf00      	nop
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	460b      	mov	r3, r1
 80070ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80070d6:	78fa      	ldrb	r2, [r7, #3]
 80070d8:	4611      	mov	r1, r2
 80070da:	4618      	mov	r0, r3
 80070dc:	f7fe fe43 	bl	8005d66 <USBD_LL_IsoINIncomplete>
}
 80070e0:	bf00      	nop
 80070e2:	3708      	adds	r7, #8
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7fe fe4f 	bl	8005d9a <USBD_LL_DevConnected>
}
 80070fc:	bf00      	nop
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007112:	4618      	mov	r0, r3
 8007114:	f7fe fe4c 	bl	8005db0 <USBD_LL_DevDisconnected>
}
 8007118:	bf00      	nop
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d13c      	bne.n	80071aa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007130:	4a20      	ldr	r2, [pc, #128]	; (80071b4 <USBD_LL_Init+0x94>)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a1e      	ldr	r2, [pc, #120]	; (80071b4 <USBD_LL_Init+0x94>)
 800713c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007140:	4b1c      	ldr	r3, [pc, #112]	; (80071b4 <USBD_LL_Init+0x94>)
 8007142:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007146:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007148:	4b1a      	ldr	r3, [pc, #104]	; (80071b4 <USBD_LL_Init+0x94>)
 800714a:	2204      	movs	r2, #4
 800714c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800714e:	4b19      	ldr	r3, [pc, #100]	; (80071b4 <USBD_LL_Init+0x94>)
 8007150:	2202      	movs	r2, #2
 8007152:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007154:	4b17      	ldr	r3, [pc, #92]	; (80071b4 <USBD_LL_Init+0x94>)
 8007156:	2200      	movs	r2, #0
 8007158:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800715a:	4b16      	ldr	r3, [pc, #88]	; (80071b4 <USBD_LL_Init+0x94>)
 800715c:	2202      	movs	r2, #2
 800715e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007160:	4b14      	ldr	r3, [pc, #80]	; (80071b4 <USBD_LL_Init+0x94>)
 8007162:	2200      	movs	r2, #0
 8007164:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007166:	4b13      	ldr	r3, [pc, #76]	; (80071b4 <USBD_LL_Init+0x94>)
 8007168:	2200      	movs	r2, #0
 800716a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800716c:	4b11      	ldr	r3, [pc, #68]	; (80071b4 <USBD_LL_Init+0x94>)
 800716e:	2200      	movs	r2, #0
 8007170:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007172:	4b10      	ldr	r3, [pc, #64]	; (80071b4 <USBD_LL_Init+0x94>)
 8007174:	2200      	movs	r2, #0
 8007176:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007178:	4b0e      	ldr	r3, [pc, #56]	; (80071b4 <USBD_LL_Init+0x94>)
 800717a:	2200      	movs	r2, #0
 800717c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800717e:	480d      	ldr	r0, [pc, #52]	; (80071b4 <USBD_LL_Init+0x94>)
 8007180:	f7fa ff89 	bl	8002096 <HAL_PCD_Init>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d001      	beq.n	800718e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800718a:	f7f9 fb57 	bl	800083c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800718e:	2180      	movs	r1, #128	; 0x80
 8007190:	4808      	ldr	r0, [pc, #32]	; (80071b4 <USBD_LL_Init+0x94>)
 8007192:	f7fc f8e6 	bl	8003362 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007196:	2240      	movs	r2, #64	; 0x40
 8007198:	2100      	movs	r1, #0
 800719a:	4806      	ldr	r0, [pc, #24]	; (80071b4 <USBD_LL_Init+0x94>)
 800719c:	f7fc f89a 	bl	80032d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80071a0:	2280      	movs	r2, #128	; 0x80
 80071a2:	2101      	movs	r1, #1
 80071a4:	4803      	ldr	r0, [pc, #12]	; (80071b4 <USBD_LL_Init+0x94>)
 80071a6:	f7fc f895 	bl	80032d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	20001740 	.word	0x20001740

080071b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071c0:	2300      	movs	r3, #0
 80071c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071c4:	2300      	movs	r3, #0
 80071c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7fb f87e 	bl	80022d0 <HAL_PCD_Start>
 80071d4:	4603      	mov	r3, r0
 80071d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071d8:	7bfb      	ldrb	r3, [r7, #15]
 80071da:	4618      	mov	r0, r3
 80071dc:	f000 f92a 	bl	8007434 <USBD_Get_USB_Status>
 80071e0:	4603      	mov	r3, r0
 80071e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80071e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b084      	sub	sp, #16
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
 80071f6:	4608      	mov	r0, r1
 80071f8:	4611      	mov	r1, r2
 80071fa:	461a      	mov	r2, r3
 80071fc:	4603      	mov	r3, r0
 80071fe:	70fb      	strb	r3, [r7, #3]
 8007200:	460b      	mov	r3, r1
 8007202:	70bb      	strb	r3, [r7, #2]
 8007204:	4613      	mov	r3, r2
 8007206:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007208:	2300      	movs	r3, #0
 800720a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800720c:	2300      	movs	r3, #0
 800720e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007216:	78bb      	ldrb	r3, [r7, #2]
 8007218:	883a      	ldrh	r2, [r7, #0]
 800721a:	78f9      	ldrb	r1, [r7, #3]
 800721c:	f7fb fc62 	bl	8002ae4 <HAL_PCD_EP_Open>
 8007220:	4603      	mov	r3, r0
 8007222:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007224:	7bfb      	ldrb	r3, [r7, #15]
 8007226:	4618      	mov	r0, r3
 8007228:	f000 f904 	bl	8007434 <USBD_Get_USB_Status>
 800722c:	4603      	mov	r3, r0
 800722e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007230:	7bbb      	ldrb	r3, [r7, #14]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b084      	sub	sp, #16
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
 8007242:	460b      	mov	r3, r1
 8007244:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007246:	2300      	movs	r3, #0
 8007248:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800724a:	2300      	movs	r3, #0
 800724c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007254:	78fa      	ldrb	r2, [r7, #3]
 8007256:	4611      	mov	r1, r2
 8007258:	4618      	mov	r0, r3
 800725a:	f7fb fcab 	bl	8002bb4 <HAL_PCD_EP_Close>
 800725e:	4603      	mov	r3, r0
 8007260:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007262:	7bfb      	ldrb	r3, [r7, #15]
 8007264:	4618      	mov	r0, r3
 8007266:	f000 f8e5 	bl	8007434 <USBD_Get_USB_Status>
 800726a:	4603      	mov	r3, r0
 800726c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800726e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007270:	4618      	mov	r0, r3
 8007272:	3710      	adds	r7, #16
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	460b      	mov	r3, r1
 8007282:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007284:	2300      	movs	r3, #0
 8007286:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007288:	2300      	movs	r3, #0
 800728a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007292:	78fa      	ldrb	r2, [r7, #3]
 8007294:	4611      	mov	r1, r2
 8007296:	4618      	mov	r0, r3
 8007298:	f7fb fd83 	bl	8002da2 <HAL_PCD_EP_SetStall>
 800729c:	4603      	mov	r3, r0
 800729e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072a0:	7bfb      	ldrb	r3, [r7, #15]
 80072a2:	4618      	mov	r0, r3
 80072a4:	f000 f8c6 	bl	8007434 <USBD_Get_USB_Status>
 80072a8:	4603      	mov	r3, r0
 80072aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b084      	sub	sp, #16
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
 80072be:	460b      	mov	r3, r1
 80072c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072c2:	2300      	movs	r3, #0
 80072c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072c6:	2300      	movs	r3, #0
 80072c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80072d0:	78fa      	ldrb	r2, [r7, #3]
 80072d2:	4611      	mov	r1, r2
 80072d4:	4618      	mov	r0, r3
 80072d6:	f7fb fdc8 	bl	8002e6a <HAL_PCD_EP_ClrStall>
 80072da:	4603      	mov	r3, r0
 80072dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072de:	7bfb      	ldrb	r3, [r7, #15]
 80072e0:	4618      	mov	r0, r3
 80072e2:	f000 f8a7 	bl	8007434 <USBD_Get_USB_Status>
 80072e6:	4603      	mov	r3, r0
 80072e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	460b      	mov	r3, r1
 80072fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007306:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007308:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800730c:	2b00      	cmp	r3, #0
 800730e:	da0b      	bge.n	8007328 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007310:	78fb      	ldrb	r3, [r7, #3]
 8007312:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007316:	68f9      	ldr	r1, [r7, #12]
 8007318:	4613      	mov	r3, r2
 800731a:	00db      	lsls	r3, r3, #3
 800731c:	1a9b      	subs	r3, r3, r2
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	440b      	add	r3, r1
 8007322:	333e      	adds	r3, #62	; 0x3e
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	e00b      	b.n	8007340 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007328:	78fb      	ldrb	r3, [r7, #3]
 800732a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800732e:	68f9      	ldr	r1, [r7, #12]
 8007330:	4613      	mov	r3, r2
 8007332:	00db      	lsls	r3, r3, #3
 8007334:	1a9b      	subs	r3, r3, r2
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	440b      	add	r3, r1
 800733a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800733e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007340:	4618      	mov	r0, r3
 8007342:	3714      	adds	r7, #20
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	460b      	mov	r3, r1
 8007356:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007358:	2300      	movs	r3, #0
 800735a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800735c:	2300      	movs	r3, #0
 800735e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007366:	78fa      	ldrb	r2, [r7, #3]
 8007368:	4611      	mov	r1, r2
 800736a:	4618      	mov	r0, r3
 800736c:	f7fb fb95 	bl	8002a9a <HAL_PCD_SetAddress>
 8007370:	4603      	mov	r3, r0
 8007372:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007374:	7bfb      	ldrb	r3, [r7, #15]
 8007376:	4618      	mov	r0, r3
 8007378:	f000 f85c 	bl	8007434 <USBD_Get_USB_Status>
 800737c:	4603      	mov	r3, r0
 800737e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007380:	7bbb      	ldrb	r3, [r7, #14]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b086      	sub	sp, #24
 800738e:	af00      	add	r7, sp, #0
 8007390:	60f8      	str	r0, [r7, #12]
 8007392:	607a      	str	r2, [r7, #4]
 8007394:	603b      	str	r3, [r7, #0]
 8007396:	460b      	mov	r3, r1
 8007398:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800739a:	2300      	movs	r3, #0
 800739c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800739e:	2300      	movs	r3, #0
 80073a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80073a8:	7af9      	ldrb	r1, [r7, #11]
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	f7fb fcae 	bl	8002d0e <HAL_PCD_EP_Transmit>
 80073b2:	4603      	mov	r3, r0
 80073b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073b6:	7dfb      	ldrb	r3, [r7, #23]
 80073b8:	4618      	mov	r0, r3
 80073ba:	f000 f83b 	bl	8007434 <USBD_Get_USB_Status>
 80073be:	4603      	mov	r3, r0
 80073c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80073c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3718      	adds	r7, #24
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	607a      	str	r2, [r7, #4]
 80073d6:	603b      	str	r3, [r7, #0]
 80073d8:	460b      	mov	r3, r1
 80073da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073dc:	2300      	movs	r3, #0
 80073de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073e0:	2300      	movs	r3, #0
 80073e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80073ea:	7af9      	ldrb	r1, [r7, #11]
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	f7fb fc2a 	bl	8002c48 <HAL_PCD_EP_Receive>
 80073f4:	4603      	mov	r3, r0
 80073f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073f8:	7dfb      	ldrb	r3, [r7, #23]
 80073fa:	4618      	mov	r0, r3
 80073fc:	f000 f81a 	bl	8007434 <USBD_Get_USB_Status>
 8007400:	4603      	mov	r3, r0
 8007402:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007404:	7dbb      	ldrb	r3, [r7, #22]
}
 8007406:	4618      	mov	r0, r3
 8007408:	3718      	adds	r7, #24
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b082      	sub	sp, #8
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
 8007416:	460b      	mov	r3, r1
 8007418:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007420:	78fa      	ldrb	r2, [r7, #3]
 8007422:	4611      	mov	r1, r2
 8007424:	4618      	mov	r0, r3
 8007426:	f7fb fc5a 	bl	8002cde <HAL_PCD_EP_GetRxCount>
 800742a:	4603      	mov	r3, r0
}
 800742c:	4618      	mov	r0, r3
 800742e:	3708      	adds	r7, #8
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	4603      	mov	r3, r0
 800743c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800743e:	2300      	movs	r3, #0
 8007440:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007442:	79fb      	ldrb	r3, [r7, #7]
 8007444:	2b03      	cmp	r3, #3
 8007446:	d817      	bhi.n	8007478 <USBD_Get_USB_Status+0x44>
 8007448:	a201      	add	r2, pc, #4	; (adr r2, 8007450 <USBD_Get_USB_Status+0x1c>)
 800744a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800744e:	bf00      	nop
 8007450:	08007461 	.word	0x08007461
 8007454:	08007467 	.word	0x08007467
 8007458:	0800746d 	.word	0x0800746d
 800745c:	08007473 	.word	0x08007473
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007460:	2300      	movs	r3, #0
 8007462:	73fb      	strb	r3, [r7, #15]
    break;
 8007464:	e00b      	b.n	800747e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007466:	2303      	movs	r3, #3
 8007468:	73fb      	strb	r3, [r7, #15]
    break;
 800746a:	e008      	b.n	800747e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800746c:	2301      	movs	r3, #1
 800746e:	73fb      	strb	r3, [r7, #15]
    break;
 8007470:	e005      	b.n	800747e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007472:	2303      	movs	r3, #3
 8007474:	73fb      	strb	r3, [r7, #15]
    break;
 8007476:	e002      	b.n	800747e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007478:	2303      	movs	r3, #3
 800747a:	73fb      	strb	r3, [r7, #15]
    break;
 800747c:	bf00      	nop
  }
  return usb_status;
 800747e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007480:	4618      	mov	r0, r3
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <__errno>:
 800748c:	4b01      	ldr	r3, [pc, #4]	; (8007494 <__errno+0x8>)
 800748e:	6818      	ldr	r0, [r3, #0]
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	20000188 	.word	0x20000188

08007498 <__libc_init_array>:
 8007498:	b570      	push	{r4, r5, r6, lr}
 800749a:	4e0d      	ldr	r6, [pc, #52]	; (80074d0 <__libc_init_array+0x38>)
 800749c:	4c0d      	ldr	r4, [pc, #52]	; (80074d4 <__libc_init_array+0x3c>)
 800749e:	1ba4      	subs	r4, r4, r6
 80074a0:	10a4      	asrs	r4, r4, #2
 80074a2:	2500      	movs	r5, #0
 80074a4:	42a5      	cmp	r5, r4
 80074a6:	d109      	bne.n	80074bc <__libc_init_array+0x24>
 80074a8:	4e0b      	ldr	r6, [pc, #44]	; (80074d8 <__libc_init_array+0x40>)
 80074aa:	4c0c      	ldr	r4, [pc, #48]	; (80074dc <__libc_init_array+0x44>)
 80074ac:	f000 f8ea 	bl	8007684 <_init>
 80074b0:	1ba4      	subs	r4, r4, r6
 80074b2:	10a4      	asrs	r4, r4, #2
 80074b4:	2500      	movs	r5, #0
 80074b6:	42a5      	cmp	r5, r4
 80074b8:	d105      	bne.n	80074c6 <__libc_init_array+0x2e>
 80074ba:	bd70      	pop	{r4, r5, r6, pc}
 80074bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80074c0:	4798      	blx	r3
 80074c2:	3501      	adds	r5, #1
 80074c4:	e7ee      	b.n	80074a4 <__libc_init_array+0xc>
 80074c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80074ca:	4798      	blx	r3
 80074cc:	3501      	adds	r5, #1
 80074ce:	e7f2      	b.n	80074b6 <__libc_init_array+0x1e>
 80074d0:	08007714 	.word	0x08007714
 80074d4:	08007714 	.word	0x08007714
 80074d8:	08007714 	.word	0x08007714
 80074dc:	08007718 	.word	0x08007718

080074e0 <malloc>:
 80074e0:	4b02      	ldr	r3, [pc, #8]	; (80074ec <malloc+0xc>)
 80074e2:	4601      	mov	r1, r0
 80074e4:	6818      	ldr	r0, [r3, #0]
 80074e6:	f000 b861 	b.w	80075ac <_malloc_r>
 80074ea:	bf00      	nop
 80074ec:	20000188 	.word	0x20000188

080074f0 <free>:
 80074f0:	4b02      	ldr	r3, [pc, #8]	; (80074fc <free+0xc>)
 80074f2:	4601      	mov	r1, r0
 80074f4:	6818      	ldr	r0, [r3, #0]
 80074f6:	f000 b80b 	b.w	8007510 <_free_r>
 80074fa:	bf00      	nop
 80074fc:	20000188 	.word	0x20000188

08007500 <memset>:
 8007500:	4402      	add	r2, r0
 8007502:	4603      	mov	r3, r0
 8007504:	4293      	cmp	r3, r2
 8007506:	d100      	bne.n	800750a <memset+0xa>
 8007508:	4770      	bx	lr
 800750a:	f803 1b01 	strb.w	r1, [r3], #1
 800750e:	e7f9      	b.n	8007504 <memset+0x4>

08007510 <_free_r>:
 8007510:	b538      	push	{r3, r4, r5, lr}
 8007512:	4605      	mov	r5, r0
 8007514:	2900      	cmp	r1, #0
 8007516:	d045      	beq.n	80075a4 <_free_r+0x94>
 8007518:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800751c:	1f0c      	subs	r4, r1, #4
 800751e:	2b00      	cmp	r3, #0
 8007520:	bfb8      	it	lt
 8007522:	18e4      	addlt	r4, r4, r3
 8007524:	f000 f8ac 	bl	8007680 <__malloc_lock>
 8007528:	4a1f      	ldr	r2, [pc, #124]	; (80075a8 <_free_r+0x98>)
 800752a:	6813      	ldr	r3, [r2, #0]
 800752c:	4610      	mov	r0, r2
 800752e:	b933      	cbnz	r3, 800753e <_free_r+0x2e>
 8007530:	6063      	str	r3, [r4, #4]
 8007532:	6014      	str	r4, [r2, #0]
 8007534:	4628      	mov	r0, r5
 8007536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800753a:	f000 b8a2 	b.w	8007682 <__malloc_unlock>
 800753e:	42a3      	cmp	r3, r4
 8007540:	d90c      	bls.n	800755c <_free_r+0x4c>
 8007542:	6821      	ldr	r1, [r4, #0]
 8007544:	1862      	adds	r2, r4, r1
 8007546:	4293      	cmp	r3, r2
 8007548:	bf04      	itt	eq
 800754a:	681a      	ldreq	r2, [r3, #0]
 800754c:	685b      	ldreq	r3, [r3, #4]
 800754e:	6063      	str	r3, [r4, #4]
 8007550:	bf04      	itt	eq
 8007552:	1852      	addeq	r2, r2, r1
 8007554:	6022      	streq	r2, [r4, #0]
 8007556:	6004      	str	r4, [r0, #0]
 8007558:	e7ec      	b.n	8007534 <_free_r+0x24>
 800755a:	4613      	mov	r3, r2
 800755c:	685a      	ldr	r2, [r3, #4]
 800755e:	b10a      	cbz	r2, 8007564 <_free_r+0x54>
 8007560:	42a2      	cmp	r2, r4
 8007562:	d9fa      	bls.n	800755a <_free_r+0x4a>
 8007564:	6819      	ldr	r1, [r3, #0]
 8007566:	1858      	adds	r0, r3, r1
 8007568:	42a0      	cmp	r0, r4
 800756a:	d10b      	bne.n	8007584 <_free_r+0x74>
 800756c:	6820      	ldr	r0, [r4, #0]
 800756e:	4401      	add	r1, r0
 8007570:	1858      	adds	r0, r3, r1
 8007572:	4282      	cmp	r2, r0
 8007574:	6019      	str	r1, [r3, #0]
 8007576:	d1dd      	bne.n	8007534 <_free_r+0x24>
 8007578:	6810      	ldr	r0, [r2, #0]
 800757a:	6852      	ldr	r2, [r2, #4]
 800757c:	605a      	str	r2, [r3, #4]
 800757e:	4401      	add	r1, r0
 8007580:	6019      	str	r1, [r3, #0]
 8007582:	e7d7      	b.n	8007534 <_free_r+0x24>
 8007584:	d902      	bls.n	800758c <_free_r+0x7c>
 8007586:	230c      	movs	r3, #12
 8007588:	602b      	str	r3, [r5, #0]
 800758a:	e7d3      	b.n	8007534 <_free_r+0x24>
 800758c:	6820      	ldr	r0, [r4, #0]
 800758e:	1821      	adds	r1, r4, r0
 8007590:	428a      	cmp	r2, r1
 8007592:	bf04      	itt	eq
 8007594:	6811      	ldreq	r1, [r2, #0]
 8007596:	6852      	ldreq	r2, [r2, #4]
 8007598:	6062      	str	r2, [r4, #4]
 800759a:	bf04      	itt	eq
 800759c:	1809      	addeq	r1, r1, r0
 800759e:	6021      	streq	r1, [r4, #0]
 80075a0:	605c      	str	r4, [r3, #4]
 80075a2:	e7c7      	b.n	8007534 <_free_r+0x24>
 80075a4:	bd38      	pop	{r3, r4, r5, pc}
 80075a6:	bf00      	nop
 80075a8:	20000210 	.word	0x20000210

080075ac <_malloc_r>:
 80075ac:	b570      	push	{r4, r5, r6, lr}
 80075ae:	1ccd      	adds	r5, r1, #3
 80075b0:	f025 0503 	bic.w	r5, r5, #3
 80075b4:	3508      	adds	r5, #8
 80075b6:	2d0c      	cmp	r5, #12
 80075b8:	bf38      	it	cc
 80075ba:	250c      	movcc	r5, #12
 80075bc:	2d00      	cmp	r5, #0
 80075be:	4606      	mov	r6, r0
 80075c0:	db01      	blt.n	80075c6 <_malloc_r+0x1a>
 80075c2:	42a9      	cmp	r1, r5
 80075c4:	d903      	bls.n	80075ce <_malloc_r+0x22>
 80075c6:	230c      	movs	r3, #12
 80075c8:	6033      	str	r3, [r6, #0]
 80075ca:	2000      	movs	r0, #0
 80075cc:	bd70      	pop	{r4, r5, r6, pc}
 80075ce:	f000 f857 	bl	8007680 <__malloc_lock>
 80075d2:	4a21      	ldr	r2, [pc, #132]	; (8007658 <_malloc_r+0xac>)
 80075d4:	6814      	ldr	r4, [r2, #0]
 80075d6:	4621      	mov	r1, r4
 80075d8:	b991      	cbnz	r1, 8007600 <_malloc_r+0x54>
 80075da:	4c20      	ldr	r4, [pc, #128]	; (800765c <_malloc_r+0xb0>)
 80075dc:	6823      	ldr	r3, [r4, #0]
 80075de:	b91b      	cbnz	r3, 80075e8 <_malloc_r+0x3c>
 80075e0:	4630      	mov	r0, r6
 80075e2:	f000 f83d 	bl	8007660 <_sbrk_r>
 80075e6:	6020      	str	r0, [r4, #0]
 80075e8:	4629      	mov	r1, r5
 80075ea:	4630      	mov	r0, r6
 80075ec:	f000 f838 	bl	8007660 <_sbrk_r>
 80075f0:	1c43      	adds	r3, r0, #1
 80075f2:	d124      	bne.n	800763e <_malloc_r+0x92>
 80075f4:	230c      	movs	r3, #12
 80075f6:	6033      	str	r3, [r6, #0]
 80075f8:	4630      	mov	r0, r6
 80075fa:	f000 f842 	bl	8007682 <__malloc_unlock>
 80075fe:	e7e4      	b.n	80075ca <_malloc_r+0x1e>
 8007600:	680b      	ldr	r3, [r1, #0]
 8007602:	1b5b      	subs	r3, r3, r5
 8007604:	d418      	bmi.n	8007638 <_malloc_r+0x8c>
 8007606:	2b0b      	cmp	r3, #11
 8007608:	d90f      	bls.n	800762a <_malloc_r+0x7e>
 800760a:	600b      	str	r3, [r1, #0]
 800760c:	50cd      	str	r5, [r1, r3]
 800760e:	18cc      	adds	r4, r1, r3
 8007610:	4630      	mov	r0, r6
 8007612:	f000 f836 	bl	8007682 <__malloc_unlock>
 8007616:	f104 000b 	add.w	r0, r4, #11
 800761a:	1d23      	adds	r3, r4, #4
 800761c:	f020 0007 	bic.w	r0, r0, #7
 8007620:	1ac3      	subs	r3, r0, r3
 8007622:	d0d3      	beq.n	80075cc <_malloc_r+0x20>
 8007624:	425a      	negs	r2, r3
 8007626:	50e2      	str	r2, [r4, r3]
 8007628:	e7d0      	b.n	80075cc <_malloc_r+0x20>
 800762a:	428c      	cmp	r4, r1
 800762c:	684b      	ldr	r3, [r1, #4]
 800762e:	bf16      	itet	ne
 8007630:	6063      	strne	r3, [r4, #4]
 8007632:	6013      	streq	r3, [r2, #0]
 8007634:	460c      	movne	r4, r1
 8007636:	e7eb      	b.n	8007610 <_malloc_r+0x64>
 8007638:	460c      	mov	r4, r1
 800763a:	6849      	ldr	r1, [r1, #4]
 800763c:	e7cc      	b.n	80075d8 <_malloc_r+0x2c>
 800763e:	1cc4      	adds	r4, r0, #3
 8007640:	f024 0403 	bic.w	r4, r4, #3
 8007644:	42a0      	cmp	r0, r4
 8007646:	d005      	beq.n	8007654 <_malloc_r+0xa8>
 8007648:	1a21      	subs	r1, r4, r0
 800764a:	4630      	mov	r0, r6
 800764c:	f000 f808 	bl	8007660 <_sbrk_r>
 8007650:	3001      	adds	r0, #1
 8007652:	d0cf      	beq.n	80075f4 <_malloc_r+0x48>
 8007654:	6025      	str	r5, [r4, #0]
 8007656:	e7db      	b.n	8007610 <_malloc_r+0x64>
 8007658:	20000210 	.word	0x20000210
 800765c:	20000214 	.word	0x20000214

08007660 <_sbrk_r>:
 8007660:	b538      	push	{r3, r4, r5, lr}
 8007662:	4c06      	ldr	r4, [pc, #24]	; (800767c <_sbrk_r+0x1c>)
 8007664:	2300      	movs	r3, #0
 8007666:	4605      	mov	r5, r0
 8007668:	4608      	mov	r0, r1
 800766a:	6023      	str	r3, [r4, #0]
 800766c:	f7f9 f9a0 	bl	80009b0 <_sbrk>
 8007670:	1c43      	adds	r3, r0, #1
 8007672:	d102      	bne.n	800767a <_sbrk_r+0x1a>
 8007674:	6823      	ldr	r3, [r4, #0]
 8007676:	b103      	cbz	r3, 800767a <_sbrk_r+0x1a>
 8007678:	602b      	str	r3, [r5, #0]
 800767a:	bd38      	pop	{r3, r4, r5, pc}
 800767c:	20001b48 	.word	0x20001b48

08007680 <__malloc_lock>:
 8007680:	4770      	bx	lr

08007682 <__malloc_unlock>:
 8007682:	4770      	bx	lr

08007684 <_init>:
 8007684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007686:	bf00      	nop
 8007688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800768a:	bc08      	pop	{r3}
 800768c:	469e      	mov	lr, r3
 800768e:	4770      	bx	lr

08007690 <_fini>:
 8007690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007692:	bf00      	nop
 8007694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007696:	bc08      	pop	{r3}
 8007698:	469e      	mov	lr, r3
 800769a:	4770      	bx	lr
